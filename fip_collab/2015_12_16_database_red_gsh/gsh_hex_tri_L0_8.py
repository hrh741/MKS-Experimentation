import numpy as np


def gsh_basis_info():

    indxvec = np.array([[0, 0, 1],
                        [2, -2, 1],
                        [2, -1, 1],
                        [2, 0, 1],
                        [2, 1, 1],
                        [2, 2, 1],
                        [4, -4, 1],
                        [4, -3, 1],
                        [4, -2, 1],
                        [4, -1, 1],
                        [4, 0, 1],
                        [4, 1, 1],
                        [4, 2, 1],
                        [4, 3, 1],
                        [4, 4, 1],
                        [6, -6, 1],
                        [6, -6, 2],
                        [6, -5, 1],
                        [6, -5, 2],
                        [6, -4, 1],
                        [6, -4, 2],
                        [6, -3, 1],
                        [6, -3, 2],
                        [6, -2, 1],
                        [6, -2, 2],
                        [6, -1, 1],
                        [6, -1, 2],
                        [6, 0, 1],
                        [6, 0, 2],
                        [6, 1, 1],
                        [6, 1, 2],
                        [6, 2, 1],
                        [6, 2, 2],
                        [6, 3, 1],
                        [6, 3, 2],
                        [6, 4, 1],
                        [6, 4, 2],
                        [6, 5, 1],
                        [6, 5, 2],
                        [6, 6, 1],
                        [6, 6, 2],
                        [7, -7, 1],
                        [7, -6, 1],
                        [7, -5, 1],
                        [7, -4, 1],
                        [7, -3, 1],
                        [7, -2, 1],
                        [7, -1, 1],
                        [7, 0, 1],
                        [7, 1, 1],
                        [7, 2, 1],
                        [7, 3, 1],
                        [7, 4, 1],
                        [7, 5, 1],
                        [7, 6, 1],
                        [7, 7, 1],
                        [8, -8, 1],
                        [8, -8, 2],
                        [8, -7, 1],
                        [8, -7, 2],
                        [8, -6, 1],
                        [8, -6, 2],
                        [8, -5, 1],
                        [8, -5, 2],
                        [8, -4, 1],
                        [8, -4, 2],
                        [8, -3, 1],
                        [8, -3, 2],
                        [8, -2, 1],
                        [8, -2, 2],
                        [8, -1, 1],
                        [8, -1, 2],
                        [8, 0, 1],
                        [8, 0, 2],
                        [8, 1, 1],
                        [8, 1, 2],
                        [8, 2, 1],
                        [8, 2, 2],
                        [8, 3, 1],
                        [8, 3, 2],
                        [8, 4, 1],
                        [8, 4, 2],
                        [8, 5, 1],
                        [8, 5, 2],
                        [8, 6, 1],
                        [8, 6, 2],
                        [8, 7, 1],
                        [8, 7, 2],
                        [8, 8, 1],
                        [8, 8, 2]])

    return indxvec


def gsh_eval(X, Bvec):

    phi1 = X[..., 0]
    phi = X[..., 1]
    phi2 = X[..., 2]

    zvec = np.abs(phi) < 1e-8
    zvec = zvec.astype(int)
    randvec = np.round(np.random.rand(zvec.size)).reshape(zvec.shape)
    randvecopp = np.ones(zvec.shape) - randvec
    phi += (1e-7)*zvec*(randvec - randvecopp)

    final_shape = np.hstack([phi1.shape, len(Bvec)])
    tfunc = np.zeros(final_shape, dtype='complex128')

    c = 0
    for Bindx in Bvec:

        if Bindx == 0:
            tfunc[..., c] = 1

        if Bindx == 1:
            t53 = np.sin(phi)
            tfunc[..., c] = -(0.5e1 / 0.4e1) * np.exp((-2*1j) * phi1) * np.sqrt(0.6e1) * t53 ** 2

        if Bindx == 2:
            t54 = np.cos(phi)
            tfunc[..., c] = (-0.5e1 / 0.2e1*1j) * np.exp((-1*1j) * phi1) * np.sqrt(0.6e1) * np.sqrt((1 + t54)) * t54 * np.sqrt((1 - t54))

        if Bindx == 3:
            t55 = np.cos(phi)
            tfunc[..., c] = 0.15e2 / 0.2e1 * t55 ** 2 - 0.5e1 / 0.2e1

        if Bindx == 4:
            t56 = np.cos(phi)
            tfunc[..., c] = (-0.5e1 / 0.2e1*1j) * np.exp((1j) * phi1) * np.sqrt(0.6e1) * np.sqrt((1 - t56)) * np.sqrt((1 + t56)) * t56

        if Bindx == 5:
            t57 = np.sin(phi)
            tfunc[..., c] = -(0.5e1 / 0.4e1) * np.exp((2*1j) * phi1) * np.sqrt(0.6e1) * t57 ** 2

        if Bindx == 6:
            t60 = np.sin(phi)
            t58 = t60 ** 2
            tfunc[..., c] = (0.9e1 / 0.16e2) * np.exp((-4*1j) * phi1) * np.sqrt(0.70e2) * t58 ** 2

        if Bindx == 7:
            t61 = np.cos(phi)
            tfunc[..., c] = (0.9e1 / 0.4e1*1j) * t61 * (1 + (-2 + t61) * t61) * ((1 + t61) ** (0.3e1 / 0.2e1)) * np.sqrt(0.35e2) * np.exp((-3*1j) * phi1) * ((1 - t61) ** (-0.1e1 / 0.2e1))

        if Bindx == 8:
            t63 = np.cos(phi)
            t62 = np.sin(phi)
            tfunc[..., c] = -(0.9e1 / 0.8e1) * np.exp((-2*1j) * phi1) * np.sqrt(0.10e2) * t62 ** 2 * (7 * t63 ** 2 - 1)

        if Bindx == 9:
            t64 = np.cos(phi)
            tfunc[..., c] = (-0.9e1 / 0.4e1*1j) * np.exp((-1*1j) * phi1) * np.sqrt(0.5e1) * t64 * np.sqrt((1 + t64)) * np.sqrt((1 - t64)) * (7 * t64 ** 2 - 3)

        if Bindx == 10:
            t69 = np.cos(phi)
            t70 = t69 ** 2
            tfunc[..., c] = 0.27e2 / 0.8e1 + (-0.135e3 / 0.4e1 + 0.315e3 / 0.8e1 * t70) * t70

        if Bindx == 11:
            t72 = np.cos(phi)
            tfunc[..., c] = (-0.9e1 / 0.4e1*1j) * np.exp((1j) * phi1) * np.sqrt(0.5e1) * np.sqrt((1 - t72)) * np.sqrt((1 + t72)) * t72 * (7 * t72 ** 2 - 3)

        if Bindx == 12:
            t74 = np.cos(phi)
            t73 = np.sin(phi)
            tfunc[..., c] = -(0.9e1 / 0.8e1) * np.exp((2*1j) * phi1) * np.sqrt(0.10e2) * t73 ** 2 * (7 * t74 ** 2 - 1)

        if Bindx == 13:
            t75 = np.cos(phi)
            tfunc[..., c] = (0.9e1 / 0.4e1*1j) * np.exp((3*1j) * phi1) * np.sqrt(0.35e2) * ((1 - t75) ** (0.3e1 / 0.2e1)) * ((1 + t75) ** (0.3e1 / 0.2e1)) * t75

        if Bindx == 14:
            t78 = np.sin(phi)
            t76 = t78 ** 2
            tfunc[..., c] = (0.9e1 / 0.16e2) * np.exp((4*1j) * phi1) * np.sqrt(0.70e2) * t76 ** 2

        if Bindx == 15:
            t82 = np.sin(phi)
            t79 = t82 ** 2
            t80 = t82 * t79
            tfunc[..., c] = -(0.13e2 / 0.32e2) * np.exp((-6*1j) * phi1) * np.sqrt(0.231e3) * t80 ** 2

        if Bindx == 16:
            t90 = np.cos(phi)
            t97 = -6 * t90
            t89 = t90 ** 2
            t91 = t90 * t89
            t92 = t89 ** 2
            t96 = t92 * t97 - 20 * t91 + t97
            t95 = t91 ** 2 + 15 * t89 + 15 * t92 + 1
            tfunc[..., c] = (0.13e2 / 0.128e3) * np.sqrt(0.2e1) * ((t95 + t96) * np.exp((-6*1j) * (phi1 - phi2)) + (t95 - t96) * np.exp((-6*1j) * (phi1 + phi2)))

        if Bindx == 17:
            t98 = np.cos(phi)
            t99 = t98 ** 2
            tfunc[..., c] = (0.39e2 / 0.16e2*1j) * t98 * (-3 * t99 - 1 + (t99 + 3) * t98) * ((1 + t98) ** (0.5e1 / 0.2e1)) * np.sqrt(0.77e2) * np.exp((-5*1j) * phi1) * ((1 - t98) ** (-0.1e1 / 0.2e1))

        if Bindx == 18:
            t107 = np.cos(phi)
            t106 = t107 ** 2
            t110 = t106 ** 2
            t113 = -1 - 10 * t106 - 5 * t110
            t112 = (10 * t106 + t110 + 5) * t107
            t108 = 5 * phi1
            tfunc[..., c] = (-0.13e2 / 0.64e2*1j) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt((1 - t107)) * np.sqrt((1 + t107)) * ((t112 + t113) * np.exp((-1*1j) * (t108 - 6 * phi2)) + (t112 - t113) * np.exp((-1*1j) * (t108 + 6 * phi2)))

        if Bindx == 19:
            t117 = np.sin(phi)
            t115 = t117 ** 2
            t114 = np.cos(phi)
            tfunc[..., c] = (0.39e2 / 0.32e2) * np.exp((-4*1j) * phi1) * np.sqrt(0.14e2) * t115 ** 2 * (11 * t114 ** 2 - 1)

        if Bindx == 20:
            t124 = np.cos(phi)
            t123 = t124 ** 2
            t126 = t123 ** 2
            t127 = t124 * t126
            t130 = 4 * t124 - 4 * t127
            t129 = t124 * t127 - 5 * t123 + 5 * t126 - 1
            t125 = 2 * phi1
            tfunc[..., c] = (0.13e2 / 0.64e2) * ((t129 + t130) * np.exp((-2*1j) * (t125 - 3 * phi2)) + (t129 - t130) * np.exp((-2*1j) * (t125 + 3 * phi2))) * np.sqrt(0.33e2)

        if Bindx == 21:
            t131 = np.cos(phi)
            tfunc[..., c] = (0.13e2 / 0.16e2*1j) * (11 * t131 ** 2 - 3) * t131 * ((1 + t131) ** (0.3e1 / 0.2e1)) * np.sqrt(0.105e3) * np.exp((-3*1j) * phi1) * ((1 - t131) ** (0.3e1 / 0.2e1))

        if Bindx == 22:
            t138 = np.cos(phi)
            t137 = t138 ** 2
            t144 = 2 * t137
            t140 = t137 ** 2
            t143 = 1 + t144 - 3 * t140
            t142 = (t140 + t144 - 3) * t138
            tfunc[..., c] = (-0.13e2 / 0.64e2*1j) * np.sqrt(0.55e2) * np.sqrt(0.2e1) * np.sqrt((1 - t138)) * np.sqrt((1 + t138)) * ((t142 + t143) * np.exp((-3*1j) * (phi1 - 2 * phi2)) + (t142 - t143) * np.exp((-3*1j) * (phi1 + 2 * phi2)))

        if Bindx == 23:
            t146 = np.cos(phi)
            t147 = t146 ** 2
            t145 = np.sin(phi)
            tfunc[..., c] = -(0.13e2 / 0.32e2) * np.exp((-2*1j) * phi1) * np.sqrt(0.105e3) * t145 ** 2 * (1 + (-18 + 33 * t147) * t147)

        if Bindx == 24:
            t156 = np.cos(phi)
            t155 = t156 ** 2
            t157 = t156 * t155
            t158 = t155 ** 2
            t162 = -2 * t156 * t158 - 2 * t156 + 4 * t157
            t161 = t157 ** 2 - t155 - t158 + 1
            tfunc[..., c] = (0.39e2 / 0.128e3) * np.sqrt(0.55e2) * np.sqrt(0.2e1) * ((t161 + t162) * np.exp((-2*1j) * (phi1 - 3 * phi2)) + (t161 - t162) * np.exp((-2*1j) * (phi1 + 3 * phi2)))

        if Bindx == 25:
            t163 = np.cos(phi)
            t164 = t163 ** 2
            tfunc[..., c] = (-0.13e2 / 0.16e2*1j) * np.exp((-1*1j) * phi1) * np.sqrt(0.42e2) * np.sqrt((1 + t163)) * t163 * np.sqrt((1 - t163)) * (5 + (-30 + 33 * t164) * t164)

        if Bindx == 26:
            t176 = np.cos(phi)
            t175 = t176 ** 2
            t182 = 1 + (-2 + t175) * t175
            t180 = t182 * t176
            tfunc[..., c] = (-0.39e2 / 0.32e2*1j) * np.sqrt(0.11e2) * np.sqrt((1 - t176)) * np.sqrt((1 + t176)) * ((t180 - t182) * np.exp((-1*1j) * (phi1 - 6 * phi2)) + (t180 + t182) * np.exp((-1*1j) * (phi1 + 6 * phi2)))

        if Bindx == 27:
            t183 = np.cos(phi)
            t184 = t183 ** 2
            t185 = t184 ** 2
            tfunc[..., c] = -0.4095e4 / 0.16e2 * t185 - 0.65e2 / 0.16e2 + (0.3003e4 / 0.16e2 * t185 + 0.1365e4 / 0.16e2) * t184

        if Bindx == 28:
            t187 = np.cos(phi)
            t188 = t187 ** 2
            t189 = t188 ** 2
            tfunc[..., c] = 0.13e2 / 0.32e2 * np.sqrt(0.231e3) * np.sqrt(0.2e1) * np.cos((6 * phi2)) * (-3 * t189 - 1 + (t189 + 3) * t188)

        if Bindx == 29:
            t191 = np.cos(phi)
            t192 = t191 ** 2
            tfunc[..., c] = (-0.13e2 / 0.16e2*1j) * np.exp((1j) * phi1) * np.sqrt(0.42e2) * np.sqrt((1 - t191)) * np.sqrt((1 + t191)) * t191 * (5 + (-30 + 33 * t192) * t192)

        if Bindx == 30:
            t200 = np.cos(phi)
            t199 = t200 ** 2
            t206 = 1 + (-2 + t199) * t199
            t204 = t206 * t200
            tfunc[..., c] = (-0.39e2 / 0.32e2*1j) * np.sqrt(0.11e2) * np.sqrt((1 - t200)) * np.sqrt((1 + t200)) * ((t204 - t206) * np.exp((1j) * (phi1 - 6 * phi2)) + (t204 + t206) * np.exp((1j) * (phi1 + 6 * phi2)))

        if Bindx == 31:
            t208 = np.cos(phi)
            t209 = t208 ** 2
            t207 = np.sin(phi)
            tfunc[..., c] = -(0.13e2 / 0.32e2) * np.exp((2*1j) * phi1) * np.sqrt(0.105e3) * t207 ** 2 * (1 + (-18 + 33 * t209) * t209)

        if Bindx == 32:
            t218 = np.cos(phi)
            t217 = t218 ** 2
            t219 = t218 * t217
            t220 = t217 ** 2
            t224 = -2 * t218 * t220 - 2 * t218 + 4 * t219
            t223 = t219 ** 2 - t217 - t220 + 1
            tfunc[..., c] = (0.39e2 / 0.128e3) * np.sqrt(0.55e2) * np.sqrt(0.2e1) * ((t223 + t224) * np.exp((2*1j) * (phi1 - 3 * phi2)) + (t223 - t224) * np.exp((2*1j) * (phi1 + 3 * phi2)))

        if Bindx == 33:
            t225 = np.cos(phi)
            tfunc[..., c] = (0.13e2 / 0.16e2*1j) * np.exp((3*1j) * phi1) * np.sqrt(0.105e3) * ((1 - t225) ** (0.3e1 / 0.2e1)) * ((1 + t225) ** (0.3e1 / 0.2e1)) * t225 * (11 * t225 ** 2 - 3)

        if Bindx == 34:
            t232 = np.cos(phi)
            t231 = t232 ** 2
            t238 = 2 * t231
            t234 = t231 ** 2
            t237 = 1 + t238 - 3 * t234
            t236 = (t234 + t238 - 3) * t232
            tfunc[..., c] = (-0.13e2 / 0.64e2*1j) * np.sqrt(0.55e2) * np.sqrt(0.2e1) * np.sqrt((1 - t232)) * np.sqrt((1 + t232)) * ((t236 + t237) * np.exp((3*1j) * (phi1 - 2 * phi2)) + (t236 - t237) * np.exp((3*1j) * (phi1 + 2 * phi2)))

        if Bindx == 35:
            t242 = np.sin(phi)
            t240 = t242 ** 2
            t239 = np.cos(phi)
            tfunc[..., c] = (0.39e2 / 0.32e2) * np.exp((4*1j) * phi1) * np.sqrt(0.14e2) * t240 ** 2 * (11 * t239 ** 2 - 1)

        if Bindx == 36:
            t249 = np.cos(phi)
            t248 = t249 ** 2
            t251 = t248 ** 2
            t252 = t249 * t251
            t255 = 4 * t249 - 4 * t252
            t254 = t249 * t252 - 5 * t248 + 5 * t251 - 1
            t250 = 2 * phi1
            tfunc[..., c] = (0.13e2 / 0.64e2) * ((t254 + t255) * np.exp((2*1j) * (t250 - 3 * phi2)) + (t254 - t255) * np.exp((2*1j) * (t250 + 3 * phi2))) * np.sqrt(0.33e2)

        if Bindx == 37:
            t256 = np.cos(phi)
            tfunc[..., c] = (-0.39e2 / 0.16e2*1j) * np.exp((5*1j) * phi1) * np.sqrt(0.77e2) * ((1 - t256) ** (0.5e1 / 0.2e1)) * ((1 + t256) ** (0.5e1 / 0.2e1)) * t256

        if Bindx == 38:
            t263 = np.cos(phi)
            t262 = t263 ** 2
            t266 = t262 ** 2
            t269 = -1 - 10 * t262 - 5 * t266
            t268 = (10 * t262 + t266 + 5) * t263
            t264 = 5 * phi1
            tfunc[..., c] = (-0.13e2 / 0.64e2*1j) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt((1 - t263)) * np.sqrt((1 + t263)) * ((t268 + t269) * np.exp((1j) * (t264 - 6 * phi2)) + (t268 - t269) * np.exp((1j) * (t264 + 6 * phi2)))

        if Bindx == 39:
            t273 = np.sin(phi)
            t270 = t273 ** 2
            t271 = t273 * t270
            tfunc[..., c] = -(0.13e2 / 0.32e2) * np.exp((6*1j) * phi1) * np.sqrt(0.231e3) * t271 ** 2

        if Bindx == 40:
            t281 = np.cos(phi)
            t288 = -6 * t281
            t280 = t281 ** 2
            t282 = t281 * t280
            t283 = t280 ** 2
            t287 = t283 * t288 - 20 * t282 + t288
            t286 = t282 ** 2 + 15 * t280 + 15 * t283 + 1
            tfunc[..., c] = (0.13e2 / 0.128e3) * np.sqrt(0.2e1) * ((t286 + t287) * np.exp((6*1j) * (phi1 - phi2)) + (t286 - t287) * np.exp((6*1j) * (phi1 + phi2)))

        if Bindx == 41:
            t297 = np.cos(phi)
            t296 = t297 ** 2
            t299 = t297 * t296
            t302 = t299 ** 2
            t304 = -t297 * t302 + 1
            t300 = t296 ** 2
            t298 = 7 * phi1
            t293 = t297 * t300
            tfunc[..., c] = (-0.15e2 / 0.128e3*1j) * np.sqrt(0.7e1) * np.sqrt((1 + t297)) * ((7 * t302 - 21 * t293 + 35 * t300 - 35 * t299 + 21 * t296 - 7 * t297 + t304) * np.exp((-1*1j) * (t298 - 6 * phi2)) + (5 * t302 + 9 * t293 + 5 * t300 - 5 * t299 - 9 * t296 - 5 * t297 - t304) * np.exp((-1*1j) * (t298 + 6 * phi2))) * ((1 - t297) ** (-0.1e1 / 0.2e1))

        if Bindx == 42:
            t313 = np.cos(phi)
            t312 = t313 ** 2
            t315 = t312 ** 2
            t314 = t313 * t312
            t317 = t314 ** 2
            t320 = -6 - 48 * t312 + 50 * t315 + 36 * t317
            t319 = 15 * t314 + (-69 * t315 - 7 * t317 + 29) * t313
            tfunc[..., c] = -(0.15e2 / 0.128e3) * np.sqrt(0.2e1) * ((t319 + t320) * np.exp((-6*1j) * (phi1 - phi2)) + (-t319 + t320) * np.exp((-6*1j) * (phi1 + phi2)))

        if Bindx == 43:
            t330 = np.cos(phi)
            t329 = t330 ** 2
            t332 = t330 * t329
            t333 = t329 ** 2
            t335 = t332 ** 2
            t339 = -38 * t332 + (-10 * t333 + 30 * t335 + 18) * t330
            t338 = -10 * t329 - 38 * t335 - 5 + (60 - 7 * t333) * t333
            t331 = 5 * phi1
            tfunc[..., c] = (-0.15e2 / 0.128e3*1j) * np.sqrt(0.13e2) * ((t338 + t339) * np.exp((-1*1j) * (t331 - 6 * phi2)) + (-t338 + t339) * np.exp((-1*1j) * (t331 + 6 * phi2))) * ((1 + t330) ** (-0.1e1 / 0.2e1)) * ((1 - t330) ** (-0.1e1 / 0.2e1))

        if Bindx == 44:
            t348 = np.cos(phi)
            t347 = t348 ** 2
            t351 = t347 ** 2
            t350 = t348 * t347
            t353 = t350 ** 2
            t356 = -4 + 8 * t347 + 20 * t351 - 24 * t353
            t355 = 35 * t350 + (-19 * t351 - 7 * t353 - 9) * t348
            t349 = 2 * phi1
            tfunc[..., c] = (0.15e2 / 0.64e2) * ((-t355 + t356) * np.exp((-2*1j) * (t349 - 3 * phi2)) + (t355 + t356) * np.exp((-2*1j) * (t349 + 3 * phi2))) * np.sqrt(0.13e2)

        if Bindx == 45:
            t366 = np.cos(phi)
            t365 = t366 ** 2
            t367 = t366 * t365
            t368 = t365 ** 2
            t370 = t367 ** 2
            t374 = 22 * t367 + (-38 * t368 + 18 * t370 - 2) * t366
            t373 = -18 * t365 + 2 * t370 + 3 + (20 - 7 * t368) * t368
            tfunc[..., c] = (-0.15e2 / 0.128e3*1j) * np.sqrt(0.143e3) * ((t373 + t374) * np.exp((-3*1j) * (phi1 - 2 * phi2)) + (-t373 + t374) * np.exp((-3*1j) * (phi1 + 2 * phi2))) * ((1 + t366) ** (-0.1e1 / 0.2e1)) * ((1 - t366) ** (-0.1e1 / 0.2e1))

        if Bindx == 46:
            t383 = np.cos(phi)
            t382 = t383 ** 2
            t385 = t382 ** 2
            t384 = t383 * t382
            t387 = t384 ** 2
            t390 = 2 - 16 * t382 + 26 * t385 - 12 * t387
            t389 = -t384 + (11 * t385 - 7 * t387 - 3) * t383
            tfunc[..., c] = (0.15e2 / 0.128e3) * np.sqrt(0.143e3) * np.sqrt(0.2e1) * ((-t389 + t390) * np.exp((-2*1j) * (phi1 - 3 * phi2)) + (t389 + t390) * np.exp((-2*1j) * (phi1 + 3 * phi2)))

        if Bindx == 47:
            t400 = np.cos(phi)
            t399 = t400 ** 2
            t401 = t400 * t399
            t402 = t399 ** 2
            t404 = t401 ** 2
            t408 = 18 * t401 + 6 * (-3 * t402 + t404 - 1) * t400
            t407 = 10 * t399 + 22 * t404 - 1 + (-24 - 7 * t402) * t402
            tfunc[..., c] = (-0.15e2 / 0.128e3*1j) * np.sqrt(0.429e3) * ((t407 + t408) * np.exp((-1*1j) * (phi1 - 6 * phi2)) + (-t407 + t408) * np.exp((-1*1j) * (phi1 + 6 * phi2))) * ((1 + t400) ** (-0.1e1 / 0.2e1)) * ((1 - t400) ** (-0.1e1 / 0.2e1))

        if Bindx == 48:
            t412 = np.sin(phi)
            t409 = t412 ** 2
            t410 = t412 * t409
            tfunc[..., c] = (-0.15e2 / 0.32e2*1j) * np.sqrt(0.3003e4) * np.sqrt(0.2e1) * np.cos(phi) * np.sin((6 * phi2)) * t410 ** 2

        if Bindx == 49:
            t422 = np.cos(phi)
            t421 = t422 ** 2
            t423 = t422 * t421
            t424 = t421 ** 2
            t426 = t423 ** 2
            t430 = -18 * t423 + 6 * (3 * t424 - t426 + 1) * t422
            t429 = 10 * t421 + 22 * t426 - 1 + (-24 - 7 * t424) * t424
            tfunc[..., c] = (-0.15e2 / 0.128e3*1j) * np.sqrt(0.429e3) * ((1 + t422) ** (-0.1e1 / 0.2e1)) * ((1 - t422) ** (-0.1e1 / 0.2e1)) * ((-t429 + t430) * np.exp((1j) * (phi1 - 6 * phi2)) + (t429 + t430) * np.exp((1j) * (phi1 + 6 * phi2)))

        if Bindx == 50:
            t439 = np.cos(phi)
            t438 = t439 ** 2
            t441 = t438 ** 2
            t440 = t439 * t438
            t443 = t440 ** 2
            t446 = 2 - 16 * t438 + 26 * t441 - 12 * t443
            t445 = -t440 + (11 * t441 - 7 * t443 - 3) * t439
            tfunc[..., c] = -(0.15e2 / 0.128e3) * np.sqrt(0.143e3) * np.sqrt(0.2e1) * ((-t445 + t446) * np.exp((2*1j) * (phi1 - 3 * phi2)) + (t445 + t446) * np.exp((2*1j) * (phi1 + 3 * phi2)))

        if Bindx == 51:
            t456 = np.cos(phi)
            t455 = t456 ** 2
            t457 = t456 * t455
            t458 = t455 ** 2
            t460 = t457 ** 2
            t464 = -22 * t457 + (38 * t458 - 18 * t460 + 2) * t456
            t463 = -18 * t455 + 2 * t460 + 3 + (20 - 7 * t458) * t458
            tfunc[..., c] = (-0.15e2 / 0.128e3*1j) * np.sqrt(0.143e3) * ((1 + t456) ** (-0.1e1 / 0.2e1)) * ((1 - t456) ** (-0.1e1 / 0.2e1)) * ((-t463 + t464) * np.exp((3*1j) * (phi1 - 2 * phi2)) + (t463 + t464) * np.exp((3*1j) * (phi1 + 2 * phi2)))

        if Bindx == 52:
            t473 = np.cos(phi)
            t472 = t473 ** 2
            t476 = t472 ** 2
            t475 = t473 * t472
            t478 = t475 ** 2
            t481 = -4 + 8 * t472 + 20 * t476 - 24 * t478
            t480 = 35 * t475 + (-19 * t476 - 7 * t478 - 9) * t473
            t474 = 2 * phi1
            tfunc[..., c] = -(0.15e2 / 0.64e2) * ((-t480 + t481) * np.exp((2*1j) * (t474 - 3 * phi2)) + (t480 + t481) * np.exp((2*1j) * (t474 + 3 * phi2))) * np.sqrt(0.13e2)

        if Bindx == 53:
            t491 = np.cos(phi)
            t490 = t491 ** 2
            t493 = t491 * t490
            t494 = t490 ** 2
            t496 = t493 ** 2
            t500 = 38 * t493 + (10 * t494 - 30 * t496 - 18) * t491
            t499 = -10 * t490 - 38 * t496 - 5 + (60 - 7 * t494) * t494
            t492 = 5 * phi1
            tfunc[..., c] = (-0.15e2 / 0.128e3*1j) * np.sqrt(0.13e2) * ((1 - t491) ** (-0.1e1 / 0.2e1)) * ((1 + t491) ** (-0.1e1 / 0.2e1)) * ((-t499 + t500) * np.exp((1j) * (t492 - 6 * phi2)) + (t499 + t500) * np.exp((1j) * (t492 + 6 * phi2)))

        if Bindx == 54:
            t509 = np.cos(phi)
            t508 = t509 ** 2
            t511 = t508 ** 2
            t510 = t509 * t508
            t513 = t510 ** 2
            t516 = 6 + 48 * t508 - 50 * t511 - 36 * t513
            t515 = 15 * t510 + (-69 * t511 - 7 * t513 + 29) * t509
            tfunc[..., c] = -(0.15e2 / 0.128e3) * np.sqrt(0.2e1) * ((-t515 + t516) * np.exp((6*1j) * (phi1 - phi2)) + (t515 + t516) * np.exp((6*1j) * (phi1 + phi2)))

        if Bindx == 55:
            t525 = np.cos(phi)
            t524 = t525 ** 2
            t527 = t525 * t524
            t530 = t527 ** 2
            t532 = -t525 * t530 - 1
            t528 = t524 ** 2
            t526 = 7 * phi1
            t521 = t525 * t528
            tfunc[..., c] = (0.15e2 / 0.128e3*1j) * np.sqrt(0.7e1) * np.sqrt((1 - t525)) * ((1 + t525) ** (-0.1e1 / 0.2e1)) * ((-5 * t530 + 9 * t521 - 5 * t528 - 5 * t527 + 9 * t524 - 5 * t525 - t532) * np.exp((1j) * (t526 - 6 * phi2)) + (-7 * t530 - 21 * t521 - 35 * t528 - 35 * t527 - 21 * t524 - 7 * t525 + t532) * np.exp((1j) * (t526 + 6 * phi2)))

        if Bindx == 56:
            t536 = np.sin(phi)
            t533 = t536 ** 2
            t534 = t533 ** 2
            tfunc[..., c] = (0.51e2 / 0.256e3) * np.exp((-8*1j) * phi1) * np.sqrt(0.1430e4) * t534 ** 2

        if Bindx == 57:
            t545 = np.cos(phi)
            t544 = t545 ** 2
            t554 = -14 * t544
            t547 = t545 * t544
            t549 = t547 ** 2
            t550 = t545 * t549
            t553 = t545 * t550 + 14 * t549 + t554 - 1
            t552 = 6 * t545 - 6 * t550 + (t554 + 14) * t547
            t546 = 4 * phi1
            tfunc[..., c] = (0.17e2 / 0.128e3) * ((t552 + t553) * np.exp((-2*1j) * (t546 - 3 * phi2)) + (-t552 + t553) * np.exp((-2*1j) * (t546 + 3 * phi2))) * np.sqrt(0.15e2)

        if Bindx == 58:
            t555 = np.cos(phi)
            t559 = -4 * t555
            t556 = t555 ** 2
            tfunc[..., c] = (0.51e2 / 0.64e2*1j) * t555 * (t559 + 1 + (t559 + 6 + t556) * t556) * ((1 + t555) ** (0.7e1 / 0.2e1)) * np.sqrt(0.1430e4) * np.exp((-7*1j) * phi1) * ((1 - t555) ** (-0.1e1 / 0.2e1))

        if Bindx == 59:
            t569 = np.cos(phi)
            t568 = t569 ** 2
            t572 = t568 ** 2
            t578 = 4 * t572 ** 2
            t571 = t569 * t568
            t577 = -3 + 21 * t571 + 35 * t572
            t574 = t571 ** 2
            t570 = 7 * phi1
            t565 = t569 * t572
            t563 = t569 * t574
            tfunc[..., c] = (0.17e2 / 0.128e3*1j) * np.sqrt((1 + t569)) * np.sqrt(0.15e2) * ((1 - t569) ** (-0.1e1 / 0.2e1)) * ((t578 - 25 * t563 + 63 * t574 - 77 * t565 - 35 * t568 + 17 * t569 + t577) * np.exp((-1*1j) * (t570 - 6 * phi2)) + (t578 + 17 * t563 + 21 * t574 - 7 * t565 + 7 * t568 + 11 * t569 - t577) * np.exp((-1*1j) * (t570 + 6 * phi2)))

        if Bindx == 60:
            t583 = np.sin(phi)
            t580 = t583 ** 2
            t581 = t583 * t580
            t579 = np.cos(phi)
            tfunc[..., c] = -(0.17e2 / 0.64e2) * np.exp((-6*1j) * phi1) * np.sqrt(0.429e3) * t581 ** 2 * (15 * t579 ** 2 - 1)

        if Bindx == 61:
            t592 = np.cos(phi)
            t593 = t592 ** 2
            t595 = t593 ** 2
            t594 = t592 * t593
            t597 = t594 ** 2
            t601 = 196 * t597 + 16 + (-210 + 30 * t595) * t595
            t600 = 175 * t594 + (-21 * t595 - 135 * t597 - 51) * t592
            tfunc[..., c] = (0.17e2 / 0.128e3) * np.sqrt(0.2e1) * ((t600 + t601) * np.exp((-6*1j) * (phi1 - phi2)) + (-t600 + t601) * np.exp((-6*1j) * (phi1 + phi2)))

        if Bindx == 62:
            t602 = np.cos(phi)
            tfunc[..., c] = (-0.51e2 / 0.64e2*1j) * (5 * t602 ** 2 - 1) * t602 * ((1 + t602) ** (0.5e1 / 0.2e1)) * np.sqrt(0.2002e4) * np.exp((-5*1j) * phi1) * ((1 - t602) ** (0.5e1 / 0.2e1))

        if Bindx == 63:
            t613 = np.cos(phi)
            t612 = t613 ** 2
            t616 = t612 ** 2
            t615 = t613 * t612
            t618 = t615 ** 2
            t620 = t616 ** 2
            t623 = 7 - 42 * t612 + 20 * t616 + 90 * t618 - 75 * t620
            t622 = 90 * t615 + (-162 * t616 + 62 * t618 + 20 * t620 - 10) * t613
            t614 = 5 * phi1
            tfunc[..., c] = (0.17e2 / 0.128e3*1j) * np.sqrt(0.21e2) * ((1 + t613) ** (-0.1e1 / 0.2e1)) * ((1 - t613) ** (-0.1e1 / 0.2e1)) * ((t622 + t623) * np.exp((-1*1j) * (t614 - 6 * phi2)) + (t622 - t623) * np.exp((-1*1j) * (t614 + 6 * phi2)))

        if Bindx == 64:
            t629 = np.sin(phi)
            t627 = t629 ** 2
            t624 = np.cos(phi)
            t625 = t624 ** 2
            tfunc[..., c] = (0.51e2 / 0.128e3) * np.exp((-4*1j) * phi1) * np.sqrt(0.154e3) * t627 ** 2 * (1 + (-26 + 65 * t625) * t625)

        if Bindx == 65:
            t639 = np.cos(phi)
            t638 = t639 ** 2
            t641 = t639 * t638
            t642 = t638 ** 2
            t644 = t641 ** 2
            t648 = -5 * t641 + (21 * t642 - 15 * t644 - 1) * t639
            t647 = 10 * t638 + 6 * t644 - 1 + (-20 + 5 * t642) * t642
            t640 = 2 * phi1
            tfunc[..., c] = (0.17e2 / 0.64e2) * ((t647 + t648) * np.exp((-2*1j) * (t640 - 3 * phi2)) + (t647 - t648) * np.exp((-2*1j) * (t640 + 3 * phi2))) * np.sqrt(0.273e3)

        if Bindx == 66:
            t649 = np.cos(phi)
            t650 = t649 ** 2
            tfunc[..., c] = (0.17e2 / 0.64e2*1j) * (3 + (-26 + 39 * t650) * t650) * t649 * ((1 + t649) ** (0.3e1 / 0.2e1)) * np.sqrt(0.2310e4) * np.exp((-3*1j) * phi1) * ((1 - t649) ** (0.3e1 / 0.2e1))

        if Bindx == 67:
            t662 = np.cos(phi)
            t661 = t662 ** 2
            t664 = t661 ** 2
            t663 = t662 * t661
            t666 = t663 ** 2
            t668 = t664 ** 2
            t671 = -1 + 14 * t661 - 52 * t664 + 66 * t666 - 27 * t668
            t670 = 22 * t663 - 14 * (t664 + t666) * t662 + (12 * t668 - 6) * t662
            tfunc[..., c] = (0.17e2 / 0.128e3*1j) * np.sqrt(0.455e3) * ((1 + t662) ** (-0.1e1 / 0.2e1)) * ((1 - t662) ** (-0.1e1 / 0.2e1)) * ((t670 + t671) * np.exp((-3*1j) * (phi1 - 2 * phi2)) + (t670 - t671) * np.exp((-3*1j) * (phi1 + 2 * phi2)))

        if Bindx == 68:
            t674 = np.cos(phi)
            t675 = t674 ** 2
            t676 = t675 ** 2
            t673 = np.sin(phi)
            tfunc[..., c] = -(0.51e2 / 0.64e2) * np.exp((-2*1j) * phi1) * np.sqrt(0.35e2) * t673 ** 2 * (-143 * t676 - 1 + (143 * t676 + 33) * t675)

        if Bindx == 69:
            t686 = np.cos(phi)
            t685 = t686 ** 2
            t687 = t686 * t685
            t688 = t685 ** 2
            t690 = t687 ** 2
            t693 = 2 * t687 + 2 * (-2 * t688 + t690) * t686
            t692 = 1 - 5 * t685 + 7 * t688 - 3 * t690
            tfunc[..., c] = (0.17e2 / 0.128e3) * np.sqrt(0.15015e5) * t686 * np.sqrt(0.2e1) * ((t692 + t693) * np.exp((-2*1j) * (phi1 - 3 * phi2)) + (-t692 + t693) * np.exp((-2*1j) * (phi1 + 3 * phi2)))

        if Bindx == 70:
            t694 = np.cos(phi)
            t695 = t694 ** 2
            t696 = t694 * t695
            t701 = -1001 * t695 ** 2 + 715 * t696 ** 2 - 35
            tfunc[..., c] = (0.51e2 / 0.64e2*1j) * np.exp((-1*1j) * phi1) * np.sqrt(0.2e1) * np.sqrt((1 + t694)) * t694 * (t701 * t694 - 385 * t695 + 385 * t696 - t701) * ((1 - t694) ** (-0.1e1 / 0.2e1))

        if Bindx == 71:
            t712 = np.cos(phi)
            t711 = t712 ** 2
            t714 = t711 ** 2
            t713 = t712 * t711
            t716 = t713 ** 2
            t718 = t714 ** 2
            t721 = -1 + 18 * t711 - 48 * t714 + 46 * t716 - 15 * t718
            t720 = -38 * t713 + (78 * t714 - 66 * t716 + 20 * t718 + 6) * t712
            tfunc[..., c] = (0.17e2 / 0.128e3*1j) * np.sqrt(0.429e3) * ((1 + t712) ** (-0.1e1 / 0.2e1)) * ((1 - t712) ** (-0.1e1 / 0.2e1)) * ((t720 + t721) * np.exp((-1*1j) * (phi1 - 6 * phi2)) + (t720 - t721) * np.exp((-1*1j) * (phi1 + 6 * phi2)))

        if Bindx == 72:
            t722 = np.cos(phi)
            t723 = t722 ** 2
            t724 = t723 ** 2
            tfunc[..., c] = -0.5355e4 / 0.32e2 * t723 + 0.595e3 / 0.128e3 + (-0.51051e5 / 0.32e2 * t723 + 0.58905e5 / 0.64e2 + 0.109395e6 / 0.128e3 * t724) * t724

        if Bindx == 73:
            t727 = np.cos(phi)
            t728 = t727 ** 2
            t729 = t728 ** 2
            tfunc[..., c] = 0.17e2 / 0.64e2 * np.sqrt(0.429e3) * np.sqrt(0.2e1) * (-18 * t728 + 1 + (-46 * t728 + 48 + 15 * t729) * t729) * np.cos((6 * phi2))

        if Bindx == 74:
            t732 = np.cos(phi)
            t733 = t732 ** 2
            t734 = t733 ** 2
            tfunc[..., c] = (-0.51e2 / 0.64e2*1j) * np.exp((1j) * phi1) * np.sqrt(0.2e1) * np.sqrt((1 - t732)) * np.sqrt((1 + t732)) * t732 * (-1001 * t734 - 35 + (715 * t734 + 385) * t733)

        if Bindx == 75:
            t746 = np.cos(phi)
            t745 = t746 ** 2
            t748 = t745 ** 2
            t747 = t746 * t745
            t750 = t747 ** 2
            t752 = t748 ** 2
            t755 = -1 + 18 * t745 - 48 * t748 + 46 * t750 - 15 * t752
            t754 = -38 * t747 + (78 * t748 - 66 * t750 + 20 * t752 + 6) * t746
            tfunc[..., c] = (0.17e2 / 0.128e3*1j) * np.sqrt(0.429e3) * ((1 + t746) ** (-0.1e1 / 0.2e1)) * ((1 - t746) ** (-0.1e1 / 0.2e1)) * ((t754 + t755) * np.exp((1j) * (phi1 - 6 * phi2)) + (t754 - t755) * np.exp((1j) * (phi1 + 6 * phi2)))

        if Bindx == 76:
            t757 = np.cos(phi)
            t758 = t757 ** 2
            t759 = t758 ** 2
            t756 = np.sin(phi)
            tfunc[..., c] = -(0.51e2 / 0.64e2) * np.exp((2*1j) * phi1) * np.sqrt(0.35e2) * t756 ** 2 * (-143 * t759 - 1 + (143 * t759 + 33) * t758)

        if Bindx == 77:
            t769 = np.cos(phi)
            t768 = t769 ** 2
            t770 = t769 * t768
            t771 = t768 ** 2
            t773 = t770 ** 2
            t776 = 2 * t770 + 2 * (-2 * t771 + t773) * t769
            t775 = 1 - 5 * t768 + 7 * t771 - 3 * t773
            tfunc[..., c] = (0.17e2 / 0.128e3) * np.sqrt(0.15015e5) * t769 * np.sqrt(0.2e1) * ((t775 + t776) * np.exp((2*1j) * (phi1 - 3 * phi2)) + (-t775 + t776) * np.exp((2*1j) * (phi1 + 3 * phi2)))

        if Bindx == 78:
            t777 = np.cos(phi)
            t778 = t777 ** 2
            tfunc[..., c] = (0.17e2 / 0.64e2*1j) * np.exp((3*1j) * phi1) * np.sqrt(0.2310e4) * ((1 - t777) ** (0.3e1 / 0.2e1)) * ((1 + t777) ** (0.3e1 / 0.2e1)) * t777 * (3 + (-26 + 39 * t778) * t778)

        if Bindx == 79:
            t790 = np.cos(phi)
            t789 = t790 ** 2
            t792 = t789 ** 2
            t791 = t790 * t789
            t794 = t791 ** 2
            t796 = t792 ** 2
            t799 = -1 + 14 * t789 - 52 * t792 + 66 * t794 - 27 * t796
            t798 = 22 * t791 - 14 * (t792 + t794) * t790 + (12 * t796 - 6) * t790
            tfunc[..., c] = (0.17e2 / 0.128e3*1j) * np.sqrt(0.455e3) * ((1 + t790) ** (-0.1e1 / 0.2e1)) * ((1 - t790) ** (-0.1e1 / 0.2e1)) * ((t798 + t799) * np.exp((3*1j) * (phi1 - 2 * phi2)) + (t798 - t799) * np.exp((3*1j) * (phi1 + 2 * phi2)))

        if Bindx == 80:
            t806 = np.sin(phi)
            t804 = t806 ** 2
            t801 = np.cos(phi)
            t802 = t801 ** 2
            tfunc[..., c] = (0.51e2 / 0.128e3) * np.exp((4*1j) * phi1) * np.sqrt(0.154e3) * t804 ** 2 * (1 + (-26 + 65 * t802) * t802)

        if Bindx == 81:
            t816 = np.cos(phi)
            t815 = t816 ** 2
            t818 = t816 * t815
            t819 = t815 ** 2
            t821 = t818 ** 2
            t825 = -5 * t818 + (21 * t819 - 15 * t821 - 1) * t816
            t824 = 10 * t815 + 6 * t821 - 1 + (-20 + 5 * t819) * t819
            t817 = 2 * phi1
            tfunc[..., c] = (0.17e2 / 0.64e2) * ((t824 + t825) * np.exp((2*1j) * (t817 - 3 * phi2)) + (t824 - t825) * np.exp((2*1j) * (t817 + 3 * phi2))) * np.sqrt(0.273e3)

        if Bindx == 82:
            t826 = np.cos(phi)
            tfunc[..., c] = (-0.51e2 / 0.64e2*1j) * np.exp((5*1j) * phi1) * np.sqrt(0.2002e4) * ((1 - t826) ** (0.5e1 / 0.2e1)) * ((1 + t826) ** (0.5e1 / 0.2e1)) * t826 * (5 * t826 ** 2 - 1)

        if Bindx == 83:
            t837 = np.cos(phi)
            t836 = t837 ** 2
            t840 = t836 ** 2
            t839 = t837 * t836
            t842 = t839 ** 2
            t844 = t840 ** 2
            t847 = 7 - 42 * t836 + 20 * t840 + 90 * t842 - 75 * t844
            t846 = 90 * t839 + (-162 * t840 + 62 * t842 + 20 * t844 - 10) * t837
            t838 = 5 * phi1
            tfunc[..., c] = (0.17e2 / 0.128e3*1j) * np.sqrt(0.21e2) * ((1 + t837) ** (-0.1e1 / 0.2e1)) * ((1 - t837) ** (-0.1e1 / 0.2e1)) * ((t846 + t847) * np.exp((1j) * (t838 - 6 * phi2)) + (t846 - t847) * np.exp((1j) * (t838 + 6 * phi2)))

        if Bindx == 84:
            t852 = np.sin(phi)
            t849 = t852 ** 2
            t850 = t852 * t849
            t848 = np.cos(phi)
            tfunc[..., c] = -(0.17e2 / 0.64e2) * np.exp((6*1j) * phi1) * np.sqrt(0.429e3) * t850 ** 2 * (15 * t848 ** 2 - 1)

        if Bindx == 85:
            t861 = np.cos(phi)
            t862 = t861 ** 2
            t864 = t862 ** 2
            t863 = t861 * t862
            t866 = t863 ** 2
            t870 = 196 * t866 + 16 + (-210 + 30 * t864) * t864
            t869 = 175 * t863 + (-21 * t864 - 135 * t866 - 51) * t861
            tfunc[..., c] = (0.17e2 / 0.128e3) * np.sqrt(0.2e1) * ((t869 + t870) * np.exp((6*1j) * (phi1 - phi2)) + (-t869 + t870) * np.exp((6*1j) * (phi1 + phi2)))

        if Bindx == 86:
            t871 = np.cos(phi)
            tfunc[..., c] = (0.51e2 / 0.64e2*1j) * np.exp((7*1j) * phi1) * np.sqrt(0.1430e4) * ((1 - t871) ** (0.7e1 / 0.2e1)) * ((1 + t871) ** (0.7e1 / 0.2e1)) * t871

        if Bindx == 87:
            t881 = np.cos(phi)
            t880 = t881 ** 2
            t884 = t880 ** 2
            t890 = 4 * t884 ** 2
            t883 = t881 * t880
            t889 = 3 + 21 * t883 - 35 * t884
            t886 = t883 ** 2
            t882 = 7 * phi1
            t877 = t881 * t884
            t875 = t881 * t886
            tfunc[..., c] = (-0.17e2 / 0.128e3*1j) * np.sqrt((1 - t881)) * np.sqrt(0.15e2) * ((1 + t881) ** (-0.1e1 / 0.2e1)) * ((t890 - 17 * t875 + 21 * t886 + 7 * t877 + 7 * t880 - 11 * t881 + t889) * np.exp((1j) * (t882 - 6 * phi2)) + (t890 + 25 * t875 + 63 * t886 + 77 * t877 - 35 * t880 - 17 * t881 - t889) * np.exp((1j) * (t882 + 6 * phi2)))

        if Bindx == 88:
            t894 = np.sin(phi)
            t891 = t894 ** 2
            t892 = t891 ** 2
            tfunc[..., c] = (0.51e2 / 0.256e3) * np.exp((8*1j) * phi1) * np.sqrt(0.1430e4) * t892 ** 2

        if Bindx == 89:
            t903 = np.cos(phi)
            t902 = t903 ** 2
            t912 = -14 * t902
            t905 = t903 * t902
            t907 = t905 ** 2
            t908 = t903 * t907
            t911 = t903 * t908 + 14 * t907 + t912 - 1
            t910 = 6 * t903 - 6 * t908 + (t912 + 14) * t905
            t904 = 4 * phi1
            tfunc[..., c] = (0.17e2 / 0.128e3) * ((t910 + t911) * np.exp((2*1j) * (t904 - 3 * phi2)) + (-t910 + t911) * np.exp((2*1j) * (t904 + 3 * phi2))) * np.sqrt(0.15e2)

        c += 1

    return tfunc


if __name__ == '__main__':
    X = np.zeros([2, 3])
    phi1 = np.array([0.1,0.2])
    X[:, 0] = phi1
    phi = np.array([0.0, 0.4])
    X[:, 1] = phi
    phi2 = np.array([0.3, 0.6])
    X[:, 2] = phi2

    indxvec = gsh_basis_info()
    print indxvec

    lte2 = indxvec[:, 0] <= 2
    print lte2

    Bvec = np.arange(indxvec.shape[0])[lte2]
    print Bvec

    out_tvalues = gsh_eval(X, Bvec)
    print out_tvalues
    print out_tvalues.shape

