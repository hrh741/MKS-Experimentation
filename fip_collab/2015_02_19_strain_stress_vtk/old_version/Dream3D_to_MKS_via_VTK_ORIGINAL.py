#
# Dream3D_to_MKS_via_VTK.py
#
# Written by Matthew Priddy on February 17, 2015
# 
# The purpose of this code is to take Dream3D data and put it in a format for reading into MKS.
# 
# Notes: 	(a) you must use decimals to return decimals
#			(b) sin, cos, etc. use Radians
#
from sys import *
from string import *
from math import *
#from pylab import *
from random import *
from numpy import *
import matplotlib 
matplotlib.use('PDF')
import linecache
import itertools
#import vtk
import time
import sys
from matplotlib import pyplot as plt
import os

def VTK_Header(fileName, file_input, nx_pt, ny_pt, nz_pt, X, Y, Z, no_el):
	fileName.write("# vtk DataFile Version 2.0"																		"\n")
	fileName.write("data file: " + file_input + " generated by Matthew W. Priddy on " +str(time.strftime("%c")) + 	"\n")
	fileName.write("ASCII" + 													 									"\n")
	fileName.write("DATASET RECTILINEAR_GRID" + 								 									"\n")
	fileName.write("DIMENSIONS " + str(nx_pt) + " " + str(ny_pt) + " " + str(nz_pt) +								"\n")
	fileName.write("X_COORDINATES " + str(nx_pt) + " float"						 									"\n")
	for i in range(len(X)):
		fileName.write("% 2.4f " %(X[i])																				)
		if i == len(X):
			fileName.write("\n"																							)
	fileName.write("\n"																									)
	fileName.write("Y_COORDINATES " + str(ny_pt) + " float"						 									"\n")
	for i in range(len(Y)):
		fileName.write("% 2.4f " %(Y[i])																				)
		if i == len(Y):
			fileName.write("\n"																							)
	fileName.write("\n"																									)
	fileName.write("Z_COORDINATES " + str(nz_pt) + " float"						 									"\n")
	for i in range(len(Z)):
		fileName.write("% 2.4f " %(Z[i])																				)
		if i == len(Z):
			fileName.write("\n"																							)
	fileName.write("\n"																									)	

	fileName.write("CELL_DATA " + str(no_el) +									 									"\n")

def VTK_Scalar(fileName, dataName, data, no_per_line):
	fileName.write("SCALARS " + dataName + " float " + str(1) +					 									"\n")
	fileName.write("LOOKUP_TABLE default" 										 									"\n")
	for i in range(len(data)):
		fileName.write("% 2.6E " %(data[i])																		)
		i = i + 1
		if i % no_per_line == 0:
			fileName.write("\n"																							)
		elif i == len(data):
			fileName.write("\n"																							)
			
def VTK_Scalar_Int(fileName, dataName, data, no_per_line):
	fileName.write("SCALARS " + dataName + " int " + str(1) +					 									"\n")
	fileName.write("LOOKUP_TABLE default" 										 									"\n")
	for i in range(len(data)):
		fileName.write("% 5d " %(data[i])																		)
		i = i + 1
		if i % no_per_line == 0:
			fileName.write("\n"																							)	
		elif i == len(data):
			fileName.write("\n"																							)
			
def VTK_Vector(fileName, dataName, data, no_per_line):
	fileName.write("VECTORS " + dataName + " float " +							 									"\n")
	for i in range(len(data[:][:])):
		fileName.write(" % +2.6E % +2.6E % +2.6E    " %(data[i][0], data[i][1], data[i][2])			)
		i = i + 1
		if i % no_per_line == 0:
			fileName.write("\n"																							)
		elif i == len(data[:][:]):
			fileName.write("\n"																							)
		
def VTK_Tensor(fileName, dataName, data_00, data_01, data_02, data_11, data_12, data_22, no_per_line):
	fileName.write("TENSORS " + dataName + " float " +								 								"\n")
	for i in range(len(data_00)):
		fileName.write(" % +2.6E % +2.6E % +2.6E % +2.6E % +2.6E % +2.6E % +2.6E % +2.6E % +2.6E " 
			%(data_00[i], data_01[i], data_02[i], data_01[i], data_11[i], data_12[i], data_02[i], data_12[i], data_22[i]) + "\n" )

fileName = sys.argv[1]				# whatever you want
f7_GrainID = sys.argv[2]			# trial_GrainID.txt
no_el_PerSide = int(sys.argv[3])	# 21
elements = int(sys.argv[3]) * int(sys.argv[3]) * int(sys.argv[3])

os.mkdir('MKSinput')

dirs = os.listdir(os.getcwd())

count = 1
for file in dirs:
	current_folder = os.path.join(os.getcwd(), file)
	if os.path.isdir(os.path.join(os.getcwd(), file)) == True:
		print file + ": directory"
		if len(file.split('_')) > 1:
			sim_number = file.split('_')[1]
		else:
			sim_number = 0
		current_file = os.path.join(os.path.join(os.getcwd(), file), f7_GrainID)
		if os.path.exists(os.path.join(os.path.join(os.getcwd(), file), f7_GrainID)) == True:
			print count
			count = count + 1

			grainID_file = open(current_file,'r')
			file_contents = grainID_file.readlines()

			elGrainID = [0 for i in range(elements)]
			euler     = [[0 for k in range(3)] for i in range(elements)]

			j = 0
			
			for line in file_contents:
				list = line.split(', ')
				list2 = list[0].split(None)
				if list2[0].isdigit():
					elGrainID[j] = int(list2[0])
					euler[j][0] = float(list2[1])
					euler[j][1] = float(list2[2])
					euler[j][2] = float(list2[3])
					j = j + 1		

			GrainID_max = max(elGrainID)

			###############################################################################

			# Convert element numbers
			# In the original system, the element count starts at (L,L,L) and progresses to (0,0,0)
			# Ideally, we would start at (0,0,0) and progress to (L,L,L)
			# That would allow us to use the VTK file format without worrying about whether the data is tied to the correct element

			# Initialize the data needed to write VTK files

			nx_el, ny_el, nz_el = no_el_PerSide, no_el_PerSide, no_el_PerSide
			nx_pt, ny_pt, nz_pt = no_el_PerSide + 1, no_el_PerSide + 1, no_el_PerSide + 1
			dx, dy, dz = 0.02, 0.02, 0.02
			lx, ly, lz = dx*nx_el, dy*ny_el, dz*nz_el

			no_el = nx_el * ny_el * nz_el
			no_pt = nx_pt * ny_pt * nz_pt

			# Coordinates

			X = arange(0, lx+dx, dx)
			Y = arange(0, ly+dx, dy)
			Z = arange(0, lz+dx, dz)

#			os.chdir('../MKSinput/')
			
			dataFileName5 = 'MKSinput/' + fileName + 'MKS_data_v2_' + str(sim_number).zfill(3) + '.vtk'
			file_vtk = open(dataFileName5, 'w')
			VTK_Header(file_vtk, fileName, nx_pt, ny_pt, nz_pt, X, Y, Z, no_el)
			VTK_Scalar_Int(file_vtk, 'GrainID', elGrainID, nx_el)	
			VTK_Vector(file_vtk, "Euler_phi1Phi0phi2", euler, 7)
			#VTK_Scalar(file_vtk, 'FIP_FatemiSocie_plastic', zeros(len(FIP_FS_pl)), nx_el)	
			#VTK_Scalar(file_vtk, 'FIP_FatemiSocie_total', zeros(len(FIP_FS_el)), nx_el)	
			#VTK_Scalar(file_vtk, 'FIP_Lamellar', zeros(len(FIP_LAM)), nx_el)	
			#VTK_Scalar(file_vtk, 'FIP_Findley', zeros(len(FIP_FIN)), nx_el)			
			#VTK_Tensor(file_vtk, 'Stress',    zeros(len(strs_t00_max)), zeros(len(strs_t01_max)), zeros(len(strs_t02_max)), zeros(len(strs_t11_max)), zeros(len(strs_t12_max)), zeros(len(strs_t22_max)), 1)
			#VTK_Tensor(file_vtk, 'Strain',    zeros(len(strn_t00_max)), zeros(len(strn_t01_max)), zeros(len(strn_t02_max)), zeros(len(strn_t11_max)), zeros(len(strn_t12_max)), zeros(len(strn_t22_max)), 1)
			#VTK_Tensor(file_vtk, 'Strain_pl', zeros(len(strn_p00_max)), zeros(len(strn_p01_max)), zeros(len(strn_p02_max)), zeros(len(strn_p11_max)), zeros(len(strn_p12_max)), zeros(len(strn_p22_max)), 1)
			file_vtk.close()
			
#			os.chdir('../' + current_folder)
