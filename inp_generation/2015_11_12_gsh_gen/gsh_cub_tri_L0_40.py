import numpy as np


def gsh_basis_info():

    indxvec = np.array([[0, 0, 1],
                        [4, -4, 1],
                        [4, -3, 1],
                        [4, -2, 1],
                        [4, -1, 1],
                        [4, 0, 1],
                        [4, 1, 1],
                        [4, 2, 1],
                        [4, 3, 1],
                        [4, 4, 1],
                        [6, -6, 1],
                        [6, -5, 1],
                        [6, -4, 1],
                        [6, -3, 1],
                        [6, -2, 1],
                        [6, -1, 1],
                        [6, 0, 1],
                        [6, 1, 1],
                        [6, 2, 1],
                        [6, 3, 1],
                        [6, 4, 1],
                        [6, 5, 1],
                        [6, 6, 1],
                        [8, -8, 1],
                        [8, -7, 1],
                        [8, -6, 1],
                        [8, -5, 1],
                        [8, -4, 1],
                        [8, -3, 1],
                        [8, -2, 1],
                        [8, -1, 1],
                        [8, 0, 1],
                        [8, 1, 1],
                        [8, 2, 1],
                        [8, 3, 1],
                        [8, 4, 1],
                        [8, 5, 1],
                        [8, 6, 1],
                        [8, 7, 1],
                        [8, 8, 1],
                        [9, -9, 1],
                        [9, -8, 1],
                        [9, -7, 1],
                        [9, -6, 1],
                        [9, -5, 1],
                        [9, -4, 1],
                        [9, -3, 1],
                        [9, -2, 1],
                        [9, -1, 1],
                        [9, 0, 1],
                        [9, 1, 1],
                        [9, 2, 1],
                        [9, 3, 1],
                        [9, 4, 1],
                        [9, 5, 1],
                        [9, 6, 1],
                        [9, 7, 1],
                        [9, 8, 1],
                        [9, 9, 1],
                        [10, -10, 1],
                        [10, -9, 1],
                        [10, -8, 1],
                        [10, -7, 1],
                        [10, -6, 1],
                        [10, -5, 1],
                        [10, -4, 1],
                        [10, -3, 1],
                        [10, -2, 1],
                        [10, -1, 1],
                        [10, 0, 1],
                        [10, 1, 1],
                        [10, 2, 1],
                        [10, 3, 1],
                        [10, 4, 1],
                        [10, 5, 1],
                        [10, 6, 1],
                        [10, 7, 1],
                        [10, 8, 1],
                        [10, 9, 1],
                        [10, 10, 1],
                        [12, -12, 1],
                        [12, -12, 2],
                        [12, -11, 1],
                        [12, -11, 2],
                        [12, -10, 1],
                        [12, -10, 2],
                        [12, -9, 1],
                        [12, -9, 2],
                        [12, -8, 1],
                        [12, -8, 2],
                        [12, -7, 1],
                        [12, -7, 2],
                        [12, -6, 1],
                        [12, -6, 2],
                        [12, -5, 1],
                        [12, -5, 2],
                        [12, -4, 1],
                        [12, -4, 2],
                        [12, -3, 1],
                        [12, -3, 2],
                        [12, -2, 1],
                        [12, -2, 2],
                        [12, -1, 1],
                        [12, -1, 2],
                        [12, 0, 1],
                        [12, 0, 2],
                        [12, 1, 1],
                        [12, 1, 2],
                        [12, 2, 1],
                        [12, 2, 2],
                        [12, 3, 1],
                        [12, 3, 2],
                        [12, 4, 1],
                        [12, 4, 2],
                        [12, 5, 1],
                        [12, 5, 2],
                        [12, 6, 1],
                        [12, 6, 2],
                        [12, 7, 1],
                        [12, 7, 2],
                        [12, 8, 1],
                        [12, 8, 2],
                        [12, 9, 1],
                        [12, 9, 2],
                        [12, 10, 1],
                        [12, 10, 2],
                        [12, 11, 1],
                        [12, 11, 2],
                        [12, 12, 1],
                        [12, 12, 2],
                        [13, -13, 1],
                        [13, -12, 1],
                        [13, -11, 1],
                        [13, -10, 1],
                        [13, -9, 1],
                        [13, -8, 1],
                        [13, -7, 1],
                        [13, -6, 1],
                        [13, -5, 1],
                        [13, -4, 1],
                        [13, -3, 1],
                        [13, -2, 1],
                        [13, -1, 1],
                        [13, 0, 1],
                        [13, 1, 1],
                        [13, 2, 1],
                        [13, 3, 1],
                        [13, 4, 1],
                        [13, 5, 1],
                        [13, 6, 1],
                        [13, 7, 1],
                        [13, 8, 1],
                        [13, 9, 1],
                        [13, 10, 1],
                        [13, 11, 1],
                        [13, 12, 1],
                        [13, 13, 1],
                        [14, -14, 1],
                        [14, -13, 1],
                        [14, -12, 1],
                        [14, -11, 1],
                        [14, -10, 1],
                        [14, -9, 1],
                        [14, -8, 1],
                        [14, -7, 1],
                        [14, -6, 1],
                        [14, -5, 1],
                        [14, -4, 1],
                        [14, -3, 1],
                        [14, -2, 1],
                        [14, -1, 1],
                        [14, 0, 1],
                        [14, 1, 1],
                        [14, 2, 1],
                        [14, 3, 1],
                        [14, 4, 1],
                        [14, 5, 1],
                        [14, 6, 1],
                        [14, 7, 1],
                        [14, 8, 1],
                        [14, 9, 1],
                        [14, 10, 1],
                        [14, 11, 1],
                        [14, 12, 1],
                        [14, 13, 1],
                        [14, 14, 1],
                        [15, -15, 1],
                        [15, -14, 1],
                        [15, -13, 1],
                        [15, -12, 1],
                        [15, -11, 1],
                        [15, -10, 1],
                        [15, -9, 1],
                        [15, -8, 1],
                        [15, -7, 1],
                        [15, -6, 1],
                        [15, -5, 1],
                        [15, -4, 1],
                        [15, -3, 1],
                        [15, -2, 1],
                        [15, -1, 1],
                        [15, 0, 1],
                        [15, 1, 1],
                        [15, 2, 1],
                        [15, 3, 1],
                        [15, 4, 1],
                        [15, 5, 1],
                        [15, 6, 1],
                        [15, 7, 1],
                        [15, 8, 1],
                        [15, 9, 1],
                        [15, 10, 1],
                        [15, 11, 1],
                        [15, 12, 1],
                        [15, 13, 1],
                        [15, 14, 1],
                        [15, 15, 1],
                        [16, -16, 1],
                        [16, -16, 2],
                        [16, -15, 1],
                        [16, -15, 2],
                        [16, -14, 1],
                        [16, -14, 2],
                        [16, -13, 1],
                        [16, -13, 2],
                        [16, -12, 1],
                        [16, -12, 2],
                        [16, -11, 1],
                        [16, -11, 2],
                        [16, -10, 1],
                        [16, -10, 2],
                        [16, -9, 1],
                        [16, -9, 2],
                        [16, -8, 1],
                        [16, -8, 2],
                        [16, -7, 1],
                        [16, -7, 2],
                        [16, -6, 1],
                        [16, -6, 2],
                        [16, -5, 1],
                        [16, -5, 2],
                        [16, -4, 1],
                        [16, -4, 2],
                        [16, -3, 1],
                        [16, -3, 2],
                        [16, -2, 1],
                        [16, -2, 2],
                        [16, -1, 1],
                        [16, -1, 2],
                        [16, 0, 1],
                        [16, 0, 2],
                        [16, 1, 1],
                        [16, 1, 2],
                        [16, 2, 1],
                        [16, 2, 2],
                        [16, 3, 1],
                        [16, 3, 2],
                        [16, 4, 1],
                        [16, 4, 2],
                        [16, 5, 1],
                        [16, 5, 2],
                        [16, 6, 1],
                        [16, 6, 2],
                        [16, 7, 1],
                        [16, 7, 2],
                        [16, 8, 1],
                        [16, 8, 2],
                        [16, 9, 1],
                        [16, 9, 2],
                        [16, 10, 1],
                        [16, 10, 2],
                        [16, 11, 1],
                        [16, 11, 2],
                        [16, 12, 1],
                        [16, 12, 2],
                        [16, 13, 1],
                        [16, 13, 2],
                        [16, 14, 1],
                        [16, 14, 2],
                        [16, 15, 1],
                        [16, 15, 2],
                        [16, 16, 1],
                        [16, 16, 2],
                        [17, -17, 1],
                        [17, -16, 1],
                        [17, -15, 1],
                        [17, -14, 1],
                        [17, -13, 1],
                        [17, -12, 1],
                        [17, -11, 1],
                        [17, -10, 1],
                        [17, -9, 1],
                        [17, -8, 1],
                        [17, -7, 1],
                        [17, -6, 1],
                        [17, -5, 1],
                        [17, -4, 1],
                        [17, -3, 1],
                        [17, -2, 1],
                        [17, -1, 1],
                        [17, 0, 1],
                        [17, 1, 1],
                        [17, 2, 1],
                        [17, 3, 1],
                        [17, 4, 1],
                        [17, 5, 1],
                        [17, 6, 1],
                        [17, 7, 1],
                        [17, 8, 1],
                        [17, 9, 1],
                        [17, 10, 1],
                        [17, 11, 1],
                        [17, 12, 1],
                        [17, 13, 1],
                        [17, 14, 1],
                        [17, 15, 1],
                        [17, 16, 1],
                        [17, 17, 1],
                        [18, -18, 1],
                        [18, -18, 2],
                        [18, -17, 1],
                        [18, -17, 2],
                        [18, -16, 1],
                        [18, -16, 2],
                        [18, -15, 1],
                        [18, -15, 2],
                        [18, -14, 1],
                        [18, -14, 2],
                        [18, -13, 1],
                        [18, -13, 2],
                        [18, -12, 1],
                        [18, -12, 2],
                        [18, -11, 1],
                        [18, -11, 2],
                        [18, -10, 1],
                        [18, -10, 2],
                        [18, -9, 1],
                        [18, -9, 2],
                        [18, -8, 1],
                        [18, -8, 2],
                        [18, -7, 1],
                        [18, -7, 2],
                        [18, -6, 1],
                        [18, -6, 2],
                        [18, -5, 1],
                        [18, -5, 2],
                        [18, -4, 1],
                        [18, -4, 2],
                        [18, -3, 1],
                        [18, -3, 2],
                        [18, -2, 1],
                        [18, -2, 2],
                        [18, -1, 1],
                        [18, -1, 2],
                        [18, 0, 1],
                        [18, 0, 2],
                        [18, 1, 1],
                        [18, 1, 2],
                        [18, 2, 1],
                        [18, 2, 2],
                        [18, 3, 1],
                        [18, 3, 2],
                        [18, 4, 1],
                        [18, 4, 2],
                        [18, 5, 1],
                        [18, 5, 2],
                        [18, 6, 1],
                        [18, 6, 2],
                        [18, 7, 1],
                        [18, 7, 2],
                        [18, 8, 1],
                        [18, 8, 2],
                        [18, 9, 1],
                        [18, 9, 2],
                        [18, 10, 1],
                        [18, 10, 2],
                        [18, 11, 1],
                        [18, 11, 2],
                        [18, 12, 1],
                        [18, 12, 2],
                        [18, 13, 1],
                        [18, 13, 2],
                        [18, 14, 1],
                        [18, 14, 2],
                        [18, 15, 1],
                        [18, 15, 2],
                        [18, 16, 1],
                        [18, 16, 2],
                        [18, 17, 1],
                        [18, 17, 2],
                        [18, 18, 1],
                        [18, 18, 2],
                        [19, -19, 1],
                        [19, -18, 1],
                        [19, -17, 1],
                        [19, -16, 1],
                        [19, -15, 1],
                        [19, -14, 1],
                        [19, -13, 1],
                        [19, -12, 1],
                        [19, -11, 1],
                        [19, -10, 1],
                        [19, -9, 1],
                        [19, -8, 1],
                        [19, -7, 1],
                        [19, -6, 1],
                        [19, -5, 1],
                        [19, -4, 1],
                        [19, -3, 1],
                        [19, -2, 1],
                        [19, -1, 1],
                        [19, 0, 1],
                        [19, 1, 1],
                        [19, 2, 1],
                        [19, 3, 1],
                        [19, 4, 1],
                        [19, 5, 1],
                        [19, 6, 1],
                        [19, 7, 1],
                        [19, 8, 1],
                        [19, 9, 1],
                        [19, 10, 1],
                        [19, 11, 1],
                        [19, 12, 1],
                        [19, 13, 1],
                        [19, 14, 1],
                        [19, 15, 1],
                        [19, 16, 1],
                        [19, 17, 1],
                        [19, 18, 1],
                        [19, 19, 1],
                        [20, -20, 1],
                        [20, -20, 2],
                        [20, -19, 1],
                        [20, -19, 2],
                        [20, -18, 1],
                        [20, -18, 2],
                        [20, -17, 1],
                        [20, -17, 2],
                        [20, -16, 1],
                        [20, -16, 2],
                        [20, -15, 1],
                        [20, -15, 2],
                        [20, -14, 1],
                        [20, -14, 2],
                        [20, -13, 1],
                        [20, -13, 2],
                        [20, -12, 1],
                        [20, -12, 2],
                        [20, -11, 1],
                        [20, -11, 2],
                        [20, -10, 1],
                        [20, -10, 2],
                        [20, -9, 1],
                        [20, -9, 2],
                        [20, -8, 1],
                        [20, -8, 2],
                        [20, -7, 1],
                        [20, -7, 2],
                        [20, -6, 1],
                        [20, -6, 2],
                        [20, -5, 1],
                        [20, -5, 2],
                        [20, -4, 1],
                        [20, -4, 2],
                        [20, -3, 1],
                        [20, -3, 2],
                        [20, -2, 1],
                        [20, -2, 2],
                        [20, -1, 1],
                        [20, -1, 2],
                        [20, 0, 1],
                        [20, 0, 2],
                        [20, 1, 1],
                        [20, 1, 2],
                        [20, 2, 1],
                        [20, 2, 2],
                        [20, 3, 1],
                        [20, 3, 2],
                        [20, 4, 1],
                        [20, 4, 2],
                        [20, 5, 1],
                        [20, 5, 2],
                        [20, 6, 1],
                        [20, 6, 2],
                        [20, 7, 1],
                        [20, 7, 2],
                        [20, 8, 1],
                        [20, 8, 2],
                        [20, 9, 1],
                        [20, 9, 2],
                        [20, 10, 1],
                        [20, 10, 2],
                        [20, 11, 1],
                        [20, 11, 2],
                        [20, 12, 1],
                        [20, 12, 2],
                        [20, 13, 1],
                        [20, 13, 2],
                        [20, 14, 1],
                        [20, 14, 2],
                        [20, 15, 1],
                        [20, 15, 2],
                        [20, 16, 1],
                        [20, 16, 2],
                        [20, 17, 1],
                        [20, 17, 2],
                        [20, 18, 1],
                        [20, 18, 2],
                        [20, 19, 1],
                        [20, 19, 2],
                        [20, 20, 1],
                        [20, 20, 2],
                        [21, -21, 1],
                        [21, -21, 2],
                        [21, -20, 1],
                        [21, -20, 2],
                        [21, -19, 1],
                        [21, -19, 2],
                        [21, -18, 1],
                        [21, -18, 2],
                        [21, -17, 1],
                        [21, -17, 2],
                        [21, -16, 1],
                        [21, -16, 2],
                        [21, -15, 1],
                        [21, -15, 2],
                        [21, -14, 1],
                        [21, -14, 2],
                        [21, -13, 1],
                        [21, -13, 2],
                        [21, -12, 1],
                        [21, -12, 2],
                        [21, -11, 1],
                        [21, -11, 2],
                        [21, -10, 1],
                        [21, -10, 2],
                        [21, -9, 1],
                        [21, -9, 2],
                        [21, -8, 1],
                        [21, -8, 2],
                        [21, -7, 1],
                        [21, -7, 2],
                        [21, -6, 1],
                        [21, -6, 2],
                        [21, -5, 1],
                        [21, -5, 2],
                        [21, -4, 1],
                        [21, -4, 2],
                        [21, -3, 1],
                        [21, -3, 2],
                        [21, -2, 1],
                        [21, -2, 2],
                        [21, -1, 1],
                        [21, -1, 2],
                        [21, 0, 1],
                        [21, 0, 2],
                        [21, 1, 1],
                        [21, 1, 2],
                        [21, 2, 1],
                        [21, 2, 2],
                        [21, 3, 1],
                        [21, 3, 2],
                        [21, 4, 1],
                        [21, 4, 2],
                        [21, 5, 1],
                        [21, 5, 2],
                        [21, 6, 1],
                        [21, 6, 2],
                        [21, 7, 1],
                        [21, 7, 2],
                        [21, 8, 1],
                        [21, 8, 2],
                        [21, 9, 1],
                        [21, 9, 2],
                        [21, 10, 1],
                        [21, 10, 2],
                        [21, 11, 1],
                        [21, 11, 2],
                        [21, 12, 1],
                        [21, 12, 2],
                        [21, 13, 1],
                        [21, 13, 2],
                        [21, 14, 1],
                        [21, 14, 2],
                        [21, 15, 1],
                        [21, 15, 2],
                        [21, 16, 1],
                        [21, 16, 2],
                        [21, 17, 1],
                        [21, 17, 2],
                        [21, 18, 1],
                        [21, 18, 2],
                        [21, 19, 1],
                        [21, 19, 2],
                        [21, 20, 1],
                        [21, 20, 2],
                        [21, 21, 1],
                        [21, 21, 2],
                        [22, -22, 1],
                        [22, -22, 2],
                        [22, -21, 1],
                        [22, -21, 2],
                        [22, -20, 1],
                        [22, -20, 2],
                        [22, -19, 1],
                        [22, -19, 2],
                        [22, -18, 1],
                        [22, -18, 2],
                        [22, -17, 1],
                        [22, -17, 2],
                        [22, -16, 1],
                        [22, -16, 2],
                        [22, -15, 1],
                        [22, -15, 2],
                        [22, -14, 1],
                        [22, -14, 2],
                        [22, -13, 1],
                        [22, -13, 2],
                        [22, -12, 1],
                        [22, -12, 2],
                        [22, -11, 1],
                        [22, -11, 2],
                        [22, -10, 1],
                        [22, -10, 2],
                        [22, -9, 1],
                        [22, -9, 2],
                        [22, -8, 1],
                        [22, -8, 2],
                        [22, -7, 1],
                        [22, -7, 2],
                        [22, -6, 1],
                        [22, -6, 2],
                        [22, -5, 1],
                        [22, -5, 2],
                        [22, -4, 1],
                        [22, -4, 2],
                        [22, -3, 1],
                        [22, -3, 2],
                        [22, -2, 1],
                        [22, -2, 2],
                        [22, -1, 1],
                        [22, -1, 2],
                        [22, 0, 1],
                        [22, 0, 2],
                        [22, 1, 1],
                        [22, 1, 2],
                        [22, 2, 1],
                        [22, 2, 2],
                        [22, 3, 1],
                        [22, 3, 2],
                        [22, 4, 1],
                        [22, 4, 2],
                        [22, 5, 1],
                        [22, 5, 2],
                        [22, 6, 1],
                        [22, 6, 2],
                        [22, 7, 1],
                        [22, 7, 2],
                        [22, 8, 1],
                        [22, 8, 2],
                        [22, 9, 1],
                        [22, 9, 2],
                        [22, 10, 1],
                        [22, 10, 2],
                        [22, 11, 1],
                        [22, 11, 2],
                        [22, 12, 1],
                        [22, 12, 2],
                        [22, 13, 1],
                        [22, 13, 2],
                        [22, 14, 1],
                        [22, 14, 2],
                        [22, 15, 1],
                        [22, 15, 2],
                        [22, 16, 1],
                        [22, 16, 2],
                        [22, 17, 1],
                        [22, 17, 2],
                        [22, 18, 1],
                        [22, 18, 2],
                        [22, 19, 1],
                        [22, 19, 2],
                        [22, 20, 1],
                        [22, 20, 2],
                        [22, 21, 1],
                        [22, 21, 2],
                        [22, 22, 1],
                        [22, 22, 2],
                        [23, -23, 1],
                        [23, -22, 1],
                        [23, -21, 1],
                        [23, -20, 1],
                        [23, -19, 1],
                        [23, -18, 1],
                        [23, -17, 1],
                        [23, -16, 1],
                        [23, -15, 1],
                        [23, -14, 1],
                        [23, -13, 1],
                        [23, -12, 1],
                        [23, -11, 1],
                        [23, -10, 1],
                        [23, -9, 1],
                        [23, -8, 1],
                        [23, -7, 1],
                        [23, -6, 1],
                        [23, -5, 1],
                        [23, -4, 1],
                        [23, -3, 1],
                        [23, -2, 1],
                        [23, -1, 1],
                        [23, 0, 1],
                        [23, 1, 1],
                        [23, 2, 1],
                        [23, 3, 1],
                        [23, 4, 1],
                        [23, 5, 1],
                        [23, 6, 1],
                        [23, 7, 1],
                        [23, 8, 1],
                        [23, 9, 1],
                        [23, 10, 1],
                        [23, 11, 1],
                        [23, 12, 1],
                        [23, 13, 1],
                        [23, 14, 1],
                        [23, 15, 1],
                        [23, 16, 1],
                        [23, 17, 1],
                        [23, 18, 1],
                        [23, 19, 1],
                        [23, 20, 1],
                        [23, 21, 1],
                        [23, 22, 1],
                        [23, 23, 1],
                        [24, -24, 1],
                        [24, -24, 2],
                        [24, -24, 3],
                        [24, -23, 1],
                        [24, -23, 2],
                        [24, -23, 3],
                        [24, -22, 1],
                        [24, -22, 2],
                        [24, -22, 3],
                        [24, -21, 1],
                        [24, -21, 2],
                        [24, -21, 3],
                        [24, -20, 1],
                        [24, -20, 2],
                        [24, -20, 3],
                        [24, -19, 1],
                        [24, -19, 2],
                        [24, -19, 3],
                        [24, -18, 1],
                        [24, -18, 2],
                        [24, -18, 3],
                        [24, -17, 1],
                        [24, -17, 2],
                        [24, -17, 3],
                        [24, -16, 1],
                        [24, -16, 2],
                        [24, -16, 3],
                        [24, -15, 1],
                        [24, -15, 2],
                        [24, -15, 3],
                        [24, -14, 1],
                        [24, -14, 2],
                        [24, -14, 3],
                        [24, -13, 1],
                        [24, -13, 2],
                        [24, -13, 3],
                        [24, -12, 1],
                        [24, -12, 2],
                        [24, -12, 3],
                        [24, -11, 1],
                        [24, -11, 2],
                        [24, -11, 3],
                        [24, -10, 1],
                        [24, -10, 2],
                        [24, -10, 3],
                        [24, -9, 1],
                        [24, -9, 2],
                        [24, -9, 3],
                        [24, -8, 1],
                        [24, -8, 2],
                        [24, -8, 3],
                        [24, -7, 1],
                        [24, -7, 2],
                        [24, -7, 3],
                        [24, -6, 1],
                        [24, -6, 2],
                        [24, -6, 3],
                        [24, -5, 1],
                        [24, -5, 2],
                        [24, -5, 3],
                        [24, -4, 1],
                        [24, -4, 2],
                        [24, -4, 3],
                        [24, -3, 1],
                        [24, -3, 2],
                        [24, -3, 3],
                        [24, -2, 1],
                        [24, -2, 2],
                        [24, -2, 3],
                        [24, -1, 1],
                        [24, -1, 2],
                        [24, -1, 3],
                        [24, 0, 1],
                        [24, 0, 2],
                        [24, 0, 3],
                        [24, 1, 1],
                        [24, 1, 2],
                        [24, 1, 3],
                        [24, 2, 1],
                        [24, 2, 2],
                        [24, 2, 3],
                        [24, 3, 1],
                        [24, 3, 2],
                        [24, 3, 3],
                        [24, 4, 1],
                        [24, 4, 2],
                        [24, 4, 3],
                        [24, 5, 1],
                        [24, 5, 2],
                        [24, 5, 3],
                        [24, 6, 1],
                        [24, 6, 2],
                        [24, 6, 3],
                        [24, 7, 1],
                        [24, 7, 2],
                        [24, 7, 3],
                        [24, 8, 1],
                        [24, 8, 2],
                        [24, 8, 3],
                        [24, 9, 1],
                        [24, 9, 2],
                        [24, 9, 3],
                        [24, 10, 1],
                        [24, 10, 2],
                        [24, 10, 3],
                        [24, 11, 1],
                        [24, 11, 2],
                        [24, 11, 3],
                        [24, 12, 1],
                        [24, 12, 2],
                        [24, 12, 3],
                        [24, 13, 1],
                        [24, 13, 2],
                        [24, 13, 3],
                        [24, 14, 1],
                        [24, 14, 2],
                        [24, 14, 3],
                        [24, 15, 1],
                        [24, 15, 2],
                        [24, 15, 3],
                        [24, 16, 1],
                        [24, 16, 2],
                        [24, 16, 3],
                        [24, 17, 1],
                        [24, 17, 2],
                        [24, 17, 3],
                        [24, 18, 1],
                        [24, 18, 2],
                        [24, 18, 3],
                        [24, 19, 1],
                        [24, 19, 2],
                        [24, 19, 3],
                        [24, 20, 1],
                        [24, 20, 2],
                        [24, 20, 3],
                        [24, 21, 1],
                        [24, 21, 2],
                        [24, 21, 3],
                        [24, 22, 1],
                        [24, 22, 2],
                        [24, 22, 3],
                        [24, 23, 1],
                        [24, 23, 2],
                        [24, 23, 3],
                        [24, 24, 1],
                        [24, 24, 2],
                        [24, 24, 3],
                        [25, -25, 1],
                        [25, -25, 2],
                        [25, -24, 1],
                        [25, -24, 2],
                        [25, -23, 1],
                        [25, -23, 2],
                        [25, -22, 1],
                        [25, -22, 2],
                        [25, -21, 1],
                        [25, -21, 2],
                        [25, -20, 1],
                        [25, -20, 2],
                        [25, -19, 1],
                        [25, -19, 2],
                        [25, -18, 1],
                        [25, -18, 2],
                        [25, -17, 1],
                        [25, -17, 2],
                        [25, -16, 1],
                        [25, -16, 2],
                        [25, -15, 1],
                        [25, -15, 2],
                        [25, -14, 1],
                        [25, -14, 2],
                        [25, -13, 1],
                        [25, -13, 2],
                        [25, -12, 1],
                        [25, -12, 2],
                        [25, -11, 1],
                        [25, -11, 2],
                        [25, -10, 1],
                        [25, -10, 2],
                        [25, -9, 1],
                        [25, -9, 2],
                        [25, -8, 1],
                        [25, -8, 2],
                        [25, -7, 1],
                        [25, -7, 2],
                        [25, -6, 1],
                        [25, -6, 2],
                        [25, -5, 1],
                        [25, -5, 2],
                        [25, -4, 1],
                        [25, -4, 2],
                        [25, -3, 1],
                        [25, -3, 2],
                        [25, -2, 1],
                        [25, -2, 2],
                        [25, -1, 1],
                        [25, -1, 2],
                        [25, 0, 1],
                        [25, 0, 2],
                        [25, 1, 1],
                        [25, 1, 2],
                        [25, 2, 1],
                        [25, 2, 2],
                        [25, 3, 1],
                        [25, 3, 2],
                        [25, 4, 1],
                        [25, 4, 2],
                        [25, 5, 1],
                        [25, 5, 2],
                        [25, 6, 1],
                        [25, 6, 2],
                        [25, 7, 1],
                        [25, 7, 2],
                        [25, 8, 1],
                        [25, 8, 2],
                        [25, 9, 1],
                        [25, 9, 2],
                        [25, 10, 1],
                        [25, 10, 2],
                        [25, 11, 1],
                        [25, 11, 2],
                        [25, 12, 1],
                        [25, 12, 2],
                        [25, 13, 1],
                        [25, 13, 2],
                        [25, 14, 1],
                        [25, 14, 2],
                        [25, 15, 1],
                        [25, 15, 2],
                        [25, 16, 1],
                        [25, 16, 2],
                        [25, 17, 1],
                        [25, 17, 2],
                        [25, 18, 1],
                        [25, 18, 2],
                        [25, 19, 1],
                        [25, 19, 2],
                        [25, 20, 1],
                        [25, 20, 2],
                        [25, 21, 1],
                        [25, 21, 2],
                        [25, 22, 1],
                        [25, 22, 2],
                        [25, 23, 1],
                        [25, 23, 2],
                        [25, 24, 1],
                        [25, 24, 2],
                        [25, 25, 1],
                        [25, 25, 2],
                        [26, -26, 1],
                        [26, -26, 2],
                        [26, -25, 1],
                        [26, -25, 2],
                        [26, -24, 1],
                        [26, -24, 2],
                        [26, -23, 1],
                        [26, -23, 2],
                        [26, -22, 1],
                        [26, -22, 2],
                        [26, -21, 1],
                        [26, -21, 2],
                        [26, -20, 1],
                        [26, -20, 2],
                        [26, -19, 1],
                        [26, -19, 2],
                        [26, -18, 1],
                        [26, -18, 2],
                        [26, -17, 1],
                        [26, -17, 2],
                        [26, -16, 1],
                        [26, -16, 2],
                        [26, -15, 1],
                        [26, -15, 2],
                        [26, -14, 1],
                        [26, -14, 2],
                        [26, -13, 1],
                        [26, -13, 2],
                        [26, -12, 1],
                        [26, -12, 2],
                        [26, -11, 1],
                        [26, -11, 2],
                        [26, -10, 1],
                        [26, -10, 2],
                        [26, -9, 1],
                        [26, -9, 2],
                        [26, -8, 1],
                        [26, -8, 2],
                        [26, -7, 1],
                        [26, -7, 2],
                        [26, -6, 1],
                        [26, -6, 2],
                        [26, -5, 1],
                        [26, -5, 2],
                        [26, -4, 1],
                        [26, -4, 2],
                        [26, -3, 1],
                        [26, -3, 2],
                        [26, -2, 1],
                        [26, -2, 2],
                        [26, -1, 1],
                        [26, -1, 2],
                        [26, 0, 1],
                        [26, 0, 2],
                        [26, 1, 1],
                        [26, 1, 2],
                        [26, 2, 1],
                        [26, 2, 2],
                        [26, 3, 1],
                        [26, 3, 2],
                        [26, 4, 1],
                        [26, 4, 2],
                        [26, 5, 1],
                        [26, 5, 2],
                        [26, 6, 1],
                        [26, 6, 2],
                        [26, 7, 1],
                        [26, 7, 2],
                        [26, 8, 1],
                        [26, 8, 2],
                        [26, 9, 1],
                        [26, 9, 2],
                        [26, 10, 1],
                        [26, 10, 2],
                        [26, 11, 1],
                        [26, 11, 2],
                        [26, 12, 1],
                        [26, 12, 2],
                        [26, 13, 1],
                        [26, 13, 2],
                        [26, 14, 1],
                        [26, 14, 2],
                        [26, 15, 1],
                        [26, 15, 2],
                        [26, 16, 1],
                        [26, 16, 2],
                        [26, 17, 1],
                        [26, 17, 2],
                        [26, 18, 1],
                        [26, 18, 2],
                        [26, 19, 1],
                        [26, 19, 2],
                        [26, 20, 1],
                        [26, 20, 2],
                        [26, 21, 1],
                        [26, 21, 2],
                        [26, 22, 1],
                        [26, 22, 2],
                        [26, 23, 1],
                        [26, 23, 2],
                        [26, 24, 1],
                        [26, 24, 2],
                        [26, 25, 1],
                        [26, 25, 2],
                        [26, 26, 1],
                        [26, 26, 2],
                        [27, -27, 1],
                        [27, -27, 2],
                        [27, -26, 1],
                        [27, -26, 2],
                        [27, -25, 1],
                        [27, -25, 2],
                        [27, -24, 1],
                        [27, -24, 2],
                        [27, -23, 1],
                        [27, -23, 2],
                        [27, -22, 1],
                        [27, -22, 2],
                        [27, -21, 1],
                        [27, -21, 2],
                        [27, -20, 1],
                        [27, -20, 2],
                        [27, -19, 1],
                        [27, -19, 2],
                        [27, -18, 1],
                        [27, -18, 2],
                        [27, -17, 1],
                        [27, -17, 2],
                        [27, -16, 1],
                        [27, -16, 2],
                        [27, -15, 1],
                        [27, -15, 2],
                        [27, -14, 1],
                        [27, -14, 2],
                        [27, -13, 1],
                        [27, -13, 2],
                        [27, -12, 1],
                        [27, -12, 2],
                        [27, -11, 1],
                        [27, -11, 2],
                        [27, -10, 1],
                        [27, -10, 2],
                        [27, -9, 1],
                        [27, -9, 2],
                        [27, -8, 1],
                        [27, -8, 2],
                        [27, -7, 1],
                        [27, -7, 2],
                        [27, -6, 1],
                        [27, -6, 2],
                        [27, -5, 1],
                        [27, -5, 2],
                        [27, -4, 1],
                        [27, -4, 2],
                        [27, -3, 1],
                        [27, -3, 2],
                        [27, -2, 1],
                        [27, -2, 2],
                        [27, -1, 1],
                        [27, -1, 2],
                        [27, 0, 1],
                        [27, 0, 2],
                        [27, 1, 1],
                        [27, 1, 2],
                        [27, 2, 1],
                        [27, 2, 2],
                        [27, 3, 1],
                        [27, 3, 2],
                        [27, 4, 1],
                        [27, 4, 2],
                        [27, 5, 1],
                        [27, 5, 2],
                        [27, 6, 1],
                        [27, 6, 2],
                        [27, 7, 1],
                        [27, 7, 2],
                        [27, 8, 1],
                        [27, 8, 2],
                        [27, 9, 1],
                        [27, 9, 2],
                        [27, 10, 1],
                        [27, 10, 2],
                        [27, 11, 1],
                        [27, 11, 2],
                        [27, 12, 1],
                        [27, 12, 2],
                        [27, 13, 1],
                        [27, 13, 2],
                        [27, 14, 1],
                        [27, 14, 2],
                        [27, 15, 1],
                        [27, 15, 2],
                        [27, 16, 1],
                        [27, 16, 2],
                        [27, 17, 1],
                        [27, 17, 2],
                        [27, 18, 1],
                        [27, 18, 2],
                        [27, 19, 1],
                        [27, 19, 2],
                        [27, 20, 1],
                        [27, 20, 2],
                        [27, 21, 1],
                        [27, 21, 2],
                        [27, 22, 1],
                        [27, 22, 2],
                        [27, 23, 1],
                        [27, 23, 2],
                        [27, 24, 1],
                        [27, 24, 2],
                        [27, 25, 1],
                        [27, 25, 2],
                        [27, 26, 1],
                        [27, 26, 2],
                        [27, 27, 1],
                        [27, 27, 2],
                        [28, -28, 1],
                        [28, -28, 2],
                        [28, -28, 3],
                        [28, -27, 1],
                        [28, -27, 2],
                        [28, -27, 3],
                        [28, -26, 1],
                        [28, -26, 2],
                        [28, -26, 3],
                        [28, -25, 1],
                        [28, -25, 2],
                        [28, -25, 3],
                        [28, -24, 1],
                        [28, -24, 2],
                        [28, -24, 3],
                        [28, -23, 1],
                        [28, -23, 2],
                        [28, -23, 3],
                        [28, -22, 1],
                        [28, -22, 2],
                        [28, -22, 3],
                        [28, -21, 1],
                        [28, -21, 2],
                        [28, -21, 3],
                        [28, -20, 1],
                        [28, -20, 2],
                        [28, -20, 3],
                        [28, -19, 1],
                        [28, -19, 2],
                        [28, -19, 3],
                        [28, -18, 1],
                        [28, -18, 2],
                        [28, -18, 3],
                        [28, -17, 1],
                        [28, -17, 2],
                        [28, -17, 3],
                        [28, -16, 1],
                        [28, -16, 2],
                        [28, -16, 3],
                        [28, -15, 1],
                        [28, -15, 2],
                        [28, -15, 3],
                        [28, -14, 1],
                        [28, -14, 2],
                        [28, -14, 3],
                        [28, -13, 1],
                        [28, -13, 2],
                        [28, -13, 3],
                        [28, -12, 1],
                        [28, -12, 2],
                        [28, -12, 3],
                        [28, -11, 1],
                        [28, -11, 2],
                        [28, -11, 3],
                        [28, -10, 1],
                        [28, -10, 2],
                        [28, -10, 3],
                        [28, -9, 1],
                        [28, -9, 2],
                        [28, -9, 3],
                        [28, -8, 1],
                        [28, -8, 2],
                        [28, -8, 3],
                        [28, -7, 1],
                        [28, -7, 2],
                        [28, -7, 3],
                        [28, -6, 1],
                        [28, -6, 2],
                        [28, -6, 3],
                        [28, -5, 1],
                        [28, -5, 2],
                        [28, -5, 3],
                        [28, -4, 1],
                        [28, -4, 2],
                        [28, -4, 3],
                        [28, -3, 1],
                        [28, -3, 2],
                        [28, -3, 3],
                        [28, -2, 1],
                        [28, -2, 2],
                        [28, -2, 3],
                        [28, -1, 1],
                        [28, -1, 2],
                        [28, -1, 3],
                        [28, 0, 1],
                        [28, 0, 2],
                        [28, 0, 3],
                        [28, 1, 1],
                        [28, 1, 2],
                        [28, 1, 3],
                        [28, 2, 1],
                        [28, 2, 2],
                        [28, 2, 3],
                        [28, 3, 1],
                        [28, 3, 2],
                        [28, 3, 3],
                        [28, 4, 1],
                        [28, 4, 2],
                        [28, 4, 3],
                        [28, 5, 1],
                        [28, 5, 2],
                        [28, 5, 3],
                        [28, 6, 1],
                        [28, 6, 2],
                        [28, 6, 3],
                        [28, 7, 1],
                        [28, 7, 2],
                        [28, 7, 3],
                        [28, 8, 1],
                        [28, 8, 2],
                        [28, 8, 3],
                        [28, 9, 1],
                        [28, 9, 2],
                        [28, 9, 3],
                        [28, 10, 1],
                        [28, 10, 2],
                        [28, 10, 3],
                        [28, 11, 1],
                        [28, 11, 2],
                        [28, 11, 3],
                        [28, 12, 1],
                        [28, 12, 2],
                        [28, 12, 3],
                        [28, 13, 1],
                        [28, 13, 2],
                        [28, 13, 3],
                        [28, 14, 1],
                        [28, 14, 2],
                        [28, 14, 3],
                        [28, 15, 1],
                        [28, 15, 2],
                        [28, 15, 3],
                        [28, 16, 1],
                        [28, 16, 2],
                        [28, 16, 3],
                        [28, 17, 1],
                        [28, 17, 2],
                        [28, 17, 3],
                        [28, 18, 1],
                        [28, 18, 2],
                        [28, 18, 3],
                        [28, 19, 1],
                        [28, 19, 2],
                        [28, 19, 3],
                        [28, 20, 1],
                        [28, 20, 2],
                        [28, 20, 3],
                        [28, 21, 1],
                        [28, 21, 2],
                        [28, 21, 3],
                        [28, 22, 1],
                        [28, 22, 2],
                        [28, 22, 3],
                        [28, 23, 1],
                        [28, 23, 2],
                        [28, 23, 3],
                        [28, 24, 1],
                        [28, 24, 2],
                        [28, 24, 3],
                        [28, 25, 1],
                        [28, 25, 2],
                        [28, 25, 3],
                        [28, 26, 1],
                        [28, 26, 2],
                        [28, 26, 3],
                        [28, 27, 1],
                        [28, 27, 2],
                        [28, 27, 3],
                        [28, 28, 1],
                        [28, 28, 2],
                        [28, 28, 3],
                        [29, -29, 1],
                        [29, -29, 2],
                        [29, -28, 1],
                        [29, -28, 2],
                        [29, -27, 1],
                        [29, -27, 2],
                        [29, -26, 1],
                        [29, -26, 2],
                        [29, -25, 1],
                        [29, -25, 2],
                        [29, -24, 1],
                        [29, -24, 2],
                        [29, -23, 1],
                        [29, -23, 2],
                        [29, -22, 1],
                        [29, -22, 2],
                        [29, -21, 1],
                        [29, -21, 2],
                        [29, -20, 1],
                        [29, -20, 2],
                        [29, -19, 1],
                        [29, -19, 2],
                        [29, -18, 1],
                        [29, -18, 2],
                        [29, -17, 1],
                        [29, -17, 2],
                        [29, -16, 1],
                        [29, -16, 2],
                        [29, -15, 1],
                        [29, -15, 2],
                        [29, -14, 1],
                        [29, -14, 2],
                        [29, -13, 1],
                        [29, -13, 2],
                        [29, -12, 1],
                        [29, -12, 2],
                        [29, -11, 1],
                        [29, -11, 2],
                        [29, -10, 1],
                        [29, -10, 2],
                        [29, -9, 1],
                        [29, -9, 2],
                        [29, -8, 1],
                        [29, -8, 2],
                        [29, -7, 1],
                        [29, -7, 2],
                        [29, -6, 1],
                        [29, -6, 2],
                        [29, -5, 1],
                        [29, -5, 2],
                        [29, -4, 1],
                        [29, -4, 2],
                        [29, -3, 1],
                        [29, -3, 2],
                        [29, -2, 1],
                        [29, -2, 2],
                        [29, -1, 1],
                        [29, -1, 2],
                        [29, 0, 1],
                        [29, 0, 2],
                        [29, 1, 1],
                        [29, 1, 2],
                        [29, 2, 1],
                        [29, 2, 2],
                        [29, 3, 1],
                        [29, 3, 2],
                        [29, 4, 1],
                        [29, 4, 2],
                        [29, 5, 1],
                        [29, 5, 2],
                        [29, 6, 1],
                        [29, 6, 2],
                        [29, 7, 1],
                        [29, 7, 2],
                        [29, 8, 1],
                        [29, 8, 2],
                        [29, 9, 1],
                        [29, 9, 2],
                        [29, 10, 1],
                        [29, 10, 2],
                        [29, 11, 1],
                        [29, 11, 2],
                        [29, 12, 1],
                        [29, 12, 2],
                        [29, 13, 1],
                        [29, 13, 2],
                        [29, 14, 1],
                        [29, 14, 2],
                        [29, 15, 1],
                        [29, 15, 2],
                        [29, 16, 1],
                        [29, 16, 2],
                        [29, 17, 1],
                        [29, 17, 2],
                        [29, 18, 1],
                        [29, 18, 2],
                        [29, 19, 1],
                        [29, 19, 2],
                        [29, 20, 1],
                        [29, 20, 2],
                        [29, 21, 1],
                        [29, 21, 2],
                        [29, 22, 1],
                        [29, 22, 2],
                        [29, 23, 1],
                        [29, 23, 2],
                        [29, 24, 1],
                        [29, 24, 2],
                        [29, 25, 1],
                        [29, 25, 2],
                        [29, 26, 1],
                        [29, 26, 2],
                        [29, 27, 1],
                        [29, 27, 2],
                        [29, 28, 1],
                        [29, 28, 2],
                        [29, 29, 1],
                        [29, 29, 2],
                        [30, -30, 1],
                        [30, -30, 2],
                        [30, -30, 3],
                        [30, -29, 1],
                        [30, -29, 2],
                        [30, -29, 3],
                        [30, -28, 1],
                        [30, -28, 2],
                        [30, -28, 3],
                        [30, -27, 1],
                        [30, -27, 2],
                        [30, -27, 3],
                        [30, -26, 1],
                        [30, -26, 2],
                        [30, -26, 3],
                        [30, -25, 1],
                        [30, -25, 2],
                        [30, -25, 3],
                        [30, -24, 1],
                        [30, -24, 2],
                        [30, -24, 3],
                        [30, -23, 1],
                        [30, -23, 2],
                        [30, -23, 3],
                        [30, -22, 1],
                        [30, -22, 2],
                        [30, -22, 3],
                        [30, -21, 1],
                        [30, -21, 2],
                        [30, -21, 3],
                        [30, -20, 1],
                        [30, -20, 2],
                        [30, -20, 3],
                        [30, -19, 1],
                        [30, -19, 2],
                        [30, -19, 3],
                        [30, -18, 1],
                        [30, -18, 2],
                        [30, -18, 3],
                        [30, -17, 1],
                        [30, -17, 2],
                        [30, -17, 3],
                        [30, -16, 1],
                        [30, -16, 2],
                        [30, -16, 3],
                        [30, -15, 1],
                        [30, -15, 2],
                        [30, -15, 3],
                        [30, -14, 1],
                        [30, -14, 2],
                        [30, -14, 3],
                        [30, -13, 1],
                        [30, -13, 2],
                        [30, -13, 3],
                        [30, -12, 1],
                        [30, -12, 2],
                        [30, -12, 3],
                        [30, -11, 1],
                        [30, -11, 2],
                        [30, -11, 3],
                        [30, -10, 1],
                        [30, -10, 2],
                        [30, -10, 3],
                        [30, -9, 1],
                        [30, -9, 2],
                        [30, -9, 3],
                        [30, -8, 1],
                        [30, -8, 2],
                        [30, -8, 3],
                        [30, -7, 1],
                        [30, -7, 2],
                        [30, -7, 3],
                        [30, -6, 1],
                        [30, -6, 2],
                        [30, -6, 3],
                        [30, -5, 1],
                        [30, -5, 2],
                        [30, -5, 3],
                        [30, -4, 1],
                        [30, -4, 2],
                        [30, -4, 3],
                        [30, -3, 1],
                        [30, -3, 2],
                        [30, -3, 3],
                        [30, -2, 1],
                        [30, -2, 2],
                        [30, -2, 3],
                        [30, -1, 1],
                        [30, -1, 2],
                        [30, -1, 3],
                        [30, 0, 1],
                        [30, 0, 2],
                        [30, 0, 3],
                        [30, 1, 1],
                        [30, 1, 2],
                        [30, 1, 3],
                        [30, 2, 1],
                        [30, 2, 2],
                        [30, 2, 3],
                        [30, 3, 1],
                        [30, 3, 2],
                        [30, 3, 3],
                        [30, 4, 1],
                        [30, 4, 2],
                        [30, 4, 3],
                        [30, 5, 1],
                        [30, 5, 2],
                        [30, 5, 3],
                        [30, 6, 1],
                        [30, 6, 2],
                        [30, 6, 3],
                        [30, 7, 1],
                        [30, 7, 2],
                        [30, 7, 3],
                        [30, 8, 1],
                        [30, 8, 2],
                        [30, 8, 3],
                        [30, 9, 1],
                        [30, 9, 2],
                        [30, 9, 3],
                        [30, 10, 1],
                        [30, 10, 2],
                        [30, 10, 3],
                        [30, 11, 1],
                        [30, 11, 2],
                        [30, 11, 3],
                        [30, 12, 1],
                        [30, 12, 2],
                        [30, 12, 3],
                        [30, 13, 1],
                        [30, 13, 2],
                        [30, 13, 3],
                        [30, 14, 1],
                        [30, 14, 2],
                        [30, 14, 3],
                        [30, 15, 1],
                        [30, 15, 2],
                        [30, 15, 3],
                        [30, 16, 1],
                        [30, 16, 2],
                        [30, 16, 3],
                        [30, 17, 1],
                        [30, 17, 2],
                        [30, 17, 3],
                        [30, 18, 1],
                        [30, 18, 2],
                        [30, 18, 3],
                        [30, 19, 1],
                        [30, 19, 2],
                        [30, 19, 3],
                        [30, 20, 1],
                        [30, 20, 2],
                        [30, 20, 3],
                        [30, 21, 1],
                        [30, 21, 2],
                        [30, 21, 3],
                        [30, 22, 1],
                        [30, 22, 2],
                        [30, 22, 3],
                        [30, 23, 1],
                        [30, 23, 2],
                        [30, 23, 3],
                        [30, 24, 1],
                        [30, 24, 2],
                        [30, 24, 3],
                        [30, 25, 1],
                        [30, 25, 2],
                        [30, 25, 3],
                        [30, 26, 1],
                        [30, 26, 2],
                        [30, 26, 3],
                        [30, 27, 1],
                        [30, 27, 2],
                        [30, 27, 3],
                        [30, 28, 1],
                        [30, 28, 2],
                        [30, 28, 3],
                        [30, 29, 1],
                        [30, 29, 2],
                        [30, 29, 3],
                        [30, 30, 1],
                        [30, 30, 2],
                        [30, 30, 3],
                        [31, -31, 1],
                        [31, -31, 2],
                        [31, -30, 1],
                        [31, -30, 2],
                        [31, -29, 1],
                        [31, -29, 2],
                        [31, -28, 1],
                        [31, -28, 2],
                        [31, -27, 1],
                        [31, -27, 2],
                        [31, -26, 1],
                        [31, -26, 2],
                        [31, -25, 1],
                        [31, -25, 2],
                        [31, -24, 1],
                        [31, -24, 2],
                        [31, -23, 1],
                        [31, -23, 2],
                        [31, -22, 1],
                        [31, -22, 2],
                        [31, -21, 1],
                        [31, -21, 2],
                        [31, -20, 1],
                        [31, -20, 2],
                        [31, -19, 1],
                        [31, -19, 2],
                        [31, -18, 1],
                        [31, -18, 2],
                        [31, -17, 1],
                        [31, -17, 2],
                        [31, -16, 1],
                        [31, -16, 2],
                        [31, -15, 1],
                        [31, -15, 2],
                        [31, -14, 1],
                        [31, -14, 2],
                        [31, -13, 1],
                        [31, -13, 2],
                        [31, -12, 1],
                        [31, -12, 2],
                        [31, -11, 1],
                        [31, -11, 2],
                        [31, -10, 1],
                        [31, -10, 2],
                        [31, -9, 1],
                        [31, -9, 2],
                        [31, -8, 1],
                        [31, -8, 2],
                        [31, -7, 1],
                        [31, -7, 2],
                        [31, -6, 1],
                        [31, -6, 2],
                        [31, -5, 1],
                        [31, -5, 2],
                        [31, -4, 1],
                        [31, -4, 2],
                        [31, -3, 1],
                        [31, -3, 2],
                        [31, -2, 1],
                        [31, -2, 2],
                        [31, -1, 1],
                        [31, -1, 2],
                        [31, 0, 1],
                        [31, 0, 2],
                        [31, 1, 1],
                        [31, 1, 2],
                        [31, 2, 1],
                        [31, 2, 2],
                        [31, 3, 1],
                        [31, 3, 2],
                        [31, 4, 1],
                        [31, 4, 2],
                        [31, 5, 1],
                        [31, 5, 2],
                        [31, 6, 1],
                        [31, 6, 2],
                        [31, 7, 1],
                        [31, 7, 2],
                        [31, 8, 1],
                        [31, 8, 2],
                        [31, 9, 1],
                        [31, 9, 2],
                        [31, 10, 1],
                        [31, 10, 2],
                        [31, 11, 1],
                        [31, 11, 2],
                        [31, 12, 1],
                        [31, 12, 2],
                        [31, 13, 1],
                        [31, 13, 2],
                        [31, 14, 1],
                        [31, 14, 2],
                        [31, 15, 1],
                        [31, 15, 2],
                        [31, 16, 1],
                        [31, 16, 2],
                        [31, 17, 1],
                        [31, 17, 2],
                        [31, 18, 1],
                        [31, 18, 2],
                        [31, 19, 1],
                        [31, 19, 2],
                        [31, 20, 1],
                        [31, 20, 2],
                        [31, 21, 1],
                        [31, 21, 2],
                        [31, 22, 1],
                        [31, 22, 2],
                        [31, 23, 1],
                        [31, 23, 2],
                        [31, 24, 1],
                        [31, 24, 2],
                        [31, 25, 1],
                        [31, 25, 2],
                        [31, 26, 1],
                        [31, 26, 2],
                        [31, 27, 1],
                        [31, 27, 2],
                        [31, 28, 1],
                        [31, 28, 2],
                        [31, 29, 1],
                        [31, 29, 2],
                        [31, 30, 1],
                        [31, 30, 2],
                        [31, 31, 1],
                        [31, 31, 2],
                        [32, -32, 1],
                        [32, -32, 2],
                        [32, -32, 3],
                        [32, -31, 1],
                        [32, -31, 2],
                        [32, -31, 3],
                        [32, -30, 1],
                        [32, -30, 2],
                        [32, -30, 3],
                        [32, -29, 1],
                        [32, -29, 2],
                        [32, -29, 3],
                        [32, -28, 1],
                        [32, -28, 2],
                        [32, -28, 3],
                        [32, -27, 1],
                        [32, -27, 2],
                        [32, -27, 3],
                        [32, -26, 1],
                        [32, -26, 2],
                        [32, -26, 3],
                        [32, -25, 1],
                        [32, -25, 2],
                        [32, -25, 3],
                        [32, -24, 1],
                        [32, -24, 2],
                        [32, -24, 3],
                        [32, -23, 1],
                        [32, -23, 2],
                        [32, -23, 3],
                        [32, -22, 1],
                        [32, -22, 2],
                        [32, -22, 3],
                        [32, -21, 1],
                        [32, -21, 2],
                        [32, -21, 3],
                        [32, -20, 1],
                        [32, -20, 2],
                        [32, -20, 3],
                        [32, -19, 1],
                        [32, -19, 2],
                        [32, -19, 3],
                        [32, -18, 1],
                        [32, -18, 2],
                        [32, -18, 3],
                        [32, -17, 1],
                        [32, -17, 2],
                        [32, -17, 3],
                        [32, -16, 1],
                        [32, -16, 2],
                        [32, -16, 3],
                        [32, -15, 1],
                        [32, -15, 2],
                        [32, -15, 3],
                        [32, -14, 1],
                        [32, -14, 2],
                        [32, -14, 3],
                        [32, -13, 1],
                        [32, -13, 2],
                        [32, -13, 3],
                        [32, -12, 1],
                        [32, -12, 2],
                        [32, -12, 3],
                        [32, -11, 1],
                        [32, -11, 2],
                        [32, -11, 3],
                        [32, -10, 1],
                        [32, -10, 2],
                        [32, -10, 3],
                        [32, -9, 1],
                        [32, -9, 2],
                        [32, -9, 3],
                        [32, -8, 1],
                        [32, -8, 2],
                        [32, -8, 3],
                        [32, -7, 1],
                        [32, -7, 2],
                        [32, -7, 3],
                        [32, -6, 1],
                        [32, -6, 2],
                        [32, -6, 3],
                        [32, -5, 1],
                        [32, -5, 2],
                        [32, -5, 3],
                        [32, -4, 1],
                        [32, -4, 2],
                        [32, -4, 3],
                        [32, -3, 1],
                        [32, -3, 2],
                        [32, -3, 3],
                        [32, -2, 1],
                        [32, -2, 2],
                        [32, -2, 3],
                        [32, -1, 1],
                        [32, -1, 2],
                        [32, -1, 3],
                        [32, 0, 1],
                        [32, 0, 2],
                        [32, 0, 3],
                        [32, 1, 1],
                        [32, 1, 2],
                        [32, 1, 3],
                        [32, 2, 1],
                        [32, 2, 2],
                        [32, 2, 3],
                        [32, 3, 1],
                        [32, 3, 2],
                        [32, 3, 3],
                        [32, 4, 1],
                        [32, 4, 2],
                        [32, 4, 3],
                        [32, 5, 1],
                        [32, 5, 2],
                        [32, 5, 3],
                        [32, 6, 1],
                        [32, 6, 2],
                        [32, 6, 3],
                        [32, 7, 1],
                        [32, 7, 2],
                        [32, 7, 3],
                        [32, 8, 1],
                        [32, 8, 2],
                        [32, 8, 3],
                        [32, 9, 1],
                        [32, 9, 2],
                        [32, 9, 3],
                        [32, 10, 1],
                        [32, 10, 2],
                        [32, 10, 3],
                        [32, 11, 1],
                        [32, 11, 2],
                        [32, 11, 3],
                        [32, 12, 1],
                        [32, 12, 2],
                        [32, 12, 3],
                        [32, 13, 1],
                        [32, 13, 2],
                        [32, 13, 3],
                        [32, 14, 1],
                        [32, 14, 2],
                        [32, 14, 3],
                        [32, 15, 1],
                        [32, 15, 2],
                        [32, 15, 3],
                        [32, 16, 1],
                        [32, 16, 2],
                        [32, 16, 3],
                        [32, 17, 1],
                        [32, 17, 2],
                        [32, 17, 3],
                        [32, 18, 1],
                        [32, 18, 2],
                        [32, 18, 3],
                        [32, 19, 1],
                        [32, 19, 2],
                        [32, 19, 3],
                        [32, 20, 1],
                        [32, 20, 2],
                        [32, 20, 3],
                        [32, 21, 1],
                        [32, 21, 2],
                        [32, 21, 3],
                        [32, 22, 1],
                        [32, 22, 2],
                        [32, 22, 3],
                        [32, 23, 1],
                        [32, 23, 2],
                        [32, 23, 3],
                        [32, 24, 1],
                        [32, 24, 2],
                        [32, 24, 3],
                        [32, 25, 1],
                        [32, 25, 2],
                        [32, 25, 3],
                        [32, 26, 1],
                        [32, 26, 2],
                        [32, 26, 3],
                        [32, 27, 1],
                        [32, 27, 2],
                        [32, 27, 3],
                        [32, 28, 1],
                        [32, 28, 2],
                        [32, 28, 3],
                        [32, 29, 1],
                        [32, 29, 2],
                        [32, 29, 3],
                        [32, 30, 1],
                        [32, 30, 2],
                        [32, 30, 3],
                        [32, 31, 1],
                        [32, 31, 2],
                        [32, 31, 3],
                        [32, 32, 1],
                        [32, 32, 2],
                        [32, 32, 3],
                        [33, -33, 1],
                        [33, -33, 2],
                        [33, -33, 3],
                        [33, -32, 1],
                        [33, -32, 2],
                        [33, -32, 3],
                        [33, -31, 1],
                        [33, -31, 2],
                        [33, -31, 3],
                        [33, -30, 1],
                        [33, -30, 2],
                        [33, -30, 3],
                        [33, -29, 1],
                        [33, -29, 2],
                        [33, -29, 3],
                        [33, -28, 1],
                        [33, -28, 2],
                        [33, -28, 3],
                        [33, -27, 1],
                        [33, -27, 2],
                        [33, -27, 3],
                        [33, -26, 1],
                        [33, -26, 2],
                        [33, -26, 3],
                        [33, -25, 1],
                        [33, -25, 2],
                        [33, -25, 3],
                        [33, -24, 1],
                        [33, -24, 2],
                        [33, -24, 3],
                        [33, -23, 1],
                        [33, -23, 2],
                        [33, -23, 3],
                        [33, -22, 1],
                        [33, -22, 2],
                        [33, -22, 3],
                        [33, -21, 1],
                        [33, -21, 2],
                        [33, -21, 3],
                        [33, -20, 1],
                        [33, -20, 2],
                        [33, -20, 3],
                        [33, -19, 1],
                        [33, -19, 2],
                        [33, -19, 3],
                        [33, -18, 1],
                        [33, -18, 2],
                        [33, -18, 3],
                        [33, -17, 1],
                        [33, -17, 2],
                        [33, -17, 3],
                        [33, -16, 1],
                        [33, -16, 2],
                        [33, -16, 3],
                        [33, -15, 1],
                        [33, -15, 2],
                        [33, -15, 3],
                        [33, -14, 1],
                        [33, -14, 2],
                        [33, -14, 3],
                        [33, -13, 1],
                        [33, -13, 2],
                        [33, -13, 3],
                        [33, -12, 1],
                        [33, -12, 2],
                        [33, -12, 3],
                        [33, -11, 1],
                        [33, -11, 2],
                        [33, -11, 3],
                        [33, -10, 1],
                        [33, -10, 2],
                        [33, -10, 3],
                        [33, -9, 1],
                        [33, -9, 2],
                        [33, -9, 3],
                        [33, -8, 1],
                        [33, -8, 2],
                        [33, -8, 3],
                        [33, -7, 1],
                        [33, -7, 2],
                        [33, -7, 3],
                        [33, -6, 1],
                        [33, -6, 2],
                        [33, -6, 3],
                        [33, -5, 1],
                        [33, -5, 2],
                        [33, -5, 3],
                        [33, -4, 1],
                        [33, -4, 2],
                        [33, -4, 3],
                        [33, -3, 1],
                        [33, -3, 2],
                        [33, -3, 3],
                        [33, -2, 1],
                        [33, -2, 2],
                        [33, -2, 3],
                        [33, -1, 1],
                        [33, -1, 2],
                        [33, -1, 3],
                        [33, 0, 1],
                        [33, 0, 2],
                        [33, 0, 3],
                        [33, 1, 1],
                        [33, 1, 2],
                        [33, 1, 3],
                        [33, 2, 1],
                        [33, 2, 2],
                        [33, 2, 3],
                        [33, 3, 1],
                        [33, 3, 2],
                        [33, 3, 3],
                        [33, 4, 1],
                        [33, 4, 2],
                        [33, 4, 3],
                        [33, 5, 1],
                        [33, 5, 2],
                        [33, 5, 3],
                        [33, 6, 1],
                        [33, 6, 2],
                        [33, 6, 3],
                        [33, 7, 1],
                        [33, 7, 2],
                        [33, 7, 3],
                        [33, 8, 1],
                        [33, 8, 2],
                        [33, 8, 3],
                        [33, 9, 1],
                        [33, 9, 2],
                        [33, 9, 3],
                        [33, 10, 1],
                        [33, 10, 2],
                        [33, 10, 3],
                        [33, 11, 1],
                        [33, 11, 2],
                        [33, 11, 3],
                        [33, 12, 1],
                        [33, 12, 2],
                        [33, 12, 3],
                        [33, 13, 1],
                        [33, 13, 2],
                        [33, 13, 3],
                        [33, 14, 1],
                        [33, 14, 2],
                        [33, 14, 3],
                        [33, 15, 1],
                        [33, 15, 2],
                        [33, 15, 3],
                        [33, 16, 1],
                        [33, 16, 2],
                        [33, 16, 3],
                        [33, 17, 1],
                        [33, 17, 2],
                        [33, 17, 3],
                        [33, 18, 1],
                        [33, 18, 2],
                        [33, 18, 3],
                        [33, 19, 1],
                        [33, 19, 2],
                        [33, 19, 3],
                        [33, 20, 1],
                        [33, 20, 2],
                        [33, 20, 3],
                        [33, 21, 1],
                        [33, 21, 2],
                        [33, 21, 3],
                        [33, 22, 1],
                        [33, 22, 2],
                        [33, 22, 3],
                        [33, 23, 1],
                        [33, 23, 2],
                        [33, 23, 3],
                        [33, 24, 1],
                        [33, 24, 2],
                        [33, 24, 3],
                        [33, 25, 1],
                        [33, 25, 2],
                        [33, 25, 3],
                        [33, 26, 1],
                        [33, 26, 2],
                        [33, 26, 3],
                        [33, 27, 1],
                        [33, 27, 2],
                        [33, 27, 3],
                        [33, 28, 1],
                        [33, 28, 2],
                        [33, 28, 3],
                        [33, 29, 1],
                        [33, 29, 2],
                        [33, 29, 3],
                        [33, 30, 1],
                        [33, 30, 2],
                        [33, 30, 3],
                        [33, 31, 1],
                        [33, 31, 2],
                        [33, 31, 3],
                        [33, 32, 1],
                        [33, 32, 2],
                        [33, 32, 3],
                        [33, 33, 1],
                        [33, 33, 2],
                        [33, 33, 3],
                        [34, -34, 1],
                        [34, -34, 2],
                        [34, -34, 3],
                        [34, -33, 1],
                        [34, -33, 2],
                        [34, -33, 3],
                        [34, -32, 1],
                        [34, -32, 2],
                        [34, -32, 3],
                        [34, -31, 1],
                        [34, -31, 2],
                        [34, -31, 3],
                        [34, -30, 1],
                        [34, -30, 2],
                        [34, -30, 3],
                        [34, -29, 1],
                        [34, -29, 2],
                        [34, -29, 3],
                        [34, -28, 1],
                        [34, -28, 2],
                        [34, -28, 3],
                        [34, -27, 1],
                        [34, -27, 2],
                        [34, -27, 3],
                        [34, -26, 1],
                        [34, -26, 2],
                        [34, -26, 3],
                        [34, -25, 1],
                        [34, -25, 2],
                        [34, -25, 3],
                        [34, -24, 1],
                        [34, -24, 2],
                        [34, -24, 3],
                        [34, -23, 1],
                        [34, -23, 2],
                        [34, -23, 3],
                        [34, -22, 1],
                        [34, -22, 2],
                        [34, -22, 3],
                        [34, -21, 1],
                        [34, -21, 2],
                        [34, -21, 3],
                        [34, -20, 1],
                        [34, -20, 2],
                        [34, -20, 3],
                        [34, -19, 1],
                        [34, -19, 2],
                        [34, -19, 3],
                        [34, -18, 1],
                        [34, -18, 2],
                        [34, -18, 3],
                        [34, -17, 1],
                        [34, -17, 2],
                        [34, -17, 3],
                        [34, -16, 1],
                        [34, -16, 2],
                        [34, -16, 3],
                        [34, -15, 1],
                        [34, -15, 2],
                        [34, -15, 3],
                        [34, -14, 1],
                        [34, -14, 2],
                        [34, -14, 3],
                        [34, -13, 1],
                        [34, -13, 2],
                        [34, -13, 3],
                        [34, -12, 1],
                        [34, -12, 2],
                        [34, -12, 3],
                        [34, -11, 1],
                        [34, -11, 2],
                        [34, -11, 3],
                        [34, -10, 1],
                        [34, -10, 2],
                        [34, -10, 3],
                        [34, -9, 1],
                        [34, -9, 2],
                        [34, -9, 3],
                        [34, -8, 1],
                        [34, -8, 2],
                        [34, -8, 3],
                        [34, -7, 1],
                        [34, -7, 2],
                        [34, -7, 3],
                        [34, -6, 1],
                        [34, -6, 2],
                        [34, -6, 3],
                        [34, -5, 1],
                        [34, -5, 2],
                        [34, -5, 3],
                        [34, -4, 1],
                        [34, -4, 2],
                        [34, -4, 3],
                        [34, -3, 1],
                        [34, -3, 2],
                        [34, -3, 3],
                        [34, -2, 1],
                        [34, -2, 2],
                        [34, -2, 3],
                        [34, -1, 1],
                        [34, -1, 2],
                        [34, -1, 3],
                        [34, 0, 1],
                        [34, 0, 2],
                        [34, 0, 3],
                        [34, 1, 1],
                        [34, 1, 2],
                        [34, 1, 3],
                        [34, 2, 1],
                        [34, 2, 2],
                        [34, 2, 3],
                        [34, 3, 1],
                        [34, 3, 2],
                        [34, 3, 3],
                        [34, 4, 1],
                        [34, 4, 2],
                        [34, 4, 3],
                        [34, 5, 1],
                        [34, 5, 2],
                        [34, 5, 3],
                        [34, 6, 1],
                        [34, 6, 2],
                        [34, 6, 3],
                        [34, 7, 1],
                        [34, 7, 2],
                        [34, 7, 3],
                        [34, 8, 1],
                        [34, 8, 2],
                        [34, 8, 3],
                        [34, 9, 1],
                        [34, 9, 2],
                        [34, 9, 3],
                        [34, 10, 1],
                        [34, 10, 2],
                        [34, 10, 3],
                        [34, 11, 1],
                        [34, 11, 2],
                        [34, 11, 3],
                        [34, 12, 1],
                        [34, 12, 2],
                        [34, 12, 3],
                        [34, 13, 1],
                        [34, 13, 2],
                        [34, 13, 3],
                        [34, 14, 1],
                        [34, 14, 2],
                        [34, 14, 3],
                        [34, 15, 1],
                        [34, 15, 2],
                        [34, 15, 3],
                        [34, 16, 1],
                        [34, 16, 2],
                        [34, 16, 3],
                        [34, 17, 1],
                        [34, 17, 2],
                        [34, 17, 3],
                        [34, 18, 1],
                        [34, 18, 2],
                        [34, 18, 3],
                        [34, 19, 1],
                        [34, 19, 2],
                        [34, 19, 3],
                        [34, 20, 1],
                        [34, 20, 2],
                        [34, 20, 3],
                        [34, 21, 1],
                        [34, 21, 2],
                        [34, 21, 3],
                        [34, 22, 1],
                        [34, 22, 2],
                        [34, 22, 3],
                        [34, 23, 1],
                        [34, 23, 2],
                        [34, 23, 3],
                        [34, 24, 1],
                        [34, 24, 2],
                        [34, 24, 3],
                        [34, 25, 1],
                        [34, 25, 2],
                        [34, 25, 3],
                        [34, 26, 1],
                        [34, 26, 2],
                        [34, 26, 3],
                        [34, 27, 1],
                        [34, 27, 2],
                        [34, 27, 3],
                        [34, 28, 1],
                        [34, 28, 2],
                        [34, 28, 3],
                        [34, 29, 1],
                        [34, 29, 2],
                        [34, 29, 3],
                        [34, 30, 1],
                        [34, 30, 2],
                        [34, 30, 3],
                        [34, 31, 1],
                        [34, 31, 2],
                        [34, 31, 3],
                        [34, 32, 1],
                        [34, 32, 2],
                        [34, 32, 3],
                        [34, 33, 1],
                        [34, 33, 2],
                        [34, 33, 3],
                        [34, 34, 1],
                        [34, 34, 2],
                        [34, 34, 3],
                        [35, -35, 1],
                        [35, -35, 2],
                        [35, -34, 1],
                        [35, -34, 2],
                        [35, -33, 1],
                        [35, -33, 2],
                        [35, -32, 1],
                        [35, -32, 2],
                        [35, -31, 1],
                        [35, -31, 2],
                        [35, -30, 1],
                        [35, -30, 2],
                        [35, -29, 1],
                        [35, -29, 2],
                        [35, -28, 1],
                        [35, -28, 2],
                        [35, -27, 1],
                        [35, -27, 2],
                        [35, -26, 1],
                        [35, -26, 2],
                        [35, -25, 1],
                        [35, -25, 2],
                        [35, -24, 1],
                        [35, -24, 2],
                        [35, -23, 1],
                        [35, -23, 2],
                        [35, -22, 1],
                        [35, -22, 2],
                        [35, -21, 1],
                        [35, -21, 2],
                        [35, -20, 1],
                        [35, -20, 2],
                        [35, -19, 1],
                        [35, -19, 2],
                        [35, -18, 1],
                        [35, -18, 2],
                        [35, -17, 1],
                        [35, -17, 2],
                        [35, -16, 1],
                        [35, -16, 2],
                        [35, -15, 1],
                        [35, -15, 2],
                        [35, -14, 1],
                        [35, -14, 2],
                        [35, -13, 1],
                        [35, -13, 2],
                        [35, -12, 1],
                        [35, -12, 2],
                        [35, -11, 1],
                        [35, -11, 2],
                        [35, -10, 1],
                        [35, -10, 2],
                        [35, -9, 1],
                        [35, -9, 2],
                        [35, -8, 1],
                        [35, -8, 2],
                        [35, -7, 1],
                        [35, -7, 2],
                        [35, -6, 1],
                        [35, -6, 2],
                        [35, -5, 1],
                        [35, -5, 2],
                        [35, -4, 1],
                        [35, -4, 2],
                        [35, -3, 1],
                        [35, -3, 2],
                        [35, -2, 1],
                        [35, -2, 2],
                        [35, -1, 1],
                        [35, -1, 2],
                        [35, 0, 1],
                        [35, 0, 2],
                        [35, 1, 1],
                        [35, 1, 2],
                        [35, 2, 1],
                        [35, 2, 2],
                        [35, 3, 1],
                        [35, 3, 2],
                        [35, 4, 1],
                        [35, 4, 2],
                        [35, 5, 1],
                        [35, 5, 2],
                        [35, 6, 1],
                        [35, 6, 2],
                        [35, 7, 1],
                        [35, 7, 2],
                        [35, 8, 1],
                        [35, 8, 2],
                        [35, 9, 1],
                        [35, 9, 2],
                        [35, 10, 1],
                        [35, 10, 2],
                        [35, 11, 1],
                        [35, 11, 2],
                        [35, 12, 1],
                        [35, 12, 2],
                        [35, 13, 1],
                        [35, 13, 2],
                        [35, 14, 1],
                        [35, 14, 2],
                        [35, 15, 1],
                        [35, 15, 2],
                        [35, 16, 1],
                        [35, 16, 2],
                        [35, 17, 1],
                        [35, 17, 2],
                        [35, 18, 1],
                        [35, 18, 2],
                        [35, 19, 1],
                        [35, 19, 2],
                        [35, 20, 1],
                        [35, 20, 2],
                        [35, 21, 1],
                        [35, 21, 2],
                        [35, 22, 1],
                        [35, 22, 2],
                        [35, 23, 1],
                        [35, 23, 2],
                        [35, 24, 1],
                        [35, 24, 2],
                        [35, 25, 1],
                        [35, 25, 2],
                        [35, 26, 1],
                        [35, 26, 2],
                        [35, 27, 1],
                        [35, 27, 2],
                        [35, 28, 1],
                        [35, 28, 2],
                        [35, 29, 1],
                        [35, 29, 2],
                        [35, 30, 1],
                        [35, 30, 2],
                        [35, 31, 1],
                        [35, 31, 2],
                        [35, 32, 1],
                        [35, 32, 2],
                        [35, 33, 1],
                        [35, 33, 2],
                        [35, 34, 1],
                        [35, 34, 2],
                        [35, 35, 1],
                        [35, 35, 2],
                        [36, -36, 1],
                        [36, -36, 2],
                        [36, -36, 3],
                        [36, -36, 4],
                        [36, -35, 1],
                        [36, -35, 2],
                        [36, -35, 3],
                        [36, -35, 4],
                        [36, -34, 1],
                        [36, -34, 2],
                        [36, -34, 3],
                        [36, -34, 4],
                        [36, -33, 1],
                        [36, -33, 2],
                        [36, -33, 3],
                        [36, -33, 4],
                        [36, -32, 1],
                        [36, -32, 2],
                        [36, -32, 3],
                        [36, -32, 4],
                        [36, -31, 1],
                        [36, -31, 2],
                        [36, -31, 3],
                        [36, -31, 4],
                        [36, -30, 1],
                        [36, -30, 2],
                        [36, -30, 3],
                        [36, -30, 4],
                        [36, -29, 1],
                        [36, -29, 2],
                        [36, -29, 3],
                        [36, -29, 4],
                        [36, -28, 1],
                        [36, -28, 2],
                        [36, -28, 3],
                        [36, -28, 4],
                        [36, -27, 1],
                        [36, -27, 2],
                        [36, -27, 3],
                        [36, -27, 4],
                        [36, -26, 1],
                        [36, -26, 2],
                        [36, -26, 3],
                        [36, -26, 4],
                        [36, -25, 1],
                        [36, -25, 2],
                        [36, -25, 3],
                        [36, -25, 4],
                        [36, -24, 1],
                        [36, -24, 2],
                        [36, -24, 3],
                        [36, -24, 4],
                        [36, -23, 1],
                        [36, -23, 2],
                        [36, -23, 3],
                        [36, -23, 4],
                        [36, -22, 1],
                        [36, -22, 2],
                        [36, -22, 3],
                        [36, -22, 4],
                        [36, -21, 1],
                        [36, -21, 2],
                        [36, -21, 3],
                        [36, -21, 4],
                        [36, -20, 1],
                        [36, -20, 2],
                        [36, -20, 3],
                        [36, -20, 4],
                        [36, -19, 1],
                        [36, -19, 2],
                        [36, -19, 3],
                        [36, -19, 4],
                        [36, -18, 1],
                        [36, -18, 2],
                        [36, -18, 3],
                        [36, -18, 4],
                        [36, -17, 1],
                        [36, -17, 2],
                        [36, -17, 3],
                        [36, -17, 4],
                        [36, -16, 1],
                        [36, -16, 2],
                        [36, -16, 3],
                        [36, -16, 4],
                        [36, -15, 1],
                        [36, -15, 2],
                        [36, -15, 3],
                        [36, -15, 4],
                        [36, -14, 1],
                        [36, -14, 2],
                        [36, -14, 3],
                        [36, -14, 4],
                        [36, -13, 1],
                        [36, -13, 2],
                        [36, -13, 3],
                        [36, -13, 4],
                        [36, -12, 1],
                        [36, -12, 2],
                        [36, -12, 3],
                        [36, -12, 4],
                        [36, -11, 1],
                        [36, -11, 2],
                        [36, -11, 3],
                        [36, -11, 4],
                        [36, -10, 1],
                        [36, -10, 2],
                        [36, -10, 3],
                        [36, -10, 4],
                        [36, -9, 1],
                        [36, -9, 2],
                        [36, -9, 3],
                        [36, -9, 4],
                        [36, -8, 1],
                        [36, -8, 2],
                        [36, -8, 3],
                        [36, -8, 4],
                        [36, -7, 1],
                        [36, -7, 2],
                        [36, -7, 3],
                        [36, -7, 4],
                        [36, -6, 1],
                        [36, -6, 2],
                        [36, -6, 3],
                        [36, -6, 4],
                        [36, -5, 1],
                        [36, -5, 2],
                        [36, -5, 3],
                        [36, -5, 4],
                        [36, -4, 1],
                        [36, -4, 2],
                        [36, -4, 3],
                        [36, -4, 4],
                        [36, -3, 1],
                        [36, -3, 2],
                        [36, -3, 3],
                        [36, -3, 4],
                        [36, -2, 1],
                        [36, -2, 2],
                        [36, -2, 3],
                        [36, -2, 4],
                        [36, -1, 1],
                        [36, -1, 2],
                        [36, -1, 3],
                        [36, -1, 4],
                        [36, 0, 1],
                        [36, 0, 2],
                        [36, 0, 3],
                        [36, 0, 4],
                        [36, 1, 1],
                        [36, 1, 2],
                        [36, 1, 3],
                        [36, 1, 4],
                        [36, 2, 1],
                        [36, 2, 2],
                        [36, 2, 3],
                        [36, 2, 4],
                        [36, 3, 1],
                        [36, 3, 2],
                        [36, 3, 3],
                        [36, 3, 4],
                        [36, 4, 1],
                        [36, 4, 2],
                        [36, 4, 3],
                        [36, 4, 4],
                        [36, 5, 1],
                        [36, 5, 2],
                        [36, 5, 3],
                        [36, 5, 4],
                        [36, 6, 1],
                        [36, 6, 2],
                        [36, 6, 3],
                        [36, 6, 4],
                        [36, 7, 1],
                        [36, 7, 2],
                        [36, 7, 3],
                        [36, 7, 4],
                        [36, 8, 1],
                        [36, 8, 2],
                        [36, 8, 3],
                        [36, 8, 4],
                        [36, 9, 1],
                        [36, 9, 2],
                        [36, 9, 3],
                        [36, 9, 4],
                        [36, 10, 1],
                        [36, 10, 2],
                        [36, 10, 3],
                        [36, 10, 4],
                        [36, 11, 1],
                        [36, 11, 2],
                        [36, 11, 3],
                        [36, 11, 4],
                        [36, 12, 1],
                        [36, 12, 2],
                        [36, 12, 3],
                        [36, 12, 4],
                        [36, 13, 1],
                        [36, 13, 2],
                        [36, 13, 3],
                        [36, 13, 4],
                        [36, 14, 1],
                        [36, 14, 2],
                        [36, 14, 3],
                        [36, 14, 4],
                        [36, 15, 1],
                        [36, 15, 2],
                        [36, 15, 3],
                        [36, 15, 4],
                        [36, 16, 1],
                        [36, 16, 2],
                        [36, 16, 3],
                        [36, 16, 4],
                        [36, 17, 1],
                        [36, 17, 2],
                        [36, 17, 3],
                        [36, 17, 4],
                        [36, 18, 1],
                        [36, 18, 2],
                        [36, 18, 3],
                        [36, 18, 4],
                        [36, 19, 1],
                        [36, 19, 2],
                        [36, 19, 3],
                        [36, 19, 4],
                        [36, 20, 1],
                        [36, 20, 2],
                        [36, 20, 3],
                        [36, 20, 4],
                        [36, 21, 1],
                        [36, 21, 2],
                        [36, 21, 3],
                        [36, 21, 4],
                        [36, 22, 1],
                        [36, 22, 2],
                        [36, 22, 3],
                        [36, 22, 4],
                        [36, 23, 1],
                        [36, 23, 2],
                        [36, 23, 3],
                        [36, 23, 4],
                        [36, 24, 1],
                        [36, 24, 2],
                        [36, 24, 3],
                        [36, 24, 4],
                        [36, 25, 1],
                        [36, 25, 2],
                        [36, 25, 3],
                        [36, 25, 4],
                        [36, 26, 1],
                        [36, 26, 2],
                        [36, 26, 3],
                        [36, 26, 4],
                        [36, 27, 1],
                        [36, 27, 2],
                        [36, 27, 3],
                        [36, 27, 4],
                        [36, 28, 1],
                        [36, 28, 2],
                        [36, 28, 3],
                        [36, 28, 4],
                        [36, 29, 1],
                        [36, 29, 2],
                        [36, 29, 3],
                        [36, 29, 4],
                        [36, 30, 1],
                        [36, 30, 2],
                        [36, 30, 3],
                        [36, 30, 4],
                        [36, 31, 1],
                        [36, 31, 2],
                        [36, 31, 3],
                        [36, 31, 4],
                        [36, 32, 1],
                        [36, 32, 2],
                        [36, 32, 3],
                        [36, 32, 4],
                        [36, 33, 1],
                        [36, 33, 2],
                        [36, 33, 3],
                        [36, 33, 4],
                        [36, 34, 1],
                        [36, 34, 2],
                        [36, 34, 3],
                        [36, 34, 4],
                        [36, 35, 1],
                        [36, 35, 2],
                        [36, 35, 3],
                        [36, 35, 4],
                        [36, 36, 1],
                        [36, 36, 2],
                        [36, 36, 3],
                        [36, 36, 4],
                        [37, -37, 1],
                        [37, -37, 2],
                        [37, -37, 3],
                        [37, -36, 1],
                        [37, -36, 2],
                        [37, -36, 3],
                        [37, -35, 1],
                        [37, -35, 2],
                        [37, -35, 3],
                        [37, -34, 1],
                        [37, -34, 2],
                        [37, -34, 3],
                        [37, -33, 1],
                        [37, -33, 2],
                        [37, -33, 3],
                        [37, -32, 1],
                        [37, -32, 2],
                        [37, -32, 3],
                        [37, -31, 1],
                        [37, -31, 2],
                        [37, -31, 3],
                        [37, -30, 1],
                        [37, -30, 2],
                        [37, -30, 3],
                        [37, -29, 1],
                        [37, -29, 2],
                        [37, -29, 3],
                        [37, -28, 1],
                        [37, -28, 2],
                        [37, -28, 3],
                        [37, -27, 1],
                        [37, -27, 2],
                        [37, -27, 3],
                        [37, -26, 1],
                        [37, -26, 2],
                        [37, -26, 3],
                        [37, -25, 1],
                        [37, -25, 2],
                        [37, -25, 3],
                        [37, -24, 1],
                        [37, -24, 2],
                        [37, -24, 3],
                        [37, -23, 1],
                        [37, -23, 2],
                        [37, -23, 3],
                        [37, -22, 1],
                        [37, -22, 2],
                        [37, -22, 3],
                        [37, -21, 1],
                        [37, -21, 2],
                        [37, -21, 3],
                        [37, -20, 1],
                        [37, -20, 2],
                        [37, -20, 3],
                        [37, -19, 1],
                        [37, -19, 2],
                        [37, -19, 3],
                        [37, -18, 1],
                        [37, -18, 2],
                        [37, -18, 3],
                        [37, -17, 1],
                        [37, -17, 2],
                        [37, -17, 3],
                        [37, -16, 1],
                        [37, -16, 2],
                        [37, -16, 3],
                        [37, -15, 1],
                        [37, -15, 2],
                        [37, -15, 3],
                        [37, -14, 1],
                        [37, -14, 2],
                        [37, -14, 3],
                        [37, -13, 1],
                        [37, -13, 2],
                        [37, -13, 3],
                        [37, -12, 1],
                        [37, -12, 2],
                        [37, -12, 3],
                        [37, -11, 1],
                        [37, -11, 2],
                        [37, -11, 3],
                        [37, -10, 1],
                        [37, -10, 2],
                        [37, -10, 3],
                        [37, -9, 1],
                        [37, -9, 2],
                        [37, -9, 3],
                        [37, -8, 1],
                        [37, -8, 2],
                        [37, -8, 3],
                        [37, -7, 1],
                        [37, -7, 2],
                        [37, -7, 3],
                        [37, -6, 1],
                        [37, -6, 2],
                        [37, -6, 3],
                        [37, -5, 1],
                        [37, -5, 2],
                        [37, -5, 3],
                        [37, -4, 1],
                        [37, -4, 2],
                        [37, -4, 3],
                        [37, -3, 1],
                        [37, -3, 2],
                        [37, -3, 3],
                        [37, -2, 1],
                        [37, -2, 2],
                        [37, -2, 3],
                        [37, -1, 1],
                        [37, -1, 2],
                        [37, -1, 3],
                        [37, 0, 1],
                        [37, 0, 2],
                        [37, 0, 3],
                        [37, 1, 1],
                        [37, 1, 2],
                        [37, 1, 3],
                        [37, 2, 1],
                        [37, 2, 2],
                        [37, 2, 3],
                        [37, 3, 1],
                        [37, 3, 2],
                        [37, 3, 3],
                        [37, 4, 1],
                        [37, 4, 2],
                        [37, 4, 3],
                        [37, 5, 1],
                        [37, 5, 2],
                        [37, 5, 3],
                        [37, 6, 1],
                        [37, 6, 2],
                        [37, 6, 3],
                        [37, 7, 1],
                        [37, 7, 2],
                        [37, 7, 3],
                        [37, 8, 1],
                        [37, 8, 2],
                        [37, 8, 3],
                        [37, 9, 1],
                        [37, 9, 2],
                        [37, 9, 3],
                        [37, 10, 1],
                        [37, 10, 2],
                        [37, 10, 3],
                        [37, 11, 1],
                        [37, 11, 2],
                        [37, 11, 3],
                        [37, 12, 1],
                        [37, 12, 2],
                        [37, 12, 3],
                        [37, 13, 1],
                        [37, 13, 2],
                        [37, 13, 3],
                        [37, 14, 1],
                        [37, 14, 2],
                        [37, 14, 3],
                        [37, 15, 1],
                        [37, 15, 2],
                        [37, 15, 3],
                        [37, 16, 1],
                        [37, 16, 2],
                        [37, 16, 3],
                        [37, 17, 1],
                        [37, 17, 2],
                        [37, 17, 3],
                        [37, 18, 1],
                        [37, 18, 2],
                        [37, 18, 3],
                        [37, 19, 1],
                        [37, 19, 2],
                        [37, 19, 3],
                        [37, 20, 1],
                        [37, 20, 2],
                        [37, 20, 3],
                        [37, 21, 1],
                        [37, 21, 2],
                        [37, 21, 3],
                        [37, 22, 1],
                        [37, 22, 2],
                        [37, 22, 3],
                        [37, 23, 1],
                        [37, 23, 2],
                        [37, 23, 3],
                        [37, 24, 1],
                        [37, 24, 2],
                        [37, 24, 3],
                        [37, 25, 1],
                        [37, 25, 2],
                        [37, 25, 3],
                        [37, 26, 1],
                        [37, 26, 2],
                        [37, 26, 3],
                        [37, 27, 1],
                        [37, 27, 2],
                        [37, 27, 3],
                        [37, 28, 1],
                        [37, 28, 2],
                        [37, 28, 3],
                        [37, 29, 1],
                        [37, 29, 2],
                        [37, 29, 3],
                        [37, 30, 1],
                        [37, 30, 2],
                        [37, 30, 3],
                        [37, 31, 1],
                        [37, 31, 2],
                        [37, 31, 3],
                        [37, 32, 1],
                        [37, 32, 2],
                        [37, 32, 3],
                        [37, 33, 1],
                        [37, 33, 2],
                        [37, 33, 3],
                        [37, 34, 1],
                        [37, 34, 2],
                        [37, 34, 3],
                        [37, 35, 1],
                        [37, 35, 2],
                        [37, 35, 3],
                        [37, 36, 1],
                        [37, 36, 2],
                        [37, 36, 3],
                        [37, 37, 1],
                        [37, 37, 2],
                        [37, 37, 3],
                        [38, -38, 1],
                        [38, -38, 2],
                        [38, -38, 3],
                        [38, -37, 1],
                        [38, -37, 2],
                        [38, -37, 3],
                        [38, -36, 1],
                        [38, -36, 2],
                        [38, -36, 3],
                        [38, -35, 1],
                        [38, -35, 2],
                        [38, -35, 3],
                        [38, -34, 1],
                        [38, -34, 2],
                        [38, -34, 3],
                        [38, -33, 1],
                        [38, -33, 2],
                        [38, -33, 3],
                        [38, -32, 1],
                        [38, -32, 2],
                        [38, -32, 3],
                        [38, -31, 1],
                        [38, -31, 2],
                        [38, -31, 3],
                        [38, -30, 1],
                        [38, -30, 2],
                        [38, -30, 3],
                        [38, -29, 1],
                        [38, -29, 2],
                        [38, -29, 3],
                        [38, -28, 1],
                        [38, -28, 2],
                        [38, -28, 3],
                        [38, -27, 1],
                        [38, -27, 2],
                        [38, -27, 3],
                        [38, -26, 1],
                        [38, -26, 2],
                        [38, -26, 3],
                        [38, -25, 1],
                        [38, -25, 2],
                        [38, -25, 3],
                        [38, -24, 1],
                        [38, -24, 2],
                        [38, -24, 3],
                        [38, -23, 1],
                        [38, -23, 2],
                        [38, -23, 3],
                        [38, -22, 1],
                        [38, -22, 2],
                        [38, -22, 3],
                        [38, -21, 1],
                        [38, -21, 2],
                        [38, -21, 3],
                        [38, -20, 1],
                        [38, -20, 2],
                        [38, -20, 3],
                        [38, -19, 1],
                        [38, -19, 2],
                        [38, -19, 3],
                        [38, -18, 1],
                        [38, -18, 2],
                        [38, -18, 3],
                        [38, -17, 1],
                        [38, -17, 2],
                        [38, -17, 3],
                        [38, -16, 1],
                        [38, -16, 2],
                        [38, -16, 3],
                        [38, -15, 1],
                        [38, -15, 2],
                        [38, -15, 3],
                        [38, -14, 1],
                        [38, -14, 2],
                        [38, -14, 3],
                        [38, -13, 1],
                        [38, -13, 2],
                        [38, -13, 3],
                        [38, -12, 1],
                        [38, -12, 2],
                        [38, -12, 3],
                        [38, -11, 1],
                        [38, -11, 2],
                        [38, -11, 3],
                        [38, -10, 1],
                        [38, -10, 2],
                        [38, -10, 3],
                        [38, -9, 1],
                        [38, -9, 2],
                        [38, -9, 3],
                        [38, -8, 1],
                        [38, -8, 2],
                        [38, -8, 3],
                        [38, -7, 1],
                        [38, -7, 2],
                        [38, -7, 3],
                        [38, -6, 1],
                        [38, -6, 2],
                        [38, -6, 3],
                        [38, -5, 1],
                        [38, -5, 2],
                        [38, -5, 3],
                        [38, -4, 1],
                        [38, -4, 2],
                        [38, -4, 3],
                        [38, -3, 1],
                        [38, -3, 2],
                        [38, -3, 3],
                        [38, -2, 1],
                        [38, -2, 2],
                        [38, -2, 3],
                        [38, -1, 1],
                        [38, -1, 2],
                        [38, -1, 3],
                        [38, 0, 1],
                        [38, 0, 2],
                        [38, 0, 3],
                        [38, 1, 1],
                        [38, 1, 2],
                        [38, 1, 3],
                        [38, 2, 1],
                        [38, 2, 2],
                        [38, 2, 3],
                        [38, 3, 1],
                        [38, 3, 2],
                        [38, 3, 3],
                        [38, 4, 1],
                        [38, 4, 2],
                        [38, 4, 3],
                        [38, 5, 1],
                        [38, 5, 2],
                        [38, 5, 3],
                        [38, 6, 1],
                        [38, 6, 2],
                        [38, 6, 3],
                        [38, 7, 1],
                        [38, 7, 2],
                        [38, 7, 3],
                        [38, 8, 1],
                        [38, 8, 2],
                        [38, 8, 3],
                        [38, 9, 1],
                        [38, 9, 2],
                        [38, 9, 3],
                        [38, 10, 1],
                        [38, 10, 2],
                        [38, 10, 3],
                        [38, 11, 1],
                        [38, 11, 2],
                        [38, 11, 3],
                        [38, 12, 1],
                        [38, 12, 2],
                        [38, 12, 3],
                        [38, 13, 1],
                        [38, 13, 2],
                        [38, 13, 3],
                        [38, 14, 1],
                        [38, 14, 2],
                        [38, 14, 3],
                        [38, 15, 1],
                        [38, 15, 2],
                        [38, 15, 3],
                        [38, 16, 1],
                        [38, 16, 2],
                        [38, 16, 3],
                        [38, 17, 1],
                        [38, 17, 2],
                        [38, 17, 3],
                        [38, 18, 1],
                        [38, 18, 2],
                        [38, 18, 3],
                        [38, 19, 1],
                        [38, 19, 2],
                        [38, 19, 3],
                        [38, 20, 1],
                        [38, 20, 2],
                        [38, 20, 3],
                        [38, 21, 1],
                        [38, 21, 2],
                        [38, 21, 3],
                        [38, 22, 1],
                        [38, 22, 2],
                        [38, 22, 3],
                        [38, 23, 1],
                        [38, 23, 2],
                        [38, 23, 3],
                        [38, 24, 1],
                        [38, 24, 2],
                        [38, 24, 3],
                        [38, 25, 1],
                        [38, 25, 2],
                        [38, 25, 3],
                        [38, 26, 1],
                        [38, 26, 2],
                        [38, 26, 3],
                        [38, 27, 1],
                        [38, 27, 2],
                        [38, 27, 3],
                        [38, 28, 1],
                        [38, 28, 2],
                        [38, 28, 3],
                        [38, 29, 1],
                        [38, 29, 2],
                        [38, 29, 3],
                        [38, 30, 1],
                        [38, 30, 2],
                        [38, 30, 3],
                        [38, 31, 1],
                        [38, 31, 2],
                        [38, 31, 3],
                        [38, 32, 1],
                        [38, 32, 2],
                        [38, 32, 3],
                        [38, 33, 1],
                        [38, 33, 2],
                        [38, 33, 3],
                        [38, 34, 1],
                        [38, 34, 2],
                        [38, 34, 3],
                        [38, 35, 1],
                        [38, 35, 2],
                        [38, 35, 3],
                        [38, 36, 1],
                        [38, 36, 2],
                        [38, 36, 3],
                        [38, 37, 1],
                        [38, 37, 2],
                        [38, 37, 3],
                        [38, 38, 1],
                        [38, 38, 2],
                        [38, 38, 3],
                        [39, -39, 1],
                        [39, -39, 2],
                        [39, -39, 3],
                        [39, -38, 1],
                        [39, -38, 2],
                        [39, -38, 3],
                        [39, -37, 1],
                        [39, -37, 2],
                        [39, -37, 3],
                        [39, -36, 1],
                        [39, -36, 2],
                        [39, -36, 3],
                        [39, -35, 1],
                        [39, -35, 2],
                        [39, -35, 3],
                        [39, -34, 1],
                        [39, -34, 2],
                        [39, -34, 3],
                        [39, -33, 1],
                        [39, -33, 2],
                        [39, -33, 3],
                        [39, -32, 1],
                        [39, -32, 2],
                        [39, -32, 3],
                        [39, -31, 1],
                        [39, -31, 2],
                        [39, -31, 3],
                        [39, -30, 1],
                        [39, -30, 2],
                        [39, -30, 3],
                        [39, -29, 1],
                        [39, -29, 2],
                        [39, -29, 3],
                        [39, -28, 1],
                        [39, -28, 2],
                        [39, -28, 3],
                        [39, -27, 1],
                        [39, -27, 2],
                        [39, -27, 3],
                        [39, -26, 1],
                        [39, -26, 2],
                        [39, -26, 3],
                        [39, -25, 1],
                        [39, -25, 2],
                        [39, -25, 3],
                        [39, -24, 1],
                        [39, -24, 2],
                        [39, -24, 3],
                        [39, -23, 1],
                        [39, -23, 2],
                        [39, -23, 3],
                        [39, -22, 1],
                        [39, -22, 2],
                        [39, -22, 3],
                        [39, -21, 1],
                        [39, -21, 2],
                        [39, -21, 3],
                        [39, -20, 1],
                        [39, -20, 2],
                        [39, -20, 3],
                        [39, -19, 1],
                        [39, -19, 2],
                        [39, -19, 3],
                        [39, -18, 1],
                        [39, -18, 2],
                        [39, -18, 3],
                        [39, -17, 1],
                        [39, -17, 2],
                        [39, -17, 3],
                        [39, -16, 1],
                        [39, -16, 2],
                        [39, -16, 3],
                        [39, -15, 1],
                        [39, -15, 2],
                        [39, -15, 3],
                        [39, -14, 1],
                        [39, -14, 2],
                        [39, -14, 3],
                        [39, -13, 1],
                        [39, -13, 2],
                        [39, -13, 3],
                        [39, -12, 1],
                        [39, -12, 2],
                        [39, -12, 3],
                        [39, -11, 1],
                        [39, -11, 2],
                        [39, -11, 3],
                        [39, -10, 1],
                        [39, -10, 2],
                        [39, -10, 3],
                        [39, -9, 1],
                        [39, -9, 2],
                        [39, -9, 3],
                        [39, -8, 1],
                        [39, -8, 2],
                        [39, -8, 3],
                        [39, -7, 1],
                        [39, -7, 2],
                        [39, -7, 3],
                        [39, -6, 1],
                        [39, -6, 2],
                        [39, -6, 3],
                        [39, -5, 1],
                        [39, -5, 2],
                        [39, -5, 3],
                        [39, -4, 1],
                        [39, -4, 2],
                        [39, -4, 3],
                        [39, -3, 1],
                        [39, -3, 2],
                        [39, -3, 3],
                        [39, -2, 1],
                        [39, -2, 2],
                        [39, -2, 3],
                        [39, -1, 1],
                        [39, -1, 2],
                        [39, -1, 3],
                        [39, 0, 1],
                        [39, 0, 2],
                        [39, 0, 3],
                        [39, 1, 1],
                        [39, 1, 2],
                        [39, 1, 3],
                        [39, 2, 1],
                        [39, 2, 2],
                        [39, 2, 3],
                        [39, 3, 1],
                        [39, 3, 2],
                        [39, 3, 3],
                        [39, 4, 1],
                        [39, 4, 2],
                        [39, 4, 3],
                        [39, 5, 1],
                        [39, 5, 2],
                        [39, 5, 3],
                        [39, 6, 1],
                        [39, 6, 2],
                        [39, 6, 3],
                        [39, 7, 1],
                        [39, 7, 2],
                        [39, 7, 3],
                        [39, 8, 1],
                        [39, 8, 2],
                        [39, 8, 3],
                        [39, 9, 1],
                        [39, 9, 2],
                        [39, 9, 3],
                        [39, 10, 1],
                        [39, 10, 2],
                        [39, 10, 3],
                        [39, 11, 1],
                        [39, 11, 2],
                        [39, 11, 3],
                        [39, 12, 1],
                        [39, 12, 2],
                        [39, 12, 3],
                        [39, 13, 1],
                        [39, 13, 2],
                        [39, 13, 3],
                        [39, 14, 1],
                        [39, 14, 2],
                        [39, 14, 3],
                        [39, 15, 1],
                        [39, 15, 2],
                        [39, 15, 3],
                        [39, 16, 1],
                        [39, 16, 2],
                        [39, 16, 3],
                        [39, 17, 1],
                        [39, 17, 2],
                        [39, 17, 3],
                        [39, 18, 1],
                        [39, 18, 2],
                        [39, 18, 3],
                        [39, 19, 1],
                        [39, 19, 2],
                        [39, 19, 3],
                        [39, 20, 1],
                        [39, 20, 2],
                        [39, 20, 3],
                        [39, 21, 1],
                        [39, 21, 2],
                        [39, 21, 3],
                        [39, 22, 1],
                        [39, 22, 2],
                        [39, 22, 3],
                        [39, 23, 1],
                        [39, 23, 2],
                        [39, 23, 3],
                        [39, 24, 1],
                        [39, 24, 2],
                        [39, 24, 3],
                        [39, 25, 1],
                        [39, 25, 2],
                        [39, 25, 3],
                        [39, 26, 1],
                        [39, 26, 2],
                        [39, 26, 3],
                        [39, 27, 1],
                        [39, 27, 2],
                        [39, 27, 3],
                        [39, 28, 1],
                        [39, 28, 2],
                        [39, 28, 3],
                        [39, 29, 1],
                        [39, 29, 2],
                        [39, 29, 3],
                        [39, 30, 1],
                        [39, 30, 2],
                        [39, 30, 3],
                        [39, 31, 1],
                        [39, 31, 2],
                        [39, 31, 3],
                        [39, 32, 1],
                        [39, 32, 2],
                        [39, 32, 3],
                        [39, 33, 1],
                        [39, 33, 2],
                        [39, 33, 3],
                        [39, 34, 1],
                        [39, 34, 2],
                        [39, 34, 3],
                        [39, 35, 1],
                        [39, 35, 2],
                        [39, 35, 3],
                        [39, 36, 1],
                        [39, 36, 2],
                        [39, 36, 3],
                        [39, 37, 1],
                        [39, 37, 2],
                        [39, 37, 3],
                        [39, 38, 1],
                        [39, 38, 2],
                        [39, 38, 3],
                        [39, 39, 1],
                        [39, 39, 2],
                        [39, 39, 3],
                        [40, -40, 1],
                        [40, -40, 2],
                        [40, -40, 3],
                        [40, -40, 4],
                        [40, -39, 1],
                        [40, -39, 2],
                        [40, -39, 3],
                        [40, -39, 4],
                        [40, -38, 1],
                        [40, -38, 2],
                        [40, -38, 3],
                        [40, -38, 4],
                        [40, -37, 1],
                        [40, -37, 2],
                        [40, -37, 3],
                        [40, -37, 4],
                        [40, -36, 1],
                        [40, -36, 2],
                        [40, -36, 3],
                        [40, -36, 4],
                        [40, -35, 1],
                        [40, -35, 2],
                        [40, -35, 3],
                        [40, -35, 4],
                        [40, -34, 1],
                        [40, -34, 2],
                        [40, -34, 3],
                        [40, -34, 4],
                        [40, -33, 1],
                        [40, -33, 2],
                        [40, -33, 3],
                        [40, -33, 4],
                        [40, -32, 1],
                        [40, -32, 2],
                        [40, -32, 3],
                        [40, -32, 4],
                        [40, -31, 1],
                        [40, -31, 2],
                        [40, -31, 3],
                        [40, -31, 4],
                        [40, -30, 1],
                        [40, -30, 2],
                        [40, -30, 3],
                        [40, -30, 4],
                        [40, -29, 1],
                        [40, -29, 2],
                        [40, -29, 3],
                        [40, -29, 4],
                        [40, -28, 1],
                        [40, -28, 2],
                        [40, -28, 3],
                        [40, -28, 4],
                        [40, -27, 1],
                        [40, -27, 2],
                        [40, -27, 3],
                        [40, -27, 4],
                        [40, -26, 1],
                        [40, -26, 2],
                        [40, -26, 3],
                        [40, -26, 4],
                        [40, -25, 1],
                        [40, -25, 2],
                        [40, -25, 3],
                        [40, -25, 4],
                        [40, -24, 1],
                        [40, -24, 2],
                        [40, -24, 3],
                        [40, -24, 4],
                        [40, -23, 1],
                        [40, -23, 2],
                        [40, -23, 3],
                        [40, -23, 4],
                        [40, -22, 1],
                        [40, -22, 2],
                        [40, -22, 3],
                        [40, -22, 4],
                        [40, -21, 1],
                        [40, -21, 2],
                        [40, -21, 3],
                        [40, -21, 4],
                        [40, -20, 1],
                        [40, -20, 2],
                        [40, -20, 3],
                        [40, -20, 4],
                        [40, -19, 1],
                        [40, -19, 2],
                        [40, -19, 3],
                        [40, -19, 4],
                        [40, -18, 1],
                        [40, -18, 2],
                        [40, -18, 3],
                        [40, -18, 4],
                        [40, -17, 1],
                        [40, -17, 2],
                        [40, -17, 3],
                        [40, -17, 4],
                        [40, -16, 1],
                        [40, -16, 2],
                        [40, -16, 3],
                        [40, -16, 4],
                        [40, -15, 1],
                        [40, -15, 2],
                        [40, -15, 3],
                        [40, -15, 4],
                        [40, -14, 1],
                        [40, -14, 2],
                        [40, -14, 3],
                        [40, -14, 4],
                        [40, -13, 1],
                        [40, -13, 2],
                        [40, -13, 3],
                        [40, -13, 4],
                        [40, -12, 1],
                        [40, -12, 2],
                        [40, -12, 3],
                        [40, -12, 4],
                        [40, -11, 1],
                        [40, -11, 2],
                        [40, -11, 3],
                        [40, -11, 4],
                        [40, -10, 1],
                        [40, -10, 2],
                        [40, -10, 3],
                        [40, -10, 4],
                        [40, -9, 1],
                        [40, -9, 2],
                        [40, -9, 3],
                        [40, -9, 4],
                        [40, -8, 1],
                        [40, -8, 2],
                        [40, -8, 3],
                        [40, -8, 4],
                        [40, -7, 1],
                        [40, -7, 2],
                        [40, -7, 3],
                        [40, -7, 4],
                        [40, -6, 1],
                        [40, -6, 2],
                        [40, -6, 3],
                        [40, -6, 4],
                        [40, -5, 1],
                        [40, -5, 2],
                        [40, -5, 3],
                        [40, -5, 4],
                        [40, -4, 1],
                        [40, -4, 2],
                        [40, -4, 3],
                        [40, -4, 4],
                        [40, -3, 1],
                        [40, -3, 2],
                        [40, -3, 3],
                        [40, -3, 4],
                        [40, -2, 1],
                        [40, -2, 2],
                        [40, -2, 3],
                        [40, -2, 4],
                        [40, -1, 1],
                        [40, -1, 2],
                        [40, -1, 3],
                        [40, -1, 4],
                        [40, 0, 1],
                        [40, 0, 2],
                        [40, 0, 3],
                        [40, 0, 4],
                        [40, 1, 1],
                        [40, 1, 2],
                        [40, 1, 3],
                        [40, 1, 4],
                        [40, 2, 1],
                        [40, 2, 2],
                        [40, 2, 3],
                        [40, 2, 4],
                        [40, 3, 1],
                        [40, 3, 2],
                        [40, 3, 3],
                        [40, 3, 4],
                        [40, 4, 1],
                        [40, 4, 2],
                        [40, 4, 3],
                        [40, 4, 4],
                        [40, 5, 1],
                        [40, 5, 2],
                        [40, 5, 3],
                        [40, 5, 4],
                        [40, 6, 1],
                        [40, 6, 2],
                        [40, 6, 3],
                        [40, 6, 4],
                        [40, 7, 1],
                        [40, 7, 2],
                        [40, 7, 3],
                        [40, 7, 4],
                        [40, 8, 1],
                        [40, 8, 2],
                        [40, 8, 3],
                        [40, 8, 4],
                        [40, 9, 1],
                        [40, 9, 2],
                        [40, 9, 3],
                        [40, 9, 4],
                        [40, 10, 1],
                        [40, 10, 2],
                        [40, 10, 3],
                        [40, 10, 4],
                        [40, 11, 1],
                        [40, 11, 2],
                        [40, 11, 3],
                        [40, 11, 4],
                        [40, 12, 1],
                        [40, 12, 2],
                        [40, 12, 3],
                        [40, 12, 4],
                        [40, 13, 1],
                        [40, 13, 2],
                        [40, 13, 3],
                        [40, 13, 4],
                        [40, 14, 1],
                        [40, 14, 2],
                        [40, 14, 3],
                        [40, 14, 4],
                        [40, 15, 1],
                        [40, 15, 2],
                        [40, 15, 3],
                        [40, 15, 4],
                        [40, 16, 1],
                        [40, 16, 2],
                        [40, 16, 3],
                        [40, 16, 4],
                        [40, 17, 1],
                        [40, 17, 2],
                        [40, 17, 3],
                        [40, 17, 4],
                        [40, 18, 1],
                        [40, 18, 2],
                        [40, 18, 3],
                        [40, 18, 4],
                        [40, 19, 1],
                        [40, 19, 2],
                        [40, 19, 3],
                        [40, 19, 4],
                        [40, 20, 1],
                        [40, 20, 2],
                        [40, 20, 3],
                        [40, 20, 4],
                        [40, 21, 1],
                        [40, 21, 2],
                        [40, 21, 3],
                        [40, 21, 4],
                        [40, 22, 1],
                        [40, 22, 2],
                        [40, 22, 3],
                        [40, 22, 4],
                        [40, 23, 1],
                        [40, 23, 2],
                        [40, 23, 3],
                        [40, 23, 4],
                        [40, 24, 1],
                        [40, 24, 2],
                        [40, 24, 3],
                        [40, 24, 4],
                        [40, 25, 1],
                        [40, 25, 2],
                        [40, 25, 3],
                        [40, 25, 4],
                        [40, 26, 1],
                        [40, 26, 2],
                        [40, 26, 3],
                        [40, 26, 4],
                        [40, 27, 1],
                        [40, 27, 2],
                        [40, 27, 3],
                        [40, 27, 4],
                        [40, 28, 1],
                        [40, 28, 2],
                        [40, 28, 3],
                        [40, 28, 4],
                        [40, 29, 1],
                        [40, 29, 2],
                        [40, 29, 3],
                        [40, 29, 4],
                        [40, 30, 1],
                        [40, 30, 2],
                        [40, 30, 3],
                        [40, 30, 4],
                        [40, 31, 1],
                        [40, 31, 2],
                        [40, 31, 3],
                        [40, 31, 4],
                        [40, 32, 1],
                        [40, 32, 2],
                        [40, 32, 3],
                        [40, 32, 4],
                        [40, 33, 1],
                        [40, 33, 2],
                        [40, 33, 3],
                        [40, 33, 4],
                        [40, 34, 1],
                        [40, 34, 2],
                        [40, 34, 3],
                        [40, 34, 4],
                        [40, 35, 1],
                        [40, 35, 2],
                        [40, 35, 3],
                        [40, 35, 4],
                        [40, 36, 1],
                        [40, 36, 2],
                        [40, 36, 3],
                        [40, 36, 4],
                        [40, 37, 1],
                        [40, 37, 2],
                        [40, 37, 3],
                        [40, 37, 4],
                        [40, 38, 1],
                        [40, 38, 2],
                        [40, 38, 3],
                        [40, 38, 4],
                        [40, 39, 1],
                        [40, 39, 2],
                        [40, 39, 3],
                        [40, 39, 4],
                        [40, 40, 1],
                        [40, 40, 2],
                        [40, 40, 3],
                        [40, 40, 4]])

    return indxvec


def gsh_eval(X, Bvec):

    phi1 = X[..., 2]
    phi = X[..., 1]
    phi2 = X[..., 0]

    zvec = np.abs(phi) < 1e-8
    zvec = zvec.astype(int)
    randvec = np.round(np.random.rand(zvec.size)).reshape(zvec.shape)
    randvecopp = np.ones(zvec.shape) - randvec
    phi += (1e-7)*zvec*(randvec - randvecopp)

    final_shape = np.hstack([phi1.shape, len(Bvec)])
    tfunc = np.zeros(final_shape, dtype='complex128')

    c = 0
    for Bindx in Bvec:

        if Bindx == 0:
            tfunc[..., c] = 1

        if Bindx == 1:
            t7 = np.cos(phi)
            t6 = t7 ** 2
            t11 = 4 * (-t6 - 1) * t7
            t4 = t6 ** 2
            t10 = 1 + t4 + 6 * t6
            tfunc[..., c] = (0.3e1 / 0.64e2) * np.sqrt(0.3e1) * np.sqrt(0.5e1) * np.sqrt(0.2e1) * ((14 * t4 - 28 * t6 + 14) * np.exp((-4*1j) * phi2) + (t10 - t11) * np.exp((-4*1j) * (phi1 + phi2)) + (t10 + t11) * np.exp((4*1j) * (phi1 - phi2)))

        if Bindx == 2:
            t19 = 4 * phi1
            t18 = np.cos(phi)
            t17 = t18 ** 2
            t16 = t18 * t17
            t15 = t17 ** 2
            tfunc[..., c] = (0.3e1 / 0.16e2*1j) * np.sqrt(0.5e1) * np.sqrt(0.3e1) * np.sqrt((1 + t18)) * ((1 - t18) ** (-0.1e1 / 0.2e1)) * ((t15 + 2 * t16 - 2 * t18 - 1) * np.exp((-1*1j) * (t19 + 3 * phi2)) + 14 * (t15 - t16 - t17 + t18) * np.exp((-3*1j) * phi2) + (t15 - 4 * t16 + 6 * t17 - 4 * t18 + 1) * np.exp((1j) * (t19 - 3 * phi2)))

        if Bindx == 3:
            t27 = np.cos(phi)
            t29 = t27 ** 2
            t25 = t29 ** 2
            t33 = -1 + t25
            t32 = 2 * (-t29 + 1) * t27
            t28 = 2 * phi1
            tfunc[..., c] = (0.3e1 / 0.32e2) * np.sqrt(0.2e1) * np.sqrt(0.5e1) * np.sqrt(0.21e2) * ((14 * t25 - 16 * t29 + 2) * np.exp((-2*1j) * phi2) + (-t32 + t33) * np.exp((-2*1j) * (t28 + phi2)) + (t32 + t33) * np.exp((2*1j) * (t28 - phi2)))

        if Bindx == 4:
            t41 = 4 * phi1
            t40 = np.cos(phi)
            t39 = t40 ** 2
            t38 = t40 * t39
            t37 = t39 ** 2
            tfunc[..., c] = (0.3e1 / 0.16e2*1j) * np.sqrt((1 + t40)) * np.sqrt(0.7e1) * np.sqrt(0.3e1) * np.sqrt(0.5e1) * ((1 - t40) ** (-0.1e1 / 0.2e1)) * ((t37 - 2 * t39 + 1) * np.exp((-1*1j) * (t41 + phi2)) + (t37 - 2 * t38 + 2 * t40 - 1) * np.exp((1j) * (t41 - phi2)) + (14 * t37 - 14 * t38 - 6 * t39 + 6 * t40) * np.exp((-1*1j) * phi2))

        if Bindx == 5:
            t47 = np.cos(phi)
            t46 = t47 ** 2
            t45 = t46 ** 2
            tfunc[..., c] = 0.3e1 / 0.16e2 * np.sqrt(0.7e1) * np.sqrt(0.3e1) * ((35 * t45) - (30 * t46) + 0.3e1 + (5 * t45 - 10 * t46 + 5) * np.cos((4 * phi1)))

        if Bindx == 6:
            t56 = 4 * phi1
            t55 = np.cos(phi)
            t54 = t55 ** 2
            t53 = t55 * t54
            t52 = t54 ** 2
            tfunc[..., c] = (-0.3e1 / 0.16e2*1j) * np.sqrt((1 - t55)) * np.sqrt(0.7e1) * np.sqrt(0.3e1) * np.sqrt(0.5e1) * ((1 + t55) ** (-0.1e1 / 0.2e1)) * ((t52 - 2 * t54 + 1) * np.exp((-1*1j) * (t56 - phi2)) + (t52 + 2 * t53 - 2 * t55 - 1) * np.exp((1j) * (t56 + phi2)) + (14 * t52 + 14 * t53 - 6 * t54 - 6 * t55) * np.exp((1j) * phi2))

        if Bindx == 7:
            t64 = np.cos(phi)
            t66 = t64 ** 2
            t62 = t66 ** 2
            t70 = -1 + t62
            t69 = 2 * (-t66 + 1) * t64
            t65 = 2 * phi1
            tfunc[..., c] = (0.3e1 / 0.32e2) * np.sqrt(0.2e1) * np.sqrt(0.5e1) * np.sqrt(0.21e2) * ((14 * t62 - 16 * t66 + 2) * np.exp((2*1j) * phi2) + (t69 + t70) * np.exp((-2*1j) * (t65 - phi2)) + (-t69 + t70) * np.exp((2*1j) * (t65 + phi2)))

        if Bindx == 8:
            t78 = 4 * phi1
            t77 = np.cos(phi)
            t76 = t77 ** 2
            t75 = t77 * t76
            t74 = t76 ** 2
            tfunc[..., c] = (-0.3e1 / 0.16e2*1j) * np.sqrt(0.5e1) * np.sqrt(0.3e1) * np.sqrt((1 - t77)) * ((1 + t77) ** (-0.1e1 / 0.2e1)) * ((t74 - 2 * t75 + 2 * t77 - 1) * np.exp((-1*1j) * (t78 - 3 * phi2)) + 14 * (t74 + t75 - t76 - t77) * np.exp((3*1j) * phi2) + (t74 + 4 * t75 + 6 * t76 + 4 * t77 + 1) * np.exp((1j) * (t78 + 3 * phi2)))

        if Bindx == 9:
            t87 = np.cos(phi)
            t86 = t87 ** 2
            t91 = 4 * (-t86 - 1) * t87
            t84 = t86 ** 2
            t90 = 1 + t84 + 6 * t86
            tfunc[..., c] = (0.3e1 / 0.64e2) * np.sqrt(0.3e1) * np.sqrt(0.5e1) * np.sqrt(0.2e1) * ((14 * t84 - 28 * t86 + 14) * np.exp((4*1j) * phi2) + (t90 + t91) * np.exp((-4*1j) * (phi1 - phi2)) + (t90 - t91) * np.exp((4*1j) * (phi1 + phi2)))

        if Bindx == 10:
            t99 = np.cos(phi)
            t98 = t99 ** 2
            t101 = t98 ** 2
            t102 = t99 * t101
            t105 = -4 * t102 + 4 * t99
            t95 = t99 * t102
            t104 = -1 + t95 + 5 * t101 - 5 * t98
            t100 = 2 * phi1
            tfunc[..., c] = -(0.13e2 / 0.256e3) * np.sqrt(0.2e1) * np.sqrt(0.7e1) * np.sqrt(0.33e2) * ((-2 * t95 + 6 * t101 - 6 * t98 + 2) * np.exp((-6*1j) * phi2) + (t104 - t105) * np.exp((-2*1j) * (t100 + 3 * phi2)) + (t104 + t105) * np.exp((2*1j) * (t100 - 3 * phi2)))

        if Bindx == 11:
            t114 = np.cos(phi)
            t113 = t114 ** 2
            t116 = t114 * t113
            t109 = t116 ** 2
            t120 = 3 * t109 - 5 * t113 - 10 * t116
            t117 = t113 ** 2
            t115 = 4 * phi1
            t110 = t114 * t117
            tfunc[..., c] = (-0.13e2 / 0.128e3*1j) * np.sqrt(0.7e1) * np.sqrt(0.11e2) * np.sqrt(0.2e1) * np.sqrt((1 + t114)) * (6 * (-t109 + t110 + 2 * t117 - 2 * t116 - t113 + t114) * np.exp((-5*1j) * phi2) + (7 * t110 + 3 * t114 + 2 + t120) * np.exp((-1*1j) * (t115 + 5 * phi2)) + (-13 * t110 + 20 * t117 + 7 * t114 - 2 + t120) * np.exp((1j) * (t115 - 5 * phi2))) * ((1 - t114) ** (-0.1e1 / 0.2e1))

        if Bindx == 12:
            t129 = np.cos(phi)
            t128 = t129 ** 2
            t130 = t129 * t128
            t131 = t128 ** 2
            t135 = 80 * t130 + (-88 * t131 - 8) * t129
            t124 = t130 ** 2
            t134 = 13 + 33 * t124 - 65 * t128 + 35 * t131
            tfunc[..., c] = -(0.13e2 / 0.128e3) * np.sqrt(0.7e1) * ((-66 * t124 + 138 * t131 - 78 * t128 + 6) * np.exp((-4*1j) * phi2) + (t134 - t135) * np.exp((-4*1j) * (phi1 + phi2)) + (t134 + t135) * np.exp((4*1j) * (phi1 - phi2)))

        if Bindx == 13:
            t145 = np.cos(phi)
            t144 = t145 ** 2
            t148 = t144 ** 2
            t147 = t145 * t144
            t150 = t147 ** 2
            t153 = 2 - 18 * t144 + 38 * t148 - 22 * t150
            t139 = t145 * t150
            t141 = t145 * t148
            t152 = 11 * t139 - 9 * t141 + 5 * t145 - 7 * t147
            t146 = 4 * phi1
            tfunc[..., c] = (-0.13e2 / 0.128e3*1j) * np.sqrt(0.7e1) * np.sqrt(0.15e2) * np.sqrt(0.2e1) * ((-22 * t139 + 50 * t141 - 34 * t147 + 6 * t145) * np.exp((-3*1j) * phi2) + (t152 - t153) * np.exp((-1*1j) * (t146 + 3 * phi2)) + (t152 + t153) * np.exp((1j) * (t146 - 3 * phi2))) * ((1 + t145) ** (-0.1e1 / 0.2e1)) * ((1 - t145) ** (-0.1e1 / 0.2e1))

        if Bindx == 14:
            t162 = np.cos(phi)
            t161 = t162 ** 2
            t164 = t162 * t161
            t165 = t161 ** 2
            t169 = 64 * t164 + (-44 * t165 - 20) * t162
            t157 = t164 ** 2
            t168 = 1 - 33 * t157 - 11 * t161 + 43 * t165
            t163 = 2 * phi1
            tfunc[..., c] = (0.13e2 / 0.256e3) * np.sqrt(0.2e1) * np.sqrt(0.7e1) * np.sqrt(0.15e2) * ((66 * t157 - 102 * t165 + 38 * t161 - 2) * np.exp((-2*1j) * phi2) + (t168 + t169) * np.exp((-2*1j) * (t163 + phi2)) + (t168 - t169) * np.exp((2*1j) * (t163 - phi2)))

        if Bindx == 15:
            t179 = np.cos(phi)
            t178 = t179 ** 2
            t182 = t178 ** 2
            t181 = t179 * t178
            t184 = t181 ** 2
            t187 = 2 - 26 * t178 + 46 * t182 - 22 * t184
            t173 = t179 * t184
            t175 = t179 * t182
            t186 = -33 * t173 + 79 * t175 + 13 * t179 - 59 * t181
            t180 = 4 * phi1
            tfunc[..., c] = (0.13e2 / 0.64e2*1j) * np.sqrt(0.3e1) * np.sqrt(0.7e1) * ((66 * t173 - 126 * t175 + 70 * t181 - 10 * t179) * np.exp((-1*1j) * phi2) + (t186 + t187) * np.exp((-1*1j) * (t180 + phi2)) + (t186 - t187) * np.exp((1j) * (t180 - phi2))) * ((1 + t179) ** (-0.1e1 / 0.2e1)) * ((1 - t179) ** (-0.1e1 / 0.2e1))

        if Bindx == 16:
            t192 = np.cos(phi)
            t191 = t192 ** 2
            t193 = t191 ** 2
            t189 = t191 * t193
            tfunc[..., c] = -0.13e2 / 0.64e2 * np.sqrt(0.2e1) * (-(231 * t189) + (315 * t193) - (105 * t191) + 0.5e1 + (231 * t189 - 483 * t193 + 273 * t191 - 21) * np.cos((4 * phi1)))

        if Bindx == 17:
            t204 = np.cos(phi)
            t203 = t204 ** 2
            t207 = t203 ** 2
            t206 = t204 * t203
            t209 = t206 ** 2
            t212 = 2 - 26 * t203 + 46 * t207 - 22 * t209
            t198 = t204 * t209
            t200 = t204 * t207
            t211 = 33 * t198 - 79 * t200 - 13 * t204 + 59 * t206
            t205 = 4 * phi1
            tfunc[..., c] = (-0.13e2 / 0.64e2*1j) * np.sqrt(0.3e1) * np.sqrt(0.7e1) * ((1 + t204) ** (-0.1e1 / 0.2e1)) * ((1 - t204) ** (-0.1e1 / 0.2e1)) * ((-66 * t198 + 126 * t200 - 70 * t206 + 10 * t204) * np.exp((1j) * phi2) + (t211 + t212) * np.exp((-1*1j) * (t205 - phi2)) + (t211 - t212) * np.exp((1j) * (t205 + phi2)))

        if Bindx == 18:
            t221 = np.cos(phi)
            t220 = t221 ** 2
            t223 = t221 * t220
            t224 = t220 ** 2
            t228 = 64 * t223 + (-44 * t224 - 20) * t221
            t216 = t223 ** 2
            t227 = 1 - 33 * t216 - 11 * t220 + 43 * t224
            t222 = 2 * phi1
            tfunc[..., c] = (0.13e2 / 0.256e3) * np.sqrt(0.2e1) * np.sqrt(0.7e1) * np.sqrt(0.15e2) * ((66 * t216 - 102 * t224 + 38 * t220 - 2) * np.exp((2*1j) * phi2) + (t227 - t228) * np.exp((-2*1j) * (t222 - phi2)) + (t227 + t228) * np.exp((2*1j) * (t222 + phi2)))

        if Bindx == 19:
            t238 = np.cos(phi)
            t237 = t238 ** 2
            t241 = t237 ** 2
            t240 = t238 * t237
            t243 = t240 ** 2
            t246 = 2 - 18 * t237 + 38 * t241 - 22 * t243
            t232 = t238 * t243
            t234 = t238 * t241
            t245 = -11 * t232 + 9 * t234 - 5 * t238 + 7 * t240
            t239 = 4 * phi1
            tfunc[..., c] = (0.13e2 / 0.128e3*1j) * np.sqrt(0.7e1) * np.sqrt(0.15e2) * np.sqrt(0.2e1) * ((22 * t232 - 50 * t234 + 34 * t240 - 6 * t238) * np.exp((3*1j) * phi2) + (t245 - t246) * np.exp((-1*1j) * (t239 - 3 * phi2)) + (t245 + t246) * np.exp((1j) * (t239 + 3 * phi2))) * ((1 + t238) ** (-0.1e1 / 0.2e1)) * ((1 - t238) ** (-0.1e1 / 0.2e1))

        if Bindx == 20:
            t255 = np.cos(phi)
            t254 = t255 ** 2
            t256 = t255 * t254
            t257 = t254 ** 2
            t261 = 80 * t256 + (-88 * t257 - 8) * t255
            t250 = t256 ** 2
            t260 = -13 - 33 * t250 + 65 * t254 - 35 * t257
            tfunc[..., c] = (0.13e2 / 0.128e3) * np.sqrt(0.7e1) * ((66 * t250 - 138 * t257 + 78 * t254 - 6) * np.exp((4*1j) * phi2) + (t260 - t261) * np.exp((-4*1j) * (phi1 - phi2)) + (t260 + t261) * np.exp((4*1j) * (phi1 + phi2)))

        if Bindx == 21:
            t270 = np.cos(phi)
            t269 = t270 ** 2
            t272 = t270 * t269
            t265 = t272 ** 2
            t276 = 3 * t265 - 5 * t269 + 10 * t272
            t273 = t269 ** 2
            t271 = 4 * phi1
            t266 = t270 * t273
            tfunc[..., c] = (0.13e2 / 0.128e3*1j) * np.sqrt(0.7e1) * np.sqrt(0.11e2) * np.sqrt(0.2e1) * np.sqrt((1 - t270)) * ((1 + t270) ** (-0.1e1 / 0.2e1)) * (6 * (-t265 - t266 + 2 * t273 + 2 * t272 - t269 - t270) * np.exp((5*1j) * phi2) + (-7 * t266 - 3 * t270 + 2 + t276) * np.exp((-1*1j) * (t271 - 5 * phi2)) + (13 * t266 + 20 * t273 - 7 * t270 - 2 + t276) * np.exp((1j) * (t271 + 5 * phi2)))

        if Bindx == 22:
            t284 = np.cos(phi)
            t283 = t284 ** 2
            t286 = t283 ** 2
            t287 = t284 * t286
            t290 = 4 * t284 - 4 * t287
            t280 = t284 * t287
            t289 = 1 - t280 + 5 * t283 - 5 * t286
            t285 = 2 * phi1
            tfunc[..., c] = (0.13e2 / 0.256e3) * np.sqrt(0.2e1) * np.sqrt(0.7e1) * np.sqrt(0.33e2) * ((2 * t280 - 6 * t286 + 6 * t283 - 2) * np.exp((6*1j) * phi2) + (t289 - t290) * np.exp((-2*1j) * (t285 - 3 * phi2)) + (t289 + t290) * np.exp((2*1j) * (t285 + 3 * phi2)))

        if Bindx == 23:
            t303 = np.cos(phi)
            t302 = t303 ** 2
            t304 = t303 * t302
            t307 = t304 ** 2
            t314 = (-t307 - 1) * t303
            t305 = t302 ** 2
            t299 = t303 * t305
            t313 = -56 * t299 - 56 * t304 + 8 * t314
            t296 = t305 ** 2
            t312 = 1 + t296 + 28 * t302 + 70 * t305 + 28 * t307
            t311 = 112 * t299 + 112 * t304 + 112 * t314
            t310 = 28 + 28 * t296 + 112 * t302 - 280 * t305 + 112 * t307
            tfunc[..., c] = (0.17e2 / 0.12288e5) * np.sqrt(0.2e1) * np.sqrt(0.13e2) * np.sqrt(0.3e1) * np.sqrt(0.5e1) * ((198 * t296 - 792 * t307 + 1188 * t305 - 792 * t302 + 198) * np.exp((-8*1j) * phi2) + (t312 - t313) * np.exp((-8*1j) * (phi1 + phi2)) + (t312 + t313) * np.exp((8*1j) * (phi1 - phi2)) + (t310 - t311) * np.exp((-4*1j) * (phi1 + 2 * phi2)) + (t310 + t311) * np.exp((4*1j) * (phi1 - 2 * phi2)))

        if Bindx == 24:
            t327 = np.cos(phi)
            t326 = t327 ** 2
            t333 = t326 ** 2
            t320 = t333 ** 2
            t339 = 2 * t320
            t338 = 1 + t327
            t332 = t327 * t326
            t335 = t332 ** 2
            t331 = 4 * phi1
            t330 = 8 * phi1
            t329 = -7 * phi2
            t328 = 7 * phi2
            t323 = t327 * t333
            t321 = t327 * t335
            tfunc[..., c] = (0.17e2 / 0.3072e4*1j) * np.sqrt(0.5e1) * np.sqrt(0.3e1) * np.sqrt(0.13e2) * np.sqrt(0.2e1) * np.sqrt(t338) * ((1 - t327) ** (-0.1e1 / 0.2e1)) * ((t320 + 6 * t321 + 14 * t335 + 14 * t323 - 14 * t332 - 14 * t326 - 6 * t327 - 1) * np.exp((-1*1j) * (t330 + t328)) + 198 * (t320 - t321 - 3 * t335 + 3 * t323 + 3 * t333 - 3 * t332 - t326 + t327) * np.exp((-7*1j) * phi2) + (t320 - 8 * t321 + 28 * t335 - 56 * t323 + 70 * t333 - 56 * t332 + 28 * t326 - 8 * t327 + 1) * np.exp((1j) * (t330 + t329)) + 14 * (t339 + (5 * t321) - t335 - (11 * t323) - (5 * t333) + (7 * t332) + (5 * t326) - t338) * np.exp((-1*1j) * (t331 + t328)) + 14 * (t339 - (9 * t321) + (13 * t335) - t323 - (15 * t333) + (13 * t332) - t326 - (3 * t327) + 0.1e1) * np.exp((1j) * (t331 + t329)))

        if Bindx == 25:
            t352 = np.cos(phi)
            t351 = t352 ** 2
            t358 = t351 ** 2
            t345 = t358 ** 2
            t357 = t352 * t351
            t360 = t357 ** 2
            t366 = -5 + 5 * t345 - 70 * t351 + 70 * t360
            t346 = t352 * t360
            t348 = t352 * t358
            t365 = -30 * t346 - 70 * t348 + 30 * t352 + 70 * t357
            t364 = -420 * t346 + 588 * t348 - 28 * t352 - 140 * t357
            t363 = -28 + 140 * t345 + 280 * t351 - 560 * t358 + 168 * t360
            t356 = 2 * phi1
            t355 = 4 * phi1
            t354 = -3 * phi2
            t353 = 3 * phi2
            tfunc[..., c] = (0.17e2 / 0.1024e4) * ((990 * t345 - 3036 * t360 + 3168 * t358 - 1188 * t351 + 66) * np.exp((-6*1j) * phi2) + (-t365 + t366) * np.exp((-2*1j) * (t355 + t353)) + (t365 + t366) * np.exp((2*1j) * (t355 + t354)) + (t363 - t364) * np.exp((-2*1j) * (t356 + t353)) + (t363 + t364) * np.exp((2*1j) * (t356 + t354))) * np.sqrt(0.13e2)

        if Bindx == 26:
            t379 = np.cos(phi)
            t378 = t379 ** 2
            t385 = t378 ** 2
            t372 = t385 ** 2
            t391 = 5 * t372
            t390 = 140 * t372
            t384 = t379 * t378
            t387 = t384 ** 2
            t383 = 4 * phi1
            t382 = 8 * phi1
            t381 = -5 * phi2
            t380 = 5 * phi2
            t375 = t379 * t385
            t373 = t379 * t387
            tfunc[..., c] = (0.17e2 / 0.3072e4*1j) * np.sqrt(0.7e1) * np.sqrt(0.3e1) * np.sqrt(0.13e2) * np.sqrt(0.2e1) * np.sqrt((1 + t379)) * ((1 - t379) ** (-0.1e1 / 0.2e1)) * (198 * (t391 - 5 * t373 - 11 * t387 + 11 * t375 + 7 * t385 - 7 * t384 - t378 + t379) * np.exp((-5*1j) * phi2) + (t391 - 30 * t373 + 70 * t387 - 70 * t375 + 70 * t384 - 70 * t378 + 30 * t379 - 5) * np.exp((1j) * (t382 + t381)) + (t390 + 210 * t373 - 266 * t387 - 454 * t375 + 150 * t385 + 310 * t384 - 30 * t378 - 66 * t379 + 6) * np.exp((-1*1j) * (t383 + t380)) + (t391 + 20 * t373 + 20 * t387 - 20 * t375 - 50 * t385 - 20 * t384 + 20 * t378 + 20 * t379 + 5) * np.exp((-1*1j) * (t382 + t380)) + (t390 - 490 * t373 + 434 * t387 + 286 * t375 - 590 * t385 + 130 * t384 + 150 * t378 - 54 * t379 - 6) * np.exp((1j) * (t383 + t381)))

        if Bindx == 27:
            t404 = np.cos(phi)
            t403 = t404 ** 2
            t406 = t404 * t403
            t409 = t406 ** 2
            t398 = t404 * t409
            t407 = t403 ** 2
            t400 = t404 * t407
            t415 = -260 * t398 + 260 * t400 - 260 * t404 + 260 * t406
            t414 = -3640 * t398 + 6136 * t400 + 456 * t404 - 3080 * t406
            t397 = t407 ** 2
            t413 = 65 + 65 * t397 + 260 * t403 - 650 * t407 + 260 * t409
            t412 = -36 + 1820 * t397 + 720 * t403 - 920 * t407 - 1456 * t409
            t405 = 2 * phi1
            tfunc[..., c] = (0.17e2 / 0.6144e4) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.7e1) * ((12870 * t397 - 30888 * t409 + 23364 * t407 - 5544 * t403 + 198) * np.exp((-4*1j) * phi2) + (t412 - t414) * np.exp((-4*1j) * (phi1 + phi2)) + (t413 - t415) * np.exp((-4*1j) * (t405 + phi2)) + (t412 + t414) * np.exp((4*1j) * (phi1 - phi2)) + (t413 + t415) * np.exp((4*1j) * (t405 - phi2)))

        if Bindx == 28:
            t429 = np.cos(phi)
            t428 = t429 ** 2
            t435 = t428 ** 2
            t434 = t429 * t428
            t437 = t434 ** 2
            t439 = t435 ** 2
            t444 = 13 - 78 * t435 + 104 * t437 - 39 * t439
            t421 = t429 * t439
            t425 = t429 * t435
            t443 = 13 * t421 - 78 * t425 - 39 * t429 + 104 * t434
            t442 = -10 + 240 * t428 - 932 * t435 + 1248 * t437 - 546 * t439
            t423 = t429 * t437
            t441 = 364 * t421 - 728 * t423 + 432 * t425 + 4 * t429 - 72 * t434
            t433 = 4 * phi1
            t432 = 8 * phi1
            t431 = -3 * phi2
            t430 = 3 * phi2
            tfunc[..., c] = (0.17e2 / 0.1024e4*1j) * np.sqrt(0.7e1) * np.sqrt(0.5e1) * np.sqrt(0.2e1) * ((1 + t429) ** (-0.1e1 / 0.2e1)) * ((1 - t429) ** (-0.1e1 / 0.2e1)) * ((2574 * t421 - 6864 * t423 + 6204 * t425 - 2112 * t434 + 198 * t429) * np.exp((-3*1j) * phi2) + (t443 - t444) * np.exp((-1*1j) * (t432 + t430)) + (t443 + t444) * np.exp((1j) * (t432 + t431)) + (t441 - t442) * np.exp((-1*1j) * (t433 + t430)) + (t441 + t442) * np.exp((1j) * (t433 + t431)))

        if Bindx == 29:
            t457 = np.cos(phi)
            t456 = t457 ** 2
            t461 = t456 ** 2
            t450 = t461 ** 2
            t460 = t457 * t456
            t463 = t460 ** 2
            t469 = -13 + 13 * t450 + 26 * t456 - 26 * t463
            t451 = t457 * t463
            t453 = t457 * t461
            t468 = -26 * t451 + 78 * t453 + 26 * t457 - 78 * t460
            t467 = -364 * t451 + 676 * t453 + 44 * t457 - 356 * t460
            t466 = 4 + 364 * t450 - 104 * t456 + 464 * t461 - 728 * t463
            t459 = 2 * phi1
            t458 = 4 * phi1
            tfunc[..., c] = (0.17e2 / 0.3072e4) * np.sqrt(0.5e1) * np.sqrt(0.3e1) * np.sqrt(0.7e1) * np.sqrt(0.11e2) * ((2574 * t450 - 5148 * t463 + 3168 * t461 - 612 * t456 + 18) * np.exp((-2*1j) * phi2) + (-t468 + t469) * np.exp((-2*1j) * (t458 + phi2)) + (t468 + t469) * np.exp((2*1j) * (t458 - phi2)) + (t466 - t467) * np.exp((-2*1j) * (t459 + phi2)) + (t466 + t467) * np.exp((2*1j) * (t459 - phi2)))

        if Bindx == 30:
            t483 = np.cos(phi)
            t482 = t483 ** 2
            t487 = t482 ** 2
            t486 = t483 * t482
            t489 = t486 ** 2
            t491 = t487 ** 2
            t496 = -1 + 4 * t482 - 6 * t487 + 4 * t489 - t491
            t475 = t483 * t491
            t477 = t483 * t489
            t479 = t483 * t487
            t495 = t475 + t483 - 4 * t477 + 6 * t479 - 4 * t486
            t494 = -14 + 392 * t482 - 1652 * t487 + 2184 * t489 - 910 * t491
            t493 = 1820 * t475 - 5096 * t477 + 4928 * t479 + 196 * t483 - 1848 * t486
            t485 = 4 * phi1
            t484 = 8 * phi1
            tfunc[..., c] = (0.17e2 / 0.3072e4*1j) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.11e2) * ((1 + t483) ** (-0.1e1 / 0.2e1)) * ((1 - t483) ** (-0.1e1 / 0.2e1)) * ((12870 * t475 - 30888 * t477 + 24948 * t479 - 7560 * t486 + 630 * t483) * np.exp((-1*1j) * phi2) + (t493 - t494) * np.exp((-1*1j) * (t485 + phi2)) + (t493 + t494) * np.exp((1j) * (t485 - phi2)) + 65 * (t495 - t496) * np.exp((-1*1j) * (t484 + phi2)) + 65 * (t495 + t496) * np.exp((1j) * (t484 - phi2)))

        if Bindx == 31:
            t503 = np.cos(phi)
            t502 = t503 ** 2
            t504 = t502 ** 2
            t500 = t502 * t504
            t499 = t504 ** 2
            tfunc[..., c] = 0.17e2 / 0.1024e4 * np.sqrt(0.3e1) * np.sqrt(0.11e2) * ((6435 * t499) - (12012 * t500) + (6930 * t504) - (1260 * t502) + 0.35e2 + (1820 * t499 - 4368 * t500 + 3304 * t504 - 784 * t502 + 28) * np.cos((4 * phi1)) + (65 * t499 - 260 * t500 + 390 * t504 - 260 * t502 + 65) * np.cos((8 * phi1)))

        if Bindx == 32:
            t520 = np.cos(phi)
            t519 = t520 ** 2
            t524 = t519 ** 2
            t523 = t520 * t519
            t526 = t523 ** 2
            t528 = t524 ** 2
            t533 = -1 + 4 * t519 - 6 * t524 + 4 * t526 - t528
            t512 = t520 * t528
            t514 = t520 * t526
            t516 = t520 * t524
            t532 = t512 + t520 - 4 * t514 + 6 * t516 - 4 * t523
            t531 = -14 + 392 * t519 - 1652 * t524 + 2184 * t526 - 910 * t528
            t530 = 1820 * t512 - 5096 * t514 + 4928 * t516 + 196 * t520 - 1848 * t523
            t522 = 4 * phi1
            t521 = 8 * phi1
            tfunc[..., c] = (0.17e2 / 0.3072e4*1j) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.11e2) * ((1 + t520) ** (-0.1e1 / 0.2e1)) * ((1 - t520) ** (-0.1e1 / 0.2e1)) * ((12870 * t512 - 30888 * t514 + 24948 * t516 - 7560 * t523 + 630 * t520) * np.exp((1j) * phi2) + (t530 + t531) * np.exp((-1*1j) * (t522 - phi2)) + (t530 - t531) * np.exp((1j) * (t522 + phi2)) + 65 * (t532 + t533) * np.exp((-1*1j) * (t521 - phi2)) + 65 * (t532 - t533) * np.exp((1j) * (t521 + phi2)))

        if Bindx == 33:
            t546 = np.cos(phi)
            t545 = t546 ** 2
            t550 = t545 ** 2
            t539 = t550 ** 2
            t549 = t546 * t545
            t552 = t549 ** 2
            t558 = -13 + 13 * t539 + 26 * t545 - 26 * t552
            t540 = t546 * t552
            t542 = t546 * t550
            t557 = -26 * t540 + 78 * t542 + 26 * t546 - 78 * t549
            t556 = -364 * t540 + 676 * t542 + 44 * t546 - 356 * t549
            t555 = 4 + 364 * t539 - 104 * t545 + 464 * t550 - 728 * t552
            t548 = 2 * phi1
            t547 = 4 * phi1
            tfunc[..., c] = (0.17e2 / 0.3072e4) * np.sqrt(0.3e1) * np.sqrt(0.5e1) * np.sqrt(0.7e1) * np.sqrt(0.11e2) * ((2574 * t539 - 5148 * t552 + 3168 * t550 - 612 * t545 + 18) * np.exp((2*1j) * phi2) + (t557 + t558) * np.exp((-2*1j) * (t547 - phi2)) + (-t557 + t558) * np.exp((2*1j) * (t547 + phi2)) + (t555 + t556) * np.exp((-2*1j) * (t548 - phi2)) + (t555 - t556) * np.exp((2*1j) * (t548 + phi2)))

        if Bindx == 34:
            t572 = np.cos(phi)
            t571 = t572 ** 2
            t578 = t571 ** 2
            t577 = t572 * t571
            t580 = t577 ** 2
            t582 = t578 ** 2
            t587 = 13 - 78 * t578 + 104 * t580 - 39 * t582
            t564 = t572 * t582
            t568 = t572 * t578
            t586 = 13 * t564 - 78 * t568 - 39 * t572 + 104 * t577
            t585 = -10 + 240 * t571 - 932 * t578 + 1248 * t580 - 546 * t582
            t566 = t572 * t580
            t584 = 364 * t564 - 728 * t566 + 432 * t568 + 4 * t572 - 72 * t577
            t576 = 4 * phi1
            t575 = 8 * phi1
            t574 = -3 * phi2
            t573 = 3 * phi2
            tfunc[..., c] = (0.17e2 / 0.1024e4*1j) * np.sqrt(0.7e1) * np.sqrt(0.5e1) * np.sqrt(0.2e1) * ((1 + t572) ** (-0.1e1 / 0.2e1)) * ((1 - t572) ** (-0.1e1 / 0.2e1)) * ((2574 * t564 - 6864 * t566 + 6204 * t568 - 2112 * t577 + 198 * t572) * np.exp((3*1j) * phi2) + (t586 + t587) * np.exp((-1*1j) * (t575 + t574)) + (t586 - t587) * np.exp((1j) * (t575 + t573)) + (t584 + t585) * np.exp((-1*1j) * (t576 + t574)) + (t584 - t585) * np.exp((1j) * (t576 + t573)))

        if Bindx == 35:
            t600 = np.cos(phi)
            t599 = t600 ** 2
            t602 = t600 * t599
            t605 = t602 ** 2
            t594 = t600 * t605
            t603 = t599 ** 2
            t596 = t600 * t603
            t611 = -260 * t594 + 260 * t596 - 260 * t600 + 260 * t602
            t610 = -3640 * t594 + 6136 * t596 + 456 * t600 - 3080 * t602
            t593 = t603 ** 2
            t609 = 65 + 65 * t593 + 260 * t599 - 650 * t603 + 260 * t605
            t608 = -36 + 1820 * t593 + 720 * t599 - 920 * t603 - 1456 * t605
            t601 = 2 * phi1
            tfunc[..., c] = (0.17e2 / 0.6144e4) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.7e1) * ((12870 * t593 - 30888 * t605 + 23364 * t603 - 5544 * t599 + 198) * np.exp((4*1j) * phi2) + (t608 + t610) * np.exp((-4*1j) * (phi1 - phi2)) + (t609 + t611) * np.exp((-4*1j) * (t601 - phi2)) + (t608 - t610) * np.exp((4*1j) * (phi1 + phi2)) + (t609 - t611) * np.exp((4*1j) * (t601 + phi2)))

        if Bindx == 36:
            t624 = np.cos(phi)
            t623 = t624 ** 2
            t630 = t623 ** 2
            t617 = t630 ** 2
            t636 = 5 * t617
            t635 = 140 * t617
            t629 = t624 * t623
            t632 = t629 ** 2
            t628 = 4 * phi1
            t627 = 8 * phi1
            t626 = -5 * phi2
            t625 = 5 * phi2
            t620 = t624 * t630
            t618 = t624 * t632
            tfunc[..., c] = (-0.17e2 / 0.3072e4*1j) * np.sqrt(0.7e1) * np.sqrt(0.3e1) * np.sqrt(0.13e2) * np.sqrt(0.2e1) * np.sqrt((1 - t624)) * ((1 + t624) ** (-0.1e1 / 0.2e1)) * (198 * (t636 + 5 * t618 - 11 * t632 - 11 * t620 + 7 * t630 + 7 * t629 - t623 - t624) * np.exp((5*1j) * phi2) + (t636 + 30 * t618 + 70 * t632 + 70 * t620 - 70 * t629 - 70 * t623 - 30 * t624 - 5) * np.exp((1j) * (t627 + t625)) + (t635 - 210 * t618 - 266 * t632 + 454 * t620 + 150 * t630 - 310 * t629 - 30 * t623 + 66 * t624 + 6) * np.exp((-1*1j) * (t628 + t626)) + (t636 - 20 * t618 + 20 * t632 + 20 * t620 - 50 * t630 + 20 * t629 + 20 * t623 - 20 * t624 + 5) * np.exp((-1*1j) * (t627 + t626)) + (t635 + 490 * t618 + 434 * t632 - 286 * t620 - 590 * t630 - 130 * t629 + 150 * t623 + 54 * t624 - 6) * np.exp((1j) * (t628 + t625)))

        if Bindx == 37:
            t649 = np.cos(phi)
            t648 = t649 ** 2
            t655 = t648 ** 2
            t642 = t655 ** 2
            t654 = t649 * t648
            t657 = t654 ** 2
            t663 = -5 + 5 * t642 - 70 * t648 + 70 * t657
            t643 = t649 * t657
            t645 = t649 * t655
            t662 = -30 * t643 - 70 * t645 + 30 * t649 + 70 * t654
            t661 = -420 * t643 + 588 * t645 - 28 * t649 - 140 * t654
            t660 = -28 + 140 * t642 + 280 * t648 - 560 * t655 + 168 * t657
            t653 = 2 * phi1
            t652 = 4 * phi1
            t651 = -3 * phi2
            t650 = 3 * phi2
            tfunc[..., c] = (0.17e2 / 0.1024e4) * ((990 * t642 - 3036 * t657 + 3168 * t655 - 1188 * t648 + 66) * np.exp((6*1j) * phi2) + (t662 + t663) * np.exp((-2*1j) * (t652 + t651)) + (-t662 + t663) * np.exp((2*1j) * (t652 + t650)) + (t660 + t661) * np.exp((-2*1j) * (t653 + t651)) + (t660 - t661) * np.exp((2*1j) * (t653 + t650))) * np.sqrt(0.13e2)

        if Bindx == 38:
            t676 = np.cos(phi)
            t675 = t676 ** 2
            t682 = t675 ** 2
            t669 = t682 ** 2
            t688 = 2 * t669
            t687 = 1 - t676
            t681 = t676 * t675
            t684 = t681 ** 2
            t680 = 4 * phi1
            t679 = 8 * phi1
            t678 = -7 * phi2
            t677 = 7 * phi2
            t672 = t676 * t682
            t670 = t676 * t684
            tfunc[..., c] = (-0.17e2 / 0.3072e4*1j) * np.sqrt(0.5e1) * np.sqrt(0.3e1) * np.sqrt(0.13e2) * np.sqrt(0.2e1) * np.sqrt(t687) * ((1 + t676) ** (-0.1e1 / 0.2e1)) * ((t669 - 6 * t670 + 14 * t684 - 14 * t672 + 14 * t681 - 14 * t675 + 6 * t676 - 1) * np.exp((-1*1j) * (t679 + t678)) + 198 * (t669 + t670 - 3 * t684 - 3 * t672 + 3 * t682 + 3 * t681 - t675 - t676) * np.exp((7*1j) * phi2) + (t669 + 8 * t670 + 28 * t684 + 56 * t672 + 70 * t682 + 56 * t681 + 28 * t675 + 8 * t676 + 1) * np.exp((1j) * (t679 + t677)) + 14 * (t688 - (5 * t670) - t684 + (11 * t672) - (5 * t682) - (7 * t681) + (5 * t675) - t687) * np.exp((-1*1j) * (t680 + t678)) + 14 * (t688 + (9 * t670) + (13 * t684) + t672 - (15 * t682) - (13 * t681) - t675 + (3 * t676) + 0.1e1) * np.exp((1j) * (t680 + t677)))

        if Bindx == 39:
            t701 = np.cos(phi)
            t700 = t701 ** 2
            t702 = t701 * t700
            t705 = t702 ** 2
            t712 = (-t705 - 1) * t701
            t703 = t700 ** 2
            t697 = t701 * t703
            t711 = -56 * t697 - 56 * t702 + 8 * t712
            t694 = t703 ** 2
            t710 = 1 + t694 + 28 * t700 + 70 * t703 + 28 * t705
            t709 = 112 * t697 + 112 * t702 + 112 * t712
            t708 = 28 + 28 * t694 + 112 * t700 - 280 * t703 + 112 * t705
            tfunc[..., c] = (0.17e2 / 0.12288e5) * np.sqrt(0.2e1) * np.sqrt(0.13e2) * np.sqrt(0.3e1) * np.sqrt(0.5e1) * ((198 * t694 - 792 * t705 + 1188 * t703 - 792 * t700 + 198) * np.exp((8*1j) * phi2) + (t710 + t711) * np.exp((-8*1j) * (phi1 - phi2)) + (t710 - t711) * np.exp((8*1j) * (phi1 + phi2)) + (t708 + t709) * np.exp((-4*1j) * (phi1 - 2 * phi2)) + (t708 - t709) * np.exp((4*1j) * (phi1 + 2 * phi2)))

        if Bindx == 40:
            t725 = np.cos(phi)
            t724 = t725 ** 2
            t731 = t724 ** 2
            t735 = t731 ** 2
            t717 = t725 * t735
            t738 = 1 - t717
            t737 = 34 - 34 * t717
            t730 = t725 * t724
            t733 = t730 ** 2
            t729 = 4 * phi1
            t728 = 8 * phi1
            t727 = -9 * phi2
            t726 = 9 * phi2
            t721 = t725 * t731
            t719 = t725 * t733
            tfunc[..., c] = (0.19e2 / 0.2048e4*1j) * np.sqrt((1 + t725)) * np.sqrt(0.3e1) * np.sqrt(0.2e1) * np.sqrt(0.7e1) * ((1 - t725) ** (-0.1e1 / 0.2e1)) * ((-102 * t735 + 272 * t733 + 204 * t721 - 204 * t731 - 272 * t730 + 102 * t725 + t737) * np.exp((-1*1j) * (t729 + t726)) + (-170 * t735 + 272 * t719 - 476 * t721 + 476 * t731 - 272 * t724 + 170 * t725 - t737) * np.exp((1j) * (t729 + t727)) + (7 * t735 + 20 * t719 + 28 * t733 + 14 * t721 - 14 * t731 - 28 * t730 - 20 * t724 - 7 * t725 - t738) * np.exp((-1*1j) * (t728 + t726)) + (9 * t735 - 36 * t719 + 84 * t733 - 126 * t721 + 126 * t731 - 84 * t730 + 36 * t724 - 9 * t725 + t738) * np.exp((1j) * (t728 + t727)))

        if Bindx == 41:
            t751 = np.cos(phi)
            t750 = t751 ** 2
            t753 = t750 ** 2
            t752 = t751 * t750
            t755 = t752 ** 2
            t757 = t753 ** 2
            t762 = 8 + 152 * t750 + 56 * t753 - 280 * t755 - 64 * t757
            t743 = t751 * t757
            t745 = t751 * t755
            t747 = t751 * t753
            t761 = -9 * t743 - 188 * t745 - 182 * t747 + 55 * t751 + 196 * t752
            t760 = -136 + 680 * t750 + 136 * t753 - 1768 * t755 + 1088 * t757
            t759 = -306 * t743 - 680 * t745 + 2516 * t747 + 238 * t751 - 1768 * t752
            tfunc[..., c] = -(0.19e2 / 0.3072e4) * np.sqrt(0.3e1) * np.sqrt(0.7e1) * ((t761 + t762) * np.exp((-8*1j) * (phi1 + phi2)) + (-t759 + t760) * np.exp((-4*1j) * (phi1 + 2 * phi2)) + (t759 + t760) * np.exp((4*1j) * (phi1 - 2 * phi2)) + (-t761 + t762) * np.exp((8*1j) * (phi1 - phi2)))

        if Bindx == 42:
            t776 = np.cos(phi)
            t775 = t776 ** 2
            t782 = t775 ** 2
            t786 = t782 ** 2
            t768 = t776 * t786
            t781 = t776 * t775
            t784 = t781 ** 2
            t770 = t776 * t784
            t783 = t776 * t782
            t792 = -56 * t768 - 112 * t770 - 40 * t776 - 16 * t781 + 224 * t783
            t791 = 952 * t768 - 2128 * t770 - 88 * t776 - 48 * t781 + 1312 * t783
            t767 = t783 ** 2
            t790 = -7 - 9 * t767 - 77 * t775 + 154 * t782 + 70 * t784 - 131 * t786
            t789 = -46 - 306 * t767 + 598 * t775 - 1852 * t782 + 1788 * t784 - 182 * t786
            t780 = 4 * phi1
            t779 = 8 * phi1
            t778 = -7 * phi2
            t777 = 7 * phi2
            tfunc[..., c] = (-0.19e2 / 0.6144e4*1j) * np.sqrt(0.7e1) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.17e2) * ((-t789 + t791) * np.exp((-1*1j) * (t780 + t777)) + (t790 + t792) * np.exp((-1*1j) * (t779 + t777)) + (t789 + t791) * np.exp((1j) * (t780 + t778)) + (-t790 + t792) * np.exp((1j) * (t779 + t778))) * ((1 + t776) ** (-0.1e1 / 0.2e1)) * ((1 - t776) ** (-0.1e1 / 0.2e1))

        if Bindx == 43:
            t805 = np.cos(phi)
            t804 = t805 ** 2
            t811 = t804 ** 2
            t810 = t805 * t804
            t813 = t810 ** 2
            t815 = t811 ** 2
            t820 = 2 + 10 * t804 - 42 * t811 + 14 * t813 + 16 * t815
            t797 = t805 * t815
            t799 = t805 * t813
            t801 = t805 * t811
            t819 = -3 * t797 - 30 * t799 + 28 * t801 - 9 * t805 + 14 * t810
            t818 = -2 + 38 * t804 - 262 * t811 + 498 * t813 - 272 * t815
            t817 = -102 * t797 - 12 * t799 + 288 * t801 + 38 * t805 - 212 * t810
            t809 = 2 * phi1
            t808 = 4 * phi1
            t807 = -3 * phi2
            t806 = 3 * phi2
            tfunc[..., c] = (0.19e2 / 0.512e3) * np.sqrt(0.2e1) * np.sqrt(0.17e2) * np.sqrt(0.7e1) * ((t817 + t818) * np.exp((-2*1j) * (t809 + t806)) + (-t819 + t820) * np.exp((-2*1j) * (t808 + t806)) + (-t817 + t818) * np.exp((2*1j) * (t809 + t807)) + (t819 + t820) * np.exp((2*1j) * (t808 + t807)))

        if Bindx == 44:
            t834 = np.cos(phi)
            t833 = t834 ** 2
            t840 = t833 ** 2
            t844 = t840 ** 2
            t826 = t834 * t844
            t839 = t834 * t833
            t842 = t839 ** 2
            t828 = t834 * t842
            t841 = t834 * t840
            t850 = -40 * t826 + 40 * t828 + 16 * t834 - 72 * t839 + 56 * t841
            t825 = t841 ** 2
            t849 = 5 - 9 * t825 - 5 * t833 - 70 * t840 + 126 * t842 - 47 * t844
            t848 = 680 * t826 - 1640 * t828 + 48 * t834 - 440 * t839 + 1352 * t841
            t847 = -6 - 306 * t825 + 150 * t833 - 460 * t840 + 252 * t842 + 370 * t844
            t838 = 4 * phi1
            t837 = 8 * phi1
            t836 = -5 * phi2
            t835 = 5 * phi2
            tfunc[..., c] = (-0.19e2 / 0.3072e4*1j) * np.sqrt(0.17e2) * np.sqrt(0.3e1) * np.sqrt(0.7e1) * np.sqrt(0.10e2) * ((-t847 + t848) * np.exp((-1*1j) * (t838 + t835)) + (t849 + t850) * np.exp((-1*1j) * (t837 + t835)) + (t847 + t848) * np.exp((1j) * (t838 + t836)) + (-t849 + t850) * np.exp((1j) * (t837 + t836))) * ((1 + t834) ** (-0.1e1 / 0.2e1)) * ((1 - t834) ** (-0.1e1 / 0.2e1))

        if Bindx == 45:
            t863 = np.cos(phi)
            t862 = t863 ** 2
            t866 = t862 ** 2
            t865 = t863 * t862
            t868 = t865 ** 2
            t870 = t866 ** 2
            t875 = 28 - 140 * t862 - 28 * t866 + 364 * t868 - 224 * t870
            t855 = t863 * t870
            t857 = t863 * t868
            t859 = t863 * t866
            t874 = -63 * t855 - 140 * t857 + 518 * t859 + 49 * t863 - 364 * t865
            t873 = 36 - 1044 * t862 + 4796 * t866 - 7532 * t868 + 3808 * t870
            t872 = -2142 * t855 + 2968 * t857 - 532 * t859 + 66 * t863 - 424 * t865
            t864 = 2 * phi1
            tfunc[..., c] = -(0.19e2 / 0.1536e4) * np.sqrt(0.17e2) * np.sqrt(0.3e1) * ((-t872 + t873) * np.exp((-4*1j) * (phi1 + phi2)) + (t874 + t875) * np.exp((-4*1j) * (t864 + phi2)) + (t872 + t873) * np.exp((4*1j) * (phi1 - phi2)) + (-t874 + t875) * np.exp((4*1j) * (t864 - phi2)))

        if Bindx == 46:
            t889 = np.cos(phi)
            t888 = t889 ** 2
            t895 = t888 ** 2
            t899 = t895 ** 2
            t881 = t889 * t899
            t894 = t889 * t888
            t897 = t894 ** 2
            t883 = t889 * t897
            t896 = t889 * t895
            t905 = 56 * t881 - 168 * t883 - 56 * t894 + 168 * t896
            t880 = t896 ** 2
            t904 = -7 - 21 * t880 + 63 * t888 - 126 * t895 + 70 * t897 + 21 * t899
            t903 = -952 * t881 + 2408 * t883 - 64 * t889 + 696 * t894 - 2088 * t896
            t902 = 2 - 714 * t880 - 66 * t888 + 484 * t895 - 1428 * t897 + 1722 * t899
            t893 = 4 * phi1
            t892 = 8 * phi1
            t891 = -3 * phi2
            t890 = 3 * phi2
            tfunc[..., c] = (0.19e2 / 0.1024e4*1j) * np.sqrt(0.17e2) * np.sqrt(0.26e2) * ((1 + t889) ** (-0.1e1 / 0.2e1)) * ((1 - t889) ** (-0.1e1 / 0.2e1)) * ((-t904 + t905) * np.exp((-1*1j) * (t892 + t890)) + (t904 + t905) * np.exp((1j) * (t892 + t891)) + (t902 + t903) * np.exp((-1*1j) * (t893 + t890)) + (-t902 + t903) * np.exp((1j) * (t893 + t891)))

        if Bindx == 47:
            t918 = np.cos(phi)
            t917 = t918 ** 2
            t922 = t917 ** 2
            t921 = t918 * t917
            t924 = t921 ** 2
            t926 = t922 ** 2
            t931 = 2 - 22 * t917 + 54 * t922 - 50 * t924 + 16 * t926
            t910 = t918 * t926
            t912 = t918 * t924
            t914 = t918 * t922
            t930 = -9 * t910 + 22 * t912 - 12 * t914 + 5 * t918 - 6 * t921
            t929 = -2 + 70 * t917 - 358 * t922 + 562 * t924 - 272 * t926
            t928 = -306 * t910 + 700 * t912 - 544 * t914 - 14 * t918 + 164 * t921
            t920 = 2 * phi1
            t919 = 4 * phi1
            tfunc[..., c] = (0.19e2 / 0.1536e4) * np.sqrt(0.17e2) * np.sqrt(0.3e1) * np.sqrt(0.7e1) * np.sqrt(0.26e2) * ((t928 + t929) * np.exp((-2*1j) * (t920 + phi2)) + (-t930 + t931) * np.exp((-2*1j) * (t919 + phi2)) + (-t928 + t929) * np.exp((2*1j) * (t920 - phi2)) + (t930 + t931) * np.exp((2*1j) * (t919 - phi2)))

        if Bindx == 48:
            t945 = np.cos(phi)
            t944 = t945 ** 2
            t949 = t944 ** 2
            t953 = t949 ** 2
            t937 = t945 * t953
            t948 = t945 * t944
            t951 = t948 ** 2
            t939 = t945 * t951
            t950 = t945 * t949
            t959 = -8 * t937 + 32 * t939 - 8 * t945 + 32 * t948 - 48 * t950
            t958 = 136 * t937 - 352 * t939 + 8 * t945 - 96 * t948 + 304 * t950
            t936 = t950 ** 2
            t957 = 1 - 9 * t936 - 13 * t944 + 42 * t949 - 58 * t951 + 37 * t953
            t956 = 2 - 306 * t936 - 74 * t944 + 452 * t949 - 996 * t951 + 922 * t953
            t947 = 4 * phi1
            t946 = 8 * phi1
            tfunc[..., c] = (-0.19e2 / 0.3072e4*1j) * np.sqrt(0.17e2) * np.sqrt(0.3e1) * np.sqrt(0.7e1) * np.sqrt(0.143e3) * ((t957 + t959) * np.exp((-1*1j) * (t946 + phi2)) + (-t957 + t959) * np.exp((1j) * (t946 - phi2)) + (-t956 + t958) * np.exp((-1*1j) * (t947 + phi2)) + (t956 + t958) * np.exp((1j) * (t947 - phi2))) * ((1 + t945) ** (-0.1e1 / 0.2e1)) * ((1 - t945) ** (-0.1e1 / 0.2e1))

        if Bindx == 49:
            t966 = np.cos(phi)
            t965 = t966 ** 2
            t967 = t965 ** 2
            t963 = t965 * t967
            t962 = t967 ** 2
            tfunc[..., c] = (-0.19e2 / 0.512e3*1j) * t966 * np.sqrt(0.17e2) * np.sqrt(0.3e1) * np.sqrt(0.7e1) * np.sqrt(0.1430e4) * ((t962 - 4 * t963 + 6 * t967 - 4 * t965 + 1) * np.sin((8 * phi1)) + (-34 * t962 + 88 * t963 - 76 * t967 + 24 * t965 - 2) * np.sin((4 * phi1)))

        if Bindx == 50:
            t983 = np.cos(phi)
            t982 = t983 ** 2
            t987 = t982 ** 2
            t991 = t987 ** 2
            t975 = t983 * t991
            t986 = t983 * t982
            t989 = t986 ** 2
            t977 = t983 * t989
            t988 = t983 * t987
            t997 = -8 * t975 + 32 * t977 - 8 * t983 + 32 * t986 - 48 * t988
            t996 = 136 * t975 - 352 * t977 + 8 * t983 - 96 * t986 + 304 * t988
            t974 = t988 ** 2
            t995 = 1 - 9 * t974 - 13 * t982 + 42 * t987 - 58 * t989 + 37 * t991
            t994 = 2 - 306 * t974 - 74 * t982 + 452 * t987 - 996 * t989 + 922 * t991
            t985 = 4 * phi1
            t984 = 8 * phi1
            tfunc[..., c] = (0.19e2 / 0.3072e4*1j) * np.sqrt(0.17e2) * np.sqrt(0.3e1) * np.sqrt(0.7e1) * np.sqrt(0.143e3) * ((1 + t983) ** (-0.1e1 / 0.2e1)) * ((1 - t983) ** (-0.1e1 / 0.2e1)) * ((-t995 + t997) * np.exp((-1*1j) * (t984 - phi2)) + (t995 + t997) * np.exp((1j) * (t984 + phi2)) + (t994 + t996) * np.exp((-1*1j) * (t985 - phi2)) + (-t994 + t996) * np.exp((1j) * (t985 + phi2)))

        if Bindx == 51:
            t1010 = np.cos(phi)
            t1009 = t1010 ** 2
            t1014 = t1009 ** 2
            t1013 = t1010 * t1009
            t1016 = t1013 ** 2
            t1018 = t1014 ** 2
            t1023 = 2 - 22 * t1009 + 54 * t1014 - 50 * t1016 + 16 * t1018
            t1002 = t1010 * t1018
            t1004 = t1010 * t1016
            t1006 = t1010 * t1014
            t1022 = -9 * t1002 + 22 * t1004 - 12 * t1006 + 5 * t1010 - 6 * t1013
            t1021 = -2 + 70 * t1009 - 358 * t1014 + 562 * t1016 - 272 * t1018
            t1020 = -306 * t1002 + 700 * t1004 - 544 * t1006 - 14 * t1010 + 164 * t1013
            t1012 = 2 * phi1
            t1011 = 4 * phi1
            tfunc[..., c] = -(0.19e2 / 0.1536e4) * np.sqrt(0.17e2) * np.sqrt(0.3e1) * np.sqrt(0.7e1) * np.sqrt(0.26e2) * ((t1020 + t1021) * np.exp((2*1j) * (t1012 + phi2)) + (-t1022 + t1023) * np.exp((2*1j) * (t1011 + phi2)) + (-t1020 + t1021) * np.exp((-2*1j) * (t1012 - phi2)) + (t1022 + t1023) * np.exp((-2*1j) * (t1011 - phi2)))

        if Bindx == 52:
            t1037 = np.cos(phi)
            t1036 = t1037 ** 2
            t1043 = t1036 ** 2
            t1047 = t1043 ** 2
            t1029 = t1037 * t1047
            t1042 = t1037 * t1036
            t1045 = t1042 ** 2
            t1031 = t1037 * t1045
            t1044 = t1037 * t1043
            t1053 = -56 * t1029 + 168 * t1031 + 56 * t1042 - 168 * t1044
            t1028 = t1044 ** 2
            t1052 = -7 - 21 * t1028 + 63 * t1036 - 126 * t1043 + 70 * t1045 + 21 * t1047
            t1051 = 952 * t1029 - 2408 * t1031 + 64 * t1037 - 696 * t1042 + 2088 * t1044
            t1050 = 2 - 714 * t1028 - 66 * t1036 + 484 * t1043 - 1428 * t1045 + 1722 * t1047
            t1041 = 4 * phi1
            t1040 = 8 * phi1
            t1039 = -3 * phi2
            t1038 = 3 * phi2
            tfunc[..., c] = (0.19e2 / 0.1024e4*1j) * np.sqrt(0.17e2) * np.sqrt(0.26e2) * ((1 + t1037) ** (-0.1e1 / 0.2e1)) * ((1 - t1037) ** (-0.1e1 / 0.2e1)) * ((-t1052 + t1053) * np.exp((-1*1j) * (t1040 + t1039)) + (t1052 + t1053) * np.exp((1j) * (t1040 + t1038)) + (t1050 + t1051) * np.exp((-1*1j) * (t1041 + t1039)) + (-t1050 + t1051) * np.exp((1j) * (t1041 + t1038)))

        if Bindx == 53:
            t1066 = np.cos(phi)
            t1065 = t1066 ** 2
            t1069 = t1065 ** 2
            t1068 = t1066 * t1065
            t1071 = t1068 ** 2
            t1073 = t1069 ** 2
            t1078 = -28 + 140 * t1065 + 28 * t1069 - 364 * t1071 + 224 * t1073
            t1058 = t1066 * t1073
            t1060 = t1066 * t1071
            t1062 = t1066 * t1069
            t1077 = -63 * t1058 - 140 * t1060 + 518 * t1062 + 49 * t1066 - 364 * t1068
            t1076 = -36 + 1044 * t1065 - 4796 * t1069 + 7532 * t1071 - 3808 * t1073
            t1075 = -2142 * t1058 + 2968 * t1060 - 532 * t1062 + 66 * t1066 - 424 * t1068
            t1067 = 2 * phi1
            tfunc[..., c] = -(0.19e2 / 0.1536e4) * np.sqrt(0.17e2) * np.sqrt(0.3e1) * ((-t1075 + t1076) * np.exp((-4*1j) * (phi1 - phi2)) + (t1077 + t1078) * np.exp((-4*1j) * (t1067 - phi2)) + (t1075 + t1076) * np.exp((4*1j) * (phi1 + phi2)) + (-t1077 + t1078) * np.exp((4*1j) * (t1067 + phi2)))

        if Bindx == 54:
            t1092 = np.cos(phi)
            t1091 = t1092 ** 2
            t1098 = t1091 ** 2
            t1102 = t1098 ** 2
            t1084 = t1092 * t1102
            t1097 = t1092 * t1091
            t1100 = t1097 ** 2
            t1086 = t1092 * t1100
            t1099 = t1092 * t1098
            t1108 = 40 * t1084 - 40 * t1086 - 16 * t1092 + 72 * t1097 - 56 * t1099
            t1083 = t1099 ** 2
            t1107 = 5 - 9 * t1083 - 5 * t1091 - 70 * t1098 + 126 * t1100 - 47 * t1102
            t1106 = -680 * t1084 + 1640 * t1086 - 48 * t1092 + 440 * t1097 - 1352 * t1099
            t1105 = -6 - 306 * t1083 + 150 * t1091 - 460 * t1098 + 252 * t1100 + 370 * t1102
            t1096 = 4 * phi1
            t1095 = 8 * phi1
            t1094 = -5 * phi2
            t1093 = 5 * phi2
            tfunc[..., c] = (-0.19e2 / 0.3072e4*1j) * np.sqrt(0.17e2) * np.sqrt(0.3e1) * np.sqrt(0.7e1) * np.sqrt(0.10e2) * ((-t1105 + t1106) * np.exp((-1*1j) * (t1096 + t1094)) + (t1107 + t1108) * np.exp((-1*1j) * (t1095 + t1094)) + (t1105 + t1106) * np.exp((1j) * (t1096 + t1093)) + (-t1107 + t1108) * np.exp((1j) * (t1095 + t1093))) * ((1 + t1092) ** (-0.1e1 / 0.2e1)) * ((1 - t1092) ** (-0.1e1 / 0.2e1))

        if Bindx == 55:
            t1121 = np.cos(phi)
            t1120 = t1121 ** 2
            t1127 = t1120 ** 2
            t1126 = t1121 * t1120
            t1129 = t1126 ** 2
            t1131 = t1127 ** 2
            t1136 = 2 + 10 * t1120 - 42 * t1127 + 14 * t1129 + 16 * t1131
            t1135 = -2 + 38 * t1120 - 262 * t1127 + 498 * t1129 - 272 * t1131
            t1113 = t1121 * t1131
            t1115 = t1121 * t1129
            t1117 = t1121 * t1127
            t1134 = -3 * t1113 - 30 * t1115 + 28 * t1117 - 9 * t1121 + 14 * t1126
            t1133 = -102 * t1113 - 12 * t1115 + 288 * t1117 + 38 * t1121 - 212 * t1126
            t1125 = 2 * phi1
            t1124 = 4 * phi1
            t1123 = -3 * phi2
            t1122 = 3 * phi2
            tfunc[..., c] = -(0.19e2 / 0.512e3) * np.sqrt(0.17e2) * np.sqrt(0.7e1) * np.sqrt(0.2e1) * ((-t1133 + t1135) * np.exp((-2*1j) * (t1125 + t1123)) + (t1134 + t1136) * np.exp((-2*1j) * (t1124 + t1123)) + (t1133 + t1135) * np.exp((2*1j) * (t1125 + t1122)) + (-t1134 + t1136) * np.exp((2*1j) * (t1124 + t1122)))

        if Bindx == 56:
            t1150 = np.cos(phi)
            t1149 = t1150 ** 2
            t1156 = t1149 ** 2
            t1160 = t1156 ** 2
            t1142 = t1150 * t1160
            t1155 = t1150 * t1149
            t1158 = t1155 ** 2
            t1144 = t1150 * t1158
            t1157 = t1150 * t1156
            t1166 = 56 * t1142 + 112 * t1144 + 40 * t1150 + 16 * t1155 - 224 * t1157
            t1165 = -952 * t1142 + 2128 * t1144 + 88 * t1150 + 48 * t1155 - 1312 * t1157
            t1141 = t1157 ** 2
            t1164 = -7 - 9 * t1141 - 77 * t1149 + 154 * t1156 + 70 * t1158 - 131 * t1160
            t1163 = -46 - 306 * t1141 + 598 * t1149 - 1852 * t1156 + 1788 * t1158 - 182 * t1160
            t1154 = 4 * phi1
            t1153 = 8 * phi1
            t1152 = -7 * phi2
            t1151 = 7 * phi2
            tfunc[..., c] = (-0.19e2 / 0.6144e4*1j) * np.sqrt(0.7e1) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.17e2) * ((-t1163 + t1165) * np.exp((-1*1j) * (t1154 + t1152)) + (t1164 + t1166) * np.exp((-1*1j) * (t1153 + t1152)) + (t1163 + t1165) * np.exp((1j) * (t1154 + t1151)) + (-t1164 + t1166) * np.exp((1j) * (t1153 + t1151))) * ((1 + t1150) ** (-0.1e1 / 0.2e1)) * ((1 - t1150) ** (-0.1e1 / 0.2e1))

        if Bindx == 57:
            t1179 = np.cos(phi)
            t1178 = t1179 ** 2
            t1181 = t1178 ** 2
            t1180 = t1179 * t1178
            t1183 = t1180 ** 2
            t1185 = t1181 ** 2
            t1190 = -8 - 152 * t1178 - 56 * t1181 + 280 * t1183 + 64 * t1185
            t1171 = t1179 * t1185
            t1173 = t1179 * t1183
            t1175 = t1179 * t1181
            t1189 = -9 * t1171 - 188 * t1173 - 182 * t1175 + 55 * t1179 + 196 * t1180
            t1188 = 136 - 680 * t1178 - 136 * t1181 + 1768 * t1183 - 1088 * t1185
            t1187 = -306 * t1171 - 680 * t1173 + 2516 * t1175 + 238 * t1179 - 1768 * t1180
            tfunc[..., c] = -(0.19e2 / 0.3072e4) * np.sqrt(0.3e1) * np.sqrt(0.7e1) * ((t1189 + t1190) * np.exp((-8*1j) * (phi1 - phi2)) + (-t1187 + t1188) * np.exp((-4*1j) * (phi1 - 2 * phi2)) + (t1187 + t1188) * np.exp((4*1j) * (phi1 + 2 * phi2)) + (-t1189 + t1190) * np.exp((8*1j) * (phi1 + phi2)))

        if Bindx == 58:
            t1203 = np.cos(phi)
            t1202 = t1203 ** 2
            t1209 = t1202 ** 2
            t1213 = t1209 ** 2
            t1195 = t1203 * t1213
            t1216 = -1 - t1195
            t1215 = -34 - 34 * t1195
            t1208 = t1203 * t1202
            t1211 = t1208 ** 2
            t1207 = 4 * phi1
            t1206 = 8 * phi1
            t1205 = -9 * phi2
            t1204 = 9 * phi2
            t1199 = t1203 * t1209
            t1197 = t1203 * t1211
            tfunc[..., c] = (0.19e2 / 0.2048e4*1j) * np.sqrt((1 - t1203)) * np.sqrt(0.3e1) * np.sqrt(0.7e1) * np.sqrt(0.2e1) * ((-102 * t1213 + 272 * t1211 - 204 * t1199 - 204 * t1209 + 272 * t1208 - 102 * t1203 - t1215) * np.exp((-1*1j) * (t1207 + t1205)) + (-170 * t1213 - 272 * t1197 + 476 * t1199 + 476 * t1209 - 272 * t1202 - 170 * t1203 + t1215) * np.exp((1j) * (t1207 + t1204)) + (7 * t1213 - 20 * t1197 + 28 * t1211 - 14 * t1199 - 14 * t1209 + 28 * t1208 - 20 * t1202 + 7 * t1203 + t1216) * np.exp((-1*1j) * (t1206 + t1205)) + (9 * t1213 + 36 * t1197 + 84 * t1211 + 126 * t1199 + 126 * t1209 + 84 * t1208 + 36 * t1202 + 9 * t1203 - t1216) * np.exp((1j) * (t1206 + t1204))) * ((1 + t1203) ** (-0.1e1 / 0.2e1))

        if Bindx == 59:
            t1230 = np.cos(phi)
            t1229 = t1230 ** 2
            t1236 = t1229 ** 2
            t1239 = t1236 ** 2
            t1240 = t1230 * t1239
            t1246 = t1230 - t1240
            t1235 = t1230 * t1229
            t1237 = t1235 ** 2
            t1225 = t1230 * t1237
            t1245 = -48 * t1225 + 48 * t1235 + 8 * t1246
            t1244 = 96 * t1225 - 96 * t1235 + 48 * t1246
            t1222 = t1230 * t1240
            t1243 = -1 + t1222 - 27 * t1229 - 42 * t1236 + 42 * t1237 + 27 * t1239
            t1242 = -12 + 12 * t1222 - 36 * t1229 + 168 * t1236 - 168 * t1237 + 36 * t1239
            t1234 = 2 * phi1
            t1233 = 4 * phi1
            t1232 = -5 * phi2
            t1231 = 5 * phi2
            tfunc[..., c] = -(0.7e1 / 0.16384e5) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.5e1) * np.sqrt(0.11e2) * np.sqrt(0.17e2) * np.sqrt(0.19e2) * ((-26 * t1222 + 130 * t1239 - 260 * t1237 + 260 * t1236 - 130 * t1229 + 26) * np.exp((-10*1j) * phi2) + (t1243 - t1245) * np.exp((-2*1j) * (t1233 + t1231)) + (t1243 + t1245) * np.exp((2*1j) * (t1233 + t1232)) + (t1242 - t1244) * np.exp((-2*1j) * (t1234 + t1231)) + (t1242 + t1244) * np.exp((2*1j) * (t1234 + t1232)))

        if Bindx == 60:
            t1261 = np.cos(phi)
            t1260 = t1261 ** 2
            t1267 = t1260 ** 2
            t1268 = t1261 * t1267
            t1252 = t1268 ** 2
            t1275 = 5 * t1252 - 84 * t1267 - 126 * t1268
            t1274 = 60 * t1252 + 336 * t1267 + 504 * t1268
            t1271 = t1267 ** 2
            t1266 = t1261 * t1260
            t1269 = t1266 ** 2
            t1265 = 4 * phi1
            t1264 = 8 * phi1
            t1263 = -9 * phi2
            t1262 = 9 * phi2
            t1255 = t1261 * t1269
            t1253 = t1261 * t1271
            tfunc[..., c] = (-0.7e1 / 0.8192e4*1j) * np.sqrt(0.19e2) * np.sqrt(0.11e2) * np.sqrt(0.17e2) * np.sqrt(0.3e1) * np.sqrt(0.2e1) * np.sqrt((1 + t1261)) * (130 * (-t1252 + t1253 + 4 * t1271 - 4 * t1255 - 6 * t1269 + 6 * t1268 + 4 * t1267 - 4 * t1266 - t1260 + t1261) * np.exp((-9*1j) * phi2) + (156 * t1253 - 72 * t1271 - 480 * t1255 - 168 * t1269 - 192 * t1266 - 180 * t1260 + 12 * t1261 + 24 + t1274) * np.exp((-1*1j) * (t1265 + t1262)) + (31 * t1253 + 72 * t1271 + 60 * t1255 - 42 * t1269 + 12 * t1266 + 45 * t1260 + 23 * t1261 + 4 + t1275) * np.exp((-1*1j) * (t1264 + t1262)) + (-276 * t1253 + 360 * t1271 + 192 * t1255 - 840 * t1269 - 480 * t1266 + 108 * t1260 + 60 * t1261 - 24 + t1274) * np.exp((1j) * (t1265 + t1263)) + (-41 * t1253 + 144 * t1271 - 276 * t1255 + 294 * t1269 + 156 * t1266 - 99 * t1260 + 31 * t1261 - 4 + t1275) * np.exp((1j) * (t1264 + t1263))) * ((1 - t1261) ** (-0.1e1 / 0.2e1))

        if Bindx == 61:
            t1290 = np.cos(phi)
            t1289 = t1290 ** 2
            t1292 = t1289 ** 2
            t1296 = t1292 ** 2
            t1282 = t1290 * t1296
            t1291 = t1290 * t1289
            t1294 = t1291 ** 2
            t1284 = t1290 * t1294
            t1293 = t1290 * t1292
            t1302 = -608 * t1282 - 1536 * t1284 - 320 * t1290 + 192 * t1291 + 2016 * t1293
            t1301 = -3648 * t1282 + 7680 * t1284 + 384 * t1290 - 384 * t1291 - 4032 * t1293
            t1281 = t1293 ** 2
            t1300 = 59 + 95 * t1281 + 531 * t1289 - 1722 * t1292 - 210 * t1294 + 1503 * t1296
            t1299 = 132 + 1140 * t1281 - 1980 * t1289 + 6888 * t1292 - 7224 * t1294 + 1044 * t1296
            tfunc[..., c] = -(0.7e1 / 0.8192e4) * np.sqrt(0.3e1) * np.sqrt(0.17e2) * np.sqrt(0.11e2) * ((-2470 * t1281 + 10010 * t1296 - 15340 * t1294 + 10660 * t1292 - 2990 * t1289 + 130) * np.exp((-8*1j) * phi2) + (t1300 - t1302) * np.exp((-8*1j) * (phi1 + phi2)) + (t1299 - t1301) * np.exp((-4*1j) * (phi1 + 2 * phi2)) + (t1299 + t1301) * np.exp((4*1j) * (phi1 - 2 * phi2)) + (t1300 + t1302) * np.exp((8*1j) * (phi1 - phi2)))

        if Bindx == 62:
            t1318 = np.cos(phi)
            t1317 = t1318 ** 2
            t1324 = t1317 ** 2
            t1323 = t1318 * t1317
            t1326 = t1323 ** 2
            t1328 = t1324 ** 2
            t1325 = t1318 * t1324
            t1330 = t1325 ** 2
            t1335 = 44 + 44 * t1317 - 1208 * t1324 + 1960 * t1326 - 308 * t1328 - 532 * t1330
            t1334 = 8 - 184 * t1317 + 2416 * t1324 - 7504 * t1326 + 8456 * t1328 - 3192 * t1330
            t1308 = t1318 * t1330
            t1310 = t1318 * t1328
            t1312 = t1318 * t1326
            t1333 = 95 * t1308 + 1013 * t1310 - 1514 * t1312 - 175 * t1318 + 763 * t1323 - 182 * t1325
            t1332 = 1140 * t1308 - 516 * t1310 - 4376 * t1312 + 364 * t1318 - 2716 * t1323 + 6104 * t1325
            t1322 = 4 * phi1
            t1321 = 8 * phi1
            t1320 = -7 * phi2
            t1319 = 7 * phi2
            tfunc[..., c] = (-0.21e2 / 0.8192e4*1j) * np.sqrt(0.11e2) * np.sqrt(0.17e2) * np.sqrt(0.2e1) * ((1 + t1318) ** (-0.1e1 / 0.2e1)) * ((1 - t1318) ** (-0.1e1 / 0.2e1)) * ((-2470 * t1308 + 10270 * t1310 - 16380 * t1312 + 12220 * t1325 - 4030 * t1323 + 390 * t1318) * np.exp((-7*1j) * phi2) + (t1332 - t1334) * np.exp((-1*1j) * (t1322 + t1319)) + (t1333 - t1335) * np.exp((-1*1j) * (t1321 + t1319)) + (t1332 + t1334) * np.exp((1j) * (t1322 + t1320)) + (t1333 + t1335) * np.exp((1j) * (t1321 + t1320)))

        if Bindx == 63:
            t1350 = np.cos(phi)
            t1349 = t1350 ** 2
            t1356 = t1349 ** 2
            t1360 = t1356 ** 2
            t1342 = t1350 * t1360
            t1355 = t1350 * t1349
            t1358 = t1355 ** 2
            t1344 = t1350 * t1358
            t1357 = t1350 * t1356
            t1366 = -7752 * t1342 + 1360 * t1344 + 1224 * t1350 - 10064 * t1355 + 15232 * t1357
            t1341 = t1357 ** 2
            t1365 = -527 + 1615 * t1341 + 2635 * t1349 + 4522 * t1356 - 19754 * t1358 + 11509 * t1360
            t1364 = 332 + 19380 * t1341 - 9628 * t1349 + 35672 * t1356 - 32088 * t1358 - 13668 * t1360
            t1363 = 46512 * t1342 - 101728 * t1344 + 1872 * t1350 - 20128 * t1355 + 73472 * t1357
            t1354 = 2 * phi1
            t1353 = 4 * phi1
            t1352 = -3 * phi2
            t1351 = 3 * phi2
            tfunc[..., c] = -(0.21e2 / 0.16384e5) * np.sqrt(0.2e1) * np.sqrt(0.11e2) * ((-41990 * t1341 + 139230 * t1360 - 166140 * t1358 + 82940 * t1356 - 14430 * t1349 + 390) * np.exp((-6*1j) * phi2) + (t1363 + t1364) * np.exp((-2*1j) * (t1354 + t1351)) + (t1365 - t1366) * np.exp((-2*1j) * (t1353 + t1351)) + (-t1363 + t1364) * np.exp((2*1j) * (t1354 + t1352)) + (t1365 + t1366) * np.exp((2*1j) * (t1353 + t1352)))

        if Bindx == 64:
            t1382 = np.cos(phi)
            t1381 = t1382 ** 2
            t1388 = t1381 ** 2
            t1392 = t1388 ** 2
            t1389 = t1382 * t1388
            t1394 = t1389 ** 2
            t1399 = -68 + 748 * t1381 - 1632 * t1388 + 2244 * t1392 - 1292 * t1394
            t1387 = t1382 * t1381
            t1390 = t1387 ** 2
            t1398 = 40 - 1400 * t1381 + 8640 * t1388 - 20608 * t1390 + 21080 * t1392 - 7752 * t1394
            t1372 = t1382 * t1394
            t1374 = t1382 * t1392
            t1376 = t1382 * t1390
            t1397 = -323 * t1372 - 1037 * t1374 + 3978 * t1376 - 17 * t1382 + 969 * t1387 - 3570 * t1389
            t1396 = -3876 * t1372 + 7140 * t1374 - 1640 * t1376 - 172 * t1382 + 1740 * t1387 - 3192 * t1389
            t1386 = 4 * phi1
            t1385 = 8 * phi1
            t1384 = -5 * phi2
            t1383 = 5 * phi2
            tfunc[..., c] = (0.21e2 / 0.4096e4*1j) * np.sqrt(0.2e1) * np.sqrt(0.5e1) * np.sqrt(0.11e2) * ((8398 * t1372 - 29614 * t1374 + 38844 * t1376 - 22828 * t1389 + 5590 * t1387 - 390 * t1382) * np.exp((-5*1j) * phi2) + (t1397 + t1399) * np.exp((-1*1j) * (t1385 + t1383)) + (t1397 - t1399) * np.exp((1j) * (t1385 + t1384)) + (t1396 + t1398) * np.exp((-1*1j) * (t1386 + t1383)) + (t1396 - t1398) * np.exp((1j) * (t1386 + t1384))) * ((1 + t1382) ** (-0.1e1 / 0.2e1)) * ((1 - t1382) ** (-0.1e1 / 0.2e1))

        if Bindx == 65:
            t1414 = np.cos(phi)
            t1413 = t1414 ** 2
            t1417 = t1413 ** 2
            t1421 = t1417 ** 2
            t1406 = t1414 * t1421
            t1416 = t1414 * t1413
            t1419 = t1416 ** 2
            t1408 = t1414 * t1419
            t1418 = t1414 * t1417
            t1427 = -5168 * t1406 + 10880 * t1408 + 544 * t1414 - 544 * t1416 - 5712 * t1418
            t1426 = -31008 * t1406 + 69632 * t1408 - 1216 * t1414 + 15424 * t1416 - 53088 * t1418
            t1405 = t1418 ** 2
            t1425 = 4 + 19380 * t1405 - 156 * t1413 - 2296 * t1417 + 19432 * t1419 - 36108 * t1421
            t1424 = 187 + 1615 * t1405 - 2805 * t1413 + 9758 * t1417 - 10234 * t1419 + 1479 * t1421
            t1415 = 2 * phi1
            tfunc[..., c] = -(0.21e2 / 0.4096e4) * np.sqrt(0.11e2) * ((-41990 * t1405 + 117130 * t1421 - 114140 * t1419 + 44980 * t1417 - 6110 * t1413 + 130) * np.exp((-4*1j) * phi2) + (t1425 - t1426) * np.exp((-4*1j) * (phi1 + phi2)) + (t1424 - t1427) * np.exp((-4*1j) * (t1415 + phi2)) + (t1425 + t1426) * np.exp((4*1j) * (phi1 - phi2)) + (t1424 + t1427) * np.exp((4*1j) * (t1415 - phi2)))

        if Bindx == 66:
            t1443 = np.cos(phi)
            t1442 = t1443 ** 2
            t1449 = t1442 ** 2
            t1448 = t1443 * t1442
            t1451 = t1448 ** 2
            t1453 = t1449 ** 2
            t1450 = t1443 * t1449
            t1455 = t1450 ** 2
            t1460 = 68 - 1292 * t1442 + 7344 * t1449 - 14960 * t1451 + 12716 * t1453 - 3876 * t1455
            t1459 = 88 - 3784 * t1442 + 26016 * t1449 - 63392 * t1451 + 64328 * t1453 - 23256 * t1455
            t1433 = t1443 * t1455
            t1435 = t1443 * t1453
            t1437 = t1443 * t1451
            t1458 = 1615 * t1433 - 2839 * t1435 - 1938 * t1437 + 765 * t1443 - 4301 * t1448 + 6698 * t1450
            t1457 = 19380 * t1433 - 53652 * t1435 + 54408 * t1437 - 324 * t1443 + 4996 * t1448 - 24808 * t1450
            t1447 = 4 * phi1
            t1446 = 8 * phi1
            t1445 = -3 * phi2
            t1444 = 3 * phi2
            tfunc[..., c] = (-0.21e2 / 0.4096e4*1j) * np.sqrt(0.2e1) * np.sqrt(0.11e2) * ((-41990 * t1433 + 130390 * t1435 - 148460 * t1437 + 74620 * t1450 - 15470 * t1448 + 910 * t1443) * np.exp((-3*1j) * phi2) + (t1457 - t1459) * np.exp((-1*1j) * (t1447 + t1444)) + (t1458 - t1460) * np.exp((-1*1j) * (t1446 + t1444)) + (t1457 + t1459) * np.exp((1j) * (t1447 + t1445)) + (t1458 + t1460) * np.exp((1j) * (t1446 + t1445))) * ((1 + t1443) ** (-0.1e1 / 0.2e1)) * ((1 - t1443) ** (-0.1e1 / 0.2e1))

        if Bindx == 67:
            t1475 = np.cos(phi)
            t1474 = t1475 ** 2
            t1479 = t1474 ** 2
            t1483 = t1479 ** 2
            t1467 = t1475 * t1483
            t1478 = t1475 * t1474
            t1481 = t1478 ** 2
            t1469 = t1475 * t1481
            t1480 = t1475 * t1479
            t1489 = -2584 * t1467 + 8432 * t1469 - 680 * t1475 + 4624 * t1478 - 9792 * t1480
            t1488 = -15504 * t1467 + 35360 * t1469 - 496 * t1475 + 7136 * t1478 - 26496 * t1480
            t1466 = t1480 ** 2
            t1487 = -17 - 1615 * t1466 + 357 * t1474 + 646 * t1479 - 3910 * t1481 + 4539 * t1483
            t1486 = 52 - 19380 * t1466 - 2340 * t1474 + 17128 * t1479 - 45032 * t1481 + 49572 * t1483
            t1477 = 2 * phi1
            t1476 = 4 * phi1
            tfunc[..., c] = (0.21e2 / 0.8192e4) * np.sqrt(0.11e2) * np.sqrt(0.13e2) * ((41990 * t1466 - 103870 * t1483 + 89180 * t1481 - 30940 * t1479 + 3710 * t1474 - 70) * np.exp((-2*1j) * phi2) + (t1486 + t1488) * np.exp((-2*1j) * (t1477 + phi2)) + (t1487 + t1489) * np.exp((-2*1j) * (t1476 + phi2)) + (t1486 - t1488) * np.exp((2*1j) * (t1477 - phi2)) + (t1487 - t1489) * np.exp((2*1j) * (t1476 - phi2)))

        if Bindx == 68:
            t1505 = np.cos(phi)
            t1504 = t1505 ** 2
            t1509 = t1504 ** 2
            t1508 = t1505 * t1504
            t1511 = t1508 ** 2
            t1513 = t1509 ** 2
            t1510 = t1505 * t1509
            t1515 = t1510 ** 2
            t1520 = 68 - 1564 * t1504 + 5576 * t1509 - 8024 * t1511 + 5236 * t1513 - 1292 * t1515
            t1519 = 24 - 1128 * t1504 + 8304 * t1509 - 21072 * t1511 + 21624 * t1513 - 7752 * t1515
            t1495 = t1505 * t1515
            t1497 = t1505 * t1513
            t1499 = t1505 * t1511
            t1518 = 1615 * t1495 - 6851 * t1497 + 11254 * t1499 - 391 * t1505 + 3179 * t1508 - 8806 * t1510
            t1517 = 19380 * t1495 - 62628 * t1497 + 74856 * t1499 - 564 * t1505 + 8868 * t1508 - 39912 * t1510
            t1507 = 4 * phi1
            t1506 = 8 * phi1
            tfunc[..., c] = (-0.7e1 / 0.4096e4*1j) * np.sqrt(0.13e2) * np.sqrt(0.3e1) * np.sqrt(0.11e2) * ((1 + t1505) ** (-0.1e1 / 0.2e1)) * ((1 - t1505) ** (-0.1e1 / 0.2e1)) * ((-41990 * t1495 + 121550 * t1497 - 128700 * t1499 + 60060 * t1510 - 11550 * t1508 + 630 * t1505) * np.exp((-1*1j) * phi2) + (t1517 - t1519) * np.exp((-1*1j) * (t1507 + phi2)) + (t1518 - t1520) * np.exp((-1*1j) * (t1506 + phi2)) + (t1517 + t1519) * np.exp((1j) * (t1507 - phi2)) + (t1518 + t1520) * np.exp((1j) * (t1506 - phi2)))

        if Bindx == 69:
            t1528 = np.cos(phi)
            t1527 = t1528 ** 2
            t1529 = t1527 ** 2
            t1531 = t1529 ** 2
            t1525 = t1527 * t1529
            t1523 = t1527 * t1531
            tfunc[..., c] = -0.7e1 / 0.4096e4 * np.sqrt(0.2e1) * np.sqrt(0.13e2) * np.sqrt(0.3e1) * np.sqrt(0.5e1) * (-(46189 * t1523) + (109395 * t1531) - (90090 * t1525) + (30030 * t1529) - (3465 * t1527) + 0.63e2 + (42636 * t1523 - 118932 * t1531 + 115896 * t1525 - 45672 * t1529 + 6204 * t1527 - 132) * np.cos((4 * phi1)) + (3553 * t1523 - 14399 * t1531 + 22066 * t1525 - 15334 * t1529 + 4301 * t1527 - 187) * np.cos((8 * phi1)))

        if Bindx == 70:
            t1548 = np.cos(phi)
            t1547 = t1548 ** 2
            t1552 = t1547 ** 2
            t1551 = t1548 * t1547
            t1554 = t1551 ** 2
            t1556 = t1552 ** 2
            t1553 = t1548 * t1552
            t1558 = t1553 ** 2
            t1563 = 68 - 1564 * t1547 + 5576 * t1552 - 8024 * t1554 + 5236 * t1556 - 1292 * t1558
            t1562 = 24 - 1128 * t1547 + 8304 * t1552 - 21072 * t1554 + 21624 * t1556 - 7752 * t1558
            t1538 = t1548 * t1558
            t1540 = t1548 * t1556
            t1542 = t1548 * t1554
            t1561 = 1615 * t1538 - 6851 * t1540 + 11254 * t1542 - 391 * t1548 + 3179 * t1551 - 8806 * t1553
            t1560 = 19380 * t1538 - 62628 * t1540 + 74856 * t1542 - 564 * t1548 + 8868 * t1551 - 39912 * t1553
            t1550 = 4 * phi1
            t1549 = 8 * phi1
            tfunc[..., c] = (-0.7e1 / 0.4096e4*1j) * np.sqrt(0.13e2) * np.sqrt(0.3e1) * np.sqrt(0.11e2) * ((-41990 * t1538 + 121550 * t1540 - 128700 * t1542 + 60060 * t1553 - 11550 * t1551 + 630 * t1548) * np.exp((1j) * phi2) + (t1560 + t1562) * np.exp((-1*1j) * (t1550 - phi2)) + (t1561 + t1563) * np.exp((-1*1j) * (t1549 - phi2)) + (t1560 - t1562) * np.exp((1j) * (t1550 + phi2)) + (t1561 - t1563) * np.exp((1j) * (t1549 + phi2))) * ((1 + t1548) ** (-0.1e1 / 0.2e1)) * ((1 - t1548) ** (-0.1e1 / 0.2e1))

        if Bindx == 71:
            t1578 = np.cos(phi)
            t1577 = t1578 ** 2
            t1582 = t1577 ** 2
            t1586 = t1582 ** 2
            t1570 = t1578 * t1586
            t1581 = t1578 * t1577
            t1584 = t1581 ** 2
            t1572 = t1578 * t1584
            t1583 = t1578 * t1582
            t1592 = -2584 * t1570 + 8432 * t1572 - 680 * t1578 + 4624 * t1581 - 9792 * t1583
            t1591 = -15504 * t1570 + 35360 * t1572 - 496 * t1578 + 7136 * t1581 - 26496 * t1583
            t1569 = t1583 ** 2
            t1590 = 17 + 1615 * t1569 - 357 * t1577 - 646 * t1582 + 3910 * t1584 - 4539 * t1586
            t1589 = -52 + 19380 * t1569 + 2340 * t1577 - 17128 * t1582 + 45032 * t1584 - 49572 * t1586
            t1580 = 2 * phi1
            t1579 = 4 * phi1
            tfunc[..., c] = -(0.21e2 / 0.8192e4) * np.sqrt(0.13e2) * np.sqrt(0.11e2) * ((-41990 * t1569 + 103870 * t1586 - 89180 * t1584 + 30940 * t1582 - 3710 * t1577 + 70) * np.exp((2*1j) * phi2) + (t1589 + t1591) * np.exp((-2*1j) * (t1580 - phi2)) + (t1590 + t1592) * np.exp((-2*1j) * (t1579 - phi2)) + (t1589 - t1591) * np.exp((2*1j) * (t1580 + phi2)) + (t1590 - t1592) * np.exp((2*1j) * (t1579 + phi2)))

        if Bindx == 72:
            t1608 = np.cos(phi)
            t1607 = t1608 ** 2
            t1614 = t1607 ** 2
            t1613 = t1608 * t1607
            t1616 = t1613 ** 2
            t1618 = t1614 ** 2
            t1615 = t1608 * t1614
            t1620 = t1615 ** 2
            t1625 = 68 - 1292 * t1607 + 7344 * t1614 - 14960 * t1616 + 12716 * t1618 - 3876 * t1620
            t1624 = 88 - 3784 * t1607 + 26016 * t1614 - 63392 * t1616 + 64328 * t1618 - 23256 * t1620
            t1598 = t1608 * t1620
            t1600 = t1608 * t1618
            t1602 = t1608 * t1616
            t1623 = 1615 * t1598 - 2839 * t1600 - 1938 * t1602 + 765 * t1608 - 4301 * t1613 + 6698 * t1615
            t1622 = 19380 * t1598 - 53652 * t1600 + 54408 * t1602 - 324 * t1608 + 4996 * t1613 - 24808 * t1615
            t1612 = 4 * phi1
            t1611 = 8 * phi1
            t1610 = -3 * phi2
            t1609 = 3 * phi2
            tfunc[..., c] = (-0.21e2 / 0.4096e4*1j) * np.sqrt(0.2e1) * np.sqrt(0.11e2) * ((1 + t1608) ** (-0.1e1 / 0.2e1)) * ((1 - t1608) ** (-0.1e1 / 0.2e1)) * ((-41990 * t1598 + 130390 * t1600 - 148460 * t1602 + 74620 * t1615 - 15470 * t1613 + 910 * t1608) * np.exp((3*1j) * phi2) + (t1622 + t1624) * np.exp((-1*1j) * (t1612 + t1610)) + (t1623 + t1625) * np.exp((-1*1j) * (t1611 + t1610)) + (t1622 - t1624) * np.exp((1j) * (t1612 + t1609)) + (t1623 - t1625) * np.exp((1j) * (t1611 + t1609)))

        if Bindx == 73:
            t1640 = np.cos(phi)
            t1639 = t1640 ** 2
            t1643 = t1639 ** 2
            t1647 = t1643 ** 2
            t1632 = t1640 * t1647
            t1642 = t1640 * t1639
            t1645 = t1642 ** 2
            t1634 = t1640 * t1645
            t1644 = t1640 * t1643
            t1653 = -5168 * t1632 + 10880 * t1634 + 544 * t1640 - 544 * t1642 - 5712 * t1644
            t1652 = -31008 * t1632 + 69632 * t1634 - 1216 * t1640 + 15424 * t1642 - 53088 * t1644
            t1631 = t1644 ** 2
            t1651 = 4 + 19380 * t1631 - 156 * t1639 - 2296 * t1643 + 19432 * t1645 - 36108 * t1647
            t1650 = 187 + 1615 * t1631 - 2805 * t1639 + 9758 * t1643 - 10234 * t1645 + 1479 * t1647
            t1641 = 2 * phi1
            tfunc[..., c] = -(0.21e2 / 0.4096e4) * np.sqrt(0.11e2) * ((-41990 * t1631 + 117130 * t1647 - 114140 * t1645 + 44980 * t1643 - 6110 * t1639 + 130) * np.exp((4*1j) * phi2) + (t1651 + t1652) * np.exp((-4*1j) * (phi1 - phi2)) + (t1650 + t1653) * np.exp((-4*1j) * (t1641 - phi2)) + (t1651 - t1652) * np.exp((4*1j) * (phi1 + phi2)) + (t1650 - t1653) * np.exp((4*1j) * (t1641 + phi2)))

        if Bindx == 74:
            t1669 = np.cos(phi)
            t1668 = t1669 ** 2
            t1675 = t1668 ** 2
            t1679 = t1675 ** 2
            t1676 = t1669 * t1675
            t1681 = t1676 ** 2
            t1686 = -68 + 748 * t1668 - 1632 * t1675 + 2244 * t1679 - 1292 * t1681
            t1674 = t1669 * t1668
            t1677 = t1674 ** 2
            t1685 = 40 - 1400 * t1668 + 8640 * t1675 - 20608 * t1677 + 21080 * t1679 - 7752 * t1681
            t1659 = t1669 * t1681
            t1661 = t1669 * t1679
            t1663 = t1669 * t1677
            t1684 = 323 * t1659 + 1037 * t1661 - 3978 * t1663 + 17 * t1669 - 969 * t1674 + 3570 * t1676
            t1683 = 3876 * t1659 - 7140 * t1661 + 1640 * t1663 + 172 * t1669 - 1740 * t1674 + 3192 * t1676
            t1673 = 4 * phi1
            t1672 = 8 * phi1
            t1671 = -5 * phi2
            t1670 = 5 * phi2
            tfunc[..., c] = (-0.21e2 / 0.4096e4*1j) * np.sqrt(0.2e1) * np.sqrt(0.5e1) * np.sqrt(0.11e2) * ((1 + t1669) ** (-0.1e1 / 0.2e1)) * ((1 - t1669) ** (-0.1e1 / 0.2e1)) * ((-8398 * t1659 + 29614 * t1661 - 38844 * t1663 + 22828 * t1676 - 5590 * t1674 + 390 * t1669) * np.exp((5*1j) * phi2) + (t1684 + t1686) * np.exp((-1*1j) * (t1672 + t1671)) + (t1684 - t1686) * np.exp((1j) * (t1672 + t1670)) + (t1683 + t1685) * np.exp((-1*1j) * (t1673 + t1671)) + (t1683 - t1685) * np.exp((1j) * (t1673 + t1670)))

        if Bindx == 75:
            t1701 = np.cos(phi)
            t1700 = t1701 ** 2
            t1707 = t1700 ** 2
            t1711 = t1707 ** 2
            t1693 = t1701 * t1711
            t1706 = t1701 * t1700
            t1709 = t1706 ** 2
            t1695 = t1701 * t1709
            t1708 = t1701 * t1707
            t1717 = -7752 * t1693 + 1360 * t1695 + 1224 * t1701 - 10064 * t1706 + 15232 * t1708
            t1692 = t1708 ** 2
            t1716 = 527 - 1615 * t1692 - 2635 * t1700 - 4522 * t1707 + 19754 * t1709 - 11509 * t1711
            t1715 = -332 - 19380 * t1692 + 9628 * t1700 - 35672 * t1707 + 32088 * t1709 + 13668 * t1711
            t1714 = 46512 * t1693 - 101728 * t1695 + 1872 * t1701 - 20128 * t1706 + 73472 * t1708
            t1705 = 2 * phi1
            t1704 = 4 * phi1
            t1703 = -3 * phi2
            t1702 = 3 * phi2
            tfunc[..., c] = (0.21e2 / 0.16384e5) * np.sqrt(0.11e2) * np.sqrt(0.2e1) * ((41990 * t1692 - 139230 * t1711 + 166140 * t1709 - 82940 * t1707 + 14430 * t1700 - 390) * np.exp((6*1j) * phi2) + (t1714 + t1715) * np.exp((-2*1j) * (t1705 + t1703)) + (t1716 - t1717) * np.exp((-2*1j) * (t1704 + t1703)) + (-t1714 + t1715) * np.exp((2*1j) * (t1705 + t1702)) + (t1716 + t1717) * np.exp((2*1j) * (t1704 + t1702)))

        if Bindx == 76:
            t1733 = np.cos(phi)
            t1732 = t1733 ** 2
            t1739 = t1732 ** 2
            t1738 = t1733 * t1732
            t1741 = t1738 ** 2
            t1743 = t1739 ** 2
            t1740 = t1733 * t1739
            t1745 = t1740 ** 2
            t1750 = 44 + 44 * t1732 - 1208 * t1739 + 1960 * t1741 - 308 * t1743 - 532 * t1745
            t1749 = 8 - 184 * t1732 + 2416 * t1739 - 7504 * t1741 + 8456 * t1743 - 3192 * t1745
            t1723 = t1733 * t1745
            t1725 = t1733 * t1743
            t1727 = t1733 * t1741
            t1748 = 95 * t1723 + 1013 * t1725 - 1514 * t1727 - 175 * t1733 + 763 * t1738 - 182 * t1740
            t1747 = 1140 * t1723 - 516 * t1725 - 4376 * t1727 + 364 * t1733 - 2716 * t1738 + 6104 * t1740
            t1737 = 4 * phi1
            t1736 = 8 * phi1
            t1735 = -7 * phi2
            t1734 = 7 * phi2
            tfunc[..., c] = (-0.21e2 / 0.8192e4*1j) * np.sqrt(0.11e2) * np.sqrt(0.17e2) * np.sqrt(0.2e1) * ((-2470 * t1723 + 10270 * t1725 - 16380 * t1727 + 12220 * t1740 - 4030 * t1738 + 390 * t1733) * np.exp((7*1j) * phi2) + (t1747 + t1749) * np.exp((-1*1j) * (t1737 + t1735)) + (t1748 + t1750) * np.exp((-1*1j) * (t1736 + t1735)) + (t1747 - t1749) * np.exp((1j) * (t1737 + t1734)) + (t1748 - t1750) * np.exp((1j) * (t1736 + t1734))) * ((1 + t1733) ** (-0.1e1 / 0.2e1)) * ((1 - t1733) ** (-0.1e1 / 0.2e1))

        if Bindx == 77:
            t1765 = np.cos(phi)
            t1764 = t1765 ** 2
            t1767 = t1764 ** 2
            t1771 = t1767 ** 2
            t1757 = t1765 * t1771
            t1766 = t1765 * t1764
            t1769 = t1766 ** 2
            t1759 = t1765 * t1769
            t1768 = t1765 * t1767
            t1777 = -608 * t1757 - 1536 * t1759 - 320 * t1765 + 192 * t1766 + 2016 * t1768
            t1776 = -3648 * t1757 + 7680 * t1759 + 384 * t1765 - 384 * t1766 - 4032 * t1768
            t1756 = t1768 ** 2
            t1775 = 59 + 95 * t1756 + 531 * t1764 - 1722 * t1767 - 210 * t1769 + 1503 * t1771
            t1774 = 132 + 1140 * t1756 - 1980 * t1764 + 6888 * t1767 - 7224 * t1769 + 1044 * t1771
            tfunc[..., c] = -(0.7e1 / 0.8192e4) * np.sqrt(0.3e1) * np.sqrt(0.17e2) * np.sqrt(0.11e2) * ((-2470 * t1756 + 10010 * t1771 - 15340 * t1769 + 10660 * t1767 - 2990 * t1764 + 130) * np.exp((8*1j) * phi2) + (t1775 + t1777) * np.exp((-8*1j) * (phi1 - phi2)) + (t1774 + t1776) * np.exp((-4*1j) * (phi1 - 2 * phi2)) + (t1774 - t1776) * np.exp((4*1j) * (phi1 + 2 * phi2)) + (t1775 - t1777) * np.exp((8*1j) * (phi1 + phi2)))

        if Bindx == 78:
            t1792 = np.cos(phi)
            t1791 = t1792 ** 2
            t1798 = t1791 ** 2
            t1799 = t1792 * t1798
            t1783 = t1799 ** 2
            t1806 = 5 * t1783 - 84 * t1798 + 126 * t1799
            t1805 = 60 * t1783 + 336 * t1798 - 504 * t1799
            t1802 = t1798 ** 2
            t1797 = t1792 * t1791
            t1800 = t1797 ** 2
            t1796 = 4 * phi1
            t1795 = 8 * phi1
            t1794 = -9 * phi2
            t1793 = 9 * phi2
            t1786 = t1792 * t1800
            t1784 = t1792 * t1802
            tfunc[..., c] = (0.7e1 / 0.8192e4*1j) * np.sqrt(0.11e2) * np.sqrt(0.17e2) * np.sqrt(0.19e2) * np.sqrt(0.3e1) * np.sqrt(0.2e1) * np.sqrt((1 - t1792)) * ((1 + t1792) ** (-0.1e1 / 0.2e1)) * (130 * (-t1783 - t1784 + 4 * t1802 + 4 * t1786 - 6 * t1800 - 6 * t1799 + 4 * t1798 + 4 * t1797 - t1791 - t1792) * np.exp((9*1j) * phi2) + (-156 * t1784 - 72 * t1802 + 480 * t1786 - 168 * t1800 + 192 * t1797 - 180 * t1791 - 12 * t1792 + 24 + t1805) * np.exp((-1*1j) * (t1796 + t1794)) + (-31 * t1784 + 72 * t1802 - 60 * t1786 - 42 * t1800 - 12 * t1797 + 45 * t1791 - 23 * t1792 + 4 + t1806) * np.exp((-1*1j) * (t1795 + t1794)) + (276 * t1784 + 360 * t1802 - 192 * t1786 - 840 * t1800 + 480 * t1797 + 108 * t1791 - 60 * t1792 - 24 + t1805) * np.exp((1j) * (t1796 + t1793)) + (41 * t1784 + 144 * t1802 + 276 * t1786 + 294 * t1800 - 156 * t1797 - 99 * t1791 - 31 * t1792 - 4 + t1806) * np.exp((1j) * (t1795 + t1793)))

        if Bindx == 79:
            t1820 = np.cos(phi)
            t1819 = t1820 ** 2
            t1826 = t1819 ** 2
            t1829 = t1826 ** 2
            t1830 = t1820 * t1829
            t1836 = t1820 - t1830
            t1825 = t1820 * t1819
            t1827 = t1825 ** 2
            t1815 = t1820 * t1827
            t1835 = -48 * t1815 + 48 * t1825 + 8 * t1836
            t1834 = 96 * t1815 - 96 * t1825 + 48 * t1836
            t1812 = t1820 * t1830
            t1833 = 1 - t1812 + 27 * t1819 + 42 * t1826 - 42 * t1827 - 27 * t1829
            t1832 = 12 - 12 * t1812 + 36 * t1819 - 168 * t1826 + 168 * t1827 - 36 * t1829
            t1824 = 2 * phi1
            t1823 = 4 * phi1
            t1822 = -5 * phi2
            t1821 = 5 * phi2
            tfunc[..., c] = (0.7e1 / 0.16384e5) * np.sqrt(0.2e1) * np.sqrt(0.5e1) * np.sqrt(0.11e2) * np.sqrt(0.17e2) * np.sqrt(0.19e2) * np.sqrt(0.3e1) * ((26 * t1812 - 130 * t1829 + 260 * t1827 - 260 * t1826 + 130 * t1819 - 26) * np.exp((10*1j) * phi2) + (t1833 - t1835) * np.exp((-2*1j) * (t1823 + t1822)) + (t1833 + t1835) * np.exp((2*1j) * (t1823 + t1821)) + (t1832 - t1834) * np.exp((-2*1j) * (t1824 + t1822)) + (t1832 + t1834) * np.exp((2*1j) * (t1824 + t1821)))

        if Bindx == 80:
            t1853 = np.cos(phi)
            t1852 = t1853 ** 2
            t1858 = t1852 ** 2
            t1859 = t1853 * t1858
            t1864 = t1859 ** 2
            t1871 = (-t1864 - 1) * t1853
            t1862 = t1858 ** 2
            t1845 = t1853 * t1862
            t1857 = t1853 * t1852
            t1860 = t1857 ** 2
            t1847 = t1853 * t1860
            t1870 = -40 * t1845 + 48 * t1847 - 40 * t1857 + 48 * t1859 + 8 * t1871
            t1869 = 48 * t1845 - 32 * t1847 + 48 * t1857 - 32 * t1859 + 16 * t1871
            t1842 = t1860 ** 2
            t1868 = -4 - 4 * t1842 - 8 * t1852 + 68 * t1858 - 112 * t1860 + 68 * t1862 - 8 * t1864
            t1867 = 1 + t1842 + 26 * t1852 + 15 * t1858 - 84 * t1860 + 15 * t1862 + 26 * t1864
            t1856 = 2 * phi1
            t1855 = -3 * phi2
            t1854 = 3 * phi2
            tfunc[..., c] = (0.15e2 / 0.671744e6) * np.sqrt(0.11e2) * np.sqrt(0.19e2) * np.sqrt(0.13e2) * np.sqrt(0.17e2) * np.sqrt(0.41e2) * np.sqrt(0.7e1) * np.sqrt(0.23e2) * ((6 * t1842 - 36 * t1864 + 90 * t1862 - 120 * t1860 + 90 * t1858 - 36 * t1852 + 6) * np.exp((-12*1j) * phi2) + (t1867 - t1870) * np.exp((-4*1j) * (t1856 + t1854)) + (t1867 + t1870) * np.exp((4*1j) * (t1856 + t1855)) + (t1868 + t1869) * np.exp((-4*1j) * (phi1 + t1854)) + (t1868 - t1869) * np.exp((4*1j) * (phi1 + t1855)))

        if Bindx == 81:
            t1890 = np.cos(phi)
            t1889 = t1890 ** 2
            t1895 = t1889 ** 2
            t1899 = t1895 ** 2
            t1912 = t1899 + t1895
            t1896 = t1890 * t1895
            t1901 = t1896 ** 2
            t1911 = t1901 + t1889
            t1880 = t1890 * t1901
            t1910 = -t1880 - t1890
            t1894 = t1890 * t1889
            t1897 = t1894 ** 2
            t1879 = t1897 ** 2
            t1909 = 1025 * t1879 + 67650 * t1889 + 947100 * t1897 + 67650 * t1901 + 507375 * t1912 + 1025
            t1882 = t1890 * t1899
            t1884 = t1890 * t1897
            t1908 = -12300 * t1880 - 12300 * t1890 - 811800 * t1884 - 811800 * t1896 - 225500 * t1882 - 225500 * t1894
            t1907 = 510048 * t1884 + 510048 * t1896 - 425040 * t1882 - 425040 * t1894 + 85008 * t1910
            t1906 = 10626 * t1879 - 892584 * t1897 + 276276 * t1911 + 159390 * t1912 + 10626
            t1905 = 8825652 * t1882 + 8825652 * t1894 - 5883768 * t1884 - 5883768 * t1896 + 2941884 * t1910
            t1904 = 735471 * t1879 + 20593188 * t1897 + 1470942 * t1911 - 12503007 * t1912 + 735471
            t1893 = 2 * phi1
            t1892 = -3 * phi2
            t1891 = 3 * phi2
            tfunc[..., c] = (0.5e1 / 0.32243712e8) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.41e2) * ((-54083120 * t1897 + 2704156 * t1879 + 2704156 + 40562340 * t1899 + 40562340 * t1895 - 16224936 * t1901 - 16224936 * t1889) * np.exp((-12*1j) * phi2) + (t1904 - t1905) * np.exp((-4*1j) * (phi1 + t1891)) + (t1906 - t1907) * np.exp((-4*1j) * (t1893 + t1891)) + (t1904 + t1905) * np.exp((4*1j) * (phi1 + t1892)) + (t1906 + t1907) * np.exp((4*1j) * (t1893 + t1892)) + (-t1908 + t1909) * np.exp((-12*1j) * (phi1 + phi2)) + (t1908 + t1909) * np.exp((12*1j) * (phi1 - phi2)))

        if Bindx == 82:
            t1928 = np.cos(phi)
            t1927 = t1928 ** 2
            t1934 = t1927 ** 2
            t1935 = t1928 * t1934
            t1940 = t1935 ** 2
            t1918 = t1928 * t1940
            t1943 = -3 * t1918
            t1942 = 1 - t1928
            t1938 = t1934 ** 2
            t1933 = t1928 * t1927
            t1936 = t1933 ** 2
            t1932 = 4 * phi1
            t1931 = 8 * phi1
            t1930 = -11 * phi2
            t1929 = 11 * phi2
            t1922 = t1928 * t1936
            t1920 = t1928 * t1938
            tfunc[..., c] = (-0.5e1 / 0.335872e6*1j) * np.sqrt(0.23e2) * np.sqrt(0.17e2) * np.sqrt(0.13e2) * np.sqrt(0.7e1) * np.sqrt(0.3e1) * np.sqrt(0.19e2) * np.sqrt(0.2e1) * np.sqrt(0.11e2) * np.sqrt(0.41e2) * ((1 + t1928) ** (0.3e1 / 0.2e1)) * (18 * (-t1918 + 2 * t1940 + 3 * t1920 - 8 * t1938 - 2 * t1922 + 12 * t1936 - 2 * t1935 - 8 * t1934 + 3 * t1933 + 2 * t1927 - t1928) * np.exp((-11*1j) * phi2) + 4 * (3 * t1918 + 5 * t1940 - 11 * t1920 - 21 * t1938 + 14 * t1922 + 34 * t1936 - 6 * t1935 - 26 * t1934 - t1933 + 9 * t1927 - t1942) * np.exp((-1*1j) * (t1932 + t1929)) + (t1943 - 16 * t1940 - 27 * t1920 + 2 * t1938 + 58 * t1922 + 56 * t1936 - 14 * t1935 - 52 * t1934 - 23 * t1933 + 8 * t1927 + 9 * t1928 + 2) * np.exp((-1*1j) * (t1931 + t1929)) + (12 * t1918 - 68 * t1940 + 132 * t1920 - 44 * t1938 - 200 * t1922 + 280 * t1936 - 56 * t1935 - 152 * t1934 + 124 * t1933 - 20 * t1927 - 12 * t1928 + 4) * np.exp((1j) * (t1932 + t1930)) + (t1943 + 28 * t1940 - 115 * t1920 + 270 * t1938 - 390 * t1922 + 336 * t1936 - 126 * t1935 - 60 * t1934 + 105 * t1933 - 60 * t1927 + 17 * t1928 - 2) * np.exp((1j) * (t1931 + t1930))) * (t1942 ** (-0.1e1 / 0.2e1))

        if Bindx == 83:
            t1962 = np.cos(phi)
            t1961 = t1962 ** 2
            t1968 = t1962 * t1961
            t1971 = t1968 ** 2
            t1951 = t1971 ** 2
            t1980 = 1025 * t1951
            t1979 = 10626 * t1951
            t1978 = 735471 * t1951
            t1969 = t1961 ** 2
            t1970 = t1962 * t1969
            t1975 = t1970 ** 2
            t1973 = t1969 ** 2
            t1967 = 4 * phi1
            t1966 = 8 * phi1
            t1965 = 12 * phi1
            t1964 = -11 * phi2
            t1963 = 11 * phi2
            t1956 = t1962 * t1971
            t1954 = t1962 * t1973
            t1952 = t1962 * t1975
            tfunc[..., c] = (0.5e1 / 0.2686976e7*1j) * np.sqrt(0.41e2) * np.sqrt((1 + t1962)) * ((1 - t1962) ** (-0.1e1 / 0.2e1)) * (2704156 * (10 * t1973 - 10 * t1956 - 10 * t1971 + 10 * t1970 - 5 * t1975 + 5 * t1954 + 5 * t1969 - 5 * t1968 + t1951 - t1952 - t1961 + t1962) * np.exp((-11*1j) * phi2) + (-1716099 * t1973 - 7845024 * t1954 + 11767536 * t1956 + 2451570 * t1961 - 6619239 * t1969 - 7845024 * t1970 + 6864396 * t1971 - 1470942 * t1975 + t1978 - 245157 + 1961256 * t1952 + 1961256 * t1968) * np.exp((-1*1j) * (t1967 + t1963)) + (t1980 + 10250 * t1952 + 45100 * t1975 - 45100 * t1961 - 10250 * t1962 - 1025 + 169125 * t1973 - 169125 * t1969 + 135300 * t1956 - 135300 * t1970 + 112750 * t1954 - 112750 * t1968) * np.exp((-1*1j) * (t1965 + t1963)) + (67298 * t1952 + 88550 * t1954 - 403788 * t1956 - 60214 * t1961 - 38962 * t1962 + 53130 * t1968 + 265650 * t1969 + 233772 * t1970 - 148764 * t1971 - 212520 * t1973 + 152306 * t1975 + t1979 - 7084) * np.exp((-1*1j) * (t1966 + t1963)) + (-3432198 * t1952 + 5393454 * t1954 + 4903140 * t1956 - 1961256 * t1961 - 490314 * t1962 + 6374082 * t1968 - 1716099 * t1969 - 12748164 * t1970 + 13728792 * t1971 - 14954577 * t1973 + 3922512 * t1975 + t1978 + 245157) * np.exp((1j) * (t1967 + t1964)) + (-88550 * t1952 - 549010 * t1954 + 191268 * t1956 + 152306 * t1961 - 53130 * t1962 - 159390 * t1968 - 159390 * t1969 + 658812 * t1970 - 743820 * t1971 + 425040 * t1973 + 308154 * t1975 + t1979 + 7084) * np.exp((1j) * (t1966 + t1964)) + (t1980 - 12300 * t1952 + 67650 * t1975 + 947100 * t1971 + 67650 * t1961 - 12300 * t1962 + 1025 - 811800 * t1956 - 811800 * t1970 + 507375 * t1973 + 507375 * t1969 - 225500 * t1954 - 225500 * t1968) * np.exp((1j) * (t1965 + t1964)))

        if Bindx == 84:
            t1997 = np.cos(phi)
            t1996 = t1997 ** 2
            t2003 = t1996 ** 2
            t2004 = t1997 * t2003
            t2009 = t2004 ** 2
            t1987 = t1997 * t2009
            t2007 = t2003 ** 2
            t1989 = t1997 * t2007
            t2002 = t1997 * t1996
            t2005 = t2002 ** 2
            t1991 = t1997 * t2005
            t2015 = -920 * t1987 + 2680 * t1989 - 2416 * t1991 - 104 * t1997 + 392 * t2002 + 368 * t2004
            t2014 = -460 * t1987 - 1060 * t1989 + 2472 * t1991 + 140 * t1997 - 540 * t2002 - 552 * t2004
            t1986 = t2005 ** 2
            t2013 = -29 + 69 * t1986 - 116 * t1996 + 1335 * t2003 - 1680 * t2005 - 735 * t2007 + 1156 * t2009
            t2012 = 20 - 276 * t1986 - 400 * t1996 + 2020 * t2003 - 3584 * t2005 + 2332 * t2007 - 112 * t2009
            t2001 = 2 * phi1
            t2000 = 4 * phi1
            t1999 = -5 * phi2
            t1998 = 5 * phi2
            tfunc[..., c] = (0.5e1 / 0.335872e6) * np.sqrt(0.3e1) * np.sqrt(0.11e2) * np.sqrt(0.19e2) * np.sqrt(0.13e2) * np.sqrt(0.17e2) * np.sqrt(0.7e1) * np.sqrt(0.41e2) * ((414 * t1986 - 2088 * t2009 + 4230 * t2007 - 4320 * t2005 + 2250 * t2003 - 504 * t1996 + 18) * np.exp((-10*1j) * phi2) + (t2012 + t2015) * np.exp((-2*1j) * (t2001 + t1998)) + (t2013 - t2014) * np.exp((-2*1j) * (t2000 + t1998)) + (t2012 - t2015) * np.exp((2*1j) * (t2001 + t1999)) + (t2013 + t2014) * np.exp((2*1j) * (t2000 + t1999)))

        if Bindx == 85:
            t2034 = np.cos(phi)
            t2033 = t2034 ** 2
            t2040 = t2034 * t2033
            t2043 = t2040 ** 2
            t2023 = t2043 ** 2
            t2041 = t2033 ** 2
            t2045 = t2041 ** 2
            t2042 = t2034 * t2041
            t2047 = t2042 ** 2
            t2055 = 1025 * t2023 - 45100 * t2033 + 45100 * t2047 - 1025 + 169125 * t2045 - 169125 * t2041
            t2024 = t2034 * t2047
            t2026 = t2034 * t2045
            t2028 = t2034 * t2043
            t2054 = -70840 * t2024 - 163240 * t2026 + 380688 * t2028 + 21560 * t2034 - 83160 * t2040 - 85008 * t2042
            t2053 = -10250 * t2024 + 10250 * t2034 - 135300 * t2028 + 135300 * t2042 - 112750 * t2026 + 112750 * t2040
            t2052 = 10626 * t2023 - 17864 * t2033 + 205590 * t2041 - 258720 * t2043 - 113190 * t2045 + 178024 * t2047 - 4466
            t2051 = -2451570 * t2024 + 7141530 * t2026 - 6438036 * t2028 - 277134 * t2034 + 1044582 * t2040 + 980628 * t2042
            t2050 = 735471 * t2023 + 1065900 * t2033 - 5382795 * t2041 + 9550464 * t2043 - 6214197 * t2045 + 298452 * t2047 - 53295
            t2039 = 2 * phi1
            t2038 = 4 * phi1
            t2037 = 6 * phi1
            t2036 = -5 * phi2
            t2035 = 5 * phi2
            tfunc[..., c] = (0.5e1 / 0.5373952e7) * np.sqrt(0.2e1) * np.sqrt(0.41e2) * np.sqrt(0.23e2) * ((2704156 * t2023 - 13638352 * t2047 + 27629420 * t2045 - 28217280 * t2043 + 14696500 * t2041 - 3292016 * t2033 + 117572) * np.exp((-10*1j) * phi2) + (-t2053 + t2055) * np.exp((-2*1j) * (t2037 + t2035)) + (t2053 + t2055) * np.exp((2*1j) * (t2037 + t2036)) + (t2050 - t2051) * np.exp((-2*1j) * (t2039 + t2035)) + (t2052 - t2054) * np.exp((-2*1j) * (t2038 + t2035)) + (t2050 + t2051) * np.exp((2*1j) * (t2039 + t2036)) + (t2052 + t2054) * np.exp((2*1j) * (t2038 + t2036)))

        if Bindx == 86:
            t2072 = np.cos(phi)
            t2071 = t2072 ** 2
            t2077 = t2072 * t2071
            t2080 = t2077 ** 2
            t2061 = t2080 ** 2
            t2088 = 253 * t2061
            t2087 = -1012 * t2061
            t2078 = t2071 ** 2
            t2079 = t2072 * t2078
            t2084 = t2079 ** 2
            t2082 = t2078 ** 2
            t2076 = 4 * phi1
            t2075 = 8 * phi1
            t2074 = -9 * phi2
            t2073 = 9 * phi2
            t2066 = t2072 * t2080
            t2064 = t2072 * t2082
            t2062 = t2072 * t2084
            tfunc[..., c] = (0.15e2 / 0.335872e6*1j) * np.sqrt(0.2e1) * np.sqrt(0.19e2) * np.sqrt(0.7e1) * np.sqrt(0.17e2) * np.sqrt(0.13e2) * np.sqrt(0.41e2) * np.sqrt((1 + t2072)) * ((1 - t2072) ** (-0.1e1 / 0.2e1)) * ((1518 * t2061 - 1518 * t2062 - 6270 * t2084 + 6270 * t2064 + 9900 * t2082 - 9900 * t2066 - 7260 * t2080 + 7260 * t2079 + 2310 * t2078 - 2310 * t2077 - 198 * t2071 + 198 * t2072) * np.exp((-9*1j) * phi2) + (t2087 - 2024 * t2062 + 2816 * t2084 + 7432 * t2064 - 2036 * t2082 - 10384 * t2066 - 672 * t2080 + 6800 * t2079 + 1252 * t2078 - 2056 * t2077 - 352 * t2071 + 232 * t2072 + 4) * np.exp((-1*1j) * (t2076 + t2073)) + (t2088 + 1265 * t2062 + 1837 * t2084 - 865 * t2064 - 4680 * t2082 - 2934 * t2066 + 2730 * t2080 + 3774 * t2079 + 285 * t2078 - 1355 * t2077 - 487 * t2071 + 115 * t2072 + 62) * np.exp((-1*1j) * (t2075 + t2073)) + (t2087 + 4048 * t2062 - 3256 * t2084 - 6992 * t2064 + 12388 * t2082 + 32 * t2066 - 11088 * t2080 + 4960 * t2079 + 3092 * t2078 - 2288 * t2077 - 120 * t2071 + 240 * t2072 - 4) * np.exp((1j) * (t2076 + t2074)) + (t2088 - 1771 * t2062 + 4873 * t2084 - 5845 * t2064 + 300 * t2082 + 7314 * t2066 - 7518 * t2080 + 1014 * t2079 + 3045 * t2078 - 1975 * t2077 + 133 * t2071 + 239 * t2072 - 62) * np.exp((1j) * (t2075 + t2074)))

        if Bindx == 87:
            t2107 = np.cos(phi)
            t2106 = t2107 ** 2
            t2112 = t2107 * t2106
            t2115 = t2112 ** 2
            t2096 = t2115 ** 2
            t2124 = 1025 * t2096
            t2123 = 10626 * t2096
            t2122 = 735471 * t2096
            t2113 = t2106 ** 2
            t2114 = t2107 * t2113
            t2119 = t2114 ** 2
            t2117 = t2113 ** 2
            t2111 = 4 * phi1
            t2110 = 8 * phi1
            t2109 = -9 * phi2
            t2108 = 9 * phi2
            t2101 = t2107 * t2115
            t2099 = t2107 * t2117
            t2097 = t2107 * t2119
            tfunc[..., c] = (0.5e1 / 0.8060928e7*1j) * np.sqrt(0.11e2) * np.sqrt(0.23e2) * np.sqrt(0.41e2) * np.sqrt(0.3e1) * np.sqrt((1 + t2107)) * ((1 - t2107) ** (-0.1e1 / 0.2e1)) * ((17635800 * t2117 - 17635800 * t2101 - 12932920 * t2115 + 12932920 * t2114 - 11169340 * t2119 + 11169340 * t2099 + 4115020 * t2113 - 4115020 * t2112 + 2704156 * t2096 - 2704156 * t2097 - 352716 * t2106 + 352716 * t2107) * np.exp((-9*1j) * phi2) + (t2124 - 10250 * t2097 + 45100 * t2119 - 45100 * t2106 + 10250 * t2107 - 1025 + 169125 * t2117 - 169125 * t2113 - 135300 * t2101 + 135300 * t2114 - 112750 * t2099 + 112750 * t2112) * np.exp((3*1j) * (t2111 - 3 * phi2)) + (t2124 + 8200 * t2097 + 26650 * t2119 + 41000 * t2099 + 15375 * t2117 - 49200 * t2101 - 86100 * t2115 - 49200 * t2114 + 15375 * t2113 + 41000 * t2112 + 26650 * t2106 + 8200 * t2107 + 1025) * np.exp((-3*1j) * (t2111 + 3 * phi2)) + (1470942 * t2097 - 5401206 * t2099 + 7546572 * t2101 + 255816 * t2106 - 168606 * t2107 + 1494198 * t2112 - 909891 * t2113 - 4941900 * t2114 + 488376 * t2115 + 1479663 * t2117 - 2046528 * t2119 - 2907 + t2122) * np.exp((-1*1j) * (t2111 + t2108)) + (t2123 + 53130 * t2097 + 77154 * t2119 - 36330 * t2099 - 196560 * t2117 - 123228 * t2101 + 114660 * t2115 + 158508 * t2114 + 11970 * t2113 - 56910 * t2112 - 20454 * t2106 + 4830 * t2107 + 2604) * np.exp((-1*1j) * (t2110 + t2108)) + (-2941884 * t2097 + 5081436 * t2099 - 23256 * t2101 + 87210 * t2106 - 174420 * t2107 + 1662804 * t2112 - 2247111 * t2113 - 3604680 * t2114 + 8058204 * t2115 - 9002979 * t2117 + 2366298 * t2119 + 2907 + t2122) * np.exp((1j) * (t2111 + t2109)) + (t2123 - 74382 * t2097 + 204666 * t2119 - 245490 * t2099 + 12600 * t2117 + 307188 * t2101 - 315756 * t2115 + 42588 * t2114 + 127890 * t2113 - 82950 * t2112 + 5586 * t2106 + 10038 * t2107 - 2604) * np.exp((1j) * (t2110 + t2109)))

        if Bindx == 88:
            t2141 = np.cos(phi)
            t2140 = t2141 ** 2
            t2143 = t2140 ** 2
            t2144 = t2141 * t2143
            t2149 = t2144 ** 2
            t2131 = t2141 * t2149
            t2147 = t2143 ** 2
            t2133 = t2141 * t2147
            t2142 = t2141 * t2140
            t2145 = t2142 ** 2
            t2135 = t2141 * t2145
            t2155 = -28336 * t2131 - 2800 * t2133 + 84384 * t2135 - 176 * t2141 + 15120 * t2142 - 69216 * t2144
            t2130 = t2145 ** 2
            t2154 = 673 + 5313 * t2130 - 9422 * t2140 + 22575 * t2143 + 20412 * t2145 - 87345 * t2147 + 48818 * t2149
            t2153 = -21252 * t2130 - 9576 * t2140 + 53956 * t2143 - 103600 * t2145 + 61124 * t2147 + 19096 * t2149 + 252
            t2152 = 56672 * t2131 - 161056 * t2133 + 161728 * t2135 - 672 * t2141 + 10976 * t2142 - 67648 * t2144
            tfunc[..., c] = (0.5e1 / 0.671744e6) * np.sqrt(0.41e2) * np.sqrt(0.2e1) * np.sqrt(0.19e2) * np.sqrt(0.3e1) * np.sqrt(0.13e2) * np.sqrt(0.17e2) * ((31878 * t2130 - 135828 * t2149 + 224730 * t2147 - 178200 * t2145 + 66330 * t2143 - 9108 * t2140 + 198) * np.exp((-8*1j) * phi2) + (t2154 - t2155) * np.exp((-8*1j) * (phi1 + phi2)) + (-t2152 + t2153) * np.exp((-4*1j) * (phi1 + 2 * phi2)) + (t2152 + t2153) * np.exp((4*1j) * (phi1 - 2 * phi2)) + (t2154 + t2155) * np.exp((8*1j) * (phi1 - phi2)))

        if Bindx == 89:
            t2174 = np.cos(phi)
            t2173 = t2174 ** 2
            t2179 = t2173 ** 2
            t2180 = t2174 * t2179
            t2185 = t2180 ** 2
            t2164 = t2174 * t2185
            t2183 = t2179 ** 2
            t2166 = t2174 * t2183
            t2178 = t2174 * t2173
            t2181 = t2178 ** 2
            t2168 = t2174 * t2181
            t2193 = -8200 * t2164 - 41000 * t2166 + 49200 * t2168 - 8200 * t2174 - 41000 * t2178 + 49200 * t2180
            t2163 = t2181 ** 2
            t2192 = 1025 + 1025 * t2163 + 26650 * t2173 + 15375 * t2179 - 86100 * t2181 + 15375 * t2183 + 26650 * t2185
            t2191 = 10626 * t2163 - 18844 * t2173 + 45150 * t2179 + 40824 * t2181 - 174690 * t2183 + 97636 * t2185 + 1346
            t2190 = 56672 * t2164 + 5600 * t2166 - 168768 * t2168 + 352 * t2174 - 30240 * t2178 + 138432 * t2180
            t2189 = -1961256 * t2164 + 5573688 * t2166 - 5596944 * t2168 + 23256 * t2174 - 379848 * t2178 + 2341104 * t2180
            t2188 = 735471 * t2163 + 331398 * t2173 - 1867263 * t2179 + 3585300 * t2181 - 2115327 * t2183 - 660858 * t2185 - 8721
            t2177 = 3 * phi1
            t2176 = -2 * phi2
            t2175 = 2 * phi2
            tfunc[..., c] = (0.5e1 / 0.5373952e7) * np.sqrt(0.41e2) * np.sqrt(0.11e2) * np.sqrt(0.7e1) * np.sqrt(0.23e2) * ((2704156 * t2163 - 11522056 * t2185 + 19063460 * t2183 - 15116400 * t2181 + 5626660 * t2179 - 772616 * t2173 + 16796) * np.exp((-8*1j) * phi2) + (t2190 + t2191) * np.exp((-8*1j) * (phi1 + phi2)) + (t2188 - t2189) * np.exp((-4*1j) * (phi1 + t2175)) + (t2192 - t2193) * np.exp((-4*1j) * (t2177 + t2175)) + (t2188 + t2189) * np.exp((4*1j) * (phi1 + t2176)) + (t2192 + t2193) * np.exp((4*1j) * (t2177 + t2176)) + (-t2190 + t2191) * np.exp((8*1j) * (phi1 - phi2)))

        if Bindx == 90:
            t2211 = np.cos(phi)
            t2210 = t2211 ** 2
            t2217 = t2210 ** 2
            t2216 = t2211 * t2210
            t2219 = t2216 ** 2
            t2221 = t2217 ** 2
            t2218 = t2211 * t2217
            t2223 = t2218 ** 2
            t2225 = t2219 ** 2
            t2230 = 278 - 6116 * t2210 + 34650 * t2217 - 66360 * t2219 + 29610 * t2221 + 32732 * t2223 - 24794 * t2225
            t2199 = t2211 * t2225
            t2201 = t2211 * t2223
            t2203 = t2211 * t2221
            t2205 = t2211 * t2219
            t2229 = -21252 * t2199 + 41272 * t2201 + 7140 * t2203 - 64624 * t2205 + 924 * t2211 - 13384 * t2216 + 49924 * t2218
            t2228 = 5313 * t2199 + 29414 * t2201 - 95405 * t2203 + 82980 * t2205 + 1141 * t2211 - 3178 * t2216 - 20265 * t2218
            t2227 = -3864 * t2210 + 33740 * t2217 - 121296 * t2219 + 205996 * t2221 - 164248 * t2223 + 49588 * t2225 + 84
            t2215 = 4 * phi1
            t2214 = 8 * phi1
            t2213 = -7 * phi2
            t2212 = 7 * phi2
            tfunc[..., c] = (0.5e1 / 0.335872e6*1j) * np.sqrt(0.17e2) * np.sqrt(0.13e2) * np.sqrt(0.3e1) * np.sqrt(0.19e2) * np.sqrt(0.2e1) * np.sqrt(0.41e2) * ((31878 * t2199 - 141372 * t2201 + 247698 * t2203 - 214632 * t2205 + 93258 * t2218 - 17820 * t2216 + 990 * t2211) * np.exp((-7*1j) * phi2) + (-t2227 + t2229) * np.exp((-1*1j) * (t2215 + t2212)) + (t2228 - t2230) * np.exp((-1*1j) * (t2214 + t2212)) + (t2227 + t2229) * np.exp((1j) * (t2215 + t2213)) + (t2228 + t2230) * np.exp((1j) * (t2214 + t2213))) * ((1 + t2211) ** (-0.1e1 / 0.2e1)) * ((1 - t2211) ** (-0.1e1 / 0.2e1))

        if Bindx == 91:
            t2250 = np.cos(phi)
            t2249 = t2250 ** 2
            t2257 = t2249 ** 2
            t2256 = t2250 * t2249
            t2259 = t2256 ** 2
            t2261 = t2257 ** 2
            t2258 = t2250 * t2257
            t2263 = t2258 ** 2
            t2265 = t2259 ** 2
            t2272 = 1025 + 18450 * t2249 - 25625 * t2257 - 36900 * t2259 + 64575 * t2261 - 14350 * t2263 - 7175 * t2265
            t2238 = t2250 * t2265
            t2240 = t2250 * t2263
            t2242 = t2250 * t2261
            t2244 = t2250 * t2259
            t2271 = 1025 * t2238 + 18450 * t2240 - 25625 * t2242 - 36900 * t2244 - 7175 * t2250 - 14350 * t2256 + 64575 * t2258
            t2270 = -12232 * t2249 + 69300 * t2257 - 132720 * t2259 + 59220 * t2261 + 65464 * t2263 - 49588 * t2265 + 556
            t2269 = 10626 * t2238 + 58828 * t2240 - 190810 * t2242 + 165960 * t2244 + 2282 * t2250 - 6356 * t2256 - 40530 * t2258
            t2268 = -133722 * t2249 + 1167645 * t2257 - 4197708 * t2259 + 7128933 * t2261 - 5684154 * t2263 + 1716099 * t2265 + 2907
            t2267 = 735471 * t2238 - 1428306 * t2240 - 247095 * t2242 + 2236452 * t2244 - 31977 * t2250 + 463182 * t2256 - 1727727 * t2258
            t2255 = 4 * phi1
            t2254 = 8 * phi1
            t2253 = -7 * phi2
            t2252 = 7 * phi2
            t2251 = 12 * phi1
            tfunc[..., c] = (0.5e1 / 0.2686976e7*1j) * np.sqrt(0.23e2) * np.sqrt(0.7e1) * np.sqrt(0.11e2) * np.sqrt(0.41e2) * ((1 + t2250) ** (-0.1e1 / 0.2e1)) * ((1 - t2250) ** (-0.1e1 / 0.2e1)) * ((2704156 * t2238 - 11992344 * t2240 + 21011796 * t2242 - 18206864 * t2244 + 7910916 * t2258 - 1511640 * t2256 + 83980 * t2250) * np.exp((-7*1j) * phi2) + (t2267 + t2268) * np.exp((-1*1j) * (t2255 + t2252)) + (t2269 - t2270) * np.exp((-1*1j) * (t2254 + t2252)) + (t2267 - t2268) * np.exp((1j) * (t2255 + t2253)) + (t2269 + t2270) * np.exp((1j) * (t2254 + t2253)) + (t2271 - t2272) * np.exp((-1*1j) * (t2251 + t2252)) + (t2271 + t2272) * np.exp((1j) * (t2251 + t2253)))

        if Bindx == 92:
            t2289 = np.cos(phi)
            t2288 = t2289 ** 2
            t2295 = t2288 ** 2
            t2296 = t2289 * t2295
            t2301 = t2296 ** 2
            t2279 = t2289 * t2301
            t2299 = t2295 ** 2
            t2281 = t2289 * t2299
            t2294 = t2289 * t2288
            t2297 = t2294 ** 2
            t2283 = t2289 * t2297
            t2307 = -134596 * t2279 + 217588 * t2281 - 7752 * t2283 - 7676 * t2289 + 63308 * t2294 - 130872 * t2296
            t2278 = t2297 ** 2
            t2306 = -134596 * t2278 - 10192 * t2288 + 68180 * t2295 - 103936 * t2297 - 77140 * t2299 + 257488 * t2301 + 196
            t2305 = -269192 * t2279 + 750120 * t2281 - 768208 * t2283 + 3976 * t2289 - 69160 * t2294 + 352464 * t2296
            t2304 = 33649 * t2278 + 10108 * t2288 - 106533 * t2295 + 338352 * t2297 - 386403 * t2299 + 111188 * t2301 - 361
            t2293 = 2 * phi1
            t2292 = 4 * phi1
            t2291 = -3 * phi2
            t2290 = 3 * phi2
            tfunc[..., c] = (0.15e2 / 0.335872e6) * np.sqrt(0.41e2) * np.sqrt(0.13e2) * np.sqrt(0.17e2) * ((201894 * t2278 - 737352 * t2301 + 1019502 * t2299 - 653664 * t2297 + 189090 * t2295 - 19800 * t2288 + 330) * np.exp((-6*1j) * phi2) + (t2305 + t2306) * np.exp((-2*1j) * (t2293 + t2290)) + (t2304 - t2307) * np.exp((-2*1j) * (t2292 + t2290)) + (-t2305 + t2306) * np.exp((2*1j) * (t2293 + t2291)) + (t2304 + t2307) * np.exp((2*1j) * (t2292 + t2291)))

        if Bindx == 93:
            t2326 = np.cos(phi)
            t2325 = t2326 ** 2
            t2331 = t2326 * t2325
            t2334 = t2331 ** 2
            t2315 = t2334 ** 2
            t2332 = t2325 ** 2
            t2336 = t2332 ** 2
            t2333 = t2326 * t2332
            t2338 = t2333 ** 2
            t2346 = -1025 + 1025 * t2315 - 12300 * t2325 + 27675 * t2332 - 27675 * t2336 + 12300 * t2338
            t2316 = t2326 * t2338
            t2318 = t2326 * t2336
            t2320 = t2326 * t2334
            t2345 = -6150 * t2316 - 2050 * t2318 + 36900 * t2320 + 6150 * t2326 + 2050 * t2331 - 36900 * t2333
            t2344 = -42504 * t2316 + 68712 * t2318 - 2448 * t2320 - 2424 * t2326 + 19992 * t2331 - 41328 * t2333
            t2343 = 10626 * t2315 + 3192 * t2325 - 33642 * t2332 + 106848 * t2334 - 122022 * t2336 + 35112 * t2338 - 114
            t2342 = -1470942 * t2316 + 4098870 * t2318 - 4197708 * t2320 + 21726 * t2326 - 377910 * t2331 + 1925964 * t2333
            t2341 = 735471 * t2315 + 55692 * t2325 - 372555 * t2332 + 567936 * t2334 + 421515 * t2336 - 1406988 * t2338 - 1071
            t2330 = 2 * phi1
            t2329 = 4 * phi1
            t2328 = -3 * phi2
            t2327 = 3 * phi2
            tfunc[..., c] = (0.5e1 / 0.16121856e8) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.41e2) * np.sqrt(0.19e2) * np.sqrt(0.23e2) * np.sqrt(0.11e2) * np.sqrt(0.7e1) * ((2704156 * t2315 - 9876048 * t2338 + 13655148 * t2336 - 8755136 * t2334 + 2532660 * t2332 - 265200 * t2325 + 4420) * np.exp((-6*1j) * phi2) + (-t2345 + t2346) * np.exp((-6*1j) * (t2330 + phi2)) + (t2345 + t2346) * np.exp((6*1j) * (t2330 - phi2)) + (t2341 - t2342) * np.exp((-2*1j) * (t2330 + t2327)) + (t2343 - t2344) * np.exp((-2*1j) * (t2329 + t2327)) + (t2341 + t2342) * np.exp((2*1j) * (t2330 + t2328)) + (t2343 + t2344) * np.exp((2*1j) * (t2329 + t2328)))

        if Bindx == 94:
            t2364 = np.cos(phi)
            t2363 = t2364 ** 2
            t2370 = t2363 ** 2
            t2369 = t2364 * t2363
            t2372 = t2369 ** 2
            t2374 = t2370 ** 2
            t2371 = t2364 * t2370
            t2376 = t2371 ** 2
            t2378 = t2372 ** 2
            t2383 = -11628 * t2363 + 26562 * t2370 + 94392 * t2372 - 367878 * t2374 + 402420 * t2376 - 144210 * t2378 + 342
            t2352 = t2364 * t2378
            t2354 = t2364 * t2376
            t2356 = t2364 * t2374
            t2358 = t2364 * t2372
            t2382 = 43263 * t2352 + 21318 * t2354 - 341487 * t2356 + 506388 * t2358 - 5985 * t2364 + 72390 * t2369 - 295887 * t2371
            t2381 = -173052 * t2352 + 486552 * t2354 - 475380 * t2356 + 174480 * t2358 + 404 * t2364 - 5544 * t2369 - 7460 * t2371
            t2380 = 19720 * t2363 - 189820 * t2370 + 690736 * t2372 - 1173516 * t2374 + 941640 * t2376 - 288420 * t2378 - 340
            t2368 = 4 * phi1
            t2367 = 8 * phi1
            t2366 = -5 * phi2
            t2365 = 5 * phi2
            tfunc[..., c] = (0.5e1 / 0.335872e6*1j) * np.sqrt(0.41e2) * np.sqrt(0.13e2) * np.sqrt(0.17e2) * np.sqrt(0.2e1) * np.sqrt(0.7e1) * ((1 + t2364) ** (-0.1e1 / 0.2e1)) * ((1 - t2364) ** (-0.1e1 / 0.2e1)) * ((415206 * t2371 - 65340 * t2369 + 2970 * t2364 + 259578 * t2352 - 1015740 * t2354 + 1546182 * t2356 - 1142856 * t2358) * np.exp((-5*1j) * phi2) + (t2380 + t2381) * np.exp((-1*1j) * (t2368 + t2365)) + (t2382 - t2383) * np.exp((-1*1j) * (t2367 + t2365)) + (-t2380 + t2381) * np.exp((1j) * (t2368 + t2366)) + (t2382 + t2383) * np.exp((1j) * (t2367 + t2366)))

        if Bindx == 95:
            t2403 = np.cos(phi)
            t2402 = t2403 ** 2
            t2410 = t2402 ** 2
            t2409 = t2403 * t2402
            t2412 = t2409 ** 2
            t2414 = t2410 ** 2
            t2411 = t2403 * t2410
            t2416 = t2411 ** 2
            t2418 = t2412 ** 2
            t2425 = 84 - 2856 * t2402 + 6524 * t2410 + 23184 * t2412 - 90356 * t2414 + 98840 * t2416 - 35420 * t2418
            t2424 = -1025 - 6150 * t2402 + 29725 * t2410 - 36900 * t2412 + 9225 * t2414 + 10250 * t2416 - 5125 * t2418
            t2391 = t2403 * t2418
            t2393 = t2403 * t2416
            t2395 = t2403 * t2414
            t2397 = t2403 * t2412
            t2423 = 1025 * t2391 + 6150 * t2393 - 29725 * t2395 + 36900 * t2397 + 5125 * t2403 - 10250 * t2409 - 9225 * t2411
            t2422 = 10626 * t2391 + 5236 * t2393 - 83874 * t2395 + 124376 * t2397 - 1470 * t2403 + 17780 * t2409 - 72674 * t2411
            t2421 = 735471 * t2391 - 2067846 * t2393 + 2020365 * t2395 - 741540 * t2397 - 1717 * t2403 + 23562 * t2409 + 31705 * t2411
            t2420 = 83810 * t2402 - 806735 * t2410 + 2935628 * t2412 - 4987443 * t2414 + 4001970 * t2416 - 1225785 * t2418 - 1445
            t2408 = 4 * phi1
            t2407 = 8 * phi1
            t2406 = -5 * phi2
            t2405 = 5 * phi2
            t2404 = 12 * phi1
            tfunc[..., c] = (0.5e1 / 0.2686976e7*1j) * np.sqrt(0.3e1) * np.sqrt(0.41e2) * np.sqrt(0.11e2) * np.sqrt(0.19e2) * np.sqrt(0.23e2) * ((1 + t2403) ** (-0.1e1 / 0.2e1)) * ((1 - t2403) ** (-0.1e1 / 0.2e1)) * ((2704156 * t2391 - 10581480 * t2393 + 16107364 * t2395 - 11905712 * t2397 + 4325412 * t2411 - 680680 * t2409 + 30940 * t2403) * np.exp((-5*1j) * phi2) + (-t2420 + t2421) * np.exp((-1*1j) * (t2408 + t2405)) + (t2422 - t2425) * np.exp((-1*1j) * (t2407 + t2405)) + (t2420 + t2421) * np.exp((1j) * (t2408 + t2406)) + (t2422 + t2425) * np.exp((1j) * (t2407 + t2406)) + (t2423 - t2424) * np.exp((-1*1j) * (t2404 + t2405)) + (t2423 + t2424) * np.exp((1j) * (t2404 + t2406)))

        if Bindx == 96:
            t2442 = np.cos(phi)
            t2441 = t2442 ** 2
            t2445 = t2441 ** 2
            t2446 = t2442 * t2445
            t2451 = t2446 ** 2
            t2432 = t2442 * t2451
            t2449 = t2445 ** 2
            t2434 = t2442 * t2449
            t2444 = t2442 * t2441
            t2447 = t2444 ** 2
            t2436 = t2442 * t2447
            t2457 = -1961256 * t2432 + 5573688 * t2434 - 5596944 * t2436 + 23256 * t2442 - 379848 * t2444 + 2341104 * t2446
            t2456 = -3922512 * t2432 + 10775280 * t2434 - 10821792 * t2436 + 42416 * t2442 - 857360 * t2444 + 4775776 * t2446
            t2431 = t2447 ** 2
            t2455 = 2941884 * t2431 - 59272 * t2441 + 698500 * t2445 - 3352944 * t2447 + 7538820 * t2449 - 7759752 * t2451 + 956
            t2454 = -735471 * t2431 - 331398 * t2441 + 1867263 * t2445 - 3585300 * t2447 + 2115327 * t2449 + 660858 * t2451 + 8721
            t2443 = 2 * phi1
            tfunc[..., c] = -(0.5e1 / 0.671744e6) * np.sqrt(0.41e2) * np.sqrt(0.7e1) * np.sqrt(0.13e2) * ((-4412826 * t2431 + 14197788 * t2451 - 17075718 * t2449 + 9411336 * t2447 - 2325510 * t2445 + 207900 * t2441 - 2970) * np.exp((-4*1j) * phi2) + (t2455 - t2456) * np.exp((-4*1j) * (phi1 + phi2)) + (t2454 + t2457) * np.exp((-4*1j) * (t2443 + phi2)) + (t2455 + t2456) * np.exp((4*1j) * (phi1 - phi2)) + (t2454 - t2457) * np.exp((4*1j) * (t2443 - phi2)))

        if Bindx == 97:
            t2476 = np.cos(phi)
            t2475 = t2476 ** 2
            t2480 = t2475 ** 2
            t2481 = t2476 * t2480
            t2486 = t2481 ** 2
            t2466 = t2476 * t2486
            t2484 = t2480 ** 2
            t2468 = t2476 * t2484
            t2479 = t2476 * t2475
            t2482 = t2479 ** 2
            t2470 = t2476 * t2482
            t2494 = -4100 * t2466 + 12300 * t2468 - 8200 * t2470 - 4100 * t2476 + 12300 * t2479 - 8200 * t2481
            t2493 = -28336 * t2466 + 80528 * t2468 - 80864 * t2470 + 336 * t2476 - 5488 * t2479 + 33824 * t2481
            t2465 = t2482 ** 2
            t2492 = -126 + 10626 * t2465 + 4788 * t2475 - 26978 * t2480 + 51800 * t2482 - 30562 * t2484 - 9548 * t2486
            t2491 = 1025 + 1025 * t2465 + 2050 * t2475 - 17425 * t2480 + 28700 * t2482 - 17425 * t2484 + 2050 * t2486
            t2490 = -980628 * t2466 + 2693820 * t2468 - 2705448 * t2470 + 10604 * t2476 - 214340 * t2479 + 1193944 * t2481
            t2489 = 735471 * t2465 - 14818 * t2475 + 174625 * t2480 - 838236 * t2482 + 1884705 * t2484 - 1939938 * t2486 + 239
            t2478 = 2 * phi1
            t2477 = 3 * phi1
            tfunc[..., c] = (0.5e1 / 0.10747904e8) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.41e2) * np.sqrt(0.11e2) * np.sqrt(0.19e2) * np.sqrt(0.17e2) * np.sqrt(0.23e2) * ((2704156 * t2465 - 8700328 * t2486 + 10463908 * t2484 - 5767216 * t2482 + 1425060 * t2480 - 127400 * t2475 + 1820) * np.exp((-4*1j) * phi2) + (t2489 - t2490) * np.exp((-4*1j) * (phi1 + phi2)) + (t2492 - t2493) * np.exp((-4*1j) * (t2478 + phi2)) + (t2491 - t2494) * np.exp((-4*1j) * (t2477 + phi2)) + (t2489 + t2490) * np.exp((4*1j) * (phi1 - phi2)) + (t2492 + t2493) * np.exp((4*1j) * (t2478 - phi2)) + (t2491 + t2494) * np.exp((4*1j) * (t2477 - phi2)))

        if Bindx == 98:
            t2512 = np.cos(phi)
            t2511 = t2512 ** 2
            t2517 = t2512 * t2511
            t2520 = t2517 ** 2
            t2526 = t2520 ** 2
            t2500 = t2512 * t2526
            t2518 = t2511 ** 2
            t2519 = t2512 * t2518
            t2524 = t2519 ** 2
            t2502 = t2512 * t2524
            t2522 = t2518 ** 2
            t2504 = t2512 * t2522
            t2506 = t2512 * t2520
            t2531 = 81719 * t2500 - 234498 * t2502 + 179265 * t2504 + 55556 * t2506 - 3553 * t2512 + 44574 * t2517 - 123063 * t2519
            t2530 = 27132 * t2511 - 203490 * t2518 + 617576 * t2520 - 893418 * t2522 + 616284 * t2524 - 163438 * t2526 - 646
            t2529 = 17688 * t2511 - 188100 * t2518 + 731408 * t2520 - 1290708 * t2522 + 1056856 * t2524 - 326876 * t2526 - 268
            t2528 = -326876 * t2500 + 1108536 * t2502 - 1466420 * t2504 + 952272 * t2506 - 2028 * t2512 + 45688 * t2517 - 311172 * t2519
            t2516 = 4 * phi1
            t2515 = 8 * phi1
            t2514 = -3 * phi2
            t2513 = 3 * phi2
            tfunc[..., c] = (0.15e2 / 0.167936e6*1j) * np.sqrt(0.41e2) * np.sqrt(0.7e1) * np.sqrt(0.13e2) * ((1 + t2512) ** (-0.1e1 / 0.2e1)) * ((1 - t2512) ** (-0.1e1 / 0.2e1)) * ((490314 * t2500 - 1748076 * t2502 + 2408934 * t2504 - 1602216 * t2506 + 521334 * t2519 - 73260 * t2517 + 2970 * t2512) * np.exp((-3*1j) * phi2) + (t2528 + t2529) * np.exp((-1*1j) * (t2516 + t2513)) + (-t2530 + t2531) * np.exp((-1*1j) * (t2515 + t2513)) + (t2528 - t2529) * np.exp((1j) * (t2516 + t2514)) + (t2530 + t2531) * np.exp((1j) * (t2515 + t2514)))

        if Bindx == 99:
            t2551 = np.cos(phi)
            t2550 = t2551 ** 2
            t2557 = t2550 ** 2
            t2556 = t2551 * t2550
            t2559 = t2556 ** 2
            t2561 = t2557 ** 2
            t2558 = t2551 * t2557
            t2563 = t2558 ** 2
            t2565 = t2559 ** 2
            t2572 = 1025 - 2050 * t2550 - 5125 * t2557 + 20500 * t2559 - 25625 * t2561 + 14350 * t2563 - 3075 * t2565
            t2539 = t2551 * t2565
            t2541 = t2551 * t2563
            t2543 = t2551 * t2561
            t2545 = t2551 * t2559
            t2571 = 1025 * t2539 - 2050 * t2541 - 5125 * t2543 + 20500 * t2545 - 3075 * t2551 + 14350 * t2556 - 25625 * t2558
            t2570 = 10626 * t2539 - 30492 * t2541 + 23310 * t2543 + 7224 * t2545 - 462 * t2551 + 5796 * t2556 - 16002 * t2558
            t2569 = 3528 * t2550 - 26460 * t2557 + 80304 * t2559 - 116172 * t2561 + 80136 * t2563 - 21252 * t2565 - 84
            t2568 = 39798 * t2550 - 423225 * t2557 + 1645668 * t2559 - 2904093 * t2561 + 2377926 * t2563 - 735471 * t2565 - 603
            t2567 = 735471 * t2539 - 2494206 * t2541 + 3299445 * t2543 - 2142612 * t2545 + 4563 * t2551 - 102798 * t2556 + 700137 * t2558
            t2555 = 4 * phi1
            t2554 = 8 * phi1
            t2553 = -3 * phi2
            t2552 = 3 * phi2
            tfunc[..., c] = (0.5e1 / 0.8060928e7*1j) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.41e2) * np.sqrt(0.11e2) * np.sqrt(0.19e2) * np.sqrt(0.17e2) * np.sqrt(0.23e2) * ((1 + t2551) ** (-0.1e1 / 0.2e1)) * ((1 - t2551) ** (-0.1e1 / 0.2e1)) * ((2704156 * t2539 - 9640904 * t2541 + 13285636 * t2543 - 8836464 * t2545 + 2875236 * t2558 - 404040 * t2556 + 16380 * t2551) * np.exp((-3*1j) * phi2) + (t2571 - t2572) * np.exp((-3*1j) * (t2555 + phi2)) + (t2567 - t2568) * np.exp((-1*1j) * (t2555 + t2552)) + (-t2569 + t2570) * np.exp((-1*1j) * (t2554 + t2552)) + (t2567 + t2568) * np.exp((1j) * (t2555 + t2553)) + (t2569 + t2570) * np.exp((1j) * (t2554 + t2553)) + (t2571 + t2572) * np.exp((3*1j) * (t2555 - phi2)))

        if Bindx == 100:
            t2589 = np.cos(phi)
            t2588 = t2589 ** 2
            t2593 = t2588 ** 2
            t2594 = t2589 * t2593
            t2599 = t2594 ** 2
            t2579 = t2589 * t2599
            t2597 = t2593 ** 2
            t2581 = t2589 * t2597
            t2592 = t2589 * t2588
            t2595 = t2592 ** 2
            t2583 = t2589 * t2595
            t2605 = -653752 * t2579 + 1780376 * t2581 - 1741616 * t2583 + 5560 * t2589 - 122520 * t2592 + 731952 * t2594
            t2604 = -326876 * t2579 + 1169260 * t2581 - 1563320 * t2583 + 16796 * t2589 - 239020 * t2592 + 943160 * t2594
            t2578 = t2595 ** 2
            t2603 = 245157 * t2578 - 14212 * t2588 + 143735 * t2593 - 594320 * t2595 + 1057825 * t2597 - 838508 * t2599 + 323
            t2602 = -980628 * t2578 + 42160 * t2588 - 465180 * t2593 + 1888768 * t2595 - 3497444 * t2597 + 3012944 * t2599 - 620
            t2591 = 2 * phi1
            t2590 = 4 * phi1
            tfunc[..., c] = (0.5e1 / 0.335872e6) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.13e2) * np.sqrt(0.41e2) * np.sqrt(0.7e1) * ((594 + 1470942 * t2578 - 4348872 * t2599 + 4796550 * t2597 - 2423520 * t2595 + 549450 * t2593 - 45144 * t2588) * np.exp((-2*1j) * phi2) + (t2602 + t2605) * np.exp((-2*1j) * (t2591 + phi2)) + (t2603 - t2604) * np.exp((-2*1j) * (t2590 + phi2)) + (t2602 - t2605) * np.exp((2*1j) * (t2591 - phi2)) + (t2603 + t2604) * np.exp((2*1j) * (t2590 - phi2)))

        if Bindx == 101:
            t2624 = np.cos(phi)
            t2623 = t2624 ** 2
            t2628 = t2624 * t2623
            t2631 = t2628 ** 2
            t2613 = t2631 ** 2
            t2629 = t2623 ** 2
            t2633 = t2629 ** 2
            t2630 = t2624 * t2629
            t2635 = t2630 ** 2
            t2643 = -1025 + 1025 * t2613 + 4100 * t2623 - 5125 * t2629 + 5125 * t2633 - 4100 * t2635
            t2614 = t2624 * t2635
            t2616 = t2624 * t2633
            t2618 = t2624 * t2631
            t2642 = -14168 * t2614 + 50680 * t2616 - 67760 * t2618 + 728 * t2624 - 10360 * t2628 + 40880 * t2630
            t2641 = -2050 * t2614 + 10250 * t2616 - 20500 * t2618 + 2050 * t2624 - 10250 * t2628 + 20500 * t2630
            t2640 = 14 + 10626 * t2613 - 616 * t2623 + 6230 * t2629 - 25760 * t2631 + 45850 * t2633 - 36344 * t2635
            t2639 = -490314 * t2614 + 1335282 * t2616 - 1306212 * t2618 + 4170 * t2624 - 91890 * t2628 + 548964 * t2630
            t2638 = 735471 * t2613 - 31620 * t2623 + 348885 * t2629 - 1416576 * t2631 + 2623083 * t2633 - 2259708 * t2635 + 465
            t2627 = 2 * phi1
            t2626 = 4 * phi1
            t2625 = 6 * phi1
            tfunc[..., c] = (0.5e1 / 0.2686976e7) * np.sqrt(0.41e2) * np.sqrt(0.23e2) * np.sqrt(0.11e2) * np.sqrt(0.19e2) * np.sqrt(0.17e2) * ((2704156 * t2613 - 7994896 * t2635 + 8817900 * t2633 - 4455360 * t2631 + 1010100 * t2629 - 82992 * t2623 + 1092) * np.exp((-2*1j) * phi2) + (-t2641 + t2643) * np.exp((-2*1j) * (t2625 + phi2)) + (t2641 + t2643) * np.exp((2*1j) * (t2625 - phi2)) + (t2638 - t2639) * np.exp((-2*1j) * (t2627 + phi2)) + (t2640 - t2642) * np.exp((-2*1j) * (t2626 + phi2)) + (t2638 + t2639) * np.exp((2*1j) * (t2627 - phi2)) + (t2640 + t2642) * np.exp((2*1j) * (t2626 - phi2)))

        if Bindx == 102:
            t2661 = np.cos(phi)
            t2660 = t2661 ** 2
            t2665 = t2660 ** 2
            t2664 = t2661 * t2660
            t2667 = t2664 ** 2
            t2669 = t2665 ** 2
            t2666 = t2661 * t2665
            t2671 = t2666 ** 2
            t2673 = t2667 ** 2
            t2678 = 9800 * t2660 - 109620 * t2665 + 443632 * t2667 - 804916 * t2669 + 669256 * t2671 - 208012 * t2673 - 140
            t2677 = 29716 * t2660 - 216410 * t2665 + 581400 * t2667 - 733210 * t2669 + 443156 * t2671 - 104006 * t2673 - 646
            t2649 = t2661 * t2673
            t2651 = t2661 * t2671
            t2653 = t2661 * t2669
            t2655 = t2661 * t2667
            t2676 = 156009 * t2649 - 709954 * t2651 + 1287155 * t2653 - 1169260 * t2655 + 7429 * t2661 - 115634 * t2664 + 544255 * t2666
            t2675 = -624036 * t2649 + 2297176 * t2651 - 3282972 * t2653 + 2275280 * t2655 - 4900 * t2661 + 114520 * t2664 - 775068 * t2666
            t2663 = 4 * phi1
            t2662 = 8 * phi1
            tfunc[..., c] = (0.5e1 / 0.167936e6*1j) * np.sqrt(0.41e2) * np.sqrt(0.11e2) * np.sqrt(0.3e1) * np.sqrt(0.13e2) * ((1 + t2661) ** (-0.1e1 / 0.2e1)) * ((1 - t2661) ** (-0.1e1 / 0.2e1)) * ((936054 * t2649 - 3174444 * t2651 + 4157010 * t2653 - 2625480 * t2655 + 810810 * t2666 - 108108 * t2664 + 4158 * t2661) * np.exp((-1*1j) * phi2) + (t2675 + t2678) * np.exp((-1*1j) * (t2663 + phi2)) + (t2676 - t2677) * np.exp((-1*1j) * (t2662 + phi2)) + (t2675 - t2678) * np.exp((1j) * (t2663 - phi2)) + (t2676 + t2677) * np.exp((1j) * (t2662 - phi2)))

        if Bindx == 103:
            t2698 = np.cos(phi)
            t2697 = t2698 ** 2
            t2703 = t2697 ** 2
            t2702 = t2698 * t2697
            t2705 = t2702 ** 2
            t2707 = t2703 ** 2
            t2704 = t2698 * t2703
            t2709 = t2704 ** 2
            t2711 = t2705 ** 2
            t2718 = -1 + 6 * t2697 - 15 * t2703 + 20 * t2705 - 15 * t2707 + 6 * t2709 - t2711
            t2686 = t2698 * t2711
            t2688 = t2698 * t2709
            t2690 = t2698 * t2707
            t2692 = t2698 * t2705
            t2717 = t2686 + t2698 - 6 * t2688 + 15 * t2690 - 20 * t2692 - 6 * t2702 + 15 * t2704
            t2716 = -44 + 2024 * t2697 - 14740 * t2703 + 39600 * t2705 - 49940 * t2707 + 30184 * t2709 - 7084 * t2711
            t2715 = 10626 * t2686 - 48356 * t2688 + 87670 * t2690 - 79640 * t2692 + 506 * t2698 - 7876 * t2702 + 37070 * t2704
            t2714 = 11550 * t2697 - 129195 * t2703 + 522852 * t2705 - 948651 * t2707 + 788766 * t2709 - 245157 * t2711 - 165
            t2713 = 735471 * t2686 - 2707386 * t2688 + 3869217 * t2690 - 2681580 * t2692 + 5775 * t2698 - 134970 * t2702 + 913473 * t2704
            t2701 = 4 * phi1
            t2700 = 8 * phi1
            t2699 = 12 * phi1
            tfunc[..., c] = (0.5e1 / 0.2686976e7*1j) * np.sqrt(0.2e1) * np.sqrt(0.41e2) * np.sqrt(0.7e1) * np.sqrt(0.23e2) * np.sqrt(0.19e2) * np.sqrt(0.17e2) * ((1 + t2698) ** (-0.1e1 / 0.2e1)) * ((1 - t2698) ** (-0.1e1 / 0.2e1)) * ((2704156 * t2686 - 9170616 * t2688 + 12009140 * t2690 - 7584720 * t2692 + 2342340 * t2704 - 312312 * t2702 + 12012 * t2698) * np.exp((-1*1j) * phi2) + (t2713 - t2714) * np.exp((-1*1j) * (t2701 + phi2)) + (t2715 - t2716) * np.exp((-1*1j) * (t2700 + phi2)) + (t2713 + t2714) * np.exp((1j) * (t2701 - phi2)) + (t2715 + t2716) * np.exp((1j) * (t2700 - phi2)) + 1025 * (t2717 - t2718) * np.exp((-1*1j) * (t2699 + phi2)) + 1025 * (t2717 + t2718) * np.exp((1j) * (t2699 - phi2)))

        if Bindx == 104:
            t2727 = np.cos(phi)
            t2726 = t2727 ** 2
            t2728 = t2726 ** 2
            t2730 = t2728 ** 2
            t2729 = t2726 * t2728
            t2722 = t2726 * t2730
            t2721 = t2729 ** 2
            tfunc[..., c] = 0.15e2 / 0.167936e6 * np.sqrt(0.41e2) * np.sqrt(0.11e2) * ((2028117 * t2721) - (5819814 * t2722) + (6235515 * t2730) - (3063060 * t2729) + (675675 * t2728) - (54054 * t2726) + 0.693e3 + (-2704156 * t2721 + 8700328 * t2722 - 10463908 * t2730 + 5767216 * t2729 - 1425060 * t2728 + 127400 * t2726 - 1820) * np.cos((4 * phi1)) + (676039 * t2721 - 2880514 * t2722 + 4765865 * t2730 - 3779100 * t2729 + 1406665 * t2728 - 193154 * t2726 + 4199) * np.cos((8 * phi1)))

        if Bindx == 105:
            t2742 = np.cos(phi)
            t2741 = t2742 ** 2
            t2743 = t2741 ** 2
            t2745 = t2743 ** 2
            t2744 = t2741 * t2743
            t2737 = t2741 * t2745
            t2736 = t2744 ** 2
            tfunc[..., c] = 0.5e1 / 0.8060928e7 * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.41e2) * np.sqrt(0.19e2) * np.sqrt(0.7e1) * np.sqrt(0.13e2) * np.sqrt(0.17e2) * np.sqrt(0.23e2) * ((1352078 * t2736) - (3879876 * t2737) + (4157010 * t2745) - (2042040 * t2744) + (450450 * t2743) - (36036 * t2741) + 0.462e3 + (735471 * t2736 - 2366298 * t2737 + 2845953 * t2745 - 1568556 * t2744 + 387585 * t2743 - 34650 * t2741 + 495) * np.cos((4 * phi1)) + (10626 * t2736 - 45276 * t2737 + 74910 * t2745 - 59400 * t2744 + 22110 * t2743 - 3036 * t2741 + 66) * np.cos((8 * phi1)) + (1025 * t2736 - 6150 * t2737 + 15375 * t2745 - 20500 * t2744 + 15375 * t2743 - 6150 * t2741 + 1025) * np.cos((12 * phi1)))

        if Bindx == 106:
            t2765 = np.cos(phi)
            t2764 = t2765 ** 2
            t2769 = t2764 ** 2
            t2768 = t2765 * t2764
            t2771 = t2768 ** 2
            t2773 = t2769 ** 2
            t2770 = t2765 * t2769
            t2775 = t2770 ** 2
            t2777 = t2771 ** 2
            t2782 = 9800 * t2764 - 109620 * t2769 + 443632 * t2771 - 804916 * t2773 + 669256 * t2775 - 208012 * t2777 - 140
            t2781 = 29716 * t2764 - 216410 * t2769 + 581400 * t2771 - 733210 * t2773 + 443156 * t2775 - 104006 * t2777 - 646
            t2753 = t2765 * t2777
            t2755 = t2765 * t2775
            t2757 = t2765 * t2773
            t2759 = t2765 * t2771
            t2780 = 156009 * t2753 - 709954 * t2755 + 1287155 * t2757 - 1169260 * t2759 + 7429 * t2765 - 115634 * t2768 + 544255 * t2770
            t2779 = -624036 * t2753 + 2297176 * t2755 - 3282972 * t2757 + 2275280 * t2759 - 4900 * t2765 + 114520 * t2768 - 775068 * t2770
            t2767 = 4 * phi1
            t2766 = 8 * phi1
            tfunc[..., c] = (0.5e1 / 0.167936e6*1j) * np.sqrt(0.41e2) * np.sqrt(0.11e2) * np.sqrt(0.3e1) * np.sqrt(0.13e2) * ((1 + t2765) ** (-0.1e1 / 0.2e1)) * ((1 - t2765) ** (-0.1e1 / 0.2e1)) * ((936054 * t2753 - 3174444 * t2755 + 4157010 * t2757 - 2625480 * t2759 + 810810 * t2770 - 108108 * t2768 + 4158 * t2765) * np.exp((1j) * phi2) + (t2779 - t2782) * np.exp((-1*1j) * (t2767 - phi2)) + (t2780 + t2781) * np.exp((-1*1j) * (t2766 - phi2)) + (t2779 + t2782) * np.exp((1j) * (t2767 + phi2)) + (t2780 - t2781) * np.exp((1j) * (t2766 + phi2)))

        if Bindx == 107:
            t2802 = np.cos(phi)
            t2801 = t2802 ** 2
            t2807 = t2801 ** 2
            t2806 = t2802 * t2801
            t2809 = t2806 ** 2
            t2811 = t2807 ** 2
            t2808 = t2802 * t2807
            t2813 = t2808 ** 2
            t2815 = t2809 ** 2
            t2822 = -1 + 6 * t2801 - 15 * t2807 + 20 * t2809 - 15 * t2811 + 6 * t2813 - t2815
            t2790 = t2802 * t2815
            t2792 = t2802 * t2813
            t2794 = t2802 * t2811
            t2796 = t2802 * t2809
            t2821 = t2790 + t2802 - 6 * t2792 + 15 * t2794 - 20 * t2796 - 6 * t2806 + 15 * t2808
            t2820 = -44 + 2024 * t2801 - 14740 * t2807 + 39600 * t2809 - 49940 * t2811 + 30184 * t2813 - 7084 * t2815
            t2819 = 10626 * t2790 - 48356 * t2792 + 87670 * t2794 - 79640 * t2796 + 506 * t2802 - 7876 * t2806 + 37070 * t2808
            t2818 = 11550 * t2801 - 129195 * t2807 + 522852 * t2809 - 948651 * t2811 + 788766 * t2813 - 245157 * t2815 - 165
            t2817 = 735471 * t2790 - 2707386 * t2792 + 3869217 * t2794 - 2681580 * t2796 + 5775 * t2802 - 134970 * t2806 + 913473 * t2808
            t2805 = 4 * phi1
            t2804 = 8 * phi1
            t2803 = 12 * phi1
            tfunc[..., c] = (0.5e1 / 0.2686976e7*1j) * np.sqrt(0.2e1) * np.sqrt(0.41e2) * np.sqrt(0.7e1) * np.sqrt(0.23e2) * np.sqrt(0.19e2) * np.sqrt(0.17e2) * ((1 + t2802) ** (-0.1e1 / 0.2e1)) * ((1 - t2802) ** (-0.1e1 / 0.2e1)) * ((2704156 * t2790 - 9170616 * t2792 + 12009140 * t2794 - 7584720 * t2796 + 2342340 * t2808 - 312312 * t2806 + 12012 * t2802) * np.exp((1j) * phi2) + (t2817 + t2818) * np.exp((-1*1j) * (t2805 - phi2)) + (t2819 + t2820) * np.exp((-1*1j) * (t2804 - phi2)) + (t2817 - t2818) * np.exp((1j) * (t2805 + phi2)) + (t2819 - t2820) * np.exp((1j) * (t2804 + phi2)) + 1025 * (t2821 + t2822) * np.exp((-1*1j) * (t2803 - phi2)) + 1025 * (t2821 - t2822) * np.exp((1j) * (t2803 + phi2)))

        if Bindx == 108:
            t2839 = np.cos(phi)
            t2838 = t2839 ** 2
            t2843 = t2838 ** 2
            t2844 = t2839 * t2843
            t2849 = t2844 ** 2
            t2829 = t2839 * t2849
            t2847 = t2843 ** 2
            t2831 = t2839 * t2847
            t2842 = t2839 * t2838
            t2845 = t2842 ** 2
            t2833 = t2839 * t2845
            t2855 = -653752 * t2829 + 1780376 * t2831 - 1741616 * t2833 + 5560 * t2839 - 122520 * t2842 + 731952 * t2844
            t2854 = -326876 * t2829 + 1169260 * t2831 - 1563320 * t2833 + 16796 * t2839 - 239020 * t2842 + 943160 * t2844
            t2828 = t2845 ** 2
            t2853 = 245157 * t2828 - 14212 * t2838 + 143735 * t2843 - 594320 * t2845 + 1057825 * t2847 - 838508 * t2849 + 323
            t2852 = -980628 * t2828 + 42160 * t2838 - 465180 * t2843 + 1888768 * t2845 - 3497444 * t2847 + 3012944 * t2849 - 620
            t2841 = 2 * phi1
            t2840 = 4 * phi1
            tfunc[..., c] = (0.5e1 / 0.335872e6) * np.sqrt(0.41e2) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.13e2) * np.sqrt(0.7e1) * ((594 + 1470942 * t2828 - 4348872 * t2849 + 4796550 * t2847 - 2423520 * t2845 + 549450 * t2843 - 45144 * t2838) * np.exp((2*1j) * phi2) + (t2852 - t2855) * np.exp((-2*1j) * (t2841 - phi2)) + (t2853 + t2854) * np.exp((-2*1j) * (t2840 - phi2)) + (t2852 + t2855) * np.exp((2*1j) * (t2841 + phi2)) + (t2853 - t2854) * np.exp((2*1j) * (t2840 + phi2)))

        if Bindx == 109:
            t2874 = np.cos(phi)
            t2873 = t2874 ** 2
            t2878 = t2874 * t2873
            t2881 = t2878 ** 2
            t2863 = t2881 ** 2
            t2879 = t2873 ** 2
            t2883 = t2879 ** 2
            t2880 = t2874 * t2879
            t2885 = t2880 ** 2
            t2893 = -1025 + 1025 * t2863 + 4100 * t2873 - 5125 * t2879 + 5125 * t2883 - 4100 * t2885
            t2864 = t2874 * t2885
            t2866 = t2874 * t2883
            t2868 = t2874 * t2881
            t2892 = -14168 * t2864 + 50680 * t2866 - 67760 * t2868 + 728 * t2874 - 10360 * t2878 + 40880 * t2880
            t2891 = -2050 * t2864 + 10250 * t2866 - 20500 * t2868 + 2050 * t2874 - 10250 * t2878 + 20500 * t2880
            t2890 = 14 + 10626 * t2863 - 616 * t2873 + 6230 * t2879 - 25760 * t2881 + 45850 * t2883 - 36344 * t2885
            t2889 = -490314 * t2864 + 1335282 * t2866 - 1306212 * t2868 + 4170 * t2874 - 91890 * t2878 + 548964 * t2880
            t2888 = 735471 * t2863 - 31620 * t2873 + 348885 * t2879 - 1416576 * t2881 + 2623083 * t2883 - 2259708 * t2885 + 465
            t2877 = 2 * phi1
            t2876 = 4 * phi1
            t2875 = 6 * phi1
            tfunc[..., c] = (0.5e1 / 0.2686976e7) * np.sqrt(0.41e2) * np.sqrt(0.23e2) * np.sqrt(0.11e2) * np.sqrt(0.19e2) * np.sqrt(0.17e2) * ((2704156 * t2863 - 7994896 * t2885 + 8817900 * t2883 - 4455360 * t2881 + 1010100 * t2879 - 82992 * t2873 + 1092) * np.exp((2*1j) * phi2) + (t2891 + t2893) * np.exp((-2*1j) * (t2875 - phi2)) + (-t2891 + t2893) * np.exp((2*1j) * (t2875 + phi2)) + (t2888 + t2889) * np.exp((-2*1j) * (t2877 - phi2)) + (t2890 + t2892) * np.exp((-2*1j) * (t2876 - phi2)) + (t2888 - t2889) * np.exp((2*1j) * (t2877 + phi2)) + (t2890 - t2892) * np.exp((2*1j) * (t2876 + phi2)))

        if Bindx == 110:
            t2911 = np.cos(phi)
            t2910 = t2911 ** 2
            t2916 = t2911 * t2910
            t2919 = t2916 ** 2
            t2925 = t2919 ** 2
            t2899 = t2911 * t2925
            t2917 = t2910 ** 2
            t2918 = t2911 * t2917
            t2923 = t2918 ** 2
            t2901 = t2911 * t2923
            t2921 = t2917 ** 2
            t2903 = t2911 * t2921
            t2905 = t2911 * t2919
            t2930 = 81719 * t2899 - 234498 * t2901 + 179265 * t2903 + 55556 * t2905 - 3553 * t2911 + 44574 * t2916 - 123063 * t2918
            t2929 = 27132 * t2910 - 203490 * t2917 + 617576 * t2919 - 893418 * t2921 + 616284 * t2923 - 163438 * t2925 - 646
            t2928 = 17688 * t2910 - 188100 * t2917 + 731408 * t2919 - 1290708 * t2921 + 1056856 * t2923 - 326876 * t2925 - 268
            t2927 = -326876 * t2899 + 1108536 * t2901 - 1466420 * t2903 + 952272 * t2905 - 2028 * t2911 + 45688 * t2916 - 311172 * t2918
            t2915 = 4 * phi1
            t2914 = 8 * phi1
            t2913 = -3 * phi2
            t2912 = 3 * phi2
            tfunc[..., c] = (0.15e2 / 0.167936e6*1j) * np.sqrt(0.41e2) * np.sqrt(0.13e2) * np.sqrt(0.7e1) * ((1 + t2911) ** (-0.1e1 / 0.2e1)) * ((1 - t2911) ** (-0.1e1 / 0.2e1)) * ((490314 * t2899 - 1748076 * t2901 + 2408934 * t2903 - 1602216 * t2905 + 521334 * t2918 - 73260 * t2916 + 2970 * t2911) * np.exp((3*1j) * phi2) + (t2927 - t2928) * np.exp((-1*1j) * (t2915 + t2913)) + (t2929 + t2930) * np.exp((-1*1j) * (t2914 + t2913)) + (t2927 + t2928) * np.exp((1j) * (t2915 + t2912)) + (-t2929 + t2930) * np.exp((1j) * (t2914 + t2912)))

        if Bindx == 111:
            t2950 = np.cos(phi)
            t2949 = t2950 ** 2
            t2956 = t2949 ** 2
            t2955 = t2950 * t2949
            t2958 = t2955 ** 2
            t2960 = t2956 ** 2
            t2957 = t2950 * t2956
            t2962 = t2957 ** 2
            t2964 = t2958 ** 2
            t2971 = 1025 - 2050 * t2949 - 5125 * t2956 + 20500 * t2958 - 25625 * t2960 + 14350 * t2962 - 3075 * t2964
            t2938 = t2950 * t2964
            t2940 = t2950 * t2962
            t2942 = t2950 * t2960
            t2944 = t2950 * t2958
            t2970 = 1025 * t2938 - 2050 * t2940 - 5125 * t2942 + 20500 * t2944 - 3075 * t2950 + 14350 * t2955 - 25625 * t2957
            t2969 = 10626 * t2938 - 30492 * t2940 + 23310 * t2942 + 7224 * t2944 - 462 * t2950 + 5796 * t2955 - 16002 * t2957
            t2968 = 3528 * t2949 - 26460 * t2956 + 80304 * t2958 - 116172 * t2960 + 80136 * t2962 - 21252 * t2964 - 84
            t2967 = 39798 * t2949 - 423225 * t2956 + 1645668 * t2958 - 2904093 * t2960 + 2377926 * t2962 - 735471 * t2964 - 603
            t2966 = 735471 * t2938 - 2494206 * t2940 + 3299445 * t2942 - 2142612 * t2944 + 4563 * t2950 - 102798 * t2955 + 700137 * t2957
            t2954 = 4 * phi1
            t2953 = 8 * phi1
            t2952 = -3 * phi2
            t2951 = 3 * phi2
            tfunc[..., c] = (0.5e1 / 0.8060928e7*1j) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.41e2) * np.sqrt(0.23e2) * np.sqrt(0.17e2) * np.sqrt(0.11e2) * np.sqrt(0.19e2) * ((1 + t2950) ** (-0.1e1 / 0.2e1)) * ((1 - t2950) ** (-0.1e1 / 0.2e1)) * ((2704156 * t2938 - 9640904 * t2940 + 13285636 * t2942 - 8836464 * t2944 + 2875236 * t2957 - 404040 * t2955 + 16380 * t2950) * np.exp((3*1j) * phi2) + (t2970 + t2971) * np.exp((-3*1j) * (t2954 - phi2)) + (t2966 + t2967) * np.exp((-1*1j) * (t2954 + t2952)) + (t2968 + t2969) * np.exp((-1*1j) * (t2953 + t2952)) + (t2966 - t2967) * np.exp((1j) * (t2954 + t2951)) + (-t2968 + t2969) * np.exp((1j) * (t2953 + t2951)) + (t2970 - t2971) * np.exp((3*1j) * (t2954 + phi2)))

        if Bindx == 112:
            t2988 = np.cos(phi)
            t2987 = t2988 ** 2
            t2991 = t2987 ** 2
            t2992 = t2988 * t2991
            t2997 = t2992 ** 2
            t2978 = t2988 * t2997
            t2995 = t2991 ** 2
            t2980 = t2988 * t2995
            t2990 = t2988 * t2987
            t2993 = t2990 ** 2
            t2982 = t2988 * t2993
            t3003 = -1961256 * t2978 + 5573688 * t2980 - 5596944 * t2982 + 23256 * t2988 - 379848 * t2990 + 2341104 * t2992
            t3002 = -3922512 * t2978 + 10775280 * t2980 - 10821792 * t2982 + 42416 * t2988 - 857360 * t2990 + 4775776 * t2992
            t2977 = t2993 ** 2
            t3001 = 2941884 * t2977 - 59272 * t2987 + 698500 * t2991 - 3352944 * t2993 + 7538820 * t2995 - 7759752 * t2997 + 956
            t3000 = -735471 * t2977 - 331398 * t2987 + 1867263 * t2991 - 3585300 * t2993 + 2115327 * t2995 + 660858 * t2997 + 8721
            t2989 = 2 * phi1
            tfunc[..., c] = -(0.5e1 / 0.671744e6) * np.sqrt(0.41e2) * np.sqrt(0.7e1) * np.sqrt(0.13e2) * ((-4412826 * t2977 + 14197788 * t2997 - 17075718 * t2995 + 9411336 * t2993 - 2325510 * t2991 + 207900 * t2987 - 2970) * np.exp((4*1j) * phi2) + (t3001 + t3002) * np.exp((-4*1j) * (phi1 - phi2)) + (t3000 - t3003) * np.exp((-4*1j) * (t2989 - phi2)) + (t3001 - t3002) * np.exp((4*1j) * (phi1 + phi2)) + (t3000 + t3003) * np.exp((4*1j) * (t2989 + phi2)))

        if Bindx == 113:
            t3022 = np.cos(phi)
            t3021 = t3022 ** 2
            t3026 = t3021 ** 2
            t3027 = t3022 * t3026
            t3032 = t3027 ** 2
            t3012 = t3022 * t3032
            t3030 = t3026 ** 2
            t3014 = t3022 * t3030
            t3025 = t3022 * t3021
            t3028 = t3025 ** 2
            t3016 = t3022 * t3028
            t3040 = -4100 * t3012 + 12300 * t3014 - 8200 * t3016 - 4100 * t3022 + 12300 * t3025 - 8200 * t3027
            t3039 = -28336 * t3012 + 80528 * t3014 - 80864 * t3016 + 336 * t3022 - 5488 * t3025 + 33824 * t3027
            t3011 = t3028 ** 2
            t3038 = -126 + 10626 * t3011 + 4788 * t3021 - 26978 * t3026 + 51800 * t3028 - 30562 * t3030 - 9548 * t3032
            t3037 = 1025 + 1025 * t3011 + 2050 * t3021 - 17425 * t3026 + 28700 * t3028 - 17425 * t3030 + 2050 * t3032
            t3036 = -980628 * t3012 + 2693820 * t3014 - 2705448 * t3016 + 10604 * t3022 - 214340 * t3025 + 1193944 * t3027
            t3035 = 735471 * t3011 - 14818 * t3021 + 174625 * t3026 - 838236 * t3028 + 1884705 * t3030 - 1939938 * t3032 + 239
            t3024 = 2 * phi1
            t3023 = 3 * phi1
            tfunc[..., c] = (0.5e1 / 0.10747904e8) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.41e2) * np.sqrt(0.11e2) * np.sqrt(0.19e2) * np.sqrt(0.17e2) * np.sqrt(0.23e2) * ((2704156 * t3011 - 8700328 * t3032 + 10463908 * t3030 - 5767216 * t3028 + 1425060 * t3026 - 127400 * t3021 + 1820) * np.exp((4*1j) * phi2) + (t3035 + t3036) * np.exp((-4*1j) * (phi1 - phi2)) + (t3038 + t3039) * np.exp((-4*1j) * (t3024 - phi2)) + (t3037 + t3040) * np.exp((-4*1j) * (t3023 - phi2)) + (t3035 - t3036) * np.exp((4*1j) * (phi1 + phi2)) + (t3038 - t3039) * np.exp((4*1j) * (t3024 + phi2)) + (t3037 - t3040) * np.exp((4*1j) * (t3023 + phi2)))

        if Bindx == 114:
            t3058 = np.cos(phi)
            t3057 = t3058 ** 2
            t3064 = t3057 ** 2
            t3063 = t3058 * t3057
            t3066 = t3063 ** 2
            t3068 = t3064 ** 2
            t3065 = t3058 * t3064
            t3070 = t3065 ** 2
            t3072 = t3066 ** 2
            t3077 = -11628 * t3057 + 26562 * t3064 + 94392 * t3066 - 367878 * t3068 + 402420 * t3070 - 144210 * t3072 + 342
            t3046 = t3058 * t3072
            t3048 = t3058 * t3070
            t3050 = t3058 * t3068
            t3052 = t3058 * t3066
            t3076 = 43263 * t3046 + 21318 * t3048 - 341487 * t3050 + 506388 * t3052 - 5985 * t3058 + 72390 * t3063 - 295887 * t3065
            t3075 = -173052 * t3046 + 486552 * t3048 - 475380 * t3050 + 174480 * t3052 + 404 * t3058 - 5544 * t3063 - 7460 * t3065
            t3074 = 19720 * t3057 - 189820 * t3064 + 690736 * t3066 - 1173516 * t3068 + 941640 * t3070 - 288420 * t3072 - 340
            t3062 = 4 * phi1
            t3061 = 8 * phi1
            t3060 = -5 * phi2
            t3059 = 5 * phi2
            tfunc[..., c] = (0.5e1 / 0.335872e6*1j) * np.sqrt(0.41e2) * np.sqrt(0.2e1) * np.sqrt(0.17e2) * np.sqrt(0.7e1) * np.sqrt(0.13e2) * ((1 + t3058) ** (-0.1e1 / 0.2e1)) * ((1 - t3058) ** (-0.1e1 / 0.2e1)) * ((259578 * t3046 - 1015740 * t3048 + 1546182 * t3050 - 1142856 * t3052 + 415206 * t3065 - 65340 * t3063 + 2970 * t3058) * np.exp((5*1j) * phi2) + (-t3074 + t3075) * np.exp((-1*1j) * (t3062 + t3060)) + (t3076 + t3077) * np.exp((-1*1j) * (t3061 + t3060)) + (t3074 + t3075) * np.exp((1j) * (t3062 + t3059)) + (t3076 - t3077) * np.exp((1j) * (t3061 + t3059)))

        if Bindx == 115:
            t3097 = np.cos(phi)
            t3096 = t3097 ** 2
            t3104 = t3096 ** 2
            t3103 = t3097 * t3096
            t3106 = t3103 ** 2
            t3108 = t3104 ** 2
            t3105 = t3097 * t3104
            t3110 = t3105 ** 2
            t3112 = t3106 ** 2
            t3119 = 84 - 2856 * t3096 + 6524 * t3104 + 23184 * t3106 - 90356 * t3108 + 98840 * t3110 - 35420 * t3112
            t3118 = -1025 - 6150 * t3096 + 29725 * t3104 - 36900 * t3106 + 9225 * t3108 + 10250 * t3110 - 5125 * t3112
            t3085 = t3097 * t3112
            t3087 = t3097 * t3110
            t3089 = t3097 * t3108
            t3091 = t3097 * t3106
            t3117 = 1025 * t3085 + 6150 * t3087 - 29725 * t3089 + 36900 * t3091 + 5125 * t3097 - 10250 * t3103 - 9225 * t3105
            t3116 = 10626 * t3085 + 5236 * t3087 - 83874 * t3089 + 124376 * t3091 - 1470 * t3097 + 17780 * t3103 - 72674 * t3105
            t3115 = 735471 * t3085 - 2067846 * t3087 + 2020365 * t3089 - 741540 * t3091 - 1717 * t3097 + 23562 * t3103 + 31705 * t3105
            t3114 = 83810 * t3096 - 806735 * t3104 + 2935628 * t3106 - 4987443 * t3108 + 4001970 * t3110 - 1225785 * t3112 - 1445
            t3102 = 4 * phi1
            t3101 = 8 * phi1
            t3100 = -5 * phi2
            t3099 = 5 * phi2
            t3098 = 12 * phi1
            tfunc[..., c] = (0.5e1 / 0.2686976e7*1j) * np.sqrt(0.3e1) * np.sqrt(0.41e2) * np.sqrt(0.23e2) * np.sqrt(0.11e2) * np.sqrt(0.19e2) * ((1 + t3097) ** (-0.1e1 / 0.2e1)) * ((1 - t3097) ** (-0.1e1 / 0.2e1)) * ((2704156 * t3085 - 10581480 * t3087 + 16107364 * t3089 - 11905712 * t3091 + 4325412 * t3105 - 680680 * t3103 + 30940 * t3097) * np.exp((5*1j) * phi2) + (t3114 + t3115) * np.exp((-1*1j) * (t3102 + t3100)) + (t3116 + t3119) * np.exp((-1*1j) * (t3101 + t3100)) + (-t3114 + t3115) * np.exp((1j) * (t3102 + t3099)) + (t3116 - t3119) * np.exp((1j) * (t3101 + t3099)) + (t3117 + t3118) * np.exp((-1*1j) * (t3098 + t3100)) + (t3117 - t3118) * np.exp((1j) * (t3098 + t3099)))

        if Bindx == 116:
            t3136 = np.cos(phi)
            t3135 = t3136 ** 2
            t3142 = t3135 ** 2
            t3143 = t3136 * t3142
            t3148 = t3143 ** 2
            t3126 = t3136 * t3148
            t3146 = t3142 ** 2
            t3128 = t3136 * t3146
            t3141 = t3136 * t3135
            t3144 = t3141 ** 2
            t3130 = t3136 * t3144
            t3154 = -134596 * t3126 + 217588 * t3128 - 7752 * t3130 - 7676 * t3136 + 63308 * t3141 - 130872 * t3143
            t3125 = t3144 ** 2
            t3153 = -134596 * t3125 - 10192 * t3135 + 68180 * t3142 - 103936 * t3144 - 77140 * t3146 + 257488 * t3148 + 196
            t3152 = -269192 * t3126 + 750120 * t3128 - 768208 * t3130 + 3976 * t3136 - 69160 * t3141 + 352464 * t3143
            t3151 = 33649 * t3125 + 10108 * t3135 - 106533 * t3142 + 338352 * t3144 - 386403 * t3146 + 111188 * t3148 - 361
            t3140 = 2 * phi1
            t3139 = 4 * phi1
            t3138 = -3 * phi2
            t3137 = 3 * phi2
            tfunc[..., c] = (0.15e2 / 0.335872e6) * np.sqrt(0.41e2) * np.sqrt(0.17e2) * np.sqrt(0.13e2) * ((201894 * t3125 - 737352 * t3148 + 1019502 * t3146 - 653664 * t3144 + 189090 * t3142 - 19800 * t3135 + 330) * np.exp((6*1j) * phi2) + (-t3152 + t3153) * np.exp((-2*1j) * (t3140 + t3138)) + (t3151 + t3154) * np.exp((-2*1j) * (t3139 + t3138)) + (t3152 + t3153) * np.exp((2*1j) * (t3140 + t3137)) + (t3151 - t3154) * np.exp((2*1j) * (t3139 + t3137)))

        if Bindx == 117:
            t3173 = np.cos(phi)
            t3172 = t3173 ** 2
            t3178 = t3173 * t3172
            t3181 = t3178 ** 2
            t3162 = t3181 ** 2
            t3179 = t3172 ** 2
            t3183 = t3179 ** 2
            t3180 = t3173 * t3179
            t3185 = t3180 ** 2
            t3193 = -1025 + 1025 * t3162 - 12300 * t3172 + 27675 * t3179 - 27675 * t3183 + 12300 * t3185
            t3163 = t3173 * t3185
            t3165 = t3173 * t3183
            t3167 = t3173 * t3181
            t3192 = -6150 * t3163 - 2050 * t3165 + 36900 * t3167 + 6150 * t3173 + 2050 * t3178 - 36900 * t3180
            t3191 = -42504 * t3163 + 68712 * t3165 - 2448 * t3167 - 2424 * t3173 + 19992 * t3178 - 41328 * t3180
            t3190 = 10626 * t3162 + 3192 * t3172 - 33642 * t3179 + 106848 * t3181 - 122022 * t3183 + 35112 * t3185 - 114
            t3189 = -1470942 * t3163 + 4098870 * t3165 - 4197708 * t3167 + 21726 * t3173 - 377910 * t3178 + 1925964 * t3180
            t3188 = 735471 * t3162 + 55692 * t3172 - 372555 * t3179 + 567936 * t3181 + 421515 * t3183 - 1406988 * t3185 - 1071
            t3177 = 2 * phi1
            t3176 = 4 * phi1
            t3175 = -3 * phi2
            t3174 = 3 * phi2
            tfunc[..., c] = (0.5e1 / 0.16121856e8) * np.sqrt(0.11e2) * np.sqrt(0.19e2) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.41e2) * np.sqrt(0.23e2) * np.sqrt(0.7e1) * ((2704156 * t3162 - 9876048 * t3185 + 13655148 * t3183 - 8755136 * t3181 + 2532660 * t3179 - 265200 * t3172 + 4420) * np.exp((6*1j) * phi2) + (t3192 + t3193) * np.exp((-6*1j) * (t3177 - phi2)) + (-t3192 + t3193) * np.exp((6*1j) * (t3177 + phi2)) + (t3188 + t3189) * np.exp((-2*1j) * (t3177 + t3175)) + (t3190 + t3191) * np.exp((-2*1j) * (t3176 + t3175)) + (t3188 - t3189) * np.exp((2*1j) * (t3177 + t3174)) + (t3190 - t3191) * np.exp((2*1j) * (t3176 + t3174)))

        if Bindx == 118:
            t3211 = np.cos(phi)
            t3210 = t3211 ** 2
            t3217 = t3210 ** 2
            t3216 = t3211 * t3210
            t3219 = t3216 ** 2
            t3221 = t3217 ** 2
            t3218 = t3211 * t3217
            t3223 = t3218 ** 2
            t3225 = t3219 ** 2
            t3230 = 278 - 6116 * t3210 + 34650 * t3217 - 66360 * t3219 + 29610 * t3221 + 32732 * t3223 - 24794 * t3225
            t3199 = t3211 * t3225
            t3201 = t3211 * t3223
            t3203 = t3211 * t3221
            t3205 = t3211 * t3219
            t3229 = -21252 * t3199 + 41272 * t3201 + 7140 * t3203 - 64624 * t3205 + 924 * t3211 - 13384 * t3216 + 49924 * t3218
            t3228 = 5313 * t3199 + 29414 * t3201 - 95405 * t3203 + 82980 * t3205 + 1141 * t3211 - 3178 * t3216 - 20265 * t3218
            t3227 = -3864 * t3210 + 33740 * t3217 - 121296 * t3219 + 205996 * t3221 - 164248 * t3223 + 49588 * t3225 + 84
            t3215 = 4 * phi1
            t3214 = 8 * phi1
            t3213 = -7 * phi2
            t3212 = 7 * phi2
            tfunc[..., c] = (0.5e1 / 0.335872e6*1j) * np.sqrt(0.13e2) * np.sqrt(0.19e2) * np.sqrt(0.17e2) * np.sqrt(0.3e1) * np.sqrt(0.2e1) * np.sqrt(0.41e2) * ((1 + t3211) ** (-0.1e1 / 0.2e1)) * ((1 - t3211) ** (-0.1e1 / 0.2e1)) * ((31878 * t3199 - 141372 * t3201 + 247698 * t3203 - 214632 * t3205 + 93258 * t3218 - 17820 * t3216 + 990 * t3211) * np.exp((7*1j) * phi2) + (t3227 + t3229) * np.exp((-1*1j) * (t3215 + t3213)) + (t3228 + t3230) * np.exp((-1*1j) * (t3214 + t3213)) + (-t3227 + t3229) * np.exp((1j) * (t3215 + t3212)) + (t3228 - t3230) * np.exp((1j) * (t3214 + t3212)))

        if Bindx == 119:
            t3250 = np.cos(phi)
            t3249 = t3250 ** 2
            t3257 = t3249 ** 2
            t3256 = t3250 * t3249
            t3259 = t3256 ** 2
            t3261 = t3257 ** 2
            t3258 = t3250 * t3257
            t3263 = t3258 ** 2
            t3265 = t3259 ** 2
            t3272 = -1025 - 18450 * t3249 + 25625 * t3257 + 36900 * t3259 - 64575 * t3261 + 14350 * t3263 + 7175 * t3265
            t3238 = t3250 * t3265
            t3240 = t3250 * t3263
            t3242 = t3250 * t3261
            t3244 = t3250 * t3259
            t3271 = 1025 * t3238 + 18450 * t3240 - 25625 * t3242 - 36900 * t3244 - 7175 * t3250 - 14350 * t3256 + 64575 * t3258
            t3270 = -12232 * t3249 + 69300 * t3257 - 132720 * t3259 + 59220 * t3261 + 65464 * t3263 - 49588 * t3265 + 556
            t3269 = 10626 * t3238 + 58828 * t3240 - 190810 * t3242 + 165960 * t3244 + 2282 * t3250 - 6356 * t3256 - 40530 * t3258
            t3268 = -133722 * t3249 + 1167645 * t3257 - 4197708 * t3259 + 7128933 * t3261 - 5684154 * t3263 + 1716099 * t3265 + 2907
            t3267 = 735471 * t3238 - 1428306 * t3240 - 247095 * t3242 + 2236452 * t3244 - 31977 * t3250 + 463182 * t3256 - 1727727 * t3258
            t3255 = 4 * phi1
            t3254 = 8 * phi1
            t3253 = -7 * phi2
            t3252 = 7 * phi2
            t3251 = 12 * phi1
            tfunc[..., c] = (0.5e1 / 0.2686976e7*1j) * np.sqrt(0.23e2) * np.sqrt(0.7e1) * np.sqrt(0.11e2) * np.sqrt(0.41e2) * ((1 + t3250) ** (-0.1e1 / 0.2e1)) * ((1 - t3250) ** (-0.1e1 / 0.2e1)) * ((2704156 * t3238 - 11992344 * t3240 + 21011796 * t3242 - 18206864 * t3244 + 7910916 * t3258 - 1511640 * t3256 + 83980 * t3250) * np.exp((7*1j) * phi2) + (t3267 - t3268) * np.exp((-1*1j) * (t3255 + t3253)) + (t3269 + t3270) * np.exp((-1*1j) * (t3254 + t3253)) + (t3267 + t3268) * np.exp((1j) * (t3255 + t3252)) + (t3269 - t3270) * np.exp((1j) * (t3254 + t3252)) + (t3271 - t3272) * np.exp((-1*1j) * (t3251 + t3253)) + (t3271 + t3272) * np.exp((1j) * (t3251 + t3252)))

        if Bindx == 120:
            t3289 = np.cos(phi)
            t3288 = t3289 ** 2
            t3291 = t3288 ** 2
            t3292 = t3289 * t3291
            t3297 = t3292 ** 2
            t3279 = t3289 * t3297
            t3295 = t3291 ** 2
            t3281 = t3289 * t3295
            t3290 = t3289 * t3288
            t3293 = t3290 ** 2
            t3283 = t3289 * t3293
            t3303 = -28336 * t3279 - 2800 * t3281 + 84384 * t3283 - 176 * t3289 + 15120 * t3290 - 69216 * t3292
            t3278 = t3293 ** 2
            t3302 = -673 - 5313 * t3278 + 9422 * t3288 - 22575 * t3291 - 20412 * t3293 + 87345 * t3295 - 48818 * t3297
            t3301 = 21252 * t3278 + 9576 * t3288 - 53956 * t3291 + 103600 * t3293 - 61124 * t3295 - 19096 * t3297 - 252
            t3300 = 56672 * t3279 - 161056 * t3281 + 161728 * t3283 - 672 * t3289 + 10976 * t3290 - 67648 * t3292
            tfunc[..., c] = -(0.5e1 / 0.671744e6) * np.sqrt(0.41e2) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.17e2) * np.sqrt(0.19e2) * np.sqrt(0.13e2) * ((-31878 * t3278 + 135828 * t3297 - 224730 * t3295 + 178200 * t3293 - 66330 * t3291 + 9108 * t3288 - 198) * np.exp((8*1j) * phi2) + (t3302 - t3303) * np.exp((-8*1j) * (phi1 - phi2)) + (-t3300 + t3301) * np.exp((-4*1j) * (phi1 - 2 * phi2)) + (t3300 + t3301) * np.exp((4*1j) * (phi1 + 2 * phi2)) + (t3302 + t3303) * np.exp((8*1j) * (phi1 + phi2)))

        if Bindx == 121:
            t3322 = np.cos(phi)
            t3321 = t3322 ** 2
            t3327 = t3321 ** 2
            t3328 = t3322 * t3327
            t3333 = t3328 ** 2
            t3312 = t3322 * t3333
            t3331 = t3327 ** 2
            t3314 = t3322 * t3331
            t3326 = t3322 * t3321
            t3329 = t3326 ** 2
            t3316 = t3322 * t3329
            t3341 = -8200 * t3312 - 41000 * t3314 + 49200 * t3316 - 8200 * t3322 - 41000 * t3326 + 49200 * t3328
            t3311 = t3329 ** 2
            t3340 = 1025 + 1025 * t3311 + 26650 * t3321 + 15375 * t3327 - 86100 * t3329 + 15375 * t3331 + 26650 * t3333
            t3339 = 10626 * t3311 - 18844 * t3321 + 45150 * t3327 + 40824 * t3329 - 174690 * t3331 + 97636 * t3333 + 1346
            t3338 = 56672 * t3312 + 5600 * t3314 - 168768 * t3316 + 352 * t3322 - 30240 * t3326 + 138432 * t3328
            t3337 = -1961256 * t3312 + 5573688 * t3314 - 5596944 * t3316 + 23256 * t3322 - 379848 * t3326 + 2341104 * t3328
            t3336 = 735471 * t3311 + 331398 * t3321 - 1867263 * t3327 + 3585300 * t3329 - 2115327 * t3331 - 660858 * t3333 - 8721
            t3325 = 3 * phi1
            t3324 = -2 * phi2
            t3323 = 2 * phi2
            tfunc[..., c] = (0.5e1 / 0.5373952e7) * np.sqrt(0.41e2) * np.sqrt(0.11e2) * np.sqrt(0.7e1) * np.sqrt(0.23e2) * ((2704156 * t3311 - 11522056 * t3333 + 19063460 * t3331 - 15116400 * t3329 + 5626660 * t3327 - 772616 * t3321 + 16796) * np.exp((8*1j) * phi2) + (-t3338 + t3339) * np.exp((-8*1j) * (phi1 - phi2)) + (t3336 + t3337) * np.exp((-4*1j) * (phi1 + t3324)) + (t3340 + t3341) * np.exp((-4*1j) * (t3325 + t3324)) + (t3336 - t3337) * np.exp((4*1j) * (phi1 + t3323)) + (t3340 - t3341) * np.exp((4*1j) * (t3325 + t3323)) + (t3338 + t3339) * np.exp((8*1j) * (phi1 + phi2)))

        if Bindx == 122:
            t3358 = np.cos(phi)
            t3357 = t3358 ** 2
            t3363 = t3358 * t3357
            t3366 = t3363 ** 2
            t3347 = t3366 ** 2
            t3374 = 253 * t3347
            t3373 = -1012 * t3347
            t3364 = t3357 ** 2
            t3365 = t3358 * t3364
            t3370 = t3365 ** 2
            t3368 = t3364 ** 2
            t3362 = 4 * phi1
            t3361 = 8 * phi1
            t3360 = -9 * phi2
            t3359 = 9 * phi2
            t3352 = t3358 * t3366
            t3350 = t3358 * t3368
            t3348 = t3358 * t3370
            tfunc[..., c] = (-0.15e2 / 0.335872e6*1j) * np.sqrt(0.13e2) * np.sqrt(0.17e2) * np.sqrt(0.7e1) * np.sqrt(0.2e1) * np.sqrt(0.19e2) * np.sqrt(0.41e2) * np.sqrt((1 - t3358)) * ((1 + t3358) ** (-0.1e1 / 0.2e1)) * ((1518 * t3347 + 1518 * t3348 - 6270 * t3370 - 6270 * t3350 + 9900 * t3368 + 9900 * t3352 - 7260 * t3366 - 7260 * t3365 + 2310 * t3364 + 2310 * t3363 - 198 * t3357 - 198 * t3358) * np.exp((9*1j) * phi2) + (t3373 + 2024 * t3348 + 2816 * t3370 - 7432 * t3350 - 2036 * t3368 + 10384 * t3352 - 672 * t3366 - 6800 * t3365 + 1252 * t3364 + 2056 * t3363 - 352 * t3357 - 232 * t3358 + 4) * np.exp((-1*1j) * (t3362 + t3360)) + (t3374 - 1265 * t3348 + 1837 * t3370 + 865 * t3350 - 4680 * t3368 + 2934 * t3352 + 2730 * t3366 - 3774 * t3365 + 285 * t3364 + 1355 * t3363 - 487 * t3357 - 115 * t3358 + 62) * np.exp((-1*1j) * (t3361 + t3360)) + (t3373 - 4048 * t3348 - 3256 * t3370 + 6992 * t3350 + 12388 * t3368 - 32 * t3352 - 11088 * t3366 - 4960 * t3365 + 3092 * t3364 + 2288 * t3363 - 120 * t3357 - 240 * t3358 - 4) * np.exp((1j) * (t3362 + t3359)) + (t3374 + 1771 * t3348 + 4873 * t3370 + 5845 * t3350 + 300 * t3368 - 7314 * t3352 - 7518 * t3366 - 1014 * t3365 + 3045 * t3364 + 1975 * t3363 + 133 * t3357 - 239 * t3358 - 62) * np.exp((1j) * (t3361 + t3359)))

        if Bindx == 123:
            t3393 = np.cos(phi)
            t3392 = t3393 ** 2
            t3398 = t3393 * t3392
            t3401 = t3398 ** 2
            t3382 = t3401 ** 2
            t3410 = 1025 * t3382
            t3409 = 10626 * t3382
            t3408 = 735471 * t3382
            t3399 = t3392 ** 2
            t3400 = t3393 * t3399
            t3405 = t3400 ** 2
            t3403 = t3399 ** 2
            t3397 = 4 * phi1
            t3396 = 8 * phi1
            t3395 = -9 * phi2
            t3394 = 9 * phi2
            t3387 = t3393 * t3401
            t3385 = t3393 * t3403
            t3383 = t3393 * t3405
            tfunc[..., c] = (-0.5e1 / 0.8060928e7*1j) * np.sqrt(0.23e2) * np.sqrt(0.11e2) * np.sqrt(0.41e2) * np.sqrt(0.3e1) * np.sqrt((1 - t3393)) * ((1 + t3393) ** (-0.1e1 / 0.2e1)) * ((17635800 * t3403 + 17635800 * t3387 - 12932920 * t3401 - 12932920 * t3400 - 11169340 * t3405 - 11169340 * t3385 + 4115020 * t3399 + 4115020 * t3398 + 2704156 * t3382 + 2704156 * t3383 - 352716 * t3392 - 352716 * t3393) * np.exp((9*1j) * phi2) + (t3410 + 10250 * t3383 + 45100 * t3405 - 45100 * t3392 - 10250 * t3393 - 1025 + 169125 * t3403 - 169125 * t3399 + 135300 * t3387 - 135300 * t3400 + 112750 * t3385 - 112750 * t3398) * np.exp((3*1j) * (t3397 + 3 * phi2)) + (t3410 - 8200 * t3383 + 26650 * t3405 - 41000 * t3385 + 15375 * t3403 + 49200 * t3387 - 86100 * t3401 + 49200 * t3400 + 15375 * t3399 - 41000 * t3398 + 26650 * t3392 - 8200 * t3393 + 1025) * np.exp((-3*1j) * (t3397 - 3 * phi2)) + (-1470942 * t3383 + 5401206 * t3385 - 7546572 * t3387 + 255816 * t3392 + 168606 * t3393 - 1494198 * t3398 - 909891 * t3399 + 4941900 * t3400 + 488376 * t3401 + 1479663 * t3403 - 2046528 * t3405 - 2907 + t3408) * np.exp((-1*1j) * (t3397 + t3395)) + (t3409 - 53130 * t3383 + 77154 * t3405 + 36330 * t3385 - 196560 * t3403 + 123228 * t3387 + 114660 * t3401 - 158508 * t3400 + 11970 * t3399 + 56910 * t3398 - 20454 * t3392 - 4830 * t3393 + 2604) * np.exp((-1*1j) * (t3396 + t3395)) + (2941884 * t3383 - 5081436 * t3385 + 23256 * t3387 + 87210 * t3392 + 174420 * t3393 - 1662804 * t3398 - 2247111 * t3399 + 3604680 * t3400 + 8058204 * t3401 - 9002979 * t3403 + 2366298 * t3405 + 2907 + t3408) * np.exp((1j) * (t3397 + t3394)) + (t3409 + 74382 * t3383 + 204666 * t3405 + 245490 * t3385 + 12600 * t3403 - 307188 * t3387 - 315756 * t3401 - 42588 * t3400 + 127890 * t3399 + 82950 * t3398 + 5586 * t3392 - 10038 * t3393 - 2604) * np.exp((1j) * (t3396 + t3394)))

        if Bindx == 124:
            t3427 = np.cos(phi)
            t3426 = t3427 ** 2
            t3433 = t3426 ** 2
            t3434 = t3427 * t3433
            t3439 = t3434 ** 2
            t3417 = t3427 * t3439
            t3437 = t3433 ** 2
            t3419 = t3427 * t3437
            t3432 = t3427 * t3426
            t3435 = t3432 ** 2
            t3421 = t3427 * t3435
            t3445 = -920 * t3417 + 2680 * t3419 - 2416 * t3421 - 104 * t3427 + 392 * t3432 + 368 * t3434
            t3444 = -460 * t3417 - 1060 * t3419 + 2472 * t3421 + 140 * t3427 - 540 * t3432 - 552 * t3434
            t3416 = t3435 ** 2
            t3443 = -29 + 69 * t3416 - 116 * t3426 + 1335 * t3433 - 1680 * t3435 - 735 * t3437 + 1156 * t3439
            t3442 = 20 - 276 * t3416 - 400 * t3426 + 2020 * t3433 - 3584 * t3435 + 2332 * t3437 - 112 * t3439
            t3431 = 2 * phi1
            t3430 = 4 * phi1
            t3429 = -5 * phi2
            t3428 = 5 * phi2
            tfunc[..., c] = (0.5e1 / 0.335872e6) * np.sqrt(0.11e2) * np.sqrt(0.7e1) * np.sqrt(0.13e2) * np.sqrt(0.41e2) * np.sqrt(0.19e2) * np.sqrt(0.3e1) * np.sqrt(0.17e2) * ((414 * t3416 - 2088 * t3439 + 4230 * t3437 - 4320 * t3435 + 2250 * t3433 - 504 * t3426 + 18) * np.exp((10*1j) * phi2) + (t3442 - t3445) * np.exp((-2*1j) * (t3431 + t3429)) + (t3443 + t3444) * np.exp((-2*1j) * (t3430 + t3429)) + (t3442 + t3445) * np.exp((2*1j) * (t3431 + t3428)) + (t3443 - t3444) * np.exp((2*1j) * (t3430 + t3428)))

        if Bindx == 125:
            t3464 = np.cos(phi)
            t3463 = t3464 ** 2
            t3470 = t3464 * t3463
            t3473 = t3470 ** 2
            t3453 = t3473 ** 2
            t3471 = t3463 ** 2
            t3475 = t3471 ** 2
            t3472 = t3464 * t3471
            t3477 = t3472 ** 2
            t3485 = 1025 * t3453 - 45100 * t3463 + 45100 * t3477 - 1025 + 169125 * t3475 - 169125 * t3471
            t3454 = t3464 * t3477
            t3456 = t3464 * t3475
            t3458 = t3464 * t3473
            t3484 = -70840 * t3454 - 163240 * t3456 + 380688 * t3458 + 21560 * t3464 - 83160 * t3470 - 85008 * t3472
            t3483 = -10250 * t3454 + 10250 * t3464 - 135300 * t3458 + 135300 * t3472 - 112750 * t3456 + 112750 * t3470
            t3482 = 10626 * t3453 - 17864 * t3463 + 205590 * t3471 - 258720 * t3473 - 113190 * t3475 + 178024 * t3477 - 4466
            t3481 = -2451570 * t3454 + 7141530 * t3456 - 6438036 * t3458 - 277134 * t3464 + 1044582 * t3470 + 980628 * t3472
            t3480 = 735471 * t3453 + 1065900 * t3463 - 5382795 * t3471 + 9550464 * t3473 - 6214197 * t3475 + 298452 * t3477 - 53295
            t3469 = 2 * phi1
            t3468 = 4 * phi1
            t3467 = 6 * phi1
            t3466 = -5 * phi2
            t3465 = 5 * phi2
            tfunc[..., c] = (0.5e1 / 0.5373952e7) * np.sqrt(0.2e1) * np.sqrt(0.41e2) * np.sqrt(0.23e2) * ((117572 + 2704156 * t3453 - 13638352 * t3477 + 27629420 * t3475 - 28217280 * t3473 + 14696500 * t3471 - 3292016 * t3463) * np.exp((10*1j) * phi2) + (t3483 + t3485) * np.exp((-2*1j) * (t3467 + t3466)) + (-t3483 + t3485) * np.exp((2*1j) * (t3467 + t3465)) + (t3480 + t3481) * np.exp((-2*1j) * (t3469 + t3466)) + (t3482 + t3484) * np.exp((-2*1j) * (t3468 + t3466)) + (t3480 - t3481) * np.exp((2*1j) * (t3469 + t3465)) + (t3482 - t3484) * np.exp((2*1j) * (t3468 + t3465)))

        if Bindx == 126:
            t3501 = np.cos(phi)
            t3500 = t3501 ** 2
            t3507 = t3500 ** 2
            t3508 = t3501 * t3507
            t3513 = t3508 ** 2
            t3491 = t3501 * t3513
            t3516 = -3 * t3491
            t3515 = 1 + t3501
            t3511 = t3507 ** 2
            t3506 = t3501 * t3500
            t3509 = t3506 ** 2
            t3505 = 4 * phi1
            t3504 = 8 * phi1
            t3503 = -11 * phi2
            t3502 = 11 * phi2
            t3495 = t3501 * t3509
            t3493 = t3501 * t3511
            tfunc[..., c] = (-0.5e1 / 0.335872e6*1j) * np.sqrt(0.23e2) * np.sqrt(0.17e2) * np.sqrt(0.13e2) * np.sqrt(0.7e1) * np.sqrt(0.3e1) * np.sqrt(0.19e2) * np.sqrt(0.2e1) * np.sqrt(0.11e2) * np.sqrt(0.41e2) * ((1 - t3501) ** (0.3e1 / 0.2e1)) * (18 * (-t3491 - 2 * t3513 + 3 * t3493 + 8 * t3511 - 2 * t3495 - 12 * t3509 - 2 * t3508 + 8 * t3507 + 3 * t3506 - 2 * t3500 - t3501) * np.exp((11*1j) * phi2) + 4 * (3 * t3491 - 5 * t3513 - 11 * t3493 + 21 * t3511 + 14 * t3495 - 34 * t3509 - 6 * t3508 + 26 * t3507 - t3506 - 9 * t3500 + t3515) * np.exp((-1*1j) * (t3505 + t3503)) + (t3516 + 16 * t3513 - 27 * t3493 - 2 * t3511 + 58 * t3495 - 56 * t3509 - 14 * t3508 + 52 * t3507 - 23 * t3506 - 8 * t3500 + 9 * t3501 - 2) * np.exp((-1*1j) * (t3504 + t3503)) + (12 * t3491 + 68 * t3513 + 132 * t3493 + 44 * t3511 - 200 * t3495 - 280 * t3509 - 56 * t3508 + 152 * t3507 + 124 * t3506 + 20 * t3500 - 12 * t3501 - 4) * np.exp((1j) * (t3505 + t3502)) + (t3516 - 28 * t3513 - 115 * t3493 - 270 * t3511 - 390 * t3495 - 336 * t3509 - 126 * t3508 + 60 * t3507 + 105 * t3506 + 60 * t3500 + 17 * t3501 + 2) * np.exp((1j) * (t3504 + t3502))) * (t3515 ** (-0.1e1 / 0.2e1))

        if Bindx == 127:
            t3535 = np.cos(phi)
            t3534 = t3535 ** 2
            t3541 = t3535 * t3534
            t3544 = t3541 ** 2
            t3524 = t3544 ** 2
            t3553 = 1025 * t3524
            t3552 = 10626 * t3524
            t3551 = 735471 * t3524
            t3542 = t3534 ** 2
            t3543 = t3535 * t3542
            t3548 = t3543 ** 2
            t3546 = t3542 ** 2
            t3540 = 4 * phi1
            t3539 = 8 * phi1
            t3538 = 12 * phi1
            t3537 = -11 * phi2
            t3536 = 11 * phi2
            t3529 = t3535 * t3544
            t3527 = t3535 * t3546
            t3525 = t3535 * t3548
            tfunc[..., c] = (-0.5e1 / 0.2686976e7*1j) * np.sqrt(0.41e2) * np.sqrt((1 - t3535)) * ((1 + t3535) ** (-0.1e1 / 0.2e1)) * (2704156 * (10 * t3546 + 10 * t3529 - 10 * t3544 - 10 * t3543 - 5 * t3548 - 5 * t3527 + 5 * t3542 + 5 * t3541 + t3524 + t3525 - t3534 - t3535) * np.exp((11*1j) * phi2) + (-1716099 * t3546 + 7845024 * t3527 - 11767536 * t3529 + 2451570 * t3534 - 6619239 * t3542 + 7845024 * t3543 + 6864396 * t3544 - 1470942 * t3548 + t3551 - 245157 - 1961256 * t3525 - 1961256 * t3541) * np.exp((-1*1j) * (t3540 + t3537)) + (t3553 - 10250 * t3525 + 45100 * t3548 - 45100 * t3534 + 10250 * t3535 - 1025 + 169125 * t3546 - 169125 * t3542 - 135300 * t3529 + 135300 * t3543 - 112750 * t3527 + 112750 * t3541) * np.exp((-1*1j) * (t3538 + t3537)) + (-67298 * t3525 - 88550 * t3527 + 403788 * t3529 - 60214 * t3534 + 38962 * t3535 - 53130 * t3541 + 265650 * t3542 - 233772 * t3543 - 148764 * t3544 - 212520 * t3546 + 152306 * t3548 + t3552 - 7084) * np.exp((-1*1j) * (t3539 + t3537)) + (3432198 * t3525 - 5393454 * t3527 - 4903140 * t3529 - 1961256 * t3534 + 490314 * t3535 - 6374082 * t3541 - 1716099 * t3542 + 12748164 * t3543 + 13728792 * t3544 - 14954577 * t3546 + 3922512 * t3548 + t3551 + 245157) * np.exp((1j) * (t3540 + t3536)) + (88550 * t3525 + 549010 * t3527 - 191268 * t3529 + 152306 * t3534 + 53130 * t3535 + 159390 * t3541 - 159390 * t3542 - 658812 * t3543 - 743820 * t3544 + 425040 * t3546 + 308154 * t3548 + t3552 + 7084) * np.exp((1j) * (t3539 + t3536)) + (t3553 + 12300 * t3525 + 67650 * t3548 + 947100 * t3544 + 67650 * t3534 + 12300 * t3535 + 1025 + 811800 * t3529 + 811800 * t3543 + 507375 * t3546 + 507375 * t3542 + 225500 * t3527 + 225500 * t3541) * np.exp((1j) * (t3538 + t3536)))

        if Bindx == 128:
            t3570 = np.cos(phi)
            t3569 = t3570 ** 2
            t3575 = t3569 ** 2
            t3576 = t3570 * t3575
            t3581 = t3576 ** 2
            t3588 = (-t3581 - 1) * t3570
            t3579 = t3575 ** 2
            t3562 = t3570 * t3579
            t3574 = t3570 * t3569
            t3577 = t3574 ** 2
            t3564 = t3570 * t3577
            t3587 = -40 * t3562 + 48 * t3564 - 40 * t3574 + 48 * t3576 + 8 * t3588
            t3586 = 48 * t3562 - 32 * t3564 + 48 * t3574 - 32 * t3576 + 16 * t3588
            t3559 = t3577 ** 2
            t3585 = 4 + 4 * t3559 + 8 * t3569 - 68 * t3575 + 112 * t3577 - 68 * t3579 + 8 * t3581
            t3584 = -1 - t3559 - 26 * t3569 - 15 * t3575 + 84 * t3577 - 15 * t3579 - 26 * t3581
            t3573 = 2 * phi1
            t3572 = -3 * phi2
            t3571 = 3 * phi2
            tfunc[..., c] = -(0.15e2 / 0.671744e6) * np.sqrt(0.11e2) * np.sqrt(0.19e2) * np.sqrt(0.41e2) * np.sqrt(0.17e2) * np.sqrt(0.13e2) * np.sqrt(0.7e1) * np.sqrt(0.23e2) * ((-6 * t3559 + 36 * t3581 - 90 * t3579 + 120 * t3577 - 90 * t3575 + 36 * t3569 - 6) * np.exp((12*1j) * phi2) + (t3584 - t3587) * np.exp((-4*1j) * (t3573 + t3572)) + (t3584 + t3587) * np.exp((4*1j) * (t3573 + t3571)) + (t3585 + t3586) * np.exp((-4*1j) * (phi1 + t3572)) + (t3585 - t3586) * np.exp((4*1j) * (phi1 + t3571)))

        if Bindx == 129:
            t3607 = np.cos(phi)
            t3606 = t3607 ** 2
            t3612 = t3606 ** 2
            t3616 = t3612 ** 2
            t3629 = t3616 + t3612
            t3613 = t3607 * t3612
            t3618 = t3613 ** 2
            t3628 = t3618 + t3606
            t3597 = t3607 * t3618
            t3627 = -t3597 - t3607
            t3611 = t3607 * t3606
            t3614 = t3611 ** 2
            t3596 = t3614 ** 2
            t3626 = 1025 * t3596 + 67650 * t3606 + 947100 * t3614 + 67650 * t3618 + 507375 * t3629 + 1025
            t3599 = t3607 * t3616
            t3601 = t3607 * t3614
            t3625 = -12300 * t3597 - 12300 * t3607 - 811800 * t3601 - 811800 * t3613 - 225500 * t3599 - 225500 * t3611
            t3624 = 510048 * t3601 + 510048 * t3613 - 425040 * t3599 - 425040 * t3611 + 85008 * t3627
            t3623 = 10626 * t3596 - 892584 * t3614 + 276276 * t3628 + 159390 * t3629 + 10626
            t3622 = 8825652 * t3599 + 8825652 * t3611 - 5883768 * t3601 - 5883768 * t3613 + 2941884 * t3627
            t3621 = 735471 * t3596 + 20593188 * t3614 + 1470942 * t3628 - 12503007 * t3629 + 735471
            t3610 = 2 * phi1
            t3609 = -3 * phi2
            t3608 = 3 * phi2
            tfunc[..., c] = (0.5e1 / 0.32243712e8) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.41e2) * ((-54083120 * t3614 + 2704156 * t3596 + 2704156 + 40562340 * t3616 + 40562340 * t3612 - 16224936 * t3618 - 16224936 * t3606) * np.exp((12*1j) * phi2) + (t3621 + t3622) * np.exp((-4*1j) * (phi1 + t3609)) + (t3623 + t3624) * np.exp((-4*1j) * (t3610 + t3609)) + (t3621 - t3622) * np.exp((4*1j) * (phi1 + t3608)) + (t3623 - t3624) * np.exp((4*1j) * (t3610 + t3608)) + (t3625 + t3626) * np.exp((-12*1j) * (phi1 - phi2)) + (-t3625 + t3626) * np.exp((12*1j) * (phi1 + phi2)))

        if Bindx == 130:
            t3648 = np.cos(phi)
            t3647 = t3648 ** 2
            t3654 = t3648 * t3647
            t3657 = t3654 ** 2
            t3663 = t3657 ** 2
            t3636 = t3648 * t3663
            t3667 = 1 - t3636
            t3666 = 20 - 20 * t3636
            t3665 = 475 - 475 * t3636
            t3655 = t3647 ** 2
            t3656 = t3648 * t3655
            t3661 = t3656 ** 2
            t3659 = t3655 ** 2
            t3653 = 4 * phi1
            t3652 = 8 * phi1
            t3651 = 12 * phi1
            t3650 = -13 * phi2
            t3649 = 13 * phi2
            t3642 = t3648 * t3657
            t3640 = t3648 * t3659
            t3638 = t3648 * t3661
            tfunc[..., c] = (-0.9e1 / 0.131072e6*1j) * np.sqrt((1 + t3648)) * np.sqrt(0.3e1) * np.sqrt(0.13e2) * np.sqrt(0.23e2) * np.sqrt(0.11e2) * ((-11 * t3663 - 54 * t3638 - 154 * t3661 - 275 * t3640 - 297 * t3659 - 132 * t3642 + 132 * t3657 + 297 * t3656 + 275 * t3655 + 154 * t3654 + 54 * t3647 + 11 * t3648 + t3667) * np.exp((-1*1j) * (t3651 + t3649)) + (-13 * t3663 + 78 * t3638 - 286 * t3661 + 715 * t3640 - 1287 * t3659 + 1716 * t3642 - 1716 * t3657 + 1287 * t3656 - 715 * t3655 + 286 * t3654 - 78 * t3647 + 13 * t3648 - t3667) * np.exp((1j) * (t3651 + t3650)) + (1425 * t3663 - 950 * t3638 - 6650 * t3661 - 2375 * t3640 + 11875 * t3659 + 9500 * t3642 - 9500 * t3657 - 11875 * t3656 + 2375 * t3655 + 6650 * t3654 + 950 * t3647 - 1425 * t3648 - t3665) * np.exp((-1*1j) * (t3653 + t3649)) + (140 * t3663 + 360 * t3638 + 280 * t3661 - 500 * t3640 - 1260 * t3659 - 720 * t3642 + 720 * t3657 + 1260 * t3656 + 500 * t3655 - 280 * t3654 - 360 * t3647 - 140 * t3648 - t3666) * np.exp((-1*1j) * (t3652 + t3649)) + (2375 * t3663 - 2850 * t3638 - 4750 * t3661 + 13775 * t3640 - 4275 * t3659 - 17100 * t3642 + 17100 * t3657 + 4275 * t3656 - 13775 * t3655 + 4750 * t3654 + 2850 * t3647 - 2375 * t3648 + t3665) * np.exp((1j) * (t3653 + t3650)) + (180 * t3663 - 680 * t3638 + 1320 * t3661 - 1100 * t3640 - 660 * t3659 + 2640 * t3642 - 2640 * t3657 + 660 * t3656 + 1100 * t3655 - 1320 * t3654 + 680 * t3647 - 180 * t3648 + t3666) * np.exp((1j) * (t3652 + t3650))) * ((1 - t3648) ** (-0.1e1 / 0.2e1))

        if Bindx == 131:
            t3686 = np.cos(phi)
            t3685 = t3686 ** 2
            t3691 = t3685 ** 2
            t3690 = t3686 * t3685
            t3693 = t3690 ** 2
            t3695 = t3691 ** 2
            t3692 = t3686 * t3691
            t3697 = t3692 ** 2
            t3699 = t3693 ** 2
            t3706 = 12 + 636 * t3685 + 3080 * t3691 + 792 * t3693 - 4356 * t3695 - 2068 * t3697 - 144 * t3699
            t3705 = -160 - 2080 * t3685 + 8000 * t3691 + 960 * t3693 - 14880 * t3695 + 6240 * t3697 + 1920 * t3699
            t3674 = t3686 * t3699
            t3676 = t3686 * t3697
            t3678 = t3686 * t3695
            t3680 = t3686 * t3693
            t3704 = -13 * t3674 - 714 * t3676 - 3795 * t3678 - 2508 * t3680 + 131 * t3686 + 1782 * t3690 + 3069 * t3692
            t3703 = -260 * t3674 - 5480 * t3676 + 2500 * t3678 + 14160 * t3680 + 1020 * t3686 - 360 * t3690 - 11580 * t3692
            t3702 = -1900 + 20900 * t3685 - 41800 * t3691 - 3800 * t3693 + 81700 * t3695 - 77900 * t3697 + 22800 * t3699
            t3701 = -6175 * t3674 - 4750 * t3676 + 82175 * t3678 - 157700 * t3680 + 1425 * t3686 - 35150 * t3690 + 120175 * t3692
            t3689 = 2 * phi1
            t3688 = -3 * phi2
            t3687 = 3 * phi2
            tfunc[..., c] = -(0.9e1 / 0.131072e6) * np.sqrt(0.3e1) * np.sqrt(0.23e2) * np.sqrt(0.11e2) * np.sqrt(0.2e1) * ((-t3701 + t3702) * np.exp((-4*1j) * (phi1 + t3687)) + (-t3703 + t3705) * np.exp((-4*1j) * (t3689 + t3687)) + (t3701 + t3702) * np.exp((4*1j) * (phi1 + t3688)) + (t3703 + t3705) * np.exp((4*1j) * (t3689 + t3688)) + (t3704 + t3706) * np.exp((-12*1j) * (phi1 + phi2)) + (-t3704 + t3706) * np.exp((12*1j) * (phi1 - phi2)))

        if Bindx == 132:
            t3726 = np.cos(phi)
            t3725 = t3726 ** 2
            t3732 = t3726 * t3725
            t3735 = t3732 ** 2
            t3741 = t3735 ** 2
            t3714 = t3726 * t3741
            t3733 = t3725 ** 2
            t3734 = t3726 * t3733
            t3739 = t3734 ** 2
            t3716 = t3726 * t3739
            t3737 = t3733 ** 2
            t3718 = t3726 * t3737
            t3736 = t3726 * t3735
            t3749 = -132 * t3714 - 1408 * t3716 - 836 * t3718 - 108 * t3726 - 992 * t3732 + 308 * t3734 + 3168 * t3736
            t3748 = 1760 * t3714 + 2816 * t3716 - 13600 * t3718 + 416 * t3726 - 2560 * t3732 + 1184 * t3734 + 9984 * t3736
            t3713 = t3736 ** 2
            t3747 = -11 - 13 * t3713 - 451 * t3725 - 1023 * t3733 + 2409 * t3735 + 1551 * t3737 - 1881 * t3739 - 581 * t3741
            t3746 = -92 - 260 * t3713 - 92 * t3725 + 4660 * t3733 - 11532 * t3735 + 5100 * t3737 + 6508 * t3739 - 4292 * t3741
            t3745 = 20900 * t3714 - 80256 * t3716 + 109668 * t3718 - 2356 * t3726 + 12768 * t3732 - 6612 * t3734 - 54112 * t3736
            t3744 = 6175 * t3713 - 8303 * t3725 + 51813 * t3733 - 125267 * t3735 + 136363 * t3737 - 58653 * t3739 - 2489 * t3741 + 361
            t3731 = 4 * phi1
            t3730 = 8 * phi1
            t3729 = 12 * phi1
            t3728 = -11 * phi2
            t3727 = 11 * phi2
            tfunc[..., c] = (-0.45e2 / 0.131072e6*1j) * np.sqrt(0.11e2) * np.sqrt(0.23e2) * np.sqrt(0.3e1) * ((t3744 + t3745) * np.exp((-1*1j) * (t3731 + t3727)) + (-t3746 + t3748) * np.exp((-1*1j) * (t3730 + t3727)) + (-t3744 + t3745) * np.exp((1j) * (t3731 + t3728)) + (t3746 + t3748) * np.exp((1j) * (t3730 + t3728)) + (t3747 + t3749) * np.exp((-1*1j) * (t3729 + t3727)) + (-t3747 + t3749) * np.exp((1j) * (t3729 + t3728))) * ((1 + t3726) ** (-0.1e1 / 0.2e1)) * ((1 - t3726) ** (-0.1e1 / 0.2e1))

        if Bindx == 133:
            t3768 = np.cos(phi)
            t3767 = t3768 ** 2
            t3775 = t3767 ** 2
            t3774 = t3768 * t3767
            t3777 = t3774 ** 2
            t3779 = t3775 ** 2
            t3776 = t3768 * t3775
            t3781 = t3776 ** 2
            t3783 = t3777 ** 2
            t3790 = 10 + 310 * t3767 + 220 * t3775 - 1716 * t3777 + 66 * t3779 + 990 * t3781 + 120 * t3783
            t3789 = -48 + 432 * t3767 + 352 * t3775 - 5664 * t3777 + 8208 * t3779 - 1680 * t3781 - 1600 * t3783
            t3756 = t3768 * t3783
            t3758 = t3768 * t3781
            t3760 = t3768 * t3779
            t3762 = t3768 * t3777
            t3788 = -13 * t3756 - 472 * t3758 - 1045 * t3760 + 1320 * t3762 - 87 * t3768 - 528 * t3774 + 825 * t3776
            t3787 = 38 - 1254 * t3767 - 1596 * t3775 + 30932 * t3777 - 71250 * t3779 + 62130 * t3781 - 19000 * t3783
            t3786 = -260 * t3756 - 3456 * t3758 + 5052 * t3760 + 1632 * t3762 - 108 * t3768 + 1568 * t3774 - 4428 * t3776
            t3785 = -6175 * t3756 + 3192 * t3758 + 37449 * t3760 - 70984 * t3762 + 1235 * t3768 - 13680 * t3774 + 48963 * t3776
            t3773 = 2 * phi1
            t3772 = 4 * phi1
            t3771 = 6 * phi1
            t3770 = -5 * phi2
            t3769 = 5 * phi2
            tfunc[..., c] = (0.45e2 / 0.65536e5) * np.sqrt(0.3e1) * np.sqrt(0.2e1) * np.sqrt(0.11e2) * np.sqrt(0.23e2) * ((t3785 + t3787) * np.exp((-2*1j) * (t3773 + t3769)) + (t3786 + t3789) * np.exp((-2*1j) * (t3772 + t3769)) + (-t3788 + t3790) * np.exp((-2*1j) * (t3771 + t3769)) + (-t3785 + t3787) * np.exp((2*1j) * (t3773 + t3770)) + (-t3786 + t3789) * np.exp((2*1j) * (t3772 + t3770)) + (t3788 + t3790) * np.exp((2*1j) * (t3771 + t3770)))

        if Bindx == 134:
            t3810 = np.cos(phi)
            t3809 = t3810 ** 2
            t3815 = t3810 * t3809
            t3818 = t3815 ** 2
            t3824 = t3818 ** 2
            t3798 = t3810 * t3824
            t3816 = t3809 ** 2
            t3817 = t3810 * t3816
            t3822 = t3817 ** 2
            t3800 = t3810 * t3822
            t3820 = t3816 ** 2
            t3802 = t3810 * t3820
            t3819 = t3810 * t3818
            t3832 = 2484 * t3798 + 12696 * t3800 - 21252 * t3802 - 1564 * t3810 - 3496 * t3815 + 23276 * t3817 - 12144 * t3819
            t3797 = t3819 ** 2
            t3831 = -207 + 299 * t3797 - 4347 * t3809 + 8349 * t3816 + 17457 * t3818 - 32637 * t3820 + 2783 * t3822 + 8303 * t3824
            t3830 = 5980 * t3797 + 9348 * t3809 - 39708 * t3816 + 32532 * t3818 + 83388 * t3820 - 147444 * t3822 + 56396 * t3824 - 492
            t3829 = -33120 * t3798 + 13248 * t3800 + 124128 * t3802 - 480 * t3810 - 8768 * t3815 + 74336 * t3817 - 169344 * t3819
            t3828 = -393300 * t3798 + 1457832 * t3800 - 2053596 * t3802 - 2052 * t3810 + 46056 * t3815 - 403788 * t3817 + 1348848 * t3819
            t3827 = -142025 * t3797 + 59641 * t3809 - 416271 * t3816 + 1107605 * t3818 - 1258769 * t3820 + 427899 * t3822 + 223307 * t3824 - 1387
            t3814 = 4 * phi1
            t3813 = 8 * phi1
            t3812 = -9 * phi2
            t3811 = 9 * phi2
            tfunc[..., c] = (0.45e2 / 0.131072e6*1j) * np.sqrt(0.3e1) * np.sqrt(0.11e2) * np.sqrt(0.2e1) * ((1 + t3810) ** (-0.1e1 / 0.2e1)) * ((1 - t3810) ** (-0.1e1 / 0.2e1)) * ((t3831 + t3832) * np.exp((-3*1j) * (t3814 + 3 * phi2)) + (t3827 + t3828) * np.exp((-1*1j) * (t3814 + t3811)) + (t3829 - t3830) * np.exp((-1*1j) * (t3813 + t3811)) + (-t3827 + t3828) * np.exp((1j) * (t3814 + t3812)) + (t3829 + t3830) * np.exp((1j) * (t3813 + t3812)) + (-t3831 + t3832) * np.exp((3*1j) * (t3814 - 3 * phi2)))

        if Bindx == 135:
            t3851 = np.cos(phi)
            t3850 = t3851 ** 2
            t3856 = t3850 ** 2
            t3855 = t3851 * t3850
            t3858 = t3855 ** 2
            t3860 = t3856 ** 2
            t3857 = t3851 * t3856
            t3862 = t3857 ** 2
            t3864 = t3858 ** 2
            t3871 = 26312 * t3850 - 101200 * t3856 - 12144 * t3858 + 188232 * t3860 - 78936 * t3862 - 24288 * t3864 + 2024
            t3839 = t3851 * t3864
            t3841 = t3851 * t3862
            t3843 = t3851 * t3860
            t3845 = t3851 * t3858
            t3870 = 3289 * t3839 + 69322 * t3841 - 31625 * t3843 - 179124 * t3845 - 12903 * t3851 + 4554 * t3855 + 146487 * t3857
            t3869 = -65780 * t3839 - 455400 * t3841 + 1156980 * t3843 - 743856 * t3845 - 13236 * t3851 + 77848 * t3855 + 39348 * t3857
            t3868 = 46656 * t3850 - 346240 * t3856 + 859776 * t3858 - 635328 * t3860 - 242880 * t3862 + 323840 * t3864 - 1728
            t3867 = -193800 * t3850 + 1901520 * t3856 - 7659280 * t3858 + 14215800 * t3860 - 12113640 * t3862 + 3845600 * t3864 + 3800
            t3866 = -1562275 * t3839 + 2451570 * t3841 + 2047155 * t3843 - 6055300 * t3845 + 61085 * t3851 - 977550 * t3855 + 4035315 * t3857
            t3854 = 3 * phi1
            t3853 = -2 * phi2
            t3852 = 2 * phi2
            tfunc[..., c] = -(0.9e1 / 0.65536e5) * np.sqrt(0.5e1) * np.sqrt(0.3e1) * ((t3868 - t3869) * np.exp((-8*1j) * (phi1 + phi2)) + (-t3866 + t3867) * np.exp((-4*1j) * (phi1 + t3852)) + (-t3870 + t3871) * np.exp((-4*1j) * (t3854 + t3852)) + (t3866 + t3867) * np.exp((4*1j) * (phi1 + t3853)) + (t3870 + t3871) * np.exp((4*1j) * (t3854 + t3853)) + (t3868 + t3869) * np.exp((8*1j) * (phi1 - phi2)))

        if Bindx == 136:
            t3891 = np.cos(phi)
            t3890 = t3891 ** 2
            t3897 = t3891 * t3890
            t3900 = t3897 ** 2
            t3906 = t3900 ** 2
            t3879 = t3891 * t3906
            t3898 = t3890 ** 2
            t3899 = t3891 * t3898
            t3904 = t3899 ** 2
            t3881 = t3891 * t3904
            t3902 = t3898 ** 2
            t3883 = t3891 * t3902
            t3901 = t3891 * t3900
            t3914 = 21252 * t3879 + 14168 * t3881 - 162932 * t3883 + 9108 * t3891 - 34408 * t3897 - 29348 * t3899 + 182160 * t3901
            t3878 = t3901 ** 2
            t3913 = -3289 * t3878 - 8855 * t3890 + 90321 * t3898 - 143451 * t3900 + 6831 * t3902 + 107019 * t3904 - 46805 * t3906 - 1771
            t3912 = -283360 * t3879 + 566720 * t3881 - 72352 * t3883 + 10144 * t3891 - 117824 * t3897 + 428512 * t3899 - 531840 * t3901
            t3911 = -65780 * t3878 + 980 * t3890 - 100492 * t3898 + 599844 * t3900 - 1269204 * t3902 + 1082620 * t3904 - 247940 * t3906 - 28
            t3910 = -3364900 * t3879 + 12113640 * t3881 - 16989420 * t3883 - 31540 * t3891 + 640680 * t3897 - 4043580 * t3899 + 11675120 * t3901
            t3909 = -1562275 * t3878 + 128915 * t3890 - 1110645 * t3898 + 3057575 * t3900 - 2494795 * t3902 - 1934295 * t3904 + 3917705 * t3906 - 2185
            t3896 = 4 * phi1
            t3895 = 8 * phi1
            t3894 = -7 * phi2
            t3893 = 7 * phi2
            t3892 = 12 * phi1
            tfunc[..., c] = (0.9e1 / 0.131072e6*1j) * np.sqrt(0.5e1) * np.sqrt(0.3e1) * np.sqrt(0.2e1) * np.sqrt(0.7e1) * ((1 + t3891) ** (-0.1e1 / 0.2e1)) * ((1 - t3891) ** (-0.1e1 / 0.2e1)) * ((t3909 + t3910) * np.exp((-1*1j) * (t3896 + t3893)) + (t3911 + t3912) * np.exp((-1*1j) * (t3895 + t3893)) + (-t3909 + t3910) * np.exp((1j) * (t3896 + t3894)) + (-t3911 + t3912) * np.exp((1j) * (t3895 + t3894)) + (-t3913 + t3914) * np.exp((-1*1j) * (t3892 + t3893)) + (t3913 + t3914) * np.exp((1j) * (t3892 + t3894)))

        if Bindx == 137:
            t3933 = np.cos(phi)
            t3932 = t3933 ** 2
            t3938 = t3933 * t3932
            t3941 = t3938 ** 2
            t3947 = t3941 ** 2
            t3921 = t3933 * t3947
            t3939 = t3932 ** 2
            t3940 = t3933 * t3939
            t3945 = t3940 ** 2
            t3923 = t3933 * t3945
            t3943 = t3939 ** 2
            t3925 = t3933 * t3943
            t3927 = t3933 * t3941
            t3954 = -3289 * t3921 - 30360 * t3923 + 91839 * t3925 - 54648 * t3927 - 5819 * t3933 + 36432 * t3938 - 34155 * t3940
            t3953 = 1518 * t3932 + 47564 * t3939 - 118404 * t3941 + 77418 * t3943 + 11638 * t3945 - 18216 * t3947 - 1518
            t3952 = 20336 * t3932 - 99616 * t3939 + 82272 * t3941 + 276816 * t3943 - 522192 * t3945 + 242880 * t3947 - 496
            t3951 = -65780 * t3921 - 129536 * t3923 + 658636 * t3925 - 742176 * t3927 + 4164 * t3933 - 63456 * t3938 + 338148 * t3940
            t3950 = -1562275 * t3921 + 3730232 * t3923 - 2590555 * t3925 + 28120 * t3927 + 7239 * t3933 - 138320 * t3938 + 525559 * t3940
            t3949 = -130910 * t3932 + 1390420 * t3939 - 5531356 * t3941 + 10201670 * t3943 - 8816038 * t3945 + 2884200 * t3947 + 2014
            t3937 = 2 * phi1
            t3936 = 4 * phi1
            t3935 = -3 * phi2
            t3934 = 3 * phi2
            tfunc[..., c] = -(0.45e2 / 0.65536e5) * np.sqrt(0.3e1) * np.sqrt(0.2e1) * ((t3953 + t3954) * np.exp((-6*1j) * (t3937 + phi2)) + (t3949 - t3950) * np.exp((-2*1j) * (t3937 + t3934)) + (-t3951 + t3952) * np.exp((-2*1j) * (t3936 + t3934)) + (t3949 + t3950) * np.exp((2*1j) * (t3937 + t3935)) + (t3951 + t3952) * np.exp((2*1j) * (t3936 + t3935)) + (t3953 - t3954) * np.exp((6*1j) * (t3937 - phi2)))

        if Bindx == 138:
            t3974 = np.cos(phi)
            t3973 = t3974 ** 2
            t3980 = t3974 * t3973
            t3983 = t3980 ** 2
            t3989 = t3983 ** 2
            t3962 = t3974 * t3989
            t3981 = t3973 ** 2
            t3982 = t3974 * t3981
            t3987 = t3982 ** 2
            t3964 = t3974 * t3987
            t3985 = t3981 ** 2
            t3966 = t3974 * t3985
            t3984 = t3974 * t3983
            t3997 = -15180 * t3962 + 40480 * t3964 - 7084 * t3966 + 3036 * t3974 - 32384 * t3980 + 83996 * t3982 - 72864 * t3984
            t3961 = t3984 ** 2
            t3996 = -3289 * t3961 - 8855 * t3973 - 3795 * t3981 + 75141 * t3983 - 129789 * t3985 + 82731 * t3987 - 13409 * t3989 + 1265
            t3995 = 202400 * t3962 - 647680 * t3964 + 756128 * t3966 - 544 * t3974 + 2816 * t3980 + 63968 * t3982 - 377088 * t3984
            t3994 = -65780 * t3961 + 20116 * t3973 - 160988 * t3981 + 503844 * t3983 - 703236 * t3985 + 375100 * t3987 + 31372 * t3989 - 428
            t3993 = -1562275 * t3961 - 3053 * t3973 + 88895 * t3981 - 870585 * t3983 + 3394065 * t3985 - 6060791 * t3987 + 5013701 * t3989 + 43
            t3992 = 2403500 * t3962 - 8460320 * t3964 + 11611660 * t3966 + 15940 * t3974 - 376960 * t3980 + 2589188 * t3982 - 7783008 * t3984
            t3979 = 4 * phi1
            t3978 = 8 * phi1
            t3977 = -5 * phi2
            t3976 = 5 * phi2
            t3975 = 12 * phi1
            tfunc[..., c] = (-0.45e2 / 0.131072e6*1j) * np.sqrt(0.3e1) * np.sqrt(0.19e2) * ((t3992 - t3993) * np.exp((-1*1j) * (t3979 + t3976)) + (-t3994 + t3995) * np.exp((-1*1j) * (t3978 + t3976)) + (t3992 + t3993) * np.exp((1j) * (t3979 + t3977)) + (t3994 + t3995) * np.exp((1j) * (t3978 + t3977)) + (t3996 + t3997) * np.exp((-1*1j) * (t3975 + t3976)) + (-t3996 + t3997) * np.exp((1j) * (t3975 + t3977))) * ((1 + t3974) ** (-0.1e1 / 0.2e1)) * ((1 - t3974) ** (-0.1e1 / 0.2e1))

        if Bindx == 139:
            t4016 = np.cos(phi)
            t4015 = t4016 ** 2
            t4020 = t4015 ** 2
            t4019 = t4016 * t4015
            t4022 = t4019 ** 2
            t4024 = t4020 ** 2
            t4021 = t4016 * t4020
            t4026 = t4021 ** 2
            t4028 = t4022 ** 2
            t4035 = 1012 - 11132 * t4015 + 22264 * t4020 + 2024 * t4022 - 43516 * t4024 + 41492 * t4026 - 12144 * t4028
            t4004 = t4016 * t4028
            t4006 = t4016 * t4026
            t4008 = t4016 * t4024
            t4010 = t4016 * t4022
            t4034 = -3289 * t4004 - 2530 * t4006 + 43769 * t4008 - 83996 * t4010 + 759 * t4016 - 18722 * t4019 + 64009 * t4021
            t4033 = 65780 * t4004 - 103224 * t4006 - 86196 * t4008 + 254960 * t4010 - 2572 * t4016 + 41160 * t4019 - 169908 * t4021
            t4032 = -8160 * t4015 + 80064 * t4020 - 322496 * t4022 + 598560 * t4024 - 510048 * t4026 + 161920 * t4028 + 160
            t4031 = -65700 * t4015 + 780360 * t4020 - 3347496 * t4022 + 6460380 * t4024 - 5749172 * t4026 + 1922800 * t4028 + 876
            t4030 = -1562275 * t4004 + 4643562 * t4006 - 5292925 * t4008 + 2917260 * t4010 - 3891 * t4016 + 100650 * t4019 - 804429 * t4021
            t4018 = 2 * phi1
            t4017 = 3 * phi1
            tfunc[..., c] = -(0.45e2 / 0.131072e6) * np.sqrt(0.3e1) * np.sqrt(0.19e2) * np.sqrt(0.2e1) * ((-t4030 + t4031) * np.exp((-4*1j) * (phi1 + phi2)) + (t4032 + t4033) * np.exp((-4*1j) * (t4018 + phi2)) + (t4034 + t4035) * np.exp((-4*1j) * (t4017 + phi2)) + (t4030 + t4031) * np.exp((4*1j) * (phi1 - phi2)) + (t4032 - t4033) * np.exp((4*1j) * (t4018 - phi2)) + (-t4034 + t4035) * np.exp((4*1j) * (t4017 - phi2)))

        if Bindx == 140:
            t4055 = np.cos(phi)
            t4054 = t4055 ** 2
            t4060 = t4055 * t4054
            t4063 = t4060 ** 2
            t4069 = t4063 ** 2
            t4043 = t4055 * t4069
            t4061 = t4054 ** 2
            t4062 = t4055 * t4061
            t4067 = t4062 ** 2
            t4045 = t4055 * t4067
            t4065 = t4061 ** 2
            t4047 = t4055 * t4065
            t4064 = t4055 * t4063
            t4077 = -9108 * t4043 + 44528 * t4045 - 86020 * t4047 + 1012 * t4055 + 4048 * t4060 - 35420 * t4062 + 80960 * t4064
            t4042 = t4064 ** 2
            t4076 = -759 - 3289 * t4042 + 11385 * t4054 - 42251 * t4061 + 67045 * t4063 - 46805 * t4065 + 5819 * t4067 + 8855 * t4069
            t4075 = -65780 * t4042 + 4180 * t4054 - 29244 * t4061 + 43172 * t4063 + 71068 * t4065 - 240900 * t4067 + 217580 * t4069 - 76
            t4074 = 121440 * t4043 - 485760 * t4045 + 763104 * t4047 + 2208 * t4055 - 41088 * t4060 + 231456 * t4062 - 591360 * t4064
            t4073 = 1442100 * t4043 - 4999280 * t4045 + 6696740 * t4047 + 7020 * t4055 - 183120 * t4060 + 1359420 * t4062 - 4322880 * t4064
            t4072 = -1562275 * t4042 - 34365 * t4054 + 461655 * t4061 - 2414745 * t4063 + 6209865 * t4065 - 8404935 * t4067 + 5744365 * t4069 + 435
            t4059 = 4 * phi1
            t4058 = 8 * phi1
            t4057 = -3 * phi2
            t4056 = 3 * phi2
            tfunc[..., c] = (-0.9e1 / 0.131072e6*1j) * np.sqrt(0.5e1) * np.sqrt(0.3e1) * np.sqrt(0.19e2) * np.sqrt(0.17e2) * ((t4076 + t4077) * np.exp((-3*1j) * (t4059 + phi2)) + (-t4072 + t4073) * np.exp((-1*1j) * (t4059 + t4056)) + (t4074 - t4075) * np.exp((-1*1j) * (t4058 + t4056)) + (t4072 + t4073) * np.exp((1j) * (t4059 + t4057)) + (t4074 + t4075) * np.exp((1j) * (t4058 + t4057)) + (-t4076 + t4077) * np.exp((3*1j) * (t4059 - phi2))) * ((1 + t4055) ** (-0.1e1 / 0.2e1)) * ((1 - t4055) ** (-0.1e1 / 0.2e1))

        if Bindx == 141:
            t4096 = np.cos(phi)
            t4095 = t4096 ** 2
            t4101 = t4095 ** 2
            t4100 = t4096 * t4095
            t4103 = t4100 ** 2
            t4105 = t4101 ** 2
            t4102 = t4096 * t4101
            t4107 = t4102 ** 2
            t4109 = t4103 ** 2
            t4116 = -46 + 782 * t4095 - 3220 * t4101 + 5980 * t4103 - 5750 * t4105 + 2806 * t4107 - 552 * t4109
            t4084 = t4096 * t4109
            t4086 = t4096 * t4107
            t4088 = t4096 * t4105
            t4090 = t4096 * t4103
            t4115 = -299 * t4084 + 1288 * t4086 - 1955 * t4088 + 920 * t4090 + 207 * t4096 - 736 * t4100 + 575 * t4102
            t4114 = 16 - 912 * t4095 + 8160 * t4101 - 26528 * t4103 + 39504 * t4105 - 27600 * t4107 + 7360 * t4109
            t4113 = -5980 * t4084 + 22080 * t4086 - 31260 * t4088 + 21152 * t4090 - 52 * t4096 + 1056 * t4100 - 6996 * t4102
            t4112 = -2430 * t4095 + 30900 * t4101 - 140220 * t4103 + 282150 * t4105 - 257830 * t4107 + 87400 * t4109 + 30
            t4111 = -142025 * t4084 + 471960 * t4086 - 606385 * t4088 + 376200 * t4090 - 555 * t4096 + 14880 * t4100 - 114075 * t4102
            t4099 = 2 * phi1
            t4098 = 4 * phi1
            t4097 = 6 * phi1
            tfunc[..., c] = -(0.9e1 / 0.32768e5) * np.sqrt(0.5e1) * np.sqrt(0.3e1) * np.sqrt(0.11e2) * np.sqrt(0.19e2) * np.sqrt(0.17e2) * ((-t4111 + t4112) * np.exp((-2*1j) * (t4099 + phi2)) + (-t4113 + t4114) * np.exp((-2*1j) * (t4098 + phi2)) + (t4115 + t4116) * np.exp((-2*1j) * (t4097 + phi2)) + (t4111 + t4112) * np.exp((2*1j) * (t4099 - phi2)) + (t4113 + t4114) * np.exp((2*1j) * (t4098 - phi2)) + (-t4115 + t4116) * np.exp((2*1j) * (t4097 - phi2)))

        if Bindx == 142:
            t4136 = np.cos(phi)
            t4135 = t4136 ** 2
            t4140 = t4136 * t4135
            t4143 = t4140 ** 2
            t4149 = t4143 ** 2
            t4124 = t4136 * t4149
            t4141 = t4135 ** 2
            t4142 = t4136 * t4141
            t4147 = t4142 ** 2
            t4126 = t4136 * t4147
            t4145 = t4141 ** 2
            t4128 = t4136 * t4145
            t4144 = t4136 * t4143
            t4157 = -276 * t4124 + 1656 * t4126 - 4140 * t4128 - 276 * t4136 + 1656 * t4140 - 4140 * t4142 + 5520 * t4144
            t4156 = 3680 * t4124 - 16192 * t4126 + 28064 * t4128 + 96 * t4136 - 1856 * t4140 + 10144 * t4142 - 23936 * t4144
            t4123 = t4144 ** 2
            t4155 = 23 - 299 * t4123 - 437 * t4135 + 2139 * t4141 - 4945 * t4143 + 6325 * t4145 - 4623 * t4147 + 1817 * t4149
            t4154 = 12 - 5980 * t4123 - 708 * t4135 + 7036 * t4141 - 27284 * t4143 + 52516 * t4145 - 53836 * t4147 + 28244 * t4149
            t4153 = 43700 * t4124 - 150328 * t4126 + 198284 * t4128 + 180 * t4136 - 4920 * t4140 + 38028 * t4142 - 124944 * t4144
            t4152 = -142025 * t4123 - 3735 * t4135 + 51225 * t4141 - 266187 * t4143 + 664791 * t4145 - 859541 * t4147 + 555427 * t4149 + 45
            t4139 = 4 * phi1
            t4138 = 8 * phi1
            t4137 = 12 * phi1
            tfunc[..., c] = (-0.45e2 / 0.65536e5*1j) * np.sqrt(0.3e1) * np.sqrt(0.19e2) * np.sqrt(0.11e2) * np.sqrt(0.17e2) * ((-t4152 + t4153) * np.exp((-1*1j) * (t4139 + phi2)) + (-t4154 + t4156) * np.exp((-1*1j) * (t4138 + phi2)) + (t4152 + t4153) * np.exp((1j) * (t4139 - phi2)) + (t4154 + t4156) * np.exp((1j) * (t4138 - phi2)) + (t4155 + t4157) * np.exp((-1*1j) * (t4137 + phi2)) + (-t4155 + t4157) * np.exp((1j) * (t4137 - phi2))) * ((1 + t4136) ** (-0.1e1 / 0.2e1)) * ((1 - t4136) ** (-0.1e1 / 0.2e1))

        if Bindx == 143:
            t4167 = np.cos(phi)
            t4166 = t4167 ** 2
            t4168 = t4166 ** 2
            t4170 = t4168 ** 2
            t4169 = t4166 * t4168
            t4162 = t4166 * t4170
            t4161 = t4169 ** 2
            tfunc[..., c] = (-0.45e2 / 0.32768e5*1j) * np.sqrt(0.11e2) * t4167 * np.sqrt(0.19e2) * np.sqrt(0.1547e4) * np.sqrt(0.3e1) * np.sqrt(0.2e1) * ((-10925 * t4161 + 37582 * t4162 - 49571 * t4170 + 31236 * t4169 - 9507 * t4168 + 1230 * t4166 - 45) * np.sin((4 * phi1)) + (-460 * t4161 + 2024 * t4162 - 3508 * t4170 + 2992 * t4169 - 1268 * t4168 + 232 * t4166 - 12) * np.sin((8 * phi1)) + (23 * t4161 - 138 * t4162 + 345 * t4170 - 460 * t4169 + 345 * t4168 - 138 * t4166 + 23) * np.sin((12 * phi1)))

        if Bindx == 144:
            t4192 = np.cos(phi)
            t4191 = t4192 ** 2
            t4196 = t4192 * t4191
            t4199 = t4196 ** 2
            t4205 = t4199 ** 2
            t4180 = t4192 * t4205
            t4197 = t4191 ** 2
            t4198 = t4192 * t4197
            t4203 = t4198 ** 2
            t4182 = t4192 * t4203
            t4201 = t4197 ** 2
            t4184 = t4192 * t4201
            t4200 = t4192 * t4199
            t4213 = 276 * t4180 - 1656 * t4182 + 4140 * t4184 + 276 * t4192 - 1656 * t4196 + 4140 * t4198 - 5520 * t4200
            t4212 = -3680 * t4180 + 16192 * t4182 - 28064 * t4184 - 96 * t4192 + 1856 * t4196 - 10144 * t4198 + 23936 * t4200
            t4179 = t4200 ** 2
            t4211 = 23 - 299 * t4179 - 437 * t4191 + 2139 * t4197 - 4945 * t4199 + 6325 * t4201 - 4623 * t4203 + 1817 * t4205
            t4210 = 12 - 5980 * t4179 - 708 * t4191 + 7036 * t4197 - 27284 * t4199 + 52516 * t4201 - 53836 * t4203 + 28244 * t4205
            t4209 = -43700 * t4180 + 150328 * t4182 - 198284 * t4184 - 180 * t4192 + 4920 * t4196 - 38028 * t4198 + 124944 * t4200
            t4208 = -142025 * t4179 - 3735 * t4191 + 51225 * t4197 - 266187 * t4199 + 664791 * t4201 - 859541 * t4203 + 555427 * t4205 + 45
            t4195 = 4 * phi1
            t4194 = 8 * phi1
            t4193 = 12 * phi1
            tfunc[..., c] = (-0.45e2 / 0.65536e5*1j) * np.sqrt(0.3e1) * np.sqrt(0.19e2) * np.sqrt(0.11e2) * np.sqrt(0.17e2) * ((-t4208 + t4209) * np.exp((-1*1j) * (t4195 - phi2)) + (-t4210 + t4212) * np.exp((-1*1j) * (t4194 - phi2)) + (t4208 + t4209) * np.exp((1j) * (t4195 + phi2)) + (t4210 + t4212) * np.exp((1j) * (t4194 + phi2)) + (t4211 + t4213) * np.exp((-1*1j) * (t4193 - phi2)) + (-t4211 + t4213) * np.exp((1j) * (t4193 + phi2))) * ((1 + t4192) ** (-0.1e1 / 0.2e1)) * ((1 - t4192) ** (-0.1e1 / 0.2e1))

        if Bindx == 145:
            t4232 = np.cos(phi)
            t4231 = t4232 ** 2
            t4237 = t4231 ** 2
            t4236 = t4232 * t4231
            t4239 = t4236 ** 2
            t4241 = t4237 ** 2
            t4238 = t4232 * t4237
            t4243 = t4238 ** 2
            t4245 = t4239 ** 2
            t4252 = 46 - 782 * t4231 + 3220 * t4237 - 5980 * t4239 + 5750 * t4241 - 2806 * t4243 + 552 * t4245
            t4220 = t4232 * t4245
            t4222 = t4232 * t4243
            t4224 = t4232 * t4241
            t4226 = t4232 * t4239
            t4251 = -299 * t4220 + 1288 * t4222 - 1955 * t4224 + 920 * t4226 + 207 * t4232 - 736 * t4236 + 575 * t4238
            t4250 = -16 + 912 * t4231 - 8160 * t4237 + 26528 * t4239 - 39504 * t4241 + 27600 * t4243 - 7360 * t4245
            t4249 = -5980 * t4220 + 22080 * t4222 - 31260 * t4224 + 21152 * t4226 - 52 * t4232 + 1056 * t4236 - 6996 * t4238
            t4248 = 2430 * t4231 - 30900 * t4237 + 140220 * t4239 - 282150 * t4241 + 257830 * t4243 - 87400 * t4245 - 30
            t4247 = -142025 * t4220 + 471960 * t4222 - 606385 * t4224 + 376200 * t4226 - 555 * t4232 + 14880 * t4236 - 114075 * t4238
            t4235 = 2 * phi1
            t4234 = 4 * phi1
            t4233 = 6 * phi1
            tfunc[..., c] = -(0.9e1 / 0.32768e5) * np.sqrt(0.11e2) * np.sqrt(0.5e1) * np.sqrt(0.3e1) * np.sqrt(0.19e2) * np.sqrt(0.17e2) * ((-t4247 + t4248) * np.exp((-2*1j) * (t4235 - phi2)) + (-t4249 + t4250) * np.exp((-2*1j) * (t4234 - phi2)) + (t4251 + t4252) * np.exp((-2*1j) * (t4233 - phi2)) + (t4247 + t4248) * np.exp((2*1j) * (t4235 + phi2)) + (t4249 + t4250) * np.exp((2*1j) * (t4234 + phi2)) + (-t4251 + t4252) * np.exp((2*1j) * (t4233 + phi2)))

        if Bindx == 146:
            t4272 = np.cos(phi)
            t4271 = t4272 ** 2
            t4277 = t4272 * t4271
            t4280 = t4277 ** 2
            t4286 = t4280 ** 2
            t4260 = t4272 * t4286
            t4278 = t4271 ** 2
            t4279 = t4272 * t4278
            t4284 = t4279 ** 2
            t4262 = t4272 * t4284
            t4282 = t4278 ** 2
            t4264 = t4272 * t4282
            t4281 = t4272 * t4280
            t4294 = -9108 * t4260 + 44528 * t4262 - 86020 * t4264 + 1012 * t4272 + 4048 * t4277 - 35420 * t4279 + 80960 * t4281
            t4259 = t4281 ** 2
            t4293 = -759 - 3289 * t4259 + 11385 * t4271 - 42251 * t4278 + 67045 * t4280 - 46805 * t4282 + 5819 * t4284 + 8855 * t4286
            t4292 = -65780 * t4259 + 4180 * t4271 - 29244 * t4278 + 43172 * t4280 + 71068 * t4282 - 240900 * t4284 + 217580 * t4286 - 76
            t4291 = 121440 * t4260 - 485760 * t4262 + 763104 * t4264 + 2208 * t4272 - 41088 * t4277 + 231456 * t4279 - 591360 * t4281
            t4290 = 1442100 * t4260 - 4999280 * t4262 + 6696740 * t4264 + 7020 * t4272 - 183120 * t4277 + 1359420 * t4279 - 4322880 * t4281
            t4289 = -1562275 * t4259 - 34365 * t4271 + 461655 * t4278 - 2414745 * t4280 + 6209865 * t4282 - 8404935 * t4284 + 5744365 * t4286 + 435
            t4276 = 4 * phi1
            t4275 = 8 * phi1
            t4274 = -3 * phi2
            t4273 = 3 * phi2
            tfunc[..., c] = (0.9e1 / 0.131072e6*1j) * np.sqrt(0.5e1) * np.sqrt(0.3e1) * np.sqrt(0.19e2) * np.sqrt(0.17e2) * ((1 + t4272) ** (-0.1e1 / 0.2e1)) * ((1 - t4272) ** (-0.1e1 / 0.2e1)) * ((-t4293 + t4294) * np.exp((-3*1j) * (t4276 - phi2)) + (t4289 + t4290) * np.exp((-1*1j) * (t4276 + t4274)) + (t4291 + t4292) * np.exp((-1*1j) * (t4275 + t4274)) + (-t4289 + t4290) * np.exp((1j) * (t4276 + t4273)) + (t4291 - t4292) * np.exp((1j) * (t4275 + t4273)) + (t4293 + t4294) * np.exp((3*1j) * (t4276 + phi2)))

        if Bindx == 147:
            t4313 = np.cos(phi)
            t4312 = t4313 ** 2
            t4317 = t4312 ** 2
            t4316 = t4313 * t4312
            t4319 = t4316 ** 2
            t4321 = t4317 ** 2
            t4318 = t4313 * t4317
            t4323 = t4318 ** 2
            t4325 = t4319 ** 2
            t4332 = -1012 + 11132 * t4312 - 22264 * t4317 - 2024 * t4319 + 43516 * t4321 - 41492 * t4323 + 12144 * t4325
            t4301 = t4313 * t4325
            t4303 = t4313 * t4323
            t4305 = t4313 * t4321
            t4307 = t4313 * t4319
            t4331 = 3289 * t4301 + 2530 * t4303 - 43769 * t4305 + 83996 * t4307 - 759 * t4313 + 18722 * t4316 - 64009 * t4318
            t4330 = 65780 * t4301 - 103224 * t4303 - 86196 * t4305 + 254960 * t4307 - 2572 * t4313 + 41160 * t4316 - 169908 * t4318
            t4329 = 8160 * t4312 - 80064 * t4317 + 322496 * t4319 - 598560 * t4321 + 510048 * t4323 - 161920 * t4325 - 160
            t4328 = 65700 * t4312 - 780360 * t4317 + 3347496 * t4319 - 6460380 * t4321 + 5749172 * t4323 - 1922800 * t4325 - 876
            t4327 = -1562275 * t4301 + 4643562 * t4303 - 5292925 * t4305 + 2917260 * t4307 - 3891 * t4313 + 100650 * t4316 - 804429 * t4318
            t4315 = 2 * phi1
            t4314 = 3 * phi1
            tfunc[..., c] = -(0.45e2 / 0.131072e6) * np.sqrt(0.3e1) * np.sqrt(0.19e2) * np.sqrt(0.2e1) * ((-t4327 + t4328) * np.exp((-4*1j) * (phi1 - phi2)) + (t4329 + t4330) * np.exp((-4*1j) * (t4315 - phi2)) + (-t4331 + t4332) * np.exp((-4*1j) * (t4314 - phi2)) + (t4327 + t4328) * np.exp((4*1j) * (phi1 + phi2)) + (t4329 - t4330) * np.exp((4*1j) * (t4315 + phi2)) + (t4331 + t4332) * np.exp((4*1j) * (t4314 + phi2)))

        if Bindx == 148:
            t4352 = np.cos(phi)
            t4351 = t4352 ** 2
            t4358 = t4352 * t4351
            t4361 = t4358 ** 2
            t4367 = t4361 ** 2
            t4340 = t4352 * t4367
            t4359 = t4351 ** 2
            t4360 = t4352 * t4359
            t4365 = t4360 ** 2
            t4342 = t4352 * t4365
            t4363 = t4359 ** 2
            t4344 = t4352 * t4363
            t4362 = t4352 * t4361
            t4375 = 15180 * t4340 - 40480 * t4342 + 7084 * t4344 - 3036 * t4352 + 32384 * t4358 - 83996 * t4360 + 72864 * t4362
            t4339 = t4362 ** 2
            t4374 = -3289 * t4339 - 8855 * t4351 - 3795 * t4359 + 75141 * t4361 - 129789 * t4363 + 82731 * t4365 - 13409 * t4367 + 1265
            t4373 = -202400 * t4340 + 647680 * t4342 - 756128 * t4344 + 544 * t4352 - 2816 * t4358 - 63968 * t4360 + 377088 * t4362
            t4372 = -65780 * t4339 + 20116 * t4351 - 160988 * t4359 + 503844 * t4361 - 703236 * t4363 + 375100 * t4365 + 31372 * t4367 - 428
            t4371 = -1562275 * t4339 - 3053 * t4351 + 88895 * t4359 - 870585 * t4361 + 3394065 * t4363 - 6060791 * t4365 + 5013701 * t4367 + 43
            t4370 = -2403500 * t4340 + 8460320 * t4342 - 11611660 * t4344 - 15940 * t4352 + 376960 * t4358 - 2589188 * t4360 + 7783008 * t4362
            t4357 = 4 * phi1
            t4356 = 8 * phi1
            t4355 = -5 * phi2
            t4354 = 5 * phi2
            t4353 = 12 * phi1
            tfunc[..., c] = (-0.45e2 / 0.131072e6*1j) * np.sqrt(0.3e1) * np.sqrt(0.19e2) * ((t4370 - t4371) * np.exp((-1*1j) * (t4357 + t4355)) + (-t4372 + t4373) * np.exp((-1*1j) * (t4356 + t4355)) + (t4370 + t4371) * np.exp((1j) * (t4357 + t4354)) + (t4372 + t4373) * np.exp((1j) * (t4356 + t4354)) + (t4374 + t4375) * np.exp((-1*1j) * (t4353 + t4355)) + (-t4374 + t4375) * np.exp((1j) * (t4353 + t4354))) * ((1 + t4352) ** (-0.1e1 / 0.2e1)) * ((1 - t4352) ** (-0.1e1 / 0.2e1))

        if Bindx == 149:
            t4394 = np.cos(phi)
            t4393 = t4394 ** 2
            t4399 = t4394 * t4393
            t4402 = t4399 ** 2
            t4408 = t4402 ** 2
            t4382 = t4394 * t4408
            t4400 = t4393 ** 2
            t4401 = t4394 * t4400
            t4406 = t4401 ** 2
            t4384 = t4394 * t4406
            t4404 = t4400 ** 2
            t4386 = t4394 * t4404
            t4388 = t4394 * t4402
            t4415 = -3289 * t4382 - 30360 * t4384 + 91839 * t4386 - 54648 * t4388 - 5819 * t4394 + 36432 * t4399 - 34155 * t4401
            t4414 = 1518 * t4393 + 47564 * t4400 - 118404 * t4402 + 77418 * t4404 + 11638 * t4406 - 18216 * t4408 - 1518
            t4413 = 20336 * t4393 - 99616 * t4400 + 82272 * t4402 + 276816 * t4404 - 522192 * t4406 + 242880 * t4408 - 496
            t4412 = -65780 * t4382 - 129536 * t4384 + 658636 * t4386 - 742176 * t4388 + 4164 * t4394 - 63456 * t4399 + 338148 * t4401
            t4411 = -1562275 * t4382 + 3730232 * t4384 - 2590555 * t4386 + 28120 * t4388 + 7239 * t4394 - 138320 * t4399 + 525559 * t4401
            t4410 = -130910 * t4393 + 1390420 * t4400 - 5531356 * t4402 + 10201670 * t4404 - 8816038 * t4406 + 2884200 * t4408 + 2014
            t4398 = 2 * phi1
            t4397 = 4 * phi1
            t4396 = -3 * phi2
            t4395 = 3 * phi2
            tfunc[..., c] = (0.45e2 / 0.65536e5) * np.sqrt(0.3e1) * np.sqrt(0.2e1) * ((t4414 - t4415) * np.exp((-6*1j) * (t4398 - phi2)) + (t4410 + t4411) * np.exp((-2*1j) * (t4398 + t4396)) + (t4412 + t4413) * np.exp((-2*1j) * (t4397 + t4396)) + (t4410 - t4411) * np.exp((2*1j) * (t4398 + t4395)) + (-t4412 + t4413) * np.exp((2*1j) * (t4397 + t4395)) + (t4414 + t4415) * np.exp((6*1j) * (t4398 + phi2)))

        if Bindx == 150:
            t4435 = np.cos(phi)
            t4434 = t4435 ** 2
            t4441 = t4435 * t4434
            t4444 = t4441 ** 2
            t4450 = t4444 ** 2
            t4423 = t4435 * t4450
            t4442 = t4434 ** 2
            t4443 = t4435 * t4442
            t4448 = t4443 ** 2
            t4425 = t4435 * t4448
            t4446 = t4442 ** 2
            t4427 = t4435 * t4446
            t4445 = t4435 * t4444
            t4458 = -21252 * t4423 - 14168 * t4425 + 162932 * t4427 - 9108 * t4435 + 34408 * t4441 + 29348 * t4443 - 182160 * t4445
            t4422 = t4445 ** 2
            t4457 = -3289 * t4422 - 8855 * t4434 + 90321 * t4442 - 143451 * t4444 + 6831 * t4446 + 107019 * t4448 - 46805 * t4450 - 1771
            t4456 = 283360 * t4423 - 566720 * t4425 + 72352 * t4427 - 10144 * t4435 + 117824 * t4441 - 428512 * t4443 + 531840 * t4445
            t4455 = -65780 * t4422 + 980 * t4434 - 100492 * t4442 + 599844 * t4444 - 1269204 * t4446 + 1082620 * t4448 - 247940 * t4450 - 28
            t4454 = 3364900 * t4423 - 12113640 * t4425 + 16989420 * t4427 + 31540 * t4435 - 640680 * t4441 + 4043580 * t4443 - 11675120 * t4445
            t4453 = -1562275 * t4422 + 128915 * t4434 - 1110645 * t4442 + 3057575 * t4444 - 2494795 * t4446 - 1934295 * t4448 + 3917705 * t4450 - 2185
            t4440 = 4 * phi1
            t4439 = 8 * phi1
            t4438 = -7 * phi2
            t4437 = 7 * phi2
            t4436 = 12 * phi1
            tfunc[..., c] = (0.9e1 / 0.131072e6*1j) * np.sqrt(0.5e1) * np.sqrt(0.3e1) * np.sqrt(0.7e1) * np.sqrt(0.2e1) * ((1 + t4435) ** (-0.1e1 / 0.2e1)) * ((1 - t4435) ** (-0.1e1 / 0.2e1)) * ((t4453 + t4454) * np.exp((-1*1j) * (t4440 + t4438)) + (t4455 + t4456) * np.exp((-1*1j) * (t4439 + t4438)) + (-t4453 + t4454) * np.exp((1j) * (t4440 + t4437)) + (-t4455 + t4456) * np.exp((1j) * (t4439 + t4437)) + (-t4457 + t4458) * np.exp((-1*1j) * (t4436 + t4438)) + (t4457 + t4458) * np.exp((1j) * (t4436 + t4437)))

        if Bindx == 151:
            t4477 = np.cos(phi)
            t4476 = t4477 ** 2
            t4482 = t4476 ** 2
            t4481 = t4477 * t4476
            t4484 = t4481 ** 2
            t4486 = t4482 ** 2
            t4483 = t4477 * t4482
            t4488 = t4483 ** 2
            t4490 = t4484 ** 2
            t4497 = -26312 * t4476 + 101200 * t4482 + 12144 * t4484 - 188232 * t4486 + 78936 * t4488 + 24288 * t4490 - 2024
            t4465 = t4477 * t4490
            t4467 = t4477 * t4488
            t4469 = t4477 * t4486
            t4471 = t4477 * t4484
            t4496 = 3289 * t4465 + 69322 * t4467 - 31625 * t4469 - 179124 * t4471 - 12903 * t4477 + 4554 * t4481 + 146487 * t4483
            t4495 = -65780 * t4465 - 455400 * t4467 + 1156980 * t4469 - 743856 * t4471 - 13236 * t4477 + 77848 * t4481 + 39348 * t4483
            t4494 = -46656 * t4476 + 346240 * t4482 - 859776 * t4484 + 635328 * t4486 + 242880 * t4488 - 323840 * t4490 + 1728
            t4493 = 193800 * t4476 - 1901520 * t4482 + 7659280 * t4484 - 14215800 * t4486 + 12113640 * t4488 - 3845600 * t4490 - 3800
            t4492 = -1562275 * t4465 + 2451570 * t4467 + 2047155 * t4469 - 6055300 * t4471 + 61085 * t4477 - 977550 * t4481 + 4035315 * t4483
            t4480 = 3 * phi1
            t4479 = -2 * phi2
            t4478 = 2 * phi2
            tfunc[..., c] = -(0.9e1 / 0.65536e5) * np.sqrt(0.5e1) * np.sqrt(0.3e1) * ((t4494 - t4495) * np.exp((-8*1j) * (phi1 - phi2)) + (-t4492 + t4493) * np.exp((-4*1j) * (phi1 + t4479)) + (-t4496 + t4497) * np.exp((-4*1j) * (t4480 + t4479)) + (t4492 + t4493) * np.exp((4*1j) * (phi1 + t4478)) + (t4496 + t4497) * np.exp((4*1j) * (t4480 + t4478)) + (t4494 + t4495) * np.exp((8*1j) * (phi1 + phi2)))

        if Bindx == 152:
            t4517 = np.cos(phi)
            t4516 = t4517 ** 2
            t4522 = t4517 * t4516
            t4525 = t4522 ** 2
            t4531 = t4525 ** 2
            t4505 = t4517 * t4531
            t4523 = t4516 ** 2
            t4524 = t4517 * t4523
            t4529 = t4524 ** 2
            t4507 = t4517 * t4529
            t4527 = t4523 ** 2
            t4509 = t4517 * t4527
            t4526 = t4517 * t4525
            t4539 = 2484 * t4505 + 12696 * t4507 - 21252 * t4509 - 1564 * t4517 - 3496 * t4522 + 23276 * t4524 - 12144 * t4526
            t4504 = t4526 ** 2
            t4538 = 207 - 299 * t4504 + 4347 * t4516 - 8349 * t4523 - 17457 * t4525 + 32637 * t4527 - 2783 * t4529 - 8303 * t4531
            t4537 = 5980 * t4504 + 9348 * t4516 - 39708 * t4523 + 32532 * t4525 + 83388 * t4527 - 147444 * t4529 + 56396 * t4531 - 492
            t4536 = -33120 * t4505 + 13248 * t4507 + 124128 * t4509 - 480 * t4517 - 8768 * t4522 + 74336 * t4524 - 169344 * t4526
            t4535 = -393300 * t4505 + 1457832 * t4507 - 2053596 * t4509 - 2052 * t4517 + 46056 * t4522 - 403788 * t4524 + 1348848 * t4526
            t4534 = -142025 * t4504 + 59641 * t4516 - 416271 * t4523 + 1107605 * t4525 - 1258769 * t4527 + 427899 * t4529 + 223307 * t4531 - 1387
            t4521 = 4 * phi1
            t4520 = 8 * phi1
            t4519 = -9 * phi2
            t4518 = 9 * phi2
            tfunc[..., c] = (-0.45e2 / 0.131072e6*1j) * np.sqrt(0.3e1) * np.sqrt(0.11e2) * np.sqrt(0.2e1) * ((t4538 + t4539) * np.exp((-3*1j) * (t4521 - 3 * phi2)) + (-t4534 + t4535) * np.exp((-1*1j) * (t4521 + t4519)) + (t4536 + t4537) * np.exp((-1*1j) * (t4520 + t4519)) + (t4534 + t4535) * np.exp((1j) * (t4521 + t4518)) + (t4536 - t4537) * np.exp((1j) * (t4520 + t4518)) + (-t4538 + t4539) * np.exp((3*1j) * (t4521 + 3 * phi2))) * ((1 + t4517) ** (-0.1e1 / 0.2e1)) * ((1 - t4517) ** (-0.1e1 / 0.2e1))

        if Bindx == 153:
            t4558 = np.cos(phi)
            t4557 = t4558 ** 2
            t4565 = t4557 ** 2
            t4564 = t4558 * t4557
            t4567 = t4564 ** 2
            t4569 = t4565 ** 2
            t4566 = t4558 * t4565
            t4571 = t4566 ** 2
            t4573 = t4567 ** 2
            t4580 = 10 + 310 * t4557 + 220 * t4565 - 1716 * t4567 + 66 * t4569 + 990 * t4571 + 120 * t4573
            t4579 = -48 + 432 * t4557 + 352 * t4565 - 5664 * t4567 + 8208 * t4569 - 1680 * t4571 - 1600 * t4573
            t4546 = t4558 * t4573
            t4548 = t4558 * t4571
            t4550 = t4558 * t4569
            t4552 = t4558 * t4567
            t4578 = -13 * t4546 - 472 * t4548 - 1045 * t4550 + 1320 * t4552 - 87 * t4558 - 528 * t4564 + 825 * t4566
            t4577 = 38 - 1254 * t4557 - 1596 * t4565 + 30932 * t4567 - 71250 * t4569 + 62130 * t4571 - 19000 * t4573
            t4576 = -260 * t4546 - 3456 * t4548 + 5052 * t4550 + 1632 * t4552 - 108 * t4558 + 1568 * t4564 - 4428 * t4566
            t4575 = -6175 * t4546 + 3192 * t4548 + 37449 * t4550 - 70984 * t4552 + 1235 * t4558 - 13680 * t4564 + 48963 * t4566
            t4563 = 2 * phi1
            t4562 = 4 * phi1
            t4561 = 6 * phi1
            t4560 = -5 * phi2
            t4559 = 5 * phi2
            tfunc[..., c] = -(0.45e2 / 0.65536e5) * np.sqrt(0.3e1) * np.sqrt(0.23e2) * np.sqrt(0.11e2) * np.sqrt(0.2e1) * ((-t4575 + t4577) * np.exp((-2*1j) * (t4563 + t4560)) + (-t4576 + t4579) * np.exp((-2*1j) * (t4562 + t4560)) + (t4578 + t4580) * np.exp((-2*1j) * (t4561 + t4560)) + (t4575 + t4577) * np.exp((2*1j) * (t4563 + t4559)) + (t4576 + t4579) * np.exp((2*1j) * (t4562 + t4559)) + (-t4578 + t4580) * np.exp((2*1j) * (t4561 + t4559)))

        if Bindx == 154:
            t4600 = np.cos(phi)
            t4599 = t4600 ** 2
            t4606 = t4600 * t4599
            t4609 = t4606 ** 2
            t4615 = t4609 ** 2
            t4588 = t4600 * t4615
            t4607 = t4599 ** 2
            t4608 = t4600 * t4607
            t4613 = t4608 ** 2
            t4590 = t4600 * t4613
            t4611 = t4607 ** 2
            t4592 = t4600 * t4611
            t4610 = t4600 * t4609
            t4623 = 132 * t4588 + 1408 * t4590 + 836 * t4592 + 108 * t4600 + 992 * t4606 - 308 * t4608 - 3168 * t4610
            t4622 = -1760 * t4588 - 2816 * t4590 + 13600 * t4592 - 416 * t4600 + 2560 * t4606 - 1184 * t4608 - 9984 * t4610
            t4587 = t4610 ** 2
            t4621 = -11 - 13 * t4587 - 451 * t4599 - 1023 * t4607 + 2409 * t4609 + 1551 * t4611 - 1881 * t4613 - 581 * t4615
            t4620 = -92 - 260 * t4587 - 92 * t4599 + 4660 * t4607 - 11532 * t4609 + 5100 * t4611 + 6508 * t4613 - 4292 * t4615
            t4619 = -20900 * t4588 + 80256 * t4590 - 109668 * t4592 + 2356 * t4600 - 12768 * t4606 + 6612 * t4608 + 54112 * t4610
            t4618 = 6175 * t4587 - 8303 * t4599 + 51813 * t4607 - 125267 * t4609 + 136363 * t4611 - 58653 * t4613 - 2489 * t4615 + 361
            t4605 = 4 * phi1
            t4604 = 8 * phi1
            t4603 = 12 * phi1
            t4602 = -11 * phi2
            t4601 = 11 * phi2
            tfunc[..., c] = (-0.45e2 / 0.131072e6*1j) * np.sqrt(0.23e2) * np.sqrt(0.11e2) * np.sqrt(0.3e1) * ((t4618 + t4619) * np.exp((-1*1j) * (t4605 + t4602)) + (-t4620 + t4622) * np.exp((-1*1j) * (t4604 + t4602)) + (-t4618 + t4619) * np.exp((1j) * (t4605 + t4601)) + (t4620 + t4622) * np.exp((1j) * (t4604 + t4601)) + (t4621 + t4623) * np.exp((-1*1j) * (t4603 + t4602)) + (-t4621 + t4623) * np.exp((1j) * (t4603 + t4601))) * ((1 + t4600) ** (-0.1e1 / 0.2e1)) * ((1 - t4600) ** (-0.1e1 / 0.2e1))

        if Bindx == 155:
            t4642 = np.cos(phi)
            t4641 = t4642 ** 2
            t4647 = t4641 ** 2
            t4646 = t4642 * t4641
            t4649 = t4646 ** 2
            t4651 = t4647 ** 2
            t4648 = t4642 * t4647
            t4653 = t4648 ** 2
            t4655 = t4649 ** 2
            t4662 = 12 + 636 * t4641 + 3080 * t4647 + 792 * t4649 - 4356 * t4651 - 2068 * t4653 - 144 * t4655
            t4661 = -160 - 2080 * t4641 + 8000 * t4647 + 960 * t4649 - 14880 * t4651 + 6240 * t4653 + 1920 * t4655
            t4630 = t4642 * t4655
            t4632 = t4642 * t4653
            t4634 = t4642 * t4651
            t4636 = t4642 * t4649
            t4660 = -13 * t4630 - 714 * t4632 - 3795 * t4634 - 2508 * t4636 + 131 * t4642 + 1782 * t4646 + 3069 * t4648
            t4659 = -260 * t4630 - 5480 * t4632 + 2500 * t4634 + 14160 * t4636 + 1020 * t4642 - 360 * t4646 - 11580 * t4648
            t4658 = -1900 + 20900 * t4641 - 41800 * t4647 - 3800 * t4649 + 81700 * t4651 - 77900 * t4653 + 22800 * t4655
            t4657 = -6175 * t4630 - 4750 * t4632 + 82175 * t4634 - 157700 * t4636 + 1425 * t4642 - 35150 * t4646 + 120175 * t4648
            t4645 = 2 * phi1
            t4644 = -3 * phi2
            t4643 = 3 * phi2
            tfunc[..., c] = (0.9e1 / 0.131072e6) * np.sqrt(0.3e1) * np.sqrt(0.11e2) * np.sqrt(0.23e2) * np.sqrt(0.2e1) * ((t4657 + t4658) * np.exp((-4*1j) * (phi1 + t4644)) + (t4659 + t4661) * np.exp((-4*1j) * (t4645 + t4644)) + (-t4657 + t4658) * np.exp((4*1j) * (phi1 + t4643)) + (-t4659 + t4661) * np.exp((4*1j) * (t4645 + t4643)) + (-t4660 + t4662) * np.exp((-12*1j) * (phi1 - phi2)) + (t4660 + t4662) * np.exp((12*1j) * (phi1 + phi2)))

        if Bindx == 156:
            t4681 = np.cos(phi)
            t4680 = t4681 ** 2
            t4687 = t4681 * t4680
            t4690 = t4687 ** 2
            t4696 = t4690 ** 2
            t4669 = t4681 * t4696
            t4700 = -1 - t4669
            t4699 = -20 - 20 * t4669
            t4698 = -475 - 475 * t4669
            t4688 = t4680 ** 2
            t4689 = t4681 * t4688
            t4694 = t4689 ** 2
            t4692 = t4688 ** 2
            t4686 = 4 * phi1
            t4685 = 8 * phi1
            t4684 = 12 * phi1
            t4683 = -13 * phi2
            t4682 = 13 * phi2
            t4675 = t4681 * t4690
            t4673 = t4681 * t4692
            t4671 = t4681 * t4694
            tfunc[..., c] = (0.9e1 / 0.131072e6*1j) * np.sqrt(0.3e1) * np.sqrt(0.11e2) * np.sqrt(0.23e2) * np.sqrt(0.13e2) * np.sqrt((1 - t4681)) * ((11 * t4696 - 54 * t4671 + 154 * t4694 - 275 * t4673 + 297 * t4692 - 132 * t4675 - 132 * t4690 + 297 * t4689 - 275 * t4688 + 154 * t4687 - 54 * t4680 + 11 * t4681 + t4700) * np.exp((-1*1j) * (t4684 + t4683)) + (13 * t4696 + 78 * t4671 + 286 * t4694 + 715 * t4673 + 1287 * t4692 + 1716 * t4675 + 1716 * t4690 + 1287 * t4689 + 715 * t4688 + 286 * t4687 + 78 * t4680 + 13 * t4681 - t4700) * np.exp((1j) * (t4684 + t4682)) + (-1425 * t4696 - 950 * t4671 + 6650 * t4694 - 2375 * t4673 - 11875 * t4692 + 9500 * t4675 + 9500 * t4690 - 11875 * t4689 - 2375 * t4688 + 6650 * t4687 - 950 * t4680 - 1425 * t4681 - t4698) * np.exp((-1*1j) * (t4686 + t4683)) + (-140 * t4696 + 360 * t4671 - 280 * t4694 - 500 * t4673 + 1260 * t4692 - 720 * t4675 - 720 * t4690 + 1260 * t4689 - 500 * t4688 - 280 * t4687 + 360 * t4680 - 140 * t4681 - t4699) * np.exp((-1*1j) * (t4685 + t4683)) + (-2375 * t4696 - 2850 * t4671 + 4750 * t4694 + 13775 * t4673 + 4275 * t4692 - 17100 * t4675 - 17100 * t4690 + 4275 * t4689 + 13775 * t4688 + 4750 * t4687 - 2850 * t4680 - 2375 * t4681 + t4698) * np.exp((1j) * (t4686 + t4682)) + (-180 * t4696 - 680 * t4671 - 1320 * t4694 - 1100 * t4673 + 660 * t4692 + 2640 * t4675 + 2640 * t4690 + 660 * t4689 - 1100 * t4688 - 1320 * t4687 - 680 * t4680 - 180 * t4681 + t4699) * np.exp((1j) * (t4685 + t4682))) * ((1 + t4681) ** (-0.1e1 / 0.2e1))

        if Bindx == 157:
            t4720 = np.cos(phi)
            t4719 = t4720 ** 2
            t4727 = t4719 ** 2
            t4728 = t4720 * t4727
            t4732 = t4728 ** 2
            t4711 = t4720 * t4732
            t4726 = t4720 * t4719
            t4745 = -4 * t4711 + 4 * t4726
            t4729 = t4726 ** 2
            t4734 = t4729 ** 2
            t4735 = t4720 * t4734
            t4744 = t4720 - t4735
            t4708 = t4720 * t4735
            t4743 = -1 + t4708
            t4730 = t4727 ** 2
            t4713 = t4720 * t4730
            t4742 = -20 * t4713 + 20 * t4728 + 4 * t4744 - 4 * t4745
            t4741 = -208 * t4711 - 572 * t4713 + 12 * t4720 + 208 * t4726 + 572 * t4728 - 12 * t4735
            t4740 = 2288 * t4713 - 2288 * t4728 + 208 * t4744 + 208 * t4745
            t4739 = t4734 - t4719 + 19 * t4727 - 45 * t4729 + 45 * t4730 - 19 * t4732 + t4743
            t4738 = -65 * t4719 - 429 * t4727 - 429 * t4729 + 429 * t4730 + 429 * t4732 + 65 * t4734 + t4743
            t4737 = -26 + 26 * t4708 - 650 * t4719 + 286 * t4727 + 2574 * t4729 - 2574 * t4730 - 286 * t4732 + 650 * t4734
            t4725 = 2 * phi1
            t4724 = 4 * phi1
            t4723 = 6 * phi1
            t4722 = -7 * phi2
            t4721 = 7 * phi2
            tfunc[..., c] = (0.87e2 / 0.1048576e7) * np.sqrt(0.5e1) * np.sqrt(0.23e2) * np.sqrt(0.19e2) * np.sqrt(0.2e1) * np.sqrt(0.7e1) * ((-340 * t4708 + 2380 * t4734 - 7140 * t4732 + 11900 * t4730 - 11900 * t4729 + 7140 * t4727 - 2380 * t4719 + 340) * np.exp((-14*1j) * phi2) + (t4738 - t4741) * np.exp((-2*1j) * (t4723 + t4721)) + (t4738 + t4741) * np.exp((2*1j) * (t4723 + t4722)) + (t4737 - t4740) * np.exp((-2*1j) * (t4724 + t4721)) + (t4737 + t4740) * np.exp((2*1j) * (t4724 + t4722)) + 143 * (t4739 - t4742) * np.exp((-2*1j) * (t4725 + t4721)) + 143 * (t4739 + t4742) * np.exp((2*1j) * (t4725 + t4722)))

        if Bindx == 158:
            t4766 = np.cos(phi)
            t4765 = t4766 ** 2
            t4772 = t4766 * t4765
            t4775 = t4772 ** 2
            t4776 = t4766 * t4775
            t4753 = t4776 ** 2
            t4786 = 7 * t4753 - 1287 * t4775 - 1716 * t4776
            t4785 = 182 * t4753 + 7722 * t4775 + 10296 * t4776
            t4784 = 1001 * t4753 - 19305 * t4775 - 25740 * t4776
            t4781 = t4775 ** 2
            t4773 = t4765 ** 2
            t4774 = t4766 * t4773
            t4779 = t4774 ** 2
            t4777 = t4773 ** 2
            t4771 = 4 * phi1
            t4770 = 8 * phi1
            t4769 = 12 * phi1
            t4768 = -13 * phi2
            t4767 = 13 * phi2
            t4758 = t4766 * t4777
            t4756 = t4766 * t4779
            t4754 = t4766 * t4781
            tfunc[..., c] = (0.87e2 / 0.524288e6*1j) * np.sqrt(0.2e1) * np.sqrt(0.19e2) * np.sqrt(0.23e2) * np.sqrt(0.5e1) * np.sqrt((1 + t4766)) * ((1 - t4766) ** (-0.1e1 / 0.2e1)) * (2380 * (-t4753 + t4754 + 6 * t4781 - 6 * t4756 - 15 * t4779 + 15 * t4758 + 20 * t4777 - 20 * t4776 - 15 * t4775 + 15 * t4774 + 6 * t4773 - 6 * t4772 - t4765 + t4766) * np.exp((-13*1j) * phi2) + (1170 * t4754 + 2548 * t4781 + 676 * t4756 - 6006 * t4779 - 8866 * t4758 - 2002 * t4774 - 5148 * t4773 - 1820 * t4772 + 598 * t4765 + 546 * t4766 + 104 + t4785) * np.exp((-1*1j) * (t4770 + t4767)) + (2717 * t4754 - 2860 * t4781 - 13442 * t4756 - 1001 * t4779 + 26455 * t4758 + 12870 * t4777 + 12155 * t4774 + 12584 * t4773 - 2002 * t4772 - 3575 * t4765 - 143 * t4766 + 286 + t4784) * np.exp((-1*1j) * (t4771 + t4767)) + (-4719 * t4754 + 4576 * t4781 + 11726 * t4756 - 26169 * t4779 + 715 * t4758 + 38610 * t4777 + 26455 * t4774 - 1716 * t4773 - 8866 * t4772 + 3289 * t4765 + 429 * t4766 - 286 + t4784) * np.exp((1j) * (t4771 + t4768)) + (-1534 * t4754 + 5252 * t4781 - 8476 * t4756 + 3146 * t4779 + 11726 * t4758 - 20592 * t4777 - 13442 * t4774 + 6292 * t4773 + 676 * t4772 - 1898 * t4765 + 754 * t4766 - 104 + t4785) * np.exp((1j) * (t4770 + t4768)) + (71 * t4754 + 312 * t4781 + 754 * t4756 + 1001 * t4779 + 429 * t4758 - 858 * t4777 - 143 * t4774 + 572 * t4773 + 546 * t4772 + 247 * t4765 + 59 * t4766 + 6 + t4786) * np.exp((-1*1j) * (t4769 + t4767)) + (-85 * t4754 + 468 * t4781 - 1534 * t4756 + 3289 * t4779 - 4719 * t4758 + 4290 * t4777 + 2717 * t4774 - 2288 * t4773 + 1170 * t4772 - 377 * t4765 + 71 * t4766 - 6 + t4786) * np.exp((1j) * (t4769 + t4768)))

        if Bindx == 159:
            t4807 = np.cos(phi)
            t4806 = t4807 ** 2
            t4811 = t4807 * t4806
            t4814 = t4811 ** 2
            t4820 = t4814 ** 2
            t4795 = t4807 * t4820
            t4812 = t4806 ** 2
            t4813 = t4807 * t4812
            t4818 = t4813 ** 2
            t4797 = t4807 * t4818
            t4816 = t4812 ** 2
            t4799 = t4807 * t4816
            t4815 = t4807 * t4814
            t4828 = -1944 * t4795 - 21840 * t4797 - 19448 * t4799 - 1320 * t4807 - 11024 * t4811 + 10296 * t4813 + 41184 * t4815
            t4794 = t4815 ** 2
            t4827 = 137 + 189 * t4794 + 5343 * t4806 + 9009 * t4812 - 36465 * t4814 - 14157 * t4816 + 31317 * t4818 + 8723 * t4820
            t4826 = 33696 * t4795 + 62400 * t4797 - 260832 * t4799 + 6240 * t4807 - 47424 * t4811 + 41184 * t4813 + 164736 * t4815
            t4825 = 92664 * t4795 - 350064 * t4797 + 463320 * t4799 - 10296 * t4807 + 61776 * t4811 - 51480 * t4813 - 205920 * t4815
            t4824 = 4914 * t4794 - 1482 * t4806 - 74646 * t4812 + 218790 * t4814 - 120978 * t4816 - 112398 * t4818 + 84318 * t4820 + 1482
            t4823 = 27027 * t4794 - 32175 * t4806 + 217503 * t4812 - 546975 * t4814 + 611325 * t4816 - 271557 * t4818 - 6435 * t4820 + 1287
            t4810 = 2 * phi1
            t4809 = -3 * phi2
            t4808 = 3 * phi2
            tfunc[..., c] = (0.29e2 / 0.1572864e7) * np.sqrt(0.5e1) * np.sqrt(0.23e2) * np.sqrt(0.3e1) * np.sqrt(0.19e2) * ((2380 - 64260 * t4794 + 387940 * t4820 - 978180 * t4818 + 1320900 * t4816 - 1011500 * t4814 + 421260 * t4812 - 78540 * t4806) * np.exp((-12*1j) * phi2) + (t4823 + t4825) * np.exp((-4*1j) * (phi1 + t4808)) + (t4824 + t4826) * np.exp((-4*1j) * (t4810 + t4808)) + (t4823 - t4825) * np.exp((4*1j) * (phi1 + t4809)) + (t4824 - t4826) * np.exp((4*1j) * (t4810 + t4809)) + (t4827 - t4828) * np.exp((-12*1j) * (phi1 + phi2)) + (t4827 + t4828) * np.exp((12*1j) * (phi1 - phi2)))

        if Bindx == 160:
            t4850 = np.cos(phi)
            t4849 = t4850 ** 2
            t4857 = t4849 ** 2
            t4856 = t4850 * t4849
            t4859 = t4856 ** 2
            t4861 = t4857 ** 2
            t4858 = t4850 * t4857
            t4863 = t4858 ** 2
            t4865 = t4859 ** 2
            t4860 = t4850 * t4859
            t4867 = t4860 ** 2
            t4874 = 38 + 1026 * t4849 - 1394 * t4857 - 7062 * t4859 + 10098 * t4861 + 2662 * t4863 - 4774 * t4865 - 594 * t4867
            t4836 = t4850 * t4867
            t4838 = t4850 * t4865
            t4840 = t4850 * t4863
            t4842 = t4850 * t4861
            t4873 = 63 * t4836 + 2351 * t4838 + 4131 * t4840 - 10637 * t4842 - 319 * t4850 - 1199 * t4856 + 6237 * t4858 - 627 * t4860
            t4872 = 232 - 3016 * t4849 + 4104 * t4857 + 28248 * t4859 - 82632 * t4861 + 67496 * t4863 - 4136 * t4865 - 10296 * t4867
            t4871 = 1638 * t4836 + 21606 * t4838 - 51074 * t4840 + 10142 * t4842 - 374 * t4850 + 8426 * t4856 - 36366 * t4858 + 46002 * t4860
            t4870 = 9009 * t4836 - 11583 * t4838 - 57651 * t4840 + 167805 * t4842 + 1551 * t4850 - 20097 * t4856 + 89331 * t4858 - 178365 * t4860
            t4869 = -2442 * t4849 + 4026 * t4857 + 35310 * t4859 - 134970 * t4861 + 188034 * t4863 - 118338 * t4865 + 28314 * t4867 + 66
            t4855 = 4 * phi1
            t4854 = 8 * phi1
            t4853 = 12 * phi1
            t4852 = -11 * phi2
            t4851 = 11 * phi2
            tfunc[..., c] = (0.29e2 / 0.524288e6*1j) * np.sqrt(0.13e2) * np.sqrt(0.2e1) * np.sqrt(0.19e2) * np.sqrt(0.23e2) * np.sqrt(0.5e1) * ((-21420 * t4836 + 130900 * t4838 - 335580 * t4840 + 464100 * t4842 - 368900 * t4860 + 164220 * t4858 - 35700 * t4856 + 2380 * t4850) * np.exp((-11*1j) * phi2) + (t4869 + t4870) * np.exp((-1*1j) * (t4855 + t4851)) + (t4871 - t4872) * np.exp((-1*1j) * (t4854 + t4851)) + (-t4869 + t4870) * np.exp((1j) * (t4855 + t4852)) + (t4871 + t4872) * np.exp((1j) * (t4854 + t4852)) + (t4873 - t4874) * np.exp((-1*1j) * (t4853 + t4851)) + (t4873 + t4874) * np.exp((1j) * (t4853 + t4852))) * ((1 + t4850) ** (-0.1e1 / 0.2e1)) * ((1 - t4850) ** (-0.1e1 / 0.2e1))

        if Bindx == 161:
            t4895 = np.cos(phi)
            t4894 = t4895 ** 2
            t4901 = t4895 * t4894
            t4904 = t4901 ** 2
            t4910 = t4904 ** 2
            t4883 = t4895 * t4910
            t4902 = t4894 ** 2
            t4903 = t4895 * t4902
            t4908 = t4903 ** 2
            t4885 = t4895 * t4908
            t4906 = t4902 ** 2
            t4887 = t4895 * t4906
            t4905 = t4895 * t4904
            t4918 = 2700 * t4883 + 16400 * t4885 - 15620 * t4887 - 1100 * t4895 - 400 * t4901 + 19140 * t4903 - 21120 * t4905
            t4882 = t4905 ** 2
            t4917 = 155 - 315 * t4882 + 2635 * t4894 - 10065 * t4902 - 7425 * t4904 + 33825 * t4906 - 9295 * t4908 - 9515 * t4910
            t4916 = -8190 * t4882 - 10258 * t4894 + 54582 * t4902 - 73722 * t4904 - 67782 * t4906 + 191114 * t4908 - 86190 * t4910 + 446
            t4915 = 46800 * t4883 + 1600 * t4885 - 196592 * t4887 + 1072 * t4895 + 4032 * t4901 - 76560 * t4903 + 219648 * t4905
            t4914 = -128700 * t4883 + 462000 * t4885 - 620268 * t4887 - 132 * t4895 + 6864 * t4901 - 95700 * t4903 + 375936 * t4905
            t4913 = -45045 * t4882 + 17061 * t4894 - 127743 * t4902 + 361713 * t4904 - 438801 * t4906 + 175263 * t4908 + 57915 * t4910 - 363
            t4900 = 2 * phi1
            t4899 = 4 * phi1
            t4898 = 6 * phi1
            t4897 = -5 * phi2
            t4896 = 5 * phi2
            tfunc[..., c] = -(0.29e2 / 0.1048576e7) * np.sqrt(0.5e1) * np.sqrt(0.23e2) * np.sqrt(0.19e2) * np.sqrt(0.2e1) * np.sqrt(0.13e2) * ((26180 * t4894 - 476 + 107100 * t4882 - 559300 * t4910 + 1190476 * t4908 - 1311380 * t4906 + 778260 * t4904 - 230860 * t4902) * np.exp((-10*1j) * phi2) + (t4913 + t4914) * np.exp((-2*1j) * (t4900 + t4896)) + (-t4915 + t4916) * np.exp((-2*1j) * (t4899 + t4896)) + (t4917 - t4918) * np.exp((-2*1j) * (t4898 + t4896)) + (t4913 - t4914) * np.exp((2*1j) * (t4900 + t4897)) + (t4915 + t4916) * np.exp((2*1j) * (t4899 + t4897)) + (t4917 + t4918) * np.exp((2*1j) * (t4898 + t4897)))

        if Bindx == 162:
            t4940 = np.cos(phi)
            t4939 = t4940 ** 2
            t4946 = t4939 ** 2
            t4945 = t4940 * t4939
            t4948 = t4945 ** 2
            t4950 = t4946 ** 2
            t4947 = t4940 * t4946
            t4952 = t4947 ** 2
            t4954 = t4948 ** 2
            t4949 = t4940 * t4948
            t4956 = t4949 ** 2
            t4963 = -370 - 2590 * t4939 + 27710 * t4946 - 43230 * t4948 - 23430 * t4950 + 73590 * t4952 - 24390 * t4954 - 7290 * t4956
            t4926 = t4940 * t4956
            t4928 = t4940 * t4954
            t4930 = t4940 * t4952
            t4932 = t4940 * t4950
            t4962 = 945 * t4926 + 21565 * t4928 - 15635 * t4930 - 64295 * t4932 + 2115 * t4940 - 8385 * t4945 - 16665 * t4947 + 80355 * t4949
            t4961 = 24570 * t4926 + 175890 * t4928 - 608670 * t4930 + 587994 * t4932 - 4194 * t4940 + 38646 * t4945 - 74250 * t4947 - 139986 * t4949
            t4960 = 10296 * t4939 - 108984 * t4946 + 409464 * t4948 - 620136 * t4950 + 277992 * t4952 + 158040 * t4954 - 126360 * t4956 - 312
            t4959 = 11286 * t4939 - 134838 * t4946 + 689238 * t4948 - 1716066 * t4950 + 2196018 * t4952 - 1392930 * t4954 + 347490 * t4956 - 198
            t4958 = 135135 * t4926 - 302445 * t4928 - 120285 * t4930 + 896247 * t4932 + 4653 * t4940 - 86031 * t4945 + 446985 * t4947 - 974259 * t4949
            t4944 = 4 * phi1
            t4943 = 8 * phi1
            t4942 = -9 * phi2
            t4941 = 9 * phi2
            tfunc[..., c] = (0.29e2 / 0.786432e6*1j) * np.sqrt(0.23e2) * np.sqrt(0.3e1) * np.sqrt(0.19e2) * np.sqrt(0.13e2) * ((1 + t4940) ** (-0.1e1 / 0.2e1)) * ((1 - t4940) ** (-0.1e1 / 0.2e1)) * ((-321300 * t4926 + 1725500 * t4928 - 3815140 * t4930 + 4438700 * t4932 - 2867900 * t4949 + 987700 * t4947 - 154700 * t4945 + 7140 * t4940) * np.exp((-9*1j) * phi2) + (t4962 - t4963) * np.exp((-3*1j) * (t4944 + 3 * phi2)) + (t4958 + t4959) * np.exp((-1*1j) * (t4944 + t4941)) + (-t4960 + t4961) * np.exp((-1*1j) * (t4943 + t4941)) + (t4958 - t4959) * np.exp((1j) * (t4944 + t4942)) + (t4960 + t4961) * np.exp((1j) * (t4943 + t4942)) + (t4962 + t4963) * np.exp((3*1j) * (t4944 - 3 * phi2)))

        if Bindx == 163:
            t4984 = np.cos(phi)
            t4983 = t4984 ** 2
            t4988 = t4984 * t4983
            t4991 = t4988 ** 2
            t4997 = t4991 ** 2
            t4972 = t4984 * t4997
            t4989 = t4983 ** 2
            t4990 = t4984 * t4989
            t4995 = t4990 ** 2
            t4974 = t4984 * t4995
            t4993 = t4989 ** 2
            t4976 = t4984 * t4993
            t4992 = t4984 * t4991
            t5005 = 49680 * t4972 + 92000 * t4974 - 384560 * t4976 + 9200 * t4984 - 69920 * t4988 + 60720 * t4990 + 242880 * t4992
            t4971 = t4992 ** 2
            t5004 = 7245 * t4971 - 2185 * t4983 - 110055 * t4989 + 322575 * t4991 - 178365 * t4993 - 165715 * t4995 + 124315 * t4997 + 2185
            t5003 = 188370 * t4971 + 23206 * t4983 + 48378 * t4989 - 1048410 * t4991 + 3069198 * t4993 - 3235870 * t4995 + 959790 * t4997 - 566
            t5002 = -861120 * t4972 + 1251200 * t4974 + 663872 * t4976 + 18880 * t4984 - 263808 * t4988 + 1189056 * t4990 - 2002176 * t4992
            t5001 = -2368080 * t4972 + 8136480 * t4974 - 10771728 * t4976 - 14256 * t4984 + 317856 * t4988 - 2195952 * t4990 + 6895680 * t4992
            t5000 = 1036035 * t4971 - 83655 * t4983 + 796983 * t4989 - 2494239 * t4991 + 2777709 * t4993 + 185955 * t4995 - 2220075 * t4997 + 1287
            t4987 = 3 * phi1
            t4986 = -2 * phi2
            t4985 = 2 * phi2
            tfunc[..., c] = (0.29e2 / 0.524288e6) * np.sqrt(0.19e2) * np.sqrt(0.2e1) * np.sqrt(0.13e2) * ((-2463300 * t4971 + 11221700 * t4997 - 20418020 * t4995 + 18723460 * t4993 - 8932140 * t4991 + 2039660 * t4989 - 173740 * t4983 + 2380) * np.exp((-8*1j) * phi2) + (-t5002 + t5003) * np.exp((-8*1j) * (phi1 + phi2)) + (t5000 - t5001) * np.exp((-4*1j) * (phi1 + t4985)) + (t5004 + t5005) * np.exp((-4*1j) * (t4987 + t4985)) + (t5000 + t5001) * np.exp((4*1j) * (phi1 + t4986)) + (t5004 - t5005) * np.exp((4*1j) * (t4987 + t4986)) + (t5002 + t5003) * np.exp((8*1j) * (phi1 - phi2)))

        if Bindx == 164:
            t5027 = np.cos(phi)
            t5026 = t5027 ** 2
            t5034 = t5026 ** 2
            t5033 = t5027 * t5026
            t5036 = t5033 ** 2
            t5038 = t5034 ** 2
            t5035 = t5027 * t5034
            t5040 = t5035 ** 2
            t5042 = t5036 ** 2
            t5037 = t5027 * t5036
            t5044 = t5037 ** 2
            t5051 = -230 + 2070 * t5026 + 1610 * t5034 - 31050 * t5036 + 60030 * t5038 - 36110 * t5040 - 2530 * t5042 + 6210 * t5044
            t5013 = t5027 * t5044
            t5015 = t5027 * t5042
            t5017 = t5027 * t5040
            t5019 = t5027 * t5038
            t5050 = 1035 * t5013 + 11615 * t5015 - 36225 * t5017 + 22195 * t5019 - 575 * t5027 + 8165 * t5033 - 25875 * t5035 + 19665 * t5037
            t5049 = -7448 * t5026 + 54936 * t5034 - 136920 * t5036 + 74376 * t5038 + 184184 * t5040 - 276920 * t5042 + 107640 * t5044 + 152
            t5048 = 26910 * t5013 + 62790 * t5015 - 388010 * t5017 + 563486 * t5019 + 650 * t5027 - 13454 * t5033 + 106386 * t5035 - 358758 * t5037
            t5047 = 148005 * t5013 - 444015 * t5015 + 406065 * t5017 - 3267 * t5019 + 783 * t5027 - 17877 * t5033 + 102243 * t5035 - 191937 * t5037
            t5046 = 9198 * t5026 - 114702 * t5034 + 563598 * t5036 - 1373322 * t5038 + 1765434 * t5040 - 1146090 * t5042 + 296010 * t5044 - 126
            t5032 = 4 * phi1
            t5031 = 8 * phi1
            t5030 = -7 * phi2
            t5029 = 7 * phi2
            t5028 = 12 * phi1
            tfunc[..., c] = (0.29e2 / 0.262144e6*1j) * np.sqrt(0.19e2) * np.sqrt(0.13e2) * np.sqrt(0.7e1) * np.sqrt(0.11e2) * ((1 + t5027) ** (-0.1e1 / 0.2e1)) * ((1 - t5027) ** (-0.1e1 / 0.2e1)) * ((3271140 * t5019 - 1784660 * t5037 + 506940 * t5035 - 64260 * t5033 + 2380 * t5027 - 351900 * t5013 + 1681300 * t5015 - 3260940 * t5017) * np.exp((-7*1j) * phi2) + (t5046 + t5047) * np.exp((-1*1j) * (t5032 + t5029)) + (t5048 + t5049) * np.exp((-1*1j) * (t5031 + t5029)) + (-t5046 + t5047) * np.exp((1j) * (t5032 + t5030)) + (t5048 - t5049) * np.exp((1j) * (t5031 + t5030)) + (t5050 + t5051) * np.exp((-1*1j) * (t5028 + t5029)) + (t5050 - t5051) * np.exp((1j) * (t5028 + t5030)))

        if Bindx == 165:
            t5072 = np.cos(phi)
            t5071 = t5072 ** 2
            t5077 = t5072 * t5071
            t5080 = t5077 ** 2
            t5081 = t5072 * t5080
            t5059 = t5081 ** 2
            t5078 = t5071 ** 2
            t5082 = t5078 ** 2
            t5079 = t5072 * t5078
            t5084 = t5079 ** 2
            t5086 = t5080 ** 2
            t5094 = 21735 * t5059 + 50025 * t5071 - 133515 * t5078 - 83835 * t5080 + 580635 * t5082 - 584085 * t5084 + 152375 * t5086 - 3335
            t5060 = t5072 * t5086
            t5062 = t5072 * t5084
            t5064 = t5072 * t5082
            t5093 = -111780 * t5060 + 160080 * t5062 + 272780 * t5064 + 1380 * t5072 - 86480 * t5077 + 426420 * t5079 - 662400 * t5081
            t5092 = 3108105 * t5059 - 22041 * t5071 + 191259 * t5078 - 22581 * t5080 - 3050091 * t5082 + 8527365 * t5084 - 8732295 * t5086 + 279
            t5091 = -1937520 * t5060 + 5056320 * t5062 - 4317744 * t5064 + 10608 * t5072 - 161088 * t5077 + 358704 * t5079 + 990720 * t5081
            t5090 = -5328180 * t5060 + 17669520 * t5062 - 22706244 * t5064 - 22284 * t5072 + 581616 * t5077 - 4355964 * t5079 + 14161536 * t5081
            t5089 = 565110 * t5059 - 102630 * t5071 + 989874 * t5078 - 3787038 * t5080 + 6543198 * t5082 - 4703730 * t5084 + 493350 * t5086 + 1866
            t5076 = 2 * phi1
            t5075 = 4 * phi1
            t5074 = -3 * phi2
            t5073 = 3 * phi2
            tfunc[..., c] = (0.29e2 / 0.3145728e7) * np.sqrt(0.3e1) * np.sqrt(0.19e2) * np.sqrt(0.2e1) * np.sqrt(0.13e2) * np.sqrt(0.11e2) * ((-7389900 * t5059 + 29833300 * t5086 - 47459580 * t5084 + 37477860 * t5082 - 15162980 * t5080 + 2905980 * t5078 - 207060 * t5071 + 2380) * np.exp((-6*1j) * phi2) + (-t5093 + t5094) * np.exp((-6*1j) * (t5076 + phi2)) + (-t5090 + t5092) * np.exp((-2*1j) * (t5076 + t5073)) + (t5089 - t5091) * np.exp((-2*1j) * (t5075 + t5073)) + (t5090 + t5092) * np.exp((2*1j) * (t5076 + t5074)) + (t5089 + t5091) * np.exp((2*1j) * (t5075 + t5074)) + (t5093 + t5094) * np.exp((6*1j) * (t5076 - phi2)))

        if Bindx == 166:
            t5116 = np.cos(phi)
            t5115 = t5116 ** 2
            t5123 = t5115 ** 2
            t5122 = t5116 * t5115
            t5125 = t5122 ** 2
            t5127 = t5123 ** 2
            t5124 = t5116 * t5123
            t5129 = t5124 ** 2
            t5131 = t5125 ** 2
            t5126 = t5116 * t5125
            t5133 = t5126 ** 2
            t5140 = -230 + 4830 * t5115 - 25070 * t5123 + 46230 * t5125 - 22770 * t5127 - 25990 * t5129 + 33350 * t5131 - 10350 * t5133
            t5102 = t5116 * t5133
            t5104 = t5116 * t5131
            t5106 = t5116 * t5129
            t5108 = t5116 * t5127
            t5139 = 2415 * t5102 + 6095 * t5104 - 51405 * t5106 + 95795 * t5108 - 575 * t5116 - 575 * t5122 + 23805 * t5124 - 75555 * t5126
            t5138 = 62790 * t5102 - 80730 * t5104 - 226274 * t5106 + 578334 * t5108 + 1674 * t5116 - 33718 * t5122 + 197170 * t5124 - 499246 * t5126
            t5137 = -1464 * t5115 + 25976 * t5123 - 184920 * t5125 + 578248 * t5127 - 877864 * t5129 + 639400 * t5131 - 179400 * t5133 + 24
            t5136 = 345345 * t5102 - 1233375 * t5104 + 1732797 * t5106 - 1215555 * t5108 - 241 * t5116 + 7695 * t5122 - 85421 * t5124 + 448755 * t5126
            t5135 = 11050 * t5115 - 154330 * t5123 + 817426 * t5125 - 2090310 * t5127 + 2782494 * t5129 - 1859550 * t5131 + 493350 * t5133 - 130
            t5121 = 4 * phi1
            t5120 = 8 * phi1
            t5119 = -5 * phi2
            t5118 = 5 * phi2
            t5117 = 12 * phi1
            tfunc[..., c] = (0.29e2 / 0.524288e6*1j) * np.sqrt(0.5e1) * np.sqrt(0.3e1) * np.sqrt(0.19e2) * np.sqrt(0.2e1) * np.sqrt(0.11e2) * np.sqrt(0.13e2) * ((1 + t5116) ** (-0.1e1 / 0.2e1)) * ((1 - t5116) ** (-0.1e1 / 0.2e1)) * ((-821100 * t5102 + 3558100 * t5104 - 6207516 * t5106 + 5551588 * t5108 - 2676548 * t5126 + 666876 * t5124 - 73780 * t5122 + 2380 * t5116) * np.exp((-5*1j) * phi2) + (t5135 + t5136) * np.exp((-1*1j) * (t5121 + t5118)) + (-t5137 + t5138) * np.exp((-1*1j) * (t5120 + t5118)) + (-t5135 + t5136) * np.exp((1j) * (t5121 + t5119)) + (t5137 + t5138) * np.exp((1j) * (t5120 + t5119)) + (t5139 - t5140) * np.exp((-1*1j) * (t5117 + t5118)) + (t5139 + t5140) * np.exp((1j) * (t5117 + t5119)))

        if Bindx == 167:
            t5161 = np.cos(phi)
            t5160 = t5161 ** 2
            t5164 = t5161 * t5160
            t5167 = t5164 ** 2
            t5168 = t5161 * t5167
            t5148 = t5168 ** 2
            t5165 = t5160 ** 2
            t5169 = t5165 ** 2
            t5166 = t5161 * t5165
            t5171 = t5166 ** 2
            t5173 = t5167 ** 2
            t5181 = 45885 * t5148 - 54625 * t5160 + 369265 * t5165 - 928625 * t5167 + 1037875 * t5169 - 461035 * t5171 - 10925 * t5173 + 2185
            t5149 = t5161 * t5173
            t5151 = t5161 * t5171
            t5153 = t5161 * t5169
            t5180 = -157320 * t5149 + 594320 * t5151 - 786600 * t5153 + 17480 * t5161 - 104880 * t5164 + 87400 * t5166 + 349600 * t5168
            t5179 = -2726880 * t5149 + 9369280 * t5151 - 12403808 * t5153 - 16416 * t5161 + 366016 * t5164 - 2528672 * t5166 + 7940480 * t5168
            t5178 = -7498920 * t5149 + 24227280 * t5151 - 30111048 * t5153 - 21656 * t5161 + 631184 * t5164 - 5166328 * t5166 + 17935392 * t5168
            t5177 = 1193010 * t5148 - 96330 * t5160 + 917738 * t5165 - 2872154 * t5167 + 3198574 * t5169 + 214130 * t5171 - 2556450 * t5173 + 1482
            t5176 = 6561555 * t5148 + 67729 * t5160 - 1030561 * t5165 + 6149217 * t5167 - 18088323 * t5169 + 27904635 * t5171 - 21559395 * t5173 - 761
            t5163 = 2 * phi1
            t5162 = 3 * phi1
            tfunc[..., c] = (0.29e2 / 0.524288e6) * np.sqrt(0.3e1) * np.sqrt(0.13e2) * np.sqrt(0.11e2) * ((-15600900 * t5148 + 57203300 * t5173 - 82164740 * t5171 + 58288580 * t5169 - 21117740 * t5167 + 3619980 * t5165 - 230860 * t5160 + 2380) * np.exp((-4*1j) * phi2) + (t5176 - t5178) * np.exp((-4*1j) * (phi1 + phi2)) + (t5177 - t5179) * np.exp((-4*1j) * (t5163 + phi2)) + (-t5180 + t5181) * np.exp((-4*1j) * (t5162 + phi2)) + (t5176 + t5178) * np.exp((4*1j) * (phi1 - phi2)) + (t5177 + t5179) * np.exp((4*1j) * (t5163 - phi2)) + (t5180 + t5181) * np.exp((4*1j) * (t5162 - phi2)))

        if Bindx == 168:
            t5203 = np.cos(phi)
            t5202 = t5203 ** 2
            t5209 = t5202 ** 2
            t5208 = t5203 * t5202
            t5211 = t5208 ** 2
            t5213 = t5209 ** 2
            t5210 = t5203 * t5209
            t5215 = t5210 ** 2
            t5217 = t5211 ** 2
            t5212 = t5203 * t5211
            t5219 = t5212 ** 2
            t5226 = -126730 * t5202 + 1630010 * t5209 - 6402050 * t5211 + 11689750 * t5213 - 11147870 * t5215 + 5414430 * t5217 - 1061910 * t5219 + 4370
            t5225 = -865458 * t5202 + 13063842 * t5209 - 73723914 * t5211 + 197967726 * t5213 - 273162582 * t5215 + 187328790 * t5217 - 50617710 * t5219 + 9306
            t5224 = -975384 * t5202 + 11273688 * t5209 - 50659320 * t5211 + 112284072 * t5213 - 131299272 * t5215 + 77768520 * t5217 - 18406440 * t5219 + 14136
            t5189 = t5203 * t5219
            t5191 = t5203 * t5217
            t5193 = t5203 * t5215
            t5195 = t5203 * t5213
            t5223 = 10737090 * t5189 - 39710190 * t5191 + 54314730 * t5193 - 31494438 * t5195 + 33630 * t5203 - 660402 * t5208 + 2172726 * t5210 + 4606854 * t5212
            t5222 = 412965 * t5189 - 1352515 * t5191 + 404225 * t5193 + 3812825 * t5195 + 163875 * t5203 - 1531685 * t5208 + 4787335 * t5210 - 6697025 * t5212
            t5221 = 59053995 * t5189 - 233403885 * t5191 + 373143375 * t5193 - 308275209 * t5195 - 112563 * t5203 + 3526677 * t5208 - 32902551 * t5210 + 138970161 * t5212
            t5207 = 4 * phi1
            t5206 = 8 * phi1
            t5205 = -3 * phi2
            t5204 = 3 * phi2
            tfunc[..., c] = (0.29e2 / 0.1572864e7*1j) * np.sqrt(0.3e1) * np.sqrt(0.13e2) * np.sqrt(0.2e1) * ((1 + t5203) ** (-0.1e1 / 0.2e1)) * ((1 - t5203) ** (-0.1e1 / 0.2e1)) * ((-140408100 * t5189 + 566832700 * t5191 - 918372980 * t5193 + 760555180 * t5195 - 338743020 * t5212 + 77833140 * t5210 - 7932540 * t5208 + 235620 * t5203) * np.exp((-3*1j) * phi2) + (t5222 - t5226) * np.exp((-3*1j) * (t5207 + phi2)) + (t5221 - t5225) * np.exp((-1*1j) * (t5207 + t5204)) + (t5223 - t5224) * np.exp((-1*1j) * (t5206 + t5204)) + (t5221 + t5225) * np.exp((1j) * (t5207 + t5205)) + (t5223 + t5224) * np.exp((1j) * (t5206 + t5205)) + (t5222 + t5226) * np.exp((3*1j) * (t5207 - phi2)))

        if Bindx == 169:
            t5247 = np.cos(phi)
            t5246 = t5247 ** 2
            t5251 = t5247 * t5246
            t5254 = t5251 ** 2
            t5255 = t5247 * t5254
            t5234 = t5255 ** 2
            t5252 = t5246 ** 2
            t5256 = t5252 ** 2
            t5253 = t5247 * t5252
            t5258 = t5253 ** 2
            t5260 = t5254 ** 2
            t5268 = -137655 * t5234 + 67735 * t5246 - 168245 * t5252 - 98325 * t5254 + 797525 * t5256 - 1090315 * t5258 + 631465 * t5260 - 2185
            t5235 = t5247 * t5260
            t5237 = t5247 * t5258
            t5239 = t5247 * t5256
            t5267 = -235980 * t5235 + 1223600 * t5237 - 2578300 * t5239 - 43700 * t5247 + 454480 * t5251 - 1616900 * t5253 + 2796800 * t5255
            t5266 = -11248380 * t5235 + 35764080 * t5237 - 43320684 * t5239 - 25476 * t5247 + 790416 * t5251 - 6839316 * t5253 + 24879360 * t5255
            t5265 = -4090320 * t5235 + 16081600 * t5237 - 24590864 * t5239 - 44080 * t5247 + 1020224 * t5251 - 6606832 * t5253 + 18230272 * t5255
            t5264 = -3579030 * t5234 - 110618 * t5246 + 1380046 * t5252 - 6900610 * t5254 + 17083394 * t5256 - 22020430 * t5258 + 14145690 * t5260 + 1558
            t5263 = -19684665 * t5234 - 279015 * t5246 + 4317093 * t5252 - 25055547 * t5254 + 69396987 * t5256 - 99000165 * t5258 + 70302375 * t5260 + 2937
            t5250 = 2 * phi1
            t5249 = 4 * phi1
            t5248 = 6 * phi1
            tfunc[..., c] = -(0.29e2 / 0.1048576e7) * np.sqrt(0.2e1) * np.sqrt(0.17e2) * np.sqrt(0.13e2) * ((46802700 * t5234 - 161209300 * t5260 + 217372540 * t5258 - 144749220 * t5256 + 49244580 * t5254 - 7932540 * t5252 + 475860 * t5246 - 4620) * np.exp((-2*1j) * phi2) + (t5263 + t5266) * np.exp((-2*1j) * (t5250 + phi2)) + (t5264 + t5265) * np.exp((-2*1j) * (t5249 + phi2)) + (t5267 + t5268) * np.exp((-2*1j) * (t5248 + phi2)) + (t5263 - t5266) * np.exp((2*1j) * (t5250 - phi2)) + (t5264 - t5265) * np.exp((2*1j) * (t5249 - phi2)) + (-t5267 + t5268) * np.exp((2*1j) * (t5248 - phi2)))

        if Bindx == 170:
            t5290 = np.cos(phi)
            t5289 = t5290 ** 2
            t5295 = t5289 ** 2
            t5294 = t5290 * t5289
            t5297 = t5294 ** 2
            t5299 = t5295 ** 2
            t5296 = t5290 * t5295
            t5301 = t5296 ** 2
            t5303 = t5297 ** 2
            t5298 = t5290 * t5297
            t5305 = t5298 ** 2
            t5312 = 83226 * t5289 - 1305018 * t5295 + 7613034 * t5297 - 21013278 * t5299 + 29620734 * t5301 - 20622030 * t5303 + 5624190 * t5305 - 858
            t5311 = -144210 * t5289 + 773490 * t5295 - 1857250 * t5297 + 2425350 * t5299 - 1796070 * t5301 + 712310 * t5303 - 117990 * t5305 + 4370
            t5310 = -144248 * t5289 + 1693432 * t5295 - 7415928 * t5297 + 15545192 * t5299 - 16952104 * t5301 + 9316840 * t5303 - 2045160 * t5305 + 1976
            t5276 = t5290 * t5305
            t5278 = t5290 * t5303
            t5280 = t5290 * t5301
            t5282 = t5290 * t5299
            t5309 = -137655 * t5276 + 849965 * t5278 - 2209035 * t5280 + 3113625 * t5282 + 24035 * t5290 - 281865 * t5294 + 1186455 * t5296 - 2545525 * t5298
            t5308 = -3579030 * t5276 + 17554290 * t5278 - 35165390 * t5280 + 36735322 * t5282 + 36062 * t5290 - 882778 * t5294 + 6408662 * t5296 - 21107138 * t5298
            t5307 = -19684665 * t5276 + 81550755 * t5278 - 135917925 * t5280 + 116078391 * t5282 + 41613 * t5290 - 1346631 * t5294 + 12724569 * t5296 - 53446107 * t5298
            t5293 = 4 * phi1
            t5292 = 8 * phi1
            t5291 = 12 * phi1
            tfunc[..., c] = (-0.29e2 / 0.262144e6*1j) * np.sqrt(0.17e2) * np.sqrt(0.2e1) * ((46802700 * t5276 - 182010500 * t5278 + 283936380 * t5280 - 226326100 * t5282 + 96996900 * t5298 - 21441420 * t5296 + 2102100 * t5294 - 60060 * t5290) * np.exp((-1*1j) * phi2) + (t5307 - t5312) * np.exp((-1*1j) * (t5293 + phi2)) + (t5308 + t5310) * np.exp((-1*1j) * (t5292 + phi2)) + (t5307 + t5312) * np.exp((1j) * (t5293 - phi2)) + (t5308 - t5310) * np.exp((1j) * (t5292 - phi2)) + (t5309 + t5311) * np.exp((-1*1j) * (t5291 + phi2)) + (t5309 - t5311) * np.exp((1j) * (t5291 - phi2))) * ((1 + t5290) ** (-0.1e1 / 0.2e1)) * ((1 - t5290) ** (-0.1e1 / 0.2e1))

        if Bindx == 171:
            t5323 = np.cos(phi)
            t5322 = t5323 ** 2
            t5324 = t5322 ** 2
            t5325 = t5322 * t5324
            t5328 = t5325 ** 2
            t5326 = t5324 ** 2
            t5318 = t5322 * t5326
            t5316 = t5322 * t5328
            tfunc[..., c] = 0.29e2 / 0.393216e6 * np.sqrt(0.7e1) * np.sqrt(0.3e1) * np.sqrt(0.5e1) * np.sqrt(0.17e2) * (-(10029150 * t5316) + (33801950 * t5328) - (44618574 * t5318) + (29099070 * t5326) - (9699690 * t5325) + (1531530 * t5324) - (90090 * t5322) + 0.858e3 + (8436285 * t5316 - 30933045 * t5328 + 44431101 * t5318 - 31519917 * t5326 + 11419551 * t5325 - 1957527 * t5324 + 124839 * t5322 - 1287) * np.cos((4 * phi1)) + (1533870 * t5316 - 6987630 * t5328 + 12714078 * t5318 - 11658894 * t5326 + 5561946 * t5325 - 1270074 * t5324 + 108186 * t5322 - 1482) * np.cos((8 * phi1)) + (58995 * t5316 - 356155 * t5328 + 898035 * t5318 - 1212675 * t5326 + 928625 * t5325 - 386745 * t5324 + 72105 * t5322 - 2185) * np.cos((12 * phi1)))

        if Bindx == 172:
            t5351 = np.cos(phi)
            t5350 = t5351 ** 2
            t5356 = t5350 ** 2
            t5355 = t5351 * t5350
            t5358 = t5355 ** 2
            t5360 = t5356 ** 2
            t5357 = t5351 * t5356
            t5362 = t5357 ** 2
            t5364 = t5358 ** 2
            t5359 = t5351 * t5358
            t5366 = t5359 ** 2
            t5373 = 83226 * t5350 - 1305018 * t5356 + 7613034 * t5358 - 21013278 * t5360 + 29620734 * t5362 - 20622030 * t5364 + 5624190 * t5366 - 858
            t5372 = -144210 * t5350 + 773490 * t5356 - 1857250 * t5358 + 2425350 * t5360 - 1796070 * t5362 + 712310 * t5364 - 117990 * t5366 + 4370
            t5371 = -144248 * t5350 + 1693432 * t5356 - 7415928 * t5358 + 15545192 * t5360 - 16952104 * t5362 + 9316840 * t5364 - 2045160 * t5366 + 1976
            t5337 = t5351 * t5366
            t5339 = t5351 * t5364
            t5341 = t5351 * t5362
            t5343 = t5351 * t5360
            t5370 = 137655 * t5337 - 849965 * t5339 + 2209035 * t5341 - 3113625 * t5343 - 24035 * t5351 + 281865 * t5355 - 1186455 * t5357 + 2545525 * t5359
            t5369 = 3579030 * t5337 - 17554290 * t5339 + 35165390 * t5341 - 36735322 * t5343 - 36062 * t5351 + 882778 * t5355 - 6408662 * t5357 + 21107138 * t5359
            t5368 = 19684665 * t5337 - 81550755 * t5339 + 135917925 * t5341 - 116078391 * t5343 - 41613 * t5351 + 1346631 * t5355 - 12724569 * t5357 + 53446107 * t5359
            t5354 = 4 * phi1
            t5353 = 8 * phi1
            t5352 = 12 * phi1
            tfunc[..., c] = (0.29e2 / 0.262144e6*1j) * np.sqrt(0.17e2) * np.sqrt(0.2e1) * ((-46802700 * t5337 + 182010500 * t5339 - 283936380 * t5341 + 226326100 * t5343 - 96996900 * t5359 + 21441420 * t5357 - 2102100 * t5355 + 60060 * t5351) * np.exp((1j) * phi2) + (t5368 - t5373) * np.exp((-1*1j) * (t5354 - phi2)) + (t5369 + t5371) * np.exp((-1*1j) * (t5353 - phi2)) + (t5368 + t5373) * np.exp((1j) * (t5354 + phi2)) + (t5369 - t5371) * np.exp((1j) * (t5353 + phi2)) + (t5370 + t5372) * np.exp((-1*1j) * (t5352 - phi2)) + (t5370 - t5372) * np.exp((1j) * (t5352 + phi2))) * ((1 + t5351) ** (-0.1e1 / 0.2e1)) * ((1 - t5351) ** (-0.1e1 / 0.2e1))

        if Bindx == 173:
            t5394 = np.cos(phi)
            t5393 = t5394 ** 2
            t5398 = t5394 * t5393
            t5401 = t5398 ** 2
            t5402 = t5394 * t5401
            t5381 = t5402 ** 2
            t5399 = t5393 ** 2
            t5403 = t5399 ** 2
            t5400 = t5394 * t5399
            t5405 = t5400 ** 2
            t5407 = t5401 ** 2
            t5415 = -137655 * t5381 + 67735 * t5393 - 168245 * t5399 - 98325 * t5401 + 797525 * t5403 - 1090315 * t5405 + 631465 * t5407 - 2185
            t5382 = t5394 * t5407
            t5384 = t5394 * t5405
            t5386 = t5394 * t5403
            t5414 = -235980 * t5382 + 1223600 * t5384 - 2578300 * t5386 - 43700 * t5394 + 454480 * t5398 - 1616900 * t5400 + 2796800 * t5402
            t5413 = -11248380 * t5382 + 35764080 * t5384 - 43320684 * t5386 - 25476 * t5394 + 790416 * t5398 - 6839316 * t5400 + 24879360 * t5402
            t5412 = -4090320 * t5382 + 16081600 * t5384 - 24590864 * t5386 - 44080 * t5394 + 1020224 * t5398 - 6606832 * t5400 + 18230272 * t5402
            t5411 = -3579030 * t5381 - 110618 * t5393 + 1380046 * t5399 - 6900610 * t5401 + 17083394 * t5403 - 22020430 * t5405 + 14145690 * t5407 + 1558
            t5410 = -19684665 * t5381 - 279015 * t5393 + 4317093 * t5399 - 25055547 * t5401 + 69396987 * t5403 - 99000165 * t5405 + 70302375 * t5407 + 2937
            t5397 = 2 * phi1
            t5396 = 4 * phi1
            t5395 = 6 * phi1
            tfunc[..., c] = -(0.29e2 / 0.1048576e7) * np.sqrt(0.2e1) * np.sqrt(0.13e2) * np.sqrt(0.17e2) * ((-4620 + 46802700 * t5381 - 161209300 * t5407 + 217372540 * t5405 - 144749220 * t5403 + 49244580 * t5401 - 7932540 * t5399 + 475860 * t5393) * np.exp((2*1j) * phi2) + (t5410 - t5413) * np.exp((-2*1j) * (t5397 - phi2)) + (t5411 - t5412) * np.exp((-2*1j) * (t5396 - phi2)) + (-t5414 + t5415) * np.exp((-2*1j) * (t5395 - phi2)) + (t5410 + t5413) * np.exp((2*1j) * (t5397 + phi2)) + (t5411 + t5412) * np.exp((2*1j) * (t5396 + phi2)) + (t5414 + t5415) * np.exp((2*1j) * (t5395 + phi2)))

        if Bindx == 174:
            t5437 = np.cos(phi)
            t5436 = t5437 ** 2
            t5443 = t5436 ** 2
            t5442 = t5437 * t5436
            t5445 = t5442 ** 2
            t5447 = t5443 ** 2
            t5444 = t5437 * t5443
            t5449 = t5444 ** 2
            t5451 = t5445 ** 2
            t5446 = t5437 * t5445
            t5453 = t5446 ** 2
            t5460 = -126730 * t5436 + 1630010 * t5443 - 6402050 * t5445 + 11689750 * t5447 - 11147870 * t5449 + 5414430 * t5451 - 1061910 * t5453 + 4370
            t5459 = -865458 * t5436 + 13063842 * t5443 - 73723914 * t5445 + 197967726 * t5447 - 273162582 * t5449 + 187328790 * t5451 - 50617710 * t5453 + 9306
            t5458 = -975384 * t5436 + 11273688 * t5443 - 50659320 * t5445 + 112284072 * t5447 - 131299272 * t5449 + 77768520 * t5451 - 18406440 * t5453 + 14136
            t5423 = t5437 * t5453
            t5425 = t5437 * t5451
            t5427 = t5437 * t5449
            t5429 = t5437 * t5447
            t5457 = 10737090 * t5423 - 39710190 * t5425 + 54314730 * t5427 - 31494438 * t5429 + 33630 * t5437 - 660402 * t5442 + 2172726 * t5444 + 4606854 * t5446
            t5456 = 412965 * t5423 - 1352515 * t5425 + 404225 * t5427 + 3812825 * t5429 + 163875 * t5437 - 1531685 * t5442 + 4787335 * t5444 - 6697025 * t5446
            t5455 = 59053995 * t5423 - 233403885 * t5425 + 373143375 * t5427 - 308275209 * t5429 - 112563 * t5437 + 3526677 * t5442 - 32902551 * t5444 + 138970161 * t5446
            t5441 = 4 * phi1
            t5440 = 8 * phi1
            t5439 = -3 * phi2
            t5438 = 3 * phi2
            tfunc[..., c] = (0.29e2 / 0.1572864e7*1j) * np.sqrt(0.3e1) * np.sqrt(0.2e1) * np.sqrt(0.13e2) * ((1 + t5437) ** (-0.1e1 / 0.2e1)) * ((1 - t5437) ** (-0.1e1 / 0.2e1)) * ((-140408100 * t5423 + 566832700 * t5425 - 918372980 * t5427 + 760555180 * t5429 - 338743020 * t5446 + 77833140 * t5444 - 7932540 * t5442 + 235620 * t5437) * np.exp((3*1j) * phi2) + (t5456 + t5460) * np.exp((-3*1j) * (t5441 - phi2)) + (t5455 + t5459) * np.exp((-1*1j) * (t5441 + t5439)) + (t5457 + t5458) * np.exp((-1*1j) * (t5440 + t5439)) + (t5455 - t5459) * np.exp((1j) * (t5441 + t5438)) + (t5457 - t5458) * np.exp((1j) * (t5440 + t5438)) + (t5456 - t5460) * np.exp((3*1j) * (t5441 + phi2)))

        if Bindx == 175:
            t5481 = np.cos(phi)
            t5480 = t5481 ** 2
            t5484 = t5481 * t5480
            t5487 = t5484 ** 2
            t5488 = t5481 * t5487
            t5468 = t5488 ** 2
            t5485 = t5480 ** 2
            t5489 = t5485 ** 2
            t5486 = t5481 * t5485
            t5491 = t5486 ** 2
            t5493 = t5487 ** 2
            t5501 = 45885 * t5468 - 54625 * t5480 + 369265 * t5485 - 928625 * t5487 + 1037875 * t5489 - 461035 * t5491 - 10925 * t5493 + 2185
            t5469 = t5481 * t5493
            t5471 = t5481 * t5491
            t5473 = t5481 * t5489
            t5500 = -157320 * t5469 + 594320 * t5471 - 786600 * t5473 + 17480 * t5481 - 104880 * t5484 + 87400 * t5486 + 349600 * t5488
            t5499 = -2726880 * t5469 + 9369280 * t5471 - 12403808 * t5473 - 16416 * t5481 + 366016 * t5484 - 2528672 * t5486 + 7940480 * t5488
            t5498 = -7498920 * t5469 + 24227280 * t5471 - 30111048 * t5473 - 21656 * t5481 + 631184 * t5484 - 5166328 * t5486 + 17935392 * t5488
            t5497 = 1193010 * t5468 - 96330 * t5480 + 917738 * t5485 - 2872154 * t5487 + 3198574 * t5489 + 214130 * t5491 - 2556450 * t5493 + 1482
            t5496 = 6561555 * t5468 + 67729 * t5480 - 1030561 * t5485 + 6149217 * t5487 - 18088323 * t5489 + 27904635 * t5491 - 21559395 * t5493 - 761
            t5483 = 2 * phi1
            t5482 = 3 * phi1
            tfunc[..., c] = (0.29e2 / 0.524288e6) * np.sqrt(0.3e1) * np.sqrt(0.13e2) * np.sqrt(0.11e2) * ((-15600900 * t5468 + 57203300 * t5493 - 82164740 * t5491 + 58288580 * t5489 - 21117740 * t5487 + 3619980 * t5485 - 230860 * t5480 + 2380) * np.exp((4*1j) * phi2) + (t5496 + t5498) * np.exp((-4*1j) * (phi1 - phi2)) + (t5497 + t5499) * np.exp((-4*1j) * (t5483 - phi2)) + (t5500 + t5501) * np.exp((-4*1j) * (t5482 - phi2)) + (t5496 - t5498) * np.exp((4*1j) * (phi1 + phi2)) + (t5497 - t5499) * np.exp((4*1j) * (t5483 + phi2)) + (-t5500 + t5501) * np.exp((4*1j) * (t5482 + phi2)))

        if Bindx == 176:
            t5523 = np.cos(phi)
            t5522 = t5523 ** 2
            t5530 = t5522 ** 2
            t5529 = t5523 * t5522
            t5532 = t5529 ** 2
            t5534 = t5530 ** 2
            t5531 = t5523 * t5530
            t5536 = t5531 ** 2
            t5538 = t5532 ** 2
            t5533 = t5523 * t5532
            t5540 = t5533 ** 2
            t5547 = -230 + 4830 * t5522 - 25070 * t5530 + 46230 * t5532 - 22770 * t5534 - 25990 * t5536 + 33350 * t5538 - 10350 * t5540
            t5509 = t5523 * t5540
            t5511 = t5523 * t5538
            t5513 = t5523 * t5536
            t5515 = t5523 * t5534
            t5546 = -2415 * t5509 - 6095 * t5511 + 51405 * t5513 - 95795 * t5515 + 575 * t5523 + 575 * t5529 - 23805 * t5531 + 75555 * t5533
            t5545 = -62790 * t5509 + 80730 * t5511 + 226274 * t5513 - 578334 * t5515 - 1674 * t5523 + 33718 * t5529 - 197170 * t5531 + 499246 * t5533
            t5544 = -1464 * t5522 + 25976 * t5530 - 184920 * t5532 + 578248 * t5534 - 877864 * t5536 + 639400 * t5538 - 179400 * t5540 + 24
            t5543 = -345345 * t5509 + 1233375 * t5511 - 1732797 * t5513 + 1215555 * t5515 + 241 * t5523 - 7695 * t5529 + 85421 * t5531 - 448755 * t5533
            t5542 = 11050 * t5522 - 154330 * t5530 + 817426 * t5532 - 2090310 * t5534 + 2782494 * t5536 - 1859550 * t5538 + 493350 * t5540 - 130
            t5528 = 4 * phi1
            t5527 = 8 * phi1
            t5526 = -5 * phi2
            t5525 = 5 * phi2
            t5524 = 12 * phi1
            tfunc[..., c] = (-0.29e2 / 0.524288e6*1j) * np.sqrt(0.5e1) * np.sqrt(0.3e1) * np.sqrt(0.19e2) * np.sqrt(0.2e1) * np.sqrt(0.11e2) * np.sqrt(0.13e2) * ((-2380 * t5523 + 821100 * t5509 - 3558100 * t5511 + 6207516 * t5513 - 5551588 * t5515 + 2676548 * t5533 - 666876 * t5531 + 73780 * t5529) * np.exp((5*1j) * phi2) + (t5542 + t5543) * np.exp((-1*1j) * (t5528 + t5526)) + (-t5544 + t5545) * np.exp((-1*1j) * (t5527 + t5526)) + (-t5542 + t5543) * np.exp((1j) * (t5528 + t5525)) + (t5544 + t5545) * np.exp((1j) * (t5527 + t5525)) + (t5546 - t5547) * np.exp((-1*1j) * (t5524 + t5526)) + (t5546 + t5547) * np.exp((1j) * (t5524 + t5525))) * ((1 + t5523) ** (-0.1e1 / 0.2e1)) * ((1 - t5523) ** (-0.1e1 / 0.2e1))

        if Bindx == 177:
            t5568 = np.cos(phi)
            t5567 = t5568 ** 2
            t5573 = t5568 * t5567
            t5576 = t5573 ** 2
            t5577 = t5568 * t5576
            t5555 = t5577 ** 2
            t5574 = t5567 ** 2
            t5578 = t5574 ** 2
            t5575 = t5568 * t5574
            t5580 = t5575 ** 2
            t5582 = t5576 ** 2
            t5590 = -21735 * t5555 - 50025 * t5567 + 133515 * t5574 + 83835 * t5576 - 580635 * t5578 + 584085 * t5580 - 152375 * t5582 + 3335
            t5556 = t5568 * t5582
            t5558 = t5568 * t5580
            t5560 = t5568 * t5578
            t5589 = -111780 * t5556 + 160080 * t5558 + 272780 * t5560 + 1380 * t5568 - 86480 * t5573 + 426420 * t5575 - 662400 * t5577
            t5588 = -3108105 * t5555 + 22041 * t5567 - 191259 * t5574 + 22581 * t5576 + 3050091 * t5578 - 8527365 * t5580 + 8732295 * t5582 - 279
            t5587 = -1937520 * t5556 + 5056320 * t5558 - 4317744 * t5560 + 10608 * t5568 - 161088 * t5573 + 358704 * t5575 + 990720 * t5577
            t5586 = -5328180 * t5556 + 17669520 * t5558 - 22706244 * t5560 - 22284 * t5568 + 581616 * t5573 - 4355964 * t5575 + 14161536 * t5577
            t5585 = -565110 * t5555 + 102630 * t5567 - 989874 * t5574 + 3787038 * t5576 - 6543198 * t5578 + 4703730 * t5580 - 493350 * t5582 - 1866
            t5572 = 2 * phi1
            t5571 = 4 * phi1
            t5570 = -3 * phi2
            t5569 = 3 * phi2
            tfunc[..., c] = -(0.29e2 / 0.3145728e7) * np.sqrt(0.3e1) * np.sqrt(0.19e2) * np.sqrt(0.2e1) * np.sqrt(0.13e2) * np.sqrt(0.11e2) * ((-2380 + 7389900 * t5555 - 29833300 * t5582 + 47459580 * t5580 - 37477860 * t5578 + 15162980 * t5576 - 2905980 * t5574 + 207060 * t5567) * np.exp((6*1j) * phi2) + (-t5589 + t5590) * np.exp((-6*1j) * (t5572 - phi2)) + (-t5586 + t5588) * np.exp((-2*1j) * (t5572 + t5570)) + (t5585 - t5587) * np.exp((-2*1j) * (t5571 + t5570)) + (t5586 + t5588) * np.exp((2*1j) * (t5572 + t5569)) + (t5585 + t5587) * np.exp((2*1j) * (t5571 + t5569)) + (t5589 + t5590) * np.exp((6*1j) * (t5572 + phi2)))

        if Bindx == 178:
            t5612 = np.cos(phi)
            t5611 = t5612 ** 2
            t5619 = t5611 ** 2
            t5618 = t5612 * t5611
            t5621 = t5618 ** 2
            t5623 = t5619 ** 2
            t5620 = t5612 * t5619
            t5625 = t5620 ** 2
            t5627 = t5621 ** 2
            t5622 = t5612 * t5621
            t5629 = t5622 ** 2
            t5636 = -230 + 2070 * t5611 + 1610 * t5619 - 31050 * t5621 + 60030 * t5623 - 36110 * t5625 - 2530 * t5627 + 6210 * t5629
            t5598 = t5612 * t5629
            t5600 = t5612 * t5627
            t5602 = t5612 * t5625
            t5604 = t5612 * t5623
            t5635 = 1035 * t5598 + 11615 * t5600 - 36225 * t5602 + 22195 * t5604 - 575 * t5612 + 8165 * t5618 - 25875 * t5620 + 19665 * t5622
            t5634 = -7448 * t5611 + 54936 * t5619 - 136920 * t5621 + 74376 * t5623 + 184184 * t5625 - 276920 * t5627 + 107640 * t5629 + 152
            t5633 = 26910 * t5598 + 62790 * t5600 - 388010 * t5602 + 563486 * t5604 + 650 * t5612 - 13454 * t5618 + 106386 * t5620 - 358758 * t5622
            t5632 = 148005 * t5598 - 444015 * t5600 + 406065 * t5602 - 3267 * t5604 + 783 * t5612 - 17877 * t5618 + 102243 * t5620 - 191937 * t5622
            t5631 = 9198 * t5611 - 114702 * t5619 + 563598 * t5621 - 1373322 * t5623 + 1765434 * t5625 - 1146090 * t5627 + 296010 * t5629 - 126
            t5617 = 4 * phi1
            t5616 = 8 * phi1
            t5615 = -7 * phi2
            t5614 = 7 * phi2
            t5613 = 12 * phi1
            tfunc[..., c] = (0.29e2 / 0.262144e6*1j) * np.sqrt(0.19e2) * np.sqrt(0.7e1) * np.sqrt(0.13e2) * np.sqrt(0.11e2) * ((1 + t5612) ** (-0.1e1 / 0.2e1)) * ((1 - t5612) ** (-0.1e1 / 0.2e1)) * ((-351900 * t5598 + 1681300 * t5600 - 3260940 * t5602 + 3271140 * t5604 - 1784660 * t5622 + 506940 * t5620 - 64260 * t5618 + 2380 * t5612) * np.exp((7*1j) * phi2) + (-t5631 + t5632) * np.exp((-1*1j) * (t5617 + t5615)) + (t5633 - t5634) * np.exp((-1*1j) * (t5616 + t5615)) + (t5631 + t5632) * np.exp((1j) * (t5617 + t5614)) + (t5633 + t5634) * np.exp((1j) * (t5616 + t5614)) + (t5635 - t5636) * np.exp((-1*1j) * (t5613 + t5615)) + (t5635 + t5636) * np.exp((1j) * (t5613 + t5614)))

        if Bindx == 179:
            t5657 = np.cos(phi)
            t5656 = t5657 ** 2
            t5661 = t5657 * t5656
            t5664 = t5661 ** 2
            t5670 = t5664 ** 2
            t5645 = t5657 * t5670
            t5662 = t5656 ** 2
            t5663 = t5657 * t5662
            t5668 = t5663 ** 2
            t5647 = t5657 * t5668
            t5666 = t5662 ** 2
            t5649 = t5657 * t5666
            t5665 = t5657 * t5664
            t5678 = 49680 * t5645 + 92000 * t5647 - 384560 * t5649 + 9200 * t5657 - 69920 * t5661 + 60720 * t5663 + 242880 * t5665
            t5644 = t5665 ** 2
            t5677 = 7245 * t5644 - 2185 * t5656 - 110055 * t5662 + 322575 * t5664 - 178365 * t5666 - 165715 * t5668 + 124315 * t5670 + 2185
            t5676 = 188370 * t5644 + 23206 * t5656 + 48378 * t5662 - 1048410 * t5664 + 3069198 * t5666 - 3235870 * t5668 + 959790 * t5670 - 566
            t5675 = -861120 * t5645 + 1251200 * t5647 + 663872 * t5649 + 18880 * t5657 - 263808 * t5661 + 1189056 * t5663 - 2002176 * t5665
            t5674 = -2368080 * t5645 + 8136480 * t5647 - 10771728 * t5649 - 14256 * t5657 + 317856 * t5661 - 2195952 * t5663 + 6895680 * t5665
            t5673 = 1036035 * t5644 - 83655 * t5656 + 796983 * t5662 - 2494239 * t5664 + 2777709 * t5666 + 185955 * t5668 - 2220075 * t5670 + 1287
            t5660 = 3 * phi1
            t5659 = -2 * phi2
            t5658 = 2 * phi2
            tfunc[..., c] = (0.29e2 / 0.524288e6) * np.sqrt(0.19e2) * np.sqrt(0.2e1) * np.sqrt(0.13e2) * ((-173740 * t5656 + 2380 - 2463300 * t5644 + 11221700 * t5670 - 20418020 * t5668 + 18723460 * t5666 - 8932140 * t5664 + 2039660 * t5662) * np.exp((8*1j) * phi2) + (t5675 + t5676) * np.exp((-8*1j) * (phi1 - phi2)) + (t5673 + t5674) * np.exp((-4*1j) * (phi1 + t5659)) + (t5677 - t5678) * np.exp((-4*1j) * (t5660 + t5659)) + (t5673 - t5674) * np.exp((4*1j) * (phi1 + t5658)) + (t5677 + t5678) * np.exp((4*1j) * (t5660 + t5658)) + (-t5675 + t5676) * np.exp((8*1j) * (phi1 + phi2)))

        if Bindx == 180:
            t5700 = np.cos(phi)
            t5699 = t5700 ** 2
            t5706 = t5699 ** 2
            t5705 = t5700 * t5699
            t5708 = t5705 ** 2
            t5710 = t5706 ** 2
            t5707 = t5700 * t5706
            t5712 = t5707 ** 2
            t5714 = t5708 ** 2
            t5709 = t5700 * t5708
            t5716 = t5709 ** 2
            t5723 = -370 - 2590 * t5699 + 27710 * t5706 - 43230 * t5708 - 23430 * t5710 + 73590 * t5712 - 24390 * t5714 - 7290 * t5716
            t5686 = t5700 * t5716
            t5688 = t5700 * t5714
            t5690 = t5700 * t5712
            t5692 = t5700 * t5710
            t5722 = -945 * t5686 - 21565 * t5688 + 15635 * t5690 + 64295 * t5692 - 2115 * t5700 + 8385 * t5705 + 16665 * t5707 - 80355 * t5709
            t5721 = -24570 * t5686 - 175890 * t5688 + 608670 * t5690 - 587994 * t5692 + 4194 * t5700 - 38646 * t5705 + 74250 * t5707 + 139986 * t5709
            t5720 = 10296 * t5699 - 108984 * t5706 + 409464 * t5708 - 620136 * t5710 + 277992 * t5712 + 158040 * t5714 - 126360 * t5716 - 312
            t5719 = 11286 * t5699 - 134838 * t5706 + 689238 * t5708 - 1716066 * t5710 + 2196018 * t5712 - 1392930 * t5714 + 347490 * t5716 - 198
            t5718 = -135135 * t5686 + 302445 * t5688 + 120285 * t5690 - 896247 * t5692 - 4653 * t5700 + 86031 * t5705 - 446985 * t5707 + 974259 * t5709
            t5704 = 4 * phi1
            t5703 = 8 * phi1
            t5702 = -9 * phi2
            t5701 = 9 * phi2
            tfunc[..., c] = (-0.29e2 / 0.786432e6*1j) * np.sqrt(0.23e2) * np.sqrt(0.3e1) * np.sqrt(0.19e2) * np.sqrt(0.13e2) * ((321300 * t5686 - 1725500 * t5688 + 3815140 * t5690 - 4438700 * t5692 + 2867900 * t5709 - 987700 * t5707 + 154700 * t5705 - 7140 * t5700) * np.exp((9*1j) * phi2) + (t5722 - t5723) * np.exp((-3*1j) * (t5704 - 3 * phi2)) + (t5718 + t5719) * np.exp((-1*1j) * (t5704 + t5702)) + (-t5720 + t5721) * np.exp((-1*1j) * (t5703 + t5702)) + (t5718 - t5719) * np.exp((1j) * (t5704 + t5701)) + (t5720 + t5721) * np.exp((1j) * (t5703 + t5701)) + (t5722 + t5723) * np.exp((3*1j) * (t5704 + 3 * phi2))) * ((1 + t5700) ** (-0.1e1 / 0.2e1)) * ((1 - t5700) ** (-0.1e1 / 0.2e1))

        if Bindx == 181:
            t5744 = np.cos(phi)
            t5743 = t5744 ** 2
            t5750 = t5744 * t5743
            t5753 = t5750 ** 2
            t5759 = t5753 ** 2
            t5732 = t5744 * t5759
            t5751 = t5743 ** 2
            t5752 = t5744 * t5751
            t5757 = t5752 ** 2
            t5734 = t5744 * t5757
            t5755 = t5751 ** 2
            t5736 = t5744 * t5755
            t5754 = t5744 * t5753
            t5767 = 2700 * t5732 + 16400 * t5734 - 15620 * t5736 - 1100 * t5744 - 400 * t5750 + 19140 * t5752 - 21120 * t5754
            t5731 = t5754 ** 2
            t5766 = -155 + 315 * t5731 - 2635 * t5743 + 10065 * t5751 + 7425 * t5753 - 33825 * t5755 + 9295 * t5757 + 9515 * t5759
            t5765 = 8190 * t5731 + 10258 * t5743 - 54582 * t5751 + 73722 * t5753 + 67782 * t5755 - 191114 * t5757 + 86190 * t5759 - 446
            t5764 = 46800 * t5732 + 1600 * t5734 - 196592 * t5736 + 1072 * t5744 + 4032 * t5750 - 76560 * t5752 + 219648 * t5754
            t5763 = -128700 * t5732 + 462000 * t5734 - 620268 * t5736 - 132 * t5744 + 6864 * t5750 - 95700 * t5752 + 375936 * t5754
            t5762 = 45045 * t5731 - 17061 * t5743 + 127743 * t5751 - 361713 * t5753 + 438801 * t5755 - 175263 * t5757 - 57915 * t5759 + 363
            t5749 = 2 * phi1
            t5748 = 4 * phi1
            t5747 = 6 * phi1
            t5746 = -5 * phi2
            t5745 = 5 * phi2
            tfunc[..., c] = (0.29e2 / 0.1048576e7) * np.sqrt(0.5e1) * np.sqrt(0.23e2) * np.sqrt(0.19e2) * np.sqrt(0.13e2) * np.sqrt(0.2e1) * ((476 - 107100 * t5731 + 559300 * t5759 - 1190476 * t5757 + 1311380 * t5755 - 778260 * t5753 + 230860 * t5751 - 26180 * t5743) * np.exp((10*1j) * phi2) + (t5762 + t5763) * np.exp((-2*1j) * (t5749 + t5746)) + (-t5764 + t5765) * np.exp((-2*1j) * (t5748 + t5746)) + (t5766 - t5767) * np.exp((-2*1j) * (t5747 + t5746)) + (t5762 - t5763) * np.exp((2*1j) * (t5749 + t5745)) + (t5764 + t5765) * np.exp((2*1j) * (t5748 + t5745)) + (t5766 + t5767) * np.exp((2*1j) * (t5747 + t5745)))

        if Bindx == 182:
            t5789 = np.cos(phi)
            t5788 = t5789 ** 2
            t5796 = t5788 ** 2
            t5795 = t5789 * t5788
            t5798 = t5795 ** 2
            t5800 = t5796 ** 2
            t5797 = t5789 * t5796
            t5802 = t5797 ** 2
            t5804 = t5798 ** 2
            t5799 = t5789 * t5798
            t5806 = t5799 ** 2
            t5813 = 38 + 1026 * t5788 - 1394 * t5796 - 7062 * t5798 + 10098 * t5800 + 2662 * t5802 - 4774 * t5804 - 594 * t5806
            t5775 = t5789 * t5806
            t5777 = t5789 * t5804
            t5779 = t5789 * t5802
            t5781 = t5789 * t5800
            t5812 = 63 * t5775 + 2351 * t5777 + 4131 * t5779 - 10637 * t5781 - 319 * t5789 - 1199 * t5795 + 6237 * t5797 - 627 * t5799
            t5811 = 232 - 3016 * t5788 + 4104 * t5796 + 28248 * t5798 - 82632 * t5800 + 67496 * t5802 - 4136 * t5804 - 10296 * t5806
            t5810 = 1638 * t5775 + 21606 * t5777 - 51074 * t5779 + 10142 * t5781 - 374 * t5789 + 8426 * t5795 - 36366 * t5797 + 46002 * t5799
            t5809 = 9009 * t5775 - 11583 * t5777 - 57651 * t5779 + 167805 * t5781 + 1551 * t5789 - 20097 * t5795 + 89331 * t5797 - 178365 * t5799
            t5808 = -2442 * t5788 + 4026 * t5796 + 35310 * t5798 - 134970 * t5800 + 188034 * t5802 - 118338 * t5804 + 28314 * t5806 + 66
            t5794 = 4 * phi1
            t5793 = 8 * phi1
            t5792 = 12 * phi1
            t5791 = -11 * phi2
            t5790 = 11 * phi2
            tfunc[..., c] = (0.29e2 / 0.524288e6*1j) * np.sqrt(0.13e2) * np.sqrt(0.2e1) * np.sqrt(0.19e2) * np.sqrt(0.23e2) * np.sqrt(0.5e1) * ((-21420 * t5775 + 130900 * t5777 - 335580 * t5779 + 464100 * t5781 - 368900 * t5799 + 164220 * t5797 - 35700 * t5795 + 2380 * t5789) * np.exp((11*1j) * phi2) + (-t5808 + t5809) * np.exp((-1*1j) * (t5794 + t5791)) + (t5810 + t5811) * np.exp((-1*1j) * (t5793 + t5791)) + (t5808 + t5809) * np.exp((1j) * (t5794 + t5790)) + (t5810 - t5811) * np.exp((1j) * (t5793 + t5790)) + (t5812 + t5813) * np.exp((-1*1j) * (t5792 + t5791)) + (t5812 - t5813) * np.exp((1j) * (t5792 + t5790))) * ((1 + t5789) ** (-0.1e1 / 0.2e1)) * ((1 - t5789) ** (-0.1e1 / 0.2e1))

        if Bindx == 183:
            t5834 = np.cos(phi)
            t5833 = t5834 ** 2
            t5838 = t5834 * t5833
            t5841 = t5838 ** 2
            t5847 = t5841 ** 2
            t5822 = t5834 * t5847
            t5839 = t5833 ** 2
            t5840 = t5834 * t5839
            t5845 = t5840 ** 2
            t5824 = t5834 * t5845
            t5843 = t5839 ** 2
            t5826 = t5834 * t5843
            t5842 = t5834 * t5841
            t5855 = -1944 * t5822 - 21840 * t5824 - 19448 * t5826 - 1320 * t5834 - 11024 * t5838 + 10296 * t5840 + 41184 * t5842
            t5821 = t5842 ** 2
            t5854 = 137 + 189 * t5821 + 5343 * t5833 + 9009 * t5839 - 36465 * t5841 - 14157 * t5843 + 31317 * t5845 + 8723 * t5847
            t5853 = 33696 * t5822 + 62400 * t5824 - 260832 * t5826 + 6240 * t5834 - 47424 * t5838 + 41184 * t5840 + 164736 * t5842
            t5852 = 92664 * t5822 - 350064 * t5824 + 463320 * t5826 - 10296 * t5834 + 61776 * t5838 - 51480 * t5840 - 205920 * t5842
            t5851 = 4914 * t5821 - 1482 * t5833 - 74646 * t5839 + 218790 * t5841 - 120978 * t5843 - 112398 * t5845 + 84318 * t5847 + 1482
            t5850 = 27027 * t5821 - 32175 * t5833 + 217503 * t5839 - 546975 * t5841 + 611325 * t5843 - 271557 * t5845 - 6435 * t5847 + 1287
            t5837 = 2 * phi1
            t5836 = -3 * phi2
            t5835 = 3 * phi2
            tfunc[..., c] = (0.29e2 / 0.1572864e7) * np.sqrt(0.5e1) * np.sqrt(0.23e2) * np.sqrt(0.3e1) * np.sqrt(0.19e2) * ((-78540 * t5833 - 64260 * t5821 + 387940 * t5847 - 978180 * t5845 + 1320900 * t5843 - 1011500 * t5841 + 421260 * t5839 + 2380) * np.exp((12*1j) * phi2) + (t5850 - t5852) * np.exp((-4*1j) * (phi1 + t5836)) + (t5851 - t5853) * np.exp((-4*1j) * (t5837 + t5836)) + (t5850 + t5852) * np.exp((4*1j) * (phi1 + t5835)) + (t5851 + t5853) * np.exp((4*1j) * (t5837 + t5835)) + (t5854 + t5855) * np.exp((-12*1j) * (phi1 - phi2)) + (t5854 - t5855) * np.exp((12*1j) * (phi1 + phi2)))

        if Bindx == 184:
            t5876 = np.cos(phi)
            t5875 = t5876 ** 2
            t5882 = t5876 * t5875
            t5885 = t5882 ** 2
            t5886 = t5876 * t5885
            t5863 = t5886 ** 2
            t5896 = -7 * t5863 + 1287 * t5885 - 1716 * t5886
            t5895 = -182 * t5863 - 7722 * t5885 + 10296 * t5886
            t5894 = -1001 * t5863 + 19305 * t5885 - 25740 * t5886
            t5891 = t5885 ** 2
            t5883 = t5875 ** 2
            t5884 = t5876 * t5883
            t5889 = t5884 ** 2
            t5887 = t5883 ** 2
            t5881 = 4 * phi1
            t5880 = 8 * phi1
            t5879 = 12 * phi1
            t5878 = -13 * phi2
            t5877 = 13 * phi2
            t5868 = t5876 * t5887
            t5866 = t5876 * t5889
            t5864 = t5876 * t5891
            tfunc[..., c] = (0.87e2 / 0.524288e6*1j) * np.sqrt(0.2e1) * np.sqrt(0.19e2) * np.sqrt(0.23e2) * np.sqrt(0.5e1) * np.sqrt((1 - t5876)) * (2380 * (t5863 + t5864 - 6 * t5891 - 6 * t5866 + 15 * t5889 + 15 * t5868 - 20 * t5887 - 20 * t5886 + 15 * t5885 + 15 * t5884 - 6 * t5883 - 6 * t5882 + t5875 + t5876) * np.exp((13*1j) * phi2) + (1170 * t5864 - 2548 * t5891 + 676 * t5866 + 6006 * t5889 - 8866 * t5868 - 2002 * t5884 + 5148 * t5883 - 1820 * t5882 - 598 * t5875 + 546 * t5876 - 104 + t5895) * np.exp((-1*1j) * (t5880 + t5878)) + (2717 * t5864 + 2860 * t5891 - 13442 * t5866 + 1001 * t5889 + 26455 * t5868 - 12870 * t5887 + 12155 * t5884 - 12584 * t5883 - 2002 * t5882 + 3575 * t5875 - 143 * t5876 - 286 + t5894) * np.exp((-1*1j) * (t5881 + t5878)) + (-4719 * t5864 - 4576 * t5891 + 11726 * t5866 + 26169 * t5889 + 715 * t5868 - 38610 * t5887 + 26455 * t5884 + 1716 * t5883 - 8866 * t5882 - 3289 * t5875 + 429 * t5876 + 286 + t5894) * np.exp((1j) * (t5881 + t5877)) + (-1534 * t5864 - 5252 * t5891 - 8476 * t5866 - 3146 * t5889 + 11726 * t5868 + 20592 * t5887 - 13442 * t5884 - 6292 * t5883 + 676 * t5882 + 1898 * t5875 + 754 * t5876 + 104 + t5895) * np.exp((1j) * (t5880 + t5877)) + (71 * t5864 - 312 * t5891 + 754 * t5866 - 1001 * t5889 + 429 * t5868 + 858 * t5887 - 143 * t5884 - 572 * t5883 + 546 * t5882 - 247 * t5875 + 59 * t5876 - 6 + t5896) * np.exp((-1*1j) * (t5879 + t5878)) + (-85 * t5864 - 468 * t5891 - 1534 * t5866 - 3289 * t5889 - 4719 * t5868 - 4290 * t5887 + 2717 * t5884 + 2288 * t5883 + 1170 * t5882 + 377 * t5875 + 71 * t5876 + 6 + t5896) * np.exp((1j) * (t5879 + t5877))) * ((1 + t5876) ** (-0.1e1 / 0.2e1))

        if Bindx == 185:
            t5916 = np.cos(phi)
            t5915 = t5916 ** 2
            t5923 = t5915 ** 2
            t5924 = t5916 * t5923
            t5928 = t5924 ** 2
            t5907 = t5916 * t5928
            t5922 = t5916 * t5915
            t5941 = -4 * t5907 + 4 * t5922
            t5925 = t5922 ** 2
            t5930 = t5925 ** 2
            t5931 = t5916 * t5930
            t5940 = t5916 - t5931
            t5904 = t5916 * t5931
            t5939 = -1 + t5904
            t5926 = t5923 ** 2
            t5909 = t5916 * t5926
            t5938 = -20 * t5909 + 20 * t5924 + 4 * t5940 - 4 * t5941
            t5937 = -208 * t5907 - 572 * t5909 + 12 * t5916 + 208 * t5922 + 572 * t5924 - 12 * t5931
            t5936 = 2288 * t5909 - 2288 * t5924 + 208 * t5940 + 208 * t5941
            t5935 = t5930 - t5915 + 19 * t5923 - 45 * t5925 + 45 * t5926 - 19 * t5928 + t5939
            t5934 = -65 * t5915 - 429 * t5923 - 429 * t5925 + 429 * t5926 + 429 * t5928 + 65 * t5930 + t5939
            t5933 = -26 + 26 * t5904 - 650 * t5915 + 286 * t5923 + 2574 * t5925 - 2574 * t5926 - 286 * t5928 + 650 * t5930
            t5921 = 2 * phi1
            t5920 = 4 * phi1
            t5919 = 6 * phi1
            t5918 = -7 * phi2
            t5917 = 7 * phi2
            tfunc[..., c] = (0.87e2 / 0.1048576e7) * np.sqrt(0.5e1) * np.sqrt(0.23e2) * np.sqrt(0.19e2) * np.sqrt(0.2e1) * np.sqrt(0.7e1) * ((-340 * t5904 + 2380 * t5930 - 7140 * t5928 + 11900 * t5926 - 11900 * t5925 + 7140 * t5923 - 2380 * t5915 + 340) * np.exp((14*1j) * phi2) + (t5934 + t5937) * np.exp((-2*1j) * (t5919 + t5918)) + (t5934 - t5937) * np.exp((2*1j) * (t5919 + t5917)) + (t5933 + t5936) * np.exp((-2*1j) * (t5920 + t5918)) + (t5933 - t5936) * np.exp((2*1j) * (t5920 + t5917)) + 143 * (t5935 + t5938) * np.exp((-2*1j) * (t5921 + t5918)) + 143 * (t5935 - t5938) * np.exp((2*1j) * (t5921 + t5917)))

        if Bindx == 186:
            t5960 = np.cos(phi)
            t5959 = t5960 ** 2
            t5966 = t5959 ** 2
            t5967 = t5960 * t5966
            t5971 = t5967 ** 2
            t5951 = t5960 * t5971
            t5965 = t5960 * t5959
            t5984 = -4 * t5951 + 4 * t5965
            t5968 = t5965 ** 2
            t5973 = t5968 ** 2
            t5974 = t5960 * t5973
            t5983 = t5974 - t5960
            t5948 = t5960 * t5974
            t5982 = 1 - t5948
            t5969 = t5966 ** 2
            t5953 = t5960 * t5969
            t5981 = 20 * t5953 - 20 * t5967 + 4 * t5983 + 4 * t5984
            t5980 = 208 * t5951 + 572 * t5953 - 12 * t5960 - 208 * t5965 - 572 * t5967 + 12 * t5974
            t5979 = 3168 * t5953 - 3168 * t5967 - 288 * t5983 + 288 * t5984
            t5978 = t5959 - 19 * t5966 + 45 * t5968 - 45 * t5969 + 19 * t5971 - t5973 + t5982
            t5977 = 65 * t5959 + 429 * t5966 + 429 * t5968 - 429 * t5969 - 429 * t5971 - 65 * t5973 + t5982
            t5976 = 36 - 36 * t5948 + 900 * t5959 - 396 * t5966 - 3564 * t5968 + 3564 * t5969 + 396 * t5971 - 900 * t5973
            t5964 = 4 * phi1
            t5963 = 8 * phi1
            t5962 = -15 * phi2
            t5961 = 15 * phi2
            tfunc[..., c] = (0.155e3 / 0.524288e6*1j) * np.sqrt((1 - t5960)) * np.sqrt((1 + t5960)) * np.sqrt(0.2e1) * np.sqrt(0.13e2) * np.sqrt(0.7e1) * np.sqrt(0.29e2) * ((-t5977 + t5980) * np.exp((-3*1j) * (t5964 + 5 * phi2)) + (t5977 + t5980) * np.exp((3*1j) * (t5964 - 5 * phi2)) + (t5976 + t5979) * np.exp((-1*1j) * (t5963 + t5961)) + (-t5976 + t5979) * np.exp((1j) * (t5963 + t5962)) + 69 * (-t5978 + t5981) * np.exp((-1*1j) * (t5964 + t5961)) + 69 * (t5978 + t5981) * np.exp((1j) * (t5964 + t5962)))

        if Bindx == 187:
            t6005 = np.cos(phi)
            t6004 = t6005 ** 2
            t6011 = t6005 * t6004
            t6014 = t6011 ** 2
            t6015 = t6005 * t6014
            t6022 = t6015 ** 2
            t6030 = 4 + 56 * t6022
            t6012 = t6004 ** 2
            t6016 = t6012 ** 2
            t6013 = t6005 * t6012
            t6018 = t6013 ** 2
            t6020 = t6014 ** 2
            t6029 = -56 * t6004 + 164 * t6012 - 120 * t6014 - 180 * t6016 + 376 * t6018 - 244 * t6020 + t6030
            t5991 = t6005 * t6022
            t5993 = t6005 * t6020
            t5995 = t6005 * t6018
            t5997 = t6005 * t6016
            t6028 = t5993 - 15 * t5991 + 221 * t5995 - 595 * t5997 - t6005 + 79 * t6011 - 365 * t6013 + 675 * t6015
            t6027 = 200 * t6004 + 676 * t6012 - 1144 * t6014 - 1716 * t6016 + 1144 * t6018 + 780 * t6020 + t6030
            t6026 = -5 * t5991 - 277 * t5993 - 1313 * t5995 + 143 * t5997 - 43 * t6005 - 507 * t6011 - 143 * t6013 + 2145 * t6015
            t6025 = -96 - 960 * t6004 + 6816 * t6012 - 6336 * t6014 - 9504 * t6016 + 14784 * t6018 - 3360 * t6020 - 1344 * t6022
            t6024 = -180 * t5991 - 3732 * t5993 + 5052 * t5995 + 9372 * t5997 - 588 * t6005 + 1428 * t6011 + 6468 * t6013 - 17820 * t6015
            t6010 = 2 * phi1
            t6009 = 4 * phi1
            t6008 = 6 * phi1
            t6007 = -7 * phi2
            t6006 = 7 * phi2
            tfunc[..., c] = -(0.31e2 / 0.262144e6) * np.sqrt(0.5e1) * np.sqrt(0.13e2) * np.sqrt(0.3e1) * np.sqrt(0.7e1) * np.sqrt(0.29e2) * ((t6024 + t6025) * np.exp((-2*1j) * (t6009 + t6006)) + (-t6026 + t6027) * np.exp((-2*1j) * (t6008 + t6006)) + (-t6024 + t6025) * np.exp((2*1j) * (t6009 + t6007)) + (t6026 + t6027) * np.exp((2*1j) * (t6008 + t6007)) + 23 * (-t6028 + t6029) * np.exp((-2*1j) * (t6010 + t6006)) + 23 * (t6028 + t6029) * np.exp((2*1j) * (t6010 + t6007)))

        if Bindx == 188:
            t6051 = np.cos(phi)
            t6050 = t6051 ** 2
            t6057 = t6051 * t6050
            t6060 = t6057 ** 2
            t6061 = t6051 * t6060
            t6068 = t6061 ** 2
            t6037 = t6051 * t6068
            t6072 = 91 - 145 * t6037
            t6071 = 391 - 10005 * t6037
            t6070 = 1356 - 5220 * t6037
            t6066 = t6060 ** 2
            t6058 = t6050 ** 2
            t6059 = t6051 * t6058
            t6064 = t6059 ** 2
            t6062 = t6058 ** 2
            t6056 = 4 * phi1
            t6055 = 8 * phi1
            t6054 = 12 * phi1
            t6053 = -13 * phi2
            t6052 = 13 * phi2
            t6043 = t6051 * t6062
            t6041 = t6051 * t6064
            t6039 = t6051 * t6066
            tfunc[..., c] = (-0.31e2 / 0.524288e6*1j) * np.sqrt(0.7e1) * np.sqrt(0.13e2) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.5e1) * np.sqrt((1 + t6051)) * ((1 - t6051) ** (-0.1e1 / 0.2e1)) * ((24679 * t6068 - 35627 * t6039 - 128225 * t6066 + 23897 * t6041 + 271331 * t6064 + 64745 * t6043 - 297045 * t6062 - 135585 * t6061 + 175605 * t6060 + 103615 * t6059 - 52739 * t6058 - 35213 * t6057 + 6785 * t6050 + 4163 * t6051 - t6071) * np.exp((-1*1j) * (t6056 + t6052)) + (-30972 * t6068 - 56340 * t6039 + 17652 * t6066 + 184044 * t6041 + 170676 * t6064 - 128964 * t6043 - 302940 * t6062 - 79596 * t6061 + 171468 * t6060 + 126852 * t6059 - 17892 * t6058 - 44700 * t6057 - 9348 * t6050 + 3924 * t6051 + t6070) * np.exp((-1*1j) * (t6055 + t6052)) + (44689 * t6068 - 33741 * t6039 - 130111 * t6066 + 234439 * t6041 + 60789 * t6064 - 396865 * t6043 + 164565 * t6062 + 268065 * t6061 - 228045 * t6060 - 51175 * t6059 + 102051 * t6058 - 14099 * t6057 - 14329 * t6050 + 3381 * t6051 + t6071) * np.exp((1j) * (t6056 + t6053)) + (-41412 * t6068 + 128724 * t6039 - 167412 * t6066 - 34284 * t6041 + 389004 * t6064 - 430716 * t6043 - 1188 * t6062 + 383724 * t6061 - 291852 * t6060 - 6468 * t6059 + 115428 * t6058 - 52836 * t6057 - 1212 * t6050 + 6636 * t6051 - t6070) * np.exp((1j) * (t6055 + t6053)) + (1363 * t6068 + 5369 * t6039 + 10803 * t6066 + 9061 * t6041 - 6721 * t6064 - 24739 * t6043 - 22737 * t6062 - 429 * t6061 + 17017 * t6060 + 14443 * t6059 + 2873 * t6058 - 3081 * t6057 - 2507 * t6050 - 769 * t6051 - t6072) * np.exp((-1*1j) * (t6054 + t6052)) + (1653 * t6068 - 8385 * t6039 + 24557 * t6066 - 44421 * t6041 + 46761 * t6064 - 15301 * t6043 - 32175 * t6062 + 55341 * t6061 - 38753 * t6060 + 7293 * t6059 + 10023 * t6058 - 9815 * t6057 + 4227 * t6050 - 951 * t6051 + t6072) * np.exp((1j) * (t6054 + t6053)))

        if Bindx == 189:
            t6093 = np.cos(phi)
            t6092 = t6093 ** 2
            t6098 = t6092 ** 2
            t6097 = t6093 * t6092
            t6100 = t6097 ** 2
            t6102 = t6098 ** 2
            t6099 = t6093 * t6098
            t6104 = t6099 ** 2
            t6106 = t6100 ** 2
            t6101 = t6093 * t6100
            t6108 = t6101 ** 2
            t6115 = 11712 * t6092 - 30264 * t6098 - 80080 * t6100 + 175032 * t6102 + 13728 * t6104 - 84968 * t6106 - 9744 * t6108 + 488
            t6079 = t6093 * t6108
            t6081 = t6093 * t6106
            t6083 = t6093 * t6104
            t6085 = t6093 * t6102
            t6114 = 1015 * t6079 + 39669 * t6081 + 86775 * t6083 - 152867 * t6085 - 3945 * t6093 - 9451 * t6097 + 90519 * t6099 - 47619 * t6101
            t6113 = 22080 * t6092 - 60168 * t6098 - 193200 * t6100 + 952200 * t6102 - 1415328 * t6104 + 919080 * t6106 - 224112 * t6108 - 552
            t6112 = -36540 * t6079 - 510804 * t6081 + 1082340 * t6083 - 2772 * t6085 + 3780 * t6093 - 147924 * t6097 + 767844 * t6099 - 1155924 * t6101
            t6111 = 70035 * t6079 - 75831 * t6081 - 499629 * t6083 + 1366545 * t6085 + 10419 * t6093 - 144279 * t6097 + 677235 * t6099 - 1404495 * t6101
            t6110 = 64512 * t6092 - 149184 * t6098 - 443520 * t6100 + 1729728 * t6102 - 1596672 * t6104 + 165312 * t6106 + 233856 * t6108 - 4032
            t6096 = 2 * phi1
            t6095 = -3 * phi2
            t6094 = 3 * phi2
            tfunc[..., c] = (0.31e2 / 0.262144e6) * np.sqrt(0.2e1) * np.sqrt(0.5e1) * np.sqrt(0.13e2) * ((-t6111 + t6113) * np.exp((-4*1j) * (phi1 + t6094)) + (t6110 - t6112) * np.exp((-4*1j) * (t6096 + t6094)) + (t6111 + t6113) * np.exp((4*1j) * (phi1 + t6095)) + (t6110 + t6112) * np.exp((4*1j) * (t6096 + t6095)) + (-t6114 + t6115) * np.exp((-12*1j) * (phi1 + phi2)) + (t6114 + t6115) * np.exp((12*1j) * (phi1 - phi2)))

        if Bindx == 190:
            t6137 = np.cos(phi)
            t6136 = t6137 ** 2
            t6144 = t6136 ** 2
            t6148 = t6144 ** 2
            t6122 = t6148 ** 2
            t6143 = t6137 * t6136
            t6146 = t6143 ** 2
            t6145 = t6137 * t6144
            t6150 = t6145 ** 2
            t6152 = t6146 ** 2
            t6147 = t6137 * t6146
            t6154 = t6147 ** 2
            t6162 = 3045 * t6122 + 13068 * t6136 - 106392 * t6144 + 101244 * t6146 + 285714 * t6148 - 444444 * t6150 + 51168 * t6152 + 95508 * t6154 + 1089
            t6123 = t6137 * t6154
            t6125 = t6137 * t6152
            t6127 = t6137 * t6150
            t6129 = t6137 * t6148
            t6161 = 26796 * t6123 + 158532 * t6125 - 262548 * t6127 - 169884 * t6129 + 7212 * t6137 - 19068 * t6143 - 120276 * t6145 + 379236 * t6147
            t6160 = 616308 * t6123 - 2765796 * t6125 + 4907188 * t6127 - 4295940 * t6129 + 1012 * t6137 + 3036 * t6143 - 322828 * t6145 + 1857020 * t6147
            t6159 = -643104 * t6123 + 376992 * t6125 + 3161312 * t6127 - 5615456 * t6129 + 16352 * t6137 - 35168 * t6143 - 712992 * t6145 + 3452064 * t6147
            t6158 = -210105 * t6122 - 72956 * t6136 + 643448 * t6144 - 2285740 * t6146 + 3908390 * t6148 - 3170228 * t6150 + 758816 * t6152 + 426972 * t6154 + 1403
            t6157 = -109620 * t6122 + 112112 * t6136 - 805728 * t6144 + 1955184 * t6146 - 899976 * t6148 - 2748592 * t6150 + 3650752 * t6152 - 1150128 * t6154 - 4004
            t6142 = 4 * phi1
            t6141 = 8 * phi1
            t6140 = 12 * phi1
            t6139 = -11 * phi2
            t6138 = 11 * phi2
            tfunc[..., c] = (-0.31e2 / 0.524288e6*1j) * np.sqrt(0.3e1) * np.sqrt(0.13e2) * np.sqrt(0.5e1) * np.sqrt(0.2e1) * ((1 + t6137) ** (-0.1e1 / 0.2e1)) * ((1 - t6137) ** (-0.1e1 / 0.2e1)) * ((-t6158 + t6160) * np.exp((-1*1j) * (t6142 + t6138)) + (t6157 + t6159) * np.exp((-1*1j) * (t6141 + t6138)) + (t6158 + t6160) * np.exp((1j) * (t6142 + t6139)) + (-t6157 + t6159) * np.exp((1j) * (t6141 + t6139)) + (t6161 + t6162) * np.exp((-1*1j) * (t6140 + t6138)) + (t6161 - t6162) * np.exp((1j) * (t6140 + t6139)))

        if Bindx == 191:
            t6183 = np.cos(phi)
            t6182 = t6183 ** 2
            t6189 = t6183 * t6182
            t6192 = t6189 ** 2
            t6193 = t6183 * t6192
            t6200 = t6193 ** 2
            t6169 = t6183 * t6200
            t6198 = t6192 ** 2
            t6171 = t6183 * t6198
            t6190 = t6182 ** 2
            t6191 = t6183 * t6190
            t6196 = t6191 ** 2
            t6173 = t6183 * t6196
            t6194 = t6190 ** 2
            t6175 = t6183 * t6194
            t6207 = -7917 * t6169 - 200109 * t6171 + 11271 * t6173 + 646503 * t6175 - 10179 * t6183 + 70941 * t6189 + 5577 * t6191 - 516087 * t6193
            t6206 = -4056 * t6182 + 158964 * t6190 - 408408 * t6192 + 46332 * t6194 + 545688 * t6196 - 273156 * t6198 - 63336 * t6200 - 2028
            t6205 = -28520 * t6182 + 394220 * t6190 - 2304232 * t6192 + 6282404 * t6194 - 8545880 * t6196 + 5658276 * t6198 - 1456728 * t6200 + 460
            t6204 = -59584 * t6182 + 895776 * t6190 - 4154304 * t6192 + 7488096 * t6194 - 4459840 * t6196 - 1231776 * t6198 + 1520064 * t6200 + 1568
            t6203 = -285012 * t6169 - 2355444 * t6171 + 6984796 * t6173 - 5422340 * t6175 + 39508 * t6183 - 445452 * t6189 + 1285284 * t6191 + 198660 * t6193
            t6202 = -546273 * t6169 + 1061151 * t6171 + 1026467 * t6173 - 4261693 * t6175 - 16399 * t6183 + 327313 * t6189 - 1815827 * t6191 + 4225261 * t6193
            t6188 = 2 * phi1
            t6187 = 4 * phi1
            t6186 = 6 * phi1
            t6185 = -5 * phi2
            t6184 = 5 * phi2
            tfunc[..., c] = (0.155e3 / 0.262144e6) * ((t6202 + t6205) * np.exp((-2*1j) * (t6188 + t6184)) + (-t6203 + t6204) * np.exp((-2*1j) * (t6187 + t6184)) + (t6206 + t6207) * np.exp((-2*1j) * (t6186 + t6184)) + (-t6202 + t6205) * np.exp((2*1j) * (t6188 + t6185)) + (t6203 + t6204) * np.exp((2*1j) * (t6187 + t6185)) + (t6206 - t6207) * np.exp((2*1j) * (t6186 + t6185))) * np.sqrt(0.3e1)

        if Bindx == 192:
            t6229 = np.cos(phi)
            t6228 = t6229 ** 2
            t6235 = t6228 ** 2
            t6239 = t6235 ** 2
            t6214 = t6239 ** 2
            t6234 = t6229 * t6228
            t6237 = t6234 ** 2
            t6236 = t6229 * t6235
            t6241 = t6236 ** 2
            t6243 = t6237 ** 2
            t6238 = t6229 * t6237
            t6245 = t6238 ** 2
            t6253 = -65975 * t6214 - 92040 * t6228 - 337740 * t6235 + 2865720 * t6237 - 5049330 * t6239 + 1870440 * t6241 + 2038660 * t6243 - 1241240 * t6245 + 11505
            t6215 = t6229 * t6245
            t6217 = t6229 * t6243
            t6219 = t6229 * t6241
            t6221 = t6229 * t6239
            t6252 = -475020 * t6215 - 907140 * t6217 + 4685460 * t6219 - 4126980 * t6221 + 36660 * t6229 - 511940 * t6234 + 1536340 * t6236 - 237380 * t6238
            t6251 = -10925460 * t6215 + 46877220 * t6217 - 80974260 * t6219 + 71862948 * t6221 + 42412 * t6229 - 1076124 * t6234 + 8869260 * t6236 - 34675996 * t6238
            t6250 = 11400480 * t6215 - 22407840 * t6217 - 6179040 * t6219 + 45335136 * t6221 + 150304 * t6229 - 2620576 * t6234 + 15916320 * t6236 - 41594784 * t6238
            t6249 = -4552275 * t6214 - 349416 * t6228 + 3919108 * t6235 - 15865768 * t6237 + 28351686 * t6239 - 19359928 * t6241 - 4957420 * t6243 + 12809160 * t6245 + 4853
            t6248 = 2375100 * t6214 - 431424 * t6228 + 1683696 * t6235 + 5115264 * t6237 - 37361016 * t6239 + 71845312 * t6241 - 55815760 * t6243 + 12579840 * t6245 + 8988
            t6233 = 4 * phi1
            t6232 = 8 * phi1
            t6231 = -9 * phi2
            t6230 = 9 * phi2
            tfunc[..., c] = (0.93e2 / 0.524288e6*1j) * np.sqrt(0.2e1) * ((t6252 + t6253) * np.exp((-3*1j) * (t6233 + 3 * phi2)) + (t6249 + t6251) * np.exp((-1*1j) * (t6233 + t6230)) + (t6248 + t6250) * np.exp((-1*1j) * (t6232 + t6230)) + (-t6249 + t6251) * np.exp((1j) * (t6233 + t6231)) + (-t6248 + t6250) * np.exp((1j) * (t6232 + t6231)) + (t6252 - t6253) * np.exp((3*1j) * (t6233 - 3 * phi2))) * ((1 + t6229) ** (-0.1e1 / 0.2e1)) * ((1 - t6229) ** (-0.1e1 / 0.2e1))

        if Bindx == 193:
            t6274 = np.cos(phi)
            t6273 = t6274 ** 2
            t6278 = t6274 * t6273
            t6281 = t6278 ** 2
            t6282 = t6274 * t6281
            t6289 = t6282 ** 2
            t6260 = t6274 * t6289
            t6287 = t6281 ** 2
            t6262 = t6274 * t6287
            t6279 = t6273 ** 2
            t6280 = t6274 * t6279
            t6285 = t6280 ** 2
            t6264 = t6274 * t6285
            t6283 = t6279 ** 2
            t6266 = t6274 * t6283
            t6296 = -28275 * t6260 - 395265 * t6262 + 837525 * t6264 - 2145 * t6266 + 2925 * t6274 - 114465 * t6278 + 594165 * t6280 - 894465 * t6282
            t6295 = 49920 * t6273 - 115440 * t6279 - 343200 * t6281 + 1338480 * t6283 - 1235520 * t6285 + 127920 * t6287 + 180960 * t6289 - 3120
            t6294 = 88320 * t6273 - 1194896 * t6279 + 6331808 * t6281 - 16530928 * t6283 + 22573120 * t6285 - 15428400 * t6287 + 4162080 * t6289 - 1104
            t6293 = 222208 * t6273 - 1954176 * t6279 + 6209280 * t6281 - 6880896 * t6283 - 2168320 * t6285 + 8910720 * t6287 - 4343040 * t6289 - 3968
            t6292 = -1950975 * t6260 + 5162235 * t6262 - 3158935 * t6264 - 2535589 * t6266 - 10143 * t6274 + 255323 * t6278 - 1650871 * t6280 + 3888955 * t6282
            t6291 = -1017900 * t6260 - 3652740 * t6262 + 16225300 * t6264 - 19711076 * t6266 - 4780 * t6274 + 172284 * t6278 - 2288748 * t6280 + 10269468 * t6282
            t6277 = 3 * phi1
            t6276 = -2 * phi2
            t6275 = 2 * phi2
            tfunc[..., c] = -(0.31e2 / 0.131072e6) * np.sqrt(0.3e1) * np.sqrt(0.7e1) * ((t6291 + t6293) * np.exp((-8*1j) * (phi1 + phi2)) + (-t6292 + t6294) * np.exp((-4*1j) * (phi1 + t6275)) + (t6295 - t6296) * np.exp((-4*1j) * (t6277 + t6275)) + (t6292 + t6294) * np.exp((4*1j) * (phi1 + t6276)) + (t6295 + t6296) * np.exp((4*1j) * (t6277 + t6276)) + (-t6291 + t6293) * np.exp((8*1j) * (phi1 - phi2)))

        if Bindx == 194:
            t6318 = np.cos(phi)
            t6317 = t6318 ** 2
            t6324 = t6318 * t6317
            t6327 = t6324 ** 2
            t6328 = t6318 * t6327
            t6335 = t6328 ** 2
            t6304 = t6318 * t6335
            t6333 = t6327 ** 2
            t6306 = t6318 * t6333
            t6325 = t6317 ** 2
            t6326 = t6318 * t6325
            t6331 = t6326 ** 2
            t6308 = t6318 * t6331
            t6329 = t6325 ** 2
            t6310 = t6318 * t6329
            t6343 = -158340 * t6304 + 205140 * t6306 + 596700 * t6308 - 1467180 * t6310 + 3900 * t6318 + 17940 * t6324 - 339300 * t6326 + 1141140 * t6328
            t6303 = t6329 ** 2
            t6342 = -28275 * t6303 + 42120 * t6317 - 244140 * t6325 + 429000 * t6327 + 115830 * t6329 - 1046760 * t6331 + 982020 * t6333 - 248040 * t6335 - 1755
            t6341 = 3800160 * t6304 - 11662560 * t6306 + 11989600 * t6308 - 3012064 * t6310 + 19040 * t6318 - 376544 * t6324 + 1843296 * t6326 - 2600928 * t6328
            t6340 = -3641820 * t6304 + 15051660 * t6306 - 25166140 * t6308 + 21755148 * t6310 + 9828 * t6318 - 290612 * t6324 + 2562308 * t6326 - 10280372 * t6328
            t6339 = -1950975 * t6303 - 21912 * t6317 + 273188 * t6325 - 1015512 * t6327 + 653518 * t6329 + 3562424 * t6331 - 8210540 * t6333 + 6709560 * t6335 + 249
            t6338 = -1017900 * t6303 - 101632 * t6317 + 1259664 * t6325 - 6578880 * t6327 + 16803864 * t6329 - 21574784 * t6331 + 12368720 * t6333 - 1160640 * t6335 + 1588
            t6323 = 4 * phi1
            t6322 = 8 * phi1
            t6321 = -7 * phi2
            t6320 = 7 * phi2
            t6319 = 12 * phi1
            tfunc[..., c] = (0.31e2 / 0.524288e6*1j) * np.sqrt(0.2e1) * np.sqrt(0.23e2) * np.sqrt(0.3e1) * np.sqrt(0.7e1) * ((t6339 + t6340) * np.exp((-1*1j) * (t6323 + t6320)) + (-t6338 + t6341) * np.exp((-1*1j) * (t6322 + t6320)) + (-t6339 + t6340) * np.exp((1j) * (t6323 + t6321)) + (t6338 + t6341) * np.exp((1j) * (t6322 + t6321)) + (t6342 + t6343) * np.exp((-1*1j) * (t6319 + t6320)) + (-t6342 + t6343) * np.exp((1j) * (t6319 + t6321))) * ((1 + t6318) ** (-0.1e1 / 0.2e1)) * ((1 - t6318) ** (-0.1e1 / 0.2e1))

        if Bindx == 195:
            t6364 = np.cos(phi)
            t6363 = t6364 ** 2
            t6370 = t6363 ** 2
            t6369 = t6364 * t6363
            t6372 = t6369 ** 2
            t6374 = t6370 ** 2
            t6371 = t6364 * t6370
            t6376 = t6371 ** 2
            t6378 = t6372 ** 2
            t6373 = t6364 * t6372
            t6380 = t6373 ** 2
            t6387 = 7800 * t6363 - 64740 * t6370 + 190840 * t6372 - 212940 * t6374 + 29640 * t6376 + 94900 * t6378 - 45240 * t6380 - 260
            t6350 = t6364 * t6380
            t6352 = t6364 * t6378
            t6354 = t6364 * t6376
            t6356 = t6364 * t6374
            t6386 = 9425 * t6350 + 48945 * t6352 - 234195 * t6354 + 306605 * t6356 - 2145 * t6364 + 14495 * t6369 + 195 * t6371 - 143325 * t6373
            t6385 = -6720 * t6363 + 31584 * t6370 + 245952 * t6372 - 1689312 * t6374 + 3608640 * t6376 - 3276000 * t6378 + 1085760 * t6380 + 96
            t6384 = -650325 * t6350 + 2076555 * t6352 - 2498145 * t6354 + 1383519 * t6356 - 91 * t6364 + 1509 * t6369 + 23089 * t6371 - 336111 * t6373
            t6383 = -15416 * t6363 + 234884 * t6370 - 1344056 * t6372 + 3687084 * t6374 - 5235720 * t6376 + 3713580 * t6378 - 1040520 * t6380 + 164
            t6382 = -339300 * t6350 + 16380 * t6352 + 2222220 * t6354 - 3803604 * t6356 - 5532 * t6364 + 128772 * t6369 - 883596 * t6371 + 2664660 * t6373
            t6368 = 2 * phi1
            t6367 = 4 * phi1
            t6366 = -3 * phi2
            t6365 = 3 * phi2
            tfunc[..., c] = (0.31e2 / 0.262144e6) * np.sqrt(0.3e1) * np.sqrt(0.7e1) * np.sqrt(0.23e2) * np.sqrt(0.11e2) * ((-t6386 + t6387) * np.exp((-6*1j) * (t6368 + phi2)) + (t6383 + t6384) * np.exp((-2*1j) * (t6368 + t6365)) + (-t6382 + t6385) * np.exp((-2*1j) * (t6367 + t6365)) + (t6383 - t6384) * np.exp((2*1j) * (t6368 + t6366)) + (t6382 + t6385) * np.exp((2*1j) * (t6367 + t6366)) + (t6386 + t6387) * np.exp((6*1j) * (t6368 - phi2)))

        if Bindx == 196:
            t6409 = np.cos(phi)
            t6408 = t6409 ** 2
            t6415 = t6409 * t6408
            t6418 = t6415 ** 2
            t6419 = t6409 * t6418
            t6426 = t6419 ** 2
            t6395 = t6409 * t6426
            t6424 = t6418 ** 2
            t6397 = t6409 * t6424
            t6416 = t6408 ** 2
            t6417 = t6409 * t6416
            t6422 = t6417 ** 2
            t6399 = t6409 * t6422
            t6420 = t6416 ** 2
            t6401 = t6409 * t6420
            t6434 = -158340 * t6395 + 585780 * t6397 - 694980 * t6399 + 80340 * t6401 - 8580 * t6409 + 99060 * t6415 - 358020 * t6417 + 454740 * t6419
            t6394 = t6420 ** 2
            t6433 = 39585 * t6394 + 7020 * t6408 - 129480 * t6416 + 659100 * t6418 - 1435590 * t6420 + 1506180 * t6422 - 695760 * t6424 + 49140 * t6426 - 195
            t6432 = 3800160 * t6395 - 14807520 * t6397 + 22965600 * t6399 - 18033120 * t6401 - 6048 * t6409 + 170016 * t6415 - 1645728 * t6417 + 7556640 * t6419
            t6431 = -3641820 * t6395 + 14621100 * t6397 - 23668380 * t6399 + 19688460 * t6401 + 6436 * t6409 - 213780 * t6415 + 2064164 * t6417 - 8856180 * t6419
            t6430 = -2731365 * t6394 + 11300 * t6408 - 208280 * t6416 + 1596596 * t6418 - 6313890 * t6420 + 13835052 * t6422 - 16863600 * t6424 + 10674300 * t6426 - 113
            t6429 = -1425060 * t6394 - 95760 * t6408 + 1165920 * t6416 - 5280912 * t6418 + 11071704 * t6420 - 10525872 * t6422 + 2271360 * t6424 + 2817360 * t6426 + 1260
            t6414 = 4 * phi1
            t6413 = 8 * phi1
            t6412 = -5 * phi2
            t6411 = 5 * phi2
            t6410 = 12 * phi1
            tfunc[..., c] = (0.31e2 / 0.524288e6*1j) * np.sqrt(0.2e1) * np.sqrt(0.5e1) * np.sqrt(0.23e2) * np.sqrt(0.11e2) * ((t6430 + t6431) * np.exp((-1*1j) * (t6414 + t6411)) + (-t6429 + t6432) * np.exp((-1*1j) * (t6413 + t6411)) + (-t6430 + t6431) * np.exp((1j) * (t6414 + t6412)) + (t6429 + t6432) * np.exp((1j) * (t6413 + t6412)) + (-t6433 + t6434) * np.exp((-1*1j) * (t6410 + t6411)) + (t6433 + t6434) * np.exp((1j) * (t6410 + t6412))) * ((1 + t6409) ** (-0.1e1 / 0.2e1)) * ((1 - t6409) ** (-0.1e1 / 0.2e1))

        if Bindx == 197:
            t6455 = np.cos(phi)
            t6454 = t6455 ** 2
            t6459 = t6454 ** 2
            t6458 = t6455 * t6454
            t6461 = t6458 ** 2
            t6463 = t6459 ** 2
            t6460 = t6455 * t6459
            t6465 = t6460 ** 2
            t6467 = t6461 ** 2
            t6462 = t6455 * t6461
            t6469 = t6462 ** 2
            t6476 = -62400 * t6454 + 170040 * t6459 + 546000 * t6461 - 2691000 * t6463 + 3999840 * t6465 - 2597400 * t6467 + 633360 * t6469 + 1560
            t6441 = t6455 * t6469
            t6443 = t6455 * t6467
            t6445 = t6455 * t6465
            t6447 = t6455 * t6463
            t6475 = -197925 * t6441 + 214305 * t6443 + 1411995 * t6445 - 3861975 * t6447 - 29445 * t6455 + 407745 * t6458 - 1913925 * t6460 + 3969225 * t6462
            t6474 = 155584 * t6454 - 2590456 * t6459 + 15955632 * t6461 - 46384008 * t6463 + 68856480 * t6465 - 50554920 * t6467 + 14567280 * t6469 - 1496
            t6473 = -322560 * t6454 + 4363968 * t6459 - 23124864 * t6461 + 60373824 * t6463 - 82440960 * t6465 + 56347200 * t6467 - 15200640 * t6469 + 4032
            t6472 = -7125300 * t6441 + 18853380 * t6443 - 11536980 * t6445 - 9260412 * t6447 - 37044 * t6455 + 932484 * t6458 - 6029268 * t6460 + 14203140 * t6462
            t6471 = -13656825 * t6441 + 48944805 * t6443 - 70490745 * t6445 + 52191117 * t6447 + 12199 * t6455 - 426811 * t6458 + 4448807 * t6460 - 21026643 * t6462
            t6457 = 2 * phi1
            t6456 = 3 * phi1
            tfunc[..., c] = -(0.31e2 / 0.262144e6) * np.sqrt(0.2e1) * np.sqrt(0.23e2) * ((-t6471 + t6474) * np.exp((-4*1j) * (phi1 + phi2)) + (t6472 + t6473) * np.exp((-4*1j) * (t6457 + phi2)) + (-t6475 + t6476) * np.exp((-4*1j) * (t6456 + phi2)) + (t6471 + t6474) * np.exp((4*1j) * (phi1 - phi2)) + (-t6472 + t6473) * np.exp((4*1j) * (t6457 - phi2)) + (t6475 + t6476) * np.exp((4*1j) * (t6456 - phi2)))

        if Bindx == 198:
            t6498 = np.cos(phi)
            t6497 = t6498 ** 2
            t6503 = t6498 * t6497
            t6506 = t6503 ** 2
            t6507 = t6498 * t6506
            t6514 = t6507 ** 2
            t6484 = t6498 * t6514
            t6512 = t6506 ** 2
            t6486 = t6498 * t6512
            t6504 = t6497 ** 2
            t6505 = t6498 * t6504
            t6510 = t6505 ** 2
            t6488 = t6498 * t6510
            t6508 = t6504 ** 2
            t6490 = t6498 * t6508
            t6522 = -158340 * t6484 + 839540 * t6486 - 1826500 * t6488 + 2081300 * t6490 + 3900 * t6498 - 67340 * t6503 + 436540 * t6505 - 1309100 * t6507
            t6483 = t6508 ** 2
            t6521 = 65975 * t6483 + 37180 * t6497 - 253760 * t6504 + 674700 * t6506 - 809250 * t6508 + 311220 * t6510 + 224120 * t6512 - 249340 * t6514 - 845
            t6520 = -2375100 * t6483 - 7056 * t6497 + 30912 * t6504 + 549360 * t6506 - 4270392 * t6508 + 11685072 * t6510 - 15244320 * t6512 + 9631440 * t6514 + 84
            t6519 = -3641820 * t6484 + 14334060 * t6486 - 22608540 * t6488 + 18182604 * t6490 + 4708 * t6498 - 168212 * t6503 + 1730916 * t6505 - 7833716 * t6507
            t6518 = 3800160 * t6484 - 16904160 * t6486 + 30492000 * t6488 - 28473312 * t6490 - 16800 * t6498 + 471072 * t6503 - 3892896 * t6505 + 14523936 * t6507
            t6517 = -4552275 * t6483 + 34452 * t6497 - 624448 * t6504 + 4404356 * t6506 - 15553494 * t6508 + 30338748 * t6510 - 33260760 * t6512 + 19213740 * t6514 - 319
            t6502 = 4 * phi1
            t6501 = 8 * phi1
            t6500 = -3 * phi2
            t6499 = 3 * phi2
            tfunc[..., c] = (0.31e2 / 0.524288e6*1j) * np.sqrt(0.2e1) * np.sqrt(0.23e2) * np.sqrt(0.3e1) * np.sqrt(0.19e2) * ((-t6521 + t6522) * np.exp((-3*1j) * (t6502 + phi2)) + (t6517 + t6519) * np.exp((-1*1j) * (t6502 + t6499)) + (t6518 - t6520) * np.exp((-1*1j) * (t6501 + t6499)) + (-t6517 + t6519) * np.exp((1j) * (t6502 + t6500)) + (t6518 + t6520) * np.exp((1j) * (t6501 + t6500)) + (t6521 + t6522) * np.exp((3*1j) * (t6502 - phi2))) * ((1 + t6498) ** (-0.1e1 / 0.2e1)) * ((1 - t6498) ** (-0.1e1 / 0.2e1))

        if Bindx == 199:
            t6543 = np.cos(phi)
            t6542 = t6543 ** 2
            t6547 = t6543 * t6542
            t6550 = t6547 ** 2
            t6551 = t6543 * t6550
            t6558 = t6551 ** 2
            t6529 = t6543 * t6558
            t6556 = t6550 ** 2
            t6531 = t6543 * t6556
            t6548 = t6542 ** 2
            t6549 = t6543 * t6548
            t6554 = t6549 ** 2
            t6533 = t6543 * t6554
            t6552 = t6548 ** 2
            t6535 = t6543 * t6552
            t6565 = -15225 * t6529 + 73815 * t6531 - 140325 * t6533 + 127275 * t6535 - 375 * t6543 + 4185 * t6547 - 75 * t6549 - 49275 * t6551
            t6564 = 8280 * t6542 - 63060 * t6548 + 197400 * t6550 - 318300 * t6552 + 280680 * t6554 - 129180 * t6556 + 24360 * t6558 - 180
            t6563 = 4840 * t6542 - 84876 * t6548 + 547624 * t6550 - 1656644 * t6552 + 2540120 * t6554 - 1911300 * t6556 + 560280 * t6558 - 44
            t6562 = -19264 * t6542 + 263648 * t6548 - 1332800 * t6550 + 3190432 * t6552 - 3926720 * t6554 + 2409120 * t6556 - 584640 * t6558 + 224
            t6561 = -548100 * t6529 + 2304540 * t6531 - 3894100 * t6533 + 3376268 * t6535 + 1540 * t6543 - 44828 * t6547 + 394324 * t6549 - 1589644 * t6551
            t6560 = -1050525 * t6529 + 4011315 * t6531 - 6142265 * t6533 + 4801687 * t6535 + 1133 * t6543 - 41283 * t6547 + 434313 * t6549 - 2014375 * t6551
            t6546 = 2 * phi1
            t6545 = 4 * phi1
            t6544 = 6 * phi1
            tfunc[..., c] = -(0.31e2 / 0.262144e6) * np.sqrt(0.13e2) * np.sqrt(0.3e1) * np.sqrt(0.23e2) * np.sqrt(0.19e2) * ((-t6560 + t6563) * np.exp((-2*1j) * (t6546 + phi2)) + (t6561 + t6562) * np.exp((-2*1j) * (t6545 + phi2)) + (t6564 - t6565) * np.exp((-2*1j) * (t6544 + phi2)) + (t6560 + t6563) * np.exp((2*1j) * (t6546 - phi2)) + (-t6561 + t6562) * np.exp((2*1j) * (t6545 - phi2)) + (t6564 + t6565) * np.exp((2*1j) * (t6544 - phi2)))

        if Bindx == 200:
            t6587 = np.cos(phi)
            t6586 = t6587 ** 2
            t6591 = t6587 * t6586
            t6594 = t6591 ** 2
            t6595 = t6587 * t6594
            t6602 = t6595 ** 2
            t6573 = t6587 * t6602
            t6600 = t6594 ** 2
            t6575 = t6587 * t6600
            t6592 = t6586 ** 2
            t6593 = t6587 * t6592
            t6598 = t6593 ** 2
            t6577 = t6587 * t6598
            t6596 = t6592 ** 2
            t6579 = t6587 * t6596
            t6610 = 1740 * t6573 - 10620 * t6575 + 27180 * t6577 - 37500 * t6579 - 180 * t6587 + 2820 * t6591 - 13140 * t6593 + 29700 * t6595
            t6572 = t6596 ** 2
            t6609 = -15 - 2175 * t6572 + 720 * t6586 - 6180 * t6592 + 22800 * t6594 - 45450 * t6596 + 53040 * t6598 - 36420 * t6600 + 13680 * t6602
            t6608 = 40020 * t6573 - 155940 * t6575 + 242420 * t6577 - 191268 * t6579 - 44 * t6587 + 1628 * t6591 - 17292 * t6593 + 80476 * t6595
            t6607 = -41760 * t6573 + 197280 * t6575 - 377120 * t6577 + 371104 * t6579 + 224 * t6587 - 6496 * t6591 + 53984 * t6593 - 197216 * t6595
            t6606 = 78300 * t6572 - 2464 * t6586 + 36176 * t6592 - 206304 * t6594 + 590056 * t6596 - 936032 * t6598 + 839120 * t6600 - 398880 * t6602 + 28
            t6605 = -150075 * t6572 + 1232 * t6586 - 22836 * t6592 + 162448 * t6594 - 571186 * t6596 + 1097008 * t6598 - 1173460 * t6600 + 656880 * t6602 - 11
            t6590 = 4 * phi1
            t6589 = 8 * phi1
            t6588 = 12 * phi1
            tfunc[..., c] = (-0.31e2 / 0.524288e6*1j) * np.sqrt(0.2e1) * np.sqrt(0.13e2) * np.sqrt(0.23e2) * np.sqrt(0.3e1) * np.sqrt(0.7e1) * np.sqrt(0.323e3) * ((-t6605 + t6608) * np.exp((-1*1j) * (t6590 + phi2)) + (-t6606 + t6607) * np.exp((-1*1j) * (t6589 + phi2)) + (t6605 + t6608) * np.exp((1j) * (t6590 - phi2)) + (t6606 + t6607) * np.exp((1j) * (t6589 - phi2)) + (-t6609 + t6610) * np.exp((-1*1j) * (t6588 + phi2)) + (t6609 + t6610) * np.exp((1j) * (t6588 - phi2))) * ((1 + t6587) ** (-0.1e1 / 0.2e1)) * ((1 - t6587) ** (-0.1e1 / 0.2e1))

        if Bindx == 201:
            t6621 = np.cos(phi)
            t6620 = t6621 ** 2
            t6622 = t6620 ** 2
            t6623 = t6620 * t6622
            t6626 = t6623 ** 2
            t6624 = t6622 ** 2
            t6616 = t6620 * t6624
            t6614 = t6620 * t6626
            tfunc[..., c] = (0.93e2 / 0.65536e5*1j) * np.sqrt(0.13e2) * np.sqrt(0.23e2) * np.sqrt(0.2e1) * np.sqrt(0.5e1) * t6621 * np.sqrt(0.7e1) * np.sqrt(0.323e3) * ((10005 * t6614 - 38985 * t6626 + 60605 * t6616 - 47817 * t6624 + 20119 * t6623 - 4323 * t6622 + 407 * t6620 - 11) * np.sin((4 * phi1)) + (-5220 * t6614 + 24660 * t6626 - 47140 * t6616 + 46388 * t6624 - 24652 * t6623 + 6748 * t6622 - 812 * t6620 + 28) * np.sin((8 * phi1)) + (145 * t6614 - 885 * t6626 + 2265 * t6616 - 3125 * t6624 + 2475 * t6623 - 1095 * t6622 + 235 * t6620 - 15) * np.sin((12 * phi1)))

        if Bindx == 202:
            t6649 = np.cos(phi)
            t6648 = t6649 ** 2
            t6653 = t6649 * t6648
            t6656 = t6653 ** 2
            t6657 = t6649 * t6656
            t6664 = t6657 ** 2
            t6635 = t6649 * t6664
            t6662 = t6656 ** 2
            t6637 = t6649 * t6662
            t6654 = t6648 ** 2
            t6655 = t6649 * t6654
            t6660 = t6655 ** 2
            t6639 = t6649 * t6660
            t6658 = t6654 ** 2
            t6641 = t6649 * t6658
            t6672 = 1740 * t6635 - 10620 * t6637 + 27180 * t6639 - 37500 * t6641 - 180 * t6649 + 2820 * t6653 - 13140 * t6655 + 29700 * t6657
            t6634 = t6658 ** 2
            t6671 = -15 - 2175 * t6634 + 720 * t6648 - 6180 * t6654 + 22800 * t6656 - 45450 * t6658 + 53040 * t6660 - 36420 * t6662 + 13680 * t6664
            t6670 = 40020 * t6635 - 155940 * t6637 + 242420 * t6639 - 191268 * t6641 - 44 * t6649 + 1628 * t6653 - 17292 * t6655 + 80476 * t6657
            t6669 = -41760 * t6635 + 197280 * t6637 - 377120 * t6639 + 371104 * t6641 + 224 * t6649 - 6496 * t6653 + 53984 * t6655 - 197216 * t6657
            t6668 = 78300 * t6634 - 2464 * t6648 + 36176 * t6654 - 206304 * t6656 + 590056 * t6658 - 936032 * t6660 + 839120 * t6662 - 398880 * t6664 + 28
            t6667 = -150075 * t6634 + 1232 * t6648 - 22836 * t6654 + 162448 * t6656 - 571186 * t6658 + 1097008 * t6660 - 1173460 * t6662 + 656880 * t6664 - 11
            t6652 = 4 * phi1
            t6651 = 8 * phi1
            t6650 = 12 * phi1
            tfunc[..., c] = (0.31e2 / 0.524288e6*1j) * np.sqrt(0.2e1) * np.sqrt(0.13e2) * np.sqrt(0.23e2) * np.sqrt(0.3e1) * np.sqrt(0.7e1) * np.sqrt(0.323e3) * ((t6667 + t6670) * np.exp((-1*1j) * (t6652 - phi2)) + (t6668 + t6669) * np.exp((-1*1j) * (t6651 - phi2)) + (-t6667 + t6670) * np.exp((1j) * (t6652 + phi2)) + (-t6668 + t6669) * np.exp((1j) * (t6651 + phi2)) + (t6671 + t6672) * np.exp((-1*1j) * (t6650 - phi2)) + (-t6671 + t6672) * np.exp((1j) * (t6650 + phi2))) * ((1 + t6649) ** (-0.1e1 / 0.2e1)) * ((1 - t6649) ** (-0.1e1 / 0.2e1))

        if Bindx == 203:
            t6693 = np.cos(phi)
            t6692 = t6693 ** 2
            t6697 = t6693 * t6692
            t6700 = t6697 ** 2
            t6701 = t6693 * t6700
            t6708 = t6701 ** 2
            t6679 = t6693 * t6708
            t6706 = t6700 ** 2
            t6681 = t6693 * t6706
            t6698 = t6692 ** 2
            t6699 = t6693 * t6698
            t6704 = t6699 ** 2
            t6683 = t6693 * t6704
            t6702 = t6698 ** 2
            t6685 = t6693 * t6702
            t6715 = -15225 * t6679 + 73815 * t6681 - 140325 * t6683 + 127275 * t6685 - 375 * t6693 + 4185 * t6697 - 75 * t6699 - 49275 * t6701
            t6714 = -8280 * t6692 + 63060 * t6698 - 197400 * t6700 + 318300 * t6702 - 280680 * t6704 + 129180 * t6706 - 24360 * t6708 + 180
            t6713 = -4840 * t6692 + 84876 * t6698 - 547624 * t6700 + 1656644 * t6702 - 2540120 * t6704 + 1911300 * t6706 - 560280 * t6708 + 44
            t6712 = 19264 * t6692 - 263648 * t6698 + 1332800 * t6700 - 3190432 * t6702 + 3926720 * t6704 - 2409120 * t6706 + 584640 * t6708 - 224
            t6711 = -548100 * t6679 + 2304540 * t6681 - 3894100 * t6683 + 3376268 * t6685 + 1540 * t6693 - 44828 * t6697 + 394324 * t6699 - 1589644 * t6701
            t6710 = -1050525 * t6679 + 4011315 * t6681 - 6142265 * t6683 + 4801687 * t6685 + 1133 * t6693 - 41283 * t6697 + 434313 * t6699 - 2014375 * t6701
            t6696 = 2 * phi1
            t6695 = 4 * phi1
            t6694 = 6 * phi1
            tfunc[..., c] = -(0.31e2 / 0.262144e6) * np.sqrt(0.13e2) * np.sqrt(0.3e1) * np.sqrt(0.23e2) * np.sqrt(0.19e2) * ((-t6710 + t6713) * np.exp((-2*1j) * (t6696 - phi2)) + (t6711 + t6712) * np.exp((-2*1j) * (t6695 - phi2)) + (t6714 - t6715) * np.exp((-2*1j) * (t6694 - phi2)) + (t6710 + t6713) * np.exp((2*1j) * (t6696 + phi2)) + (-t6711 + t6712) * np.exp((2*1j) * (t6695 + phi2)) + (t6714 + t6715) * np.exp((2*1j) * (t6694 + phi2)))

        if Bindx == 204:
            t6737 = np.cos(phi)
            t6736 = t6737 ** 2
            t6742 = t6737 * t6736
            t6745 = t6742 ** 2
            t6746 = t6737 * t6745
            t6753 = t6746 ** 2
            t6723 = t6737 * t6753
            t6751 = t6745 ** 2
            t6725 = t6737 * t6751
            t6743 = t6736 ** 2
            t6744 = t6737 * t6743
            t6749 = t6744 ** 2
            t6727 = t6737 * t6749
            t6747 = t6743 ** 2
            t6729 = t6737 * t6747
            t6761 = -158340 * t6723 + 839540 * t6725 - 1826500 * t6727 + 2081300 * t6729 + 3900 * t6737 - 67340 * t6742 + 436540 * t6744 - 1309100 * t6746
            t6722 = t6747 ** 2
            t6760 = 65975 * t6722 + 37180 * t6736 - 253760 * t6743 + 674700 * t6745 - 809250 * t6747 + 311220 * t6749 + 224120 * t6751 - 249340 * t6753 - 845
            t6759 = -2375100 * t6722 - 7056 * t6736 + 30912 * t6743 + 549360 * t6745 - 4270392 * t6747 + 11685072 * t6749 - 15244320 * t6751 + 9631440 * t6753 + 84
            t6758 = -3641820 * t6723 + 14334060 * t6725 - 22608540 * t6727 + 18182604 * t6729 + 4708 * t6737 - 168212 * t6742 + 1730916 * t6744 - 7833716 * t6746
            t6757 = 3800160 * t6723 - 16904160 * t6725 + 30492000 * t6727 - 28473312 * t6729 - 16800 * t6737 + 471072 * t6742 - 3892896 * t6744 + 14523936 * t6746
            t6756 = -4552275 * t6722 + 34452 * t6736 - 624448 * t6743 + 4404356 * t6745 - 15553494 * t6747 + 30338748 * t6749 - 33260760 * t6751 + 19213740 * t6753 - 319
            t6741 = 4 * phi1
            t6740 = 8 * phi1
            t6739 = -3 * phi2
            t6738 = 3 * phi2
            tfunc[..., c] = (-0.31e2 / 0.524288e6*1j) * np.sqrt(0.2e1) * np.sqrt(0.23e2) * np.sqrt(0.3e1) * np.sqrt(0.19e2) * ((1 + t6737) ** (-0.1e1 / 0.2e1)) * ((1 - t6737) ** (-0.1e1 / 0.2e1)) * ((t6760 + t6761) * np.exp((-3*1j) * (t6741 - phi2)) + (-t6756 + t6758) * np.exp((-1*1j) * (t6741 + t6739)) + (t6757 + t6759) * np.exp((-1*1j) * (t6740 + t6739)) + (t6756 + t6758) * np.exp((1j) * (t6741 + t6738)) + (t6757 - t6759) * np.exp((1j) * (t6740 + t6738)) + (-t6760 + t6761) * np.exp((3*1j) * (t6741 + phi2)))

        if Bindx == 205:
            t6782 = np.cos(phi)
            t6781 = t6782 ** 2
            t6786 = t6781 ** 2
            t6785 = t6782 * t6781
            t6788 = t6785 ** 2
            t6790 = t6786 ** 2
            t6787 = t6782 * t6786
            t6792 = t6787 ** 2
            t6794 = t6788 ** 2
            t6789 = t6782 * t6788
            t6796 = t6789 ** 2
            t6803 = 62400 * t6781 - 170040 * t6786 - 546000 * t6788 + 2691000 * t6790 - 3999840 * t6792 + 2597400 * t6794 - 633360 * t6796 - 1560
            t6768 = t6782 * t6796
            t6770 = t6782 * t6794
            t6772 = t6782 * t6792
            t6774 = t6782 * t6790
            t6802 = -197925 * t6768 + 214305 * t6770 + 1411995 * t6772 - 3861975 * t6774 - 29445 * t6782 + 407745 * t6785 - 1913925 * t6787 + 3969225 * t6789
            t6801 = -155584 * t6781 + 2590456 * t6786 - 15955632 * t6788 + 46384008 * t6790 - 68856480 * t6792 + 50554920 * t6794 - 14567280 * t6796 + 1496
            t6800 = 322560 * t6781 - 4363968 * t6786 + 23124864 * t6788 - 60373824 * t6790 + 82440960 * t6792 - 56347200 * t6794 + 15200640 * t6796 - 4032
            t6799 = -7125300 * t6768 + 18853380 * t6770 - 11536980 * t6772 - 9260412 * t6774 - 37044 * t6782 + 932484 * t6785 - 6029268 * t6787 + 14203140 * t6789
            t6798 = -13656825 * t6768 + 48944805 * t6770 - 70490745 * t6772 + 52191117 * t6774 + 12199 * t6782 - 426811 * t6785 + 4448807 * t6787 - 21026643 * t6789
            t6784 = 2 * phi1
            t6783 = 3 * phi1
            tfunc[..., c] = -(0.31e2 / 0.262144e6) * np.sqrt(0.2e1) * np.sqrt(0.23e2) * ((-t6798 + t6801) * np.exp((-4*1j) * (phi1 - phi2)) + (t6799 + t6800) * np.exp((-4*1j) * (t6784 - phi2)) + (-t6802 + t6803) * np.exp((-4*1j) * (t6783 - phi2)) + (t6798 + t6801) * np.exp((4*1j) * (phi1 + phi2)) + (-t6799 + t6800) * np.exp((4*1j) * (t6784 + phi2)) + (t6802 + t6803) * np.exp((4*1j) * (t6783 + phi2)))

        if Bindx == 206:
            t6825 = np.cos(phi)
            t6824 = t6825 ** 2
            t6831 = t6825 * t6824
            t6834 = t6831 ** 2
            t6835 = t6825 * t6834
            t6842 = t6835 ** 2
            t6811 = t6825 * t6842
            t6840 = t6834 ** 2
            t6813 = t6825 * t6840
            t6832 = t6824 ** 2
            t6833 = t6825 * t6832
            t6838 = t6833 ** 2
            t6815 = t6825 * t6838
            t6836 = t6832 ** 2
            t6817 = t6825 * t6836
            t6850 = 158340 * t6811 - 585780 * t6813 + 694980 * t6815 - 80340 * t6817 + 8580 * t6825 - 99060 * t6831 + 358020 * t6833 - 454740 * t6835
            t6810 = t6836 ** 2
            t6849 = 39585 * t6810 + 7020 * t6824 - 129480 * t6832 + 659100 * t6834 - 1435590 * t6836 + 1506180 * t6838 - 695760 * t6840 + 49140 * t6842 - 195
            t6848 = -3800160 * t6811 + 14807520 * t6813 - 22965600 * t6815 + 18033120 * t6817 + 6048 * t6825 - 170016 * t6831 + 1645728 * t6833 - 7556640 * t6835
            t6847 = 3641820 * t6811 - 14621100 * t6813 + 23668380 * t6815 - 19688460 * t6817 - 6436 * t6825 + 213780 * t6831 - 2064164 * t6833 + 8856180 * t6835
            t6846 = -2731365 * t6810 + 11300 * t6824 - 208280 * t6832 + 1596596 * t6834 - 6313890 * t6836 + 13835052 * t6838 - 16863600 * t6840 + 10674300 * t6842 - 113
            t6845 = -1425060 * t6810 - 95760 * t6824 + 1165920 * t6832 - 5280912 * t6834 + 11071704 * t6836 - 10525872 * t6838 + 2271360 * t6840 + 2817360 * t6842 + 1260
            t6830 = 4 * phi1
            t6829 = 8 * phi1
            t6828 = -5 * phi2
            t6827 = 5 * phi2
            t6826 = 12 * phi1
            tfunc[..., c] = (0.31e2 / 0.524288e6*1j) * np.sqrt(0.2e1) * np.sqrt(0.5e1) * np.sqrt(0.23e2) * np.sqrt(0.11e2) * ((t6846 + t6847) * np.exp((-1*1j) * (t6830 + t6828)) + (-t6845 + t6848) * np.exp((-1*1j) * (t6829 + t6828)) + (-t6846 + t6847) * np.exp((1j) * (t6830 + t6827)) + (t6845 + t6848) * np.exp((1j) * (t6829 + t6827)) + (-t6849 + t6850) * np.exp((-1*1j) * (t6826 + t6828)) + (t6849 + t6850) * np.exp((1j) * (t6826 + t6827))) * ((1 + t6825) ** (-0.1e1 / 0.2e1)) * ((1 - t6825) ** (-0.1e1 / 0.2e1))

        if Bindx == 207:
            t6871 = np.cos(phi)
            t6870 = t6871 ** 2
            t6877 = t6870 ** 2
            t6876 = t6871 * t6870
            t6879 = t6876 ** 2
            t6881 = t6877 ** 2
            t6878 = t6871 * t6877
            t6883 = t6878 ** 2
            t6885 = t6879 ** 2
            t6880 = t6871 * t6879
            t6887 = t6880 ** 2
            t6894 = -7800 * t6870 + 64740 * t6877 - 190840 * t6879 + 212940 * t6881 - 29640 * t6883 - 94900 * t6885 + 45240 * t6887 + 260
            t6857 = t6871 * t6887
            t6859 = t6871 * t6885
            t6861 = t6871 * t6883
            t6863 = t6871 * t6881
            t6893 = 9425 * t6857 + 48945 * t6859 - 234195 * t6861 + 306605 * t6863 - 2145 * t6871 + 14495 * t6876 + 195 * t6878 - 143325 * t6880
            t6892 = 6720 * t6870 - 31584 * t6877 - 245952 * t6879 + 1689312 * t6881 - 3608640 * t6883 + 3276000 * t6885 - 1085760 * t6887 - 96
            t6891 = -650325 * t6857 + 2076555 * t6859 - 2498145 * t6861 + 1383519 * t6863 - 91 * t6871 + 1509 * t6876 + 23089 * t6878 - 336111 * t6880
            t6890 = 15416 * t6870 - 234884 * t6877 + 1344056 * t6879 - 3687084 * t6881 + 5235720 * t6883 - 3713580 * t6885 + 1040520 * t6887 - 164
            t6889 = -339300 * t6857 + 16380 * t6859 + 2222220 * t6861 - 3803604 * t6863 - 5532 * t6871 + 128772 * t6876 - 883596 * t6878 + 2664660 * t6880
            t6875 = 2 * phi1
            t6874 = 4 * phi1
            t6873 = -3 * phi2
            t6872 = 3 * phi2
            tfunc[..., c] = (0.31e2 / 0.262144e6) * np.sqrt(0.3e1) * np.sqrt(0.7e1) * np.sqrt(0.23e2) * np.sqrt(0.11e2) * ((-t6893 + t6894) * np.exp((-6*1j) * (t6875 - phi2)) + (t6890 + t6891) * np.exp((-2*1j) * (t6875 + t6873)) + (-t6889 + t6892) * np.exp((-2*1j) * (t6874 + t6873)) + (t6890 - t6891) * np.exp((2*1j) * (t6875 + t6872)) + (t6889 + t6892) * np.exp((2*1j) * (t6874 + t6872)) + (t6893 + t6894) * np.exp((6*1j) * (t6875 + phi2)))

        if Bindx == 208:
            t6916 = np.cos(phi)
            t6915 = t6916 ** 2
            t6922 = t6916 * t6915
            t6925 = t6922 ** 2
            t6926 = t6916 * t6925
            t6933 = t6926 ** 2
            t6902 = t6916 * t6933
            t6931 = t6925 ** 2
            t6904 = t6916 * t6931
            t6923 = t6915 ** 2
            t6924 = t6916 * t6923
            t6929 = t6924 ** 2
            t6906 = t6916 * t6929
            t6927 = t6923 ** 2
            t6908 = t6916 * t6927
            t6941 = -158340 * t6902 + 205140 * t6904 + 596700 * t6906 - 1467180 * t6908 + 3900 * t6916 + 17940 * t6922 - 339300 * t6924 + 1141140 * t6926
            t6901 = t6927 ** 2
            t6940 = -28275 * t6901 + 42120 * t6915 - 244140 * t6923 + 429000 * t6925 + 115830 * t6927 - 1046760 * t6929 + 982020 * t6931 - 248040 * t6933 - 1755
            t6939 = 3800160 * t6902 - 11662560 * t6904 + 11989600 * t6906 - 3012064 * t6908 + 19040 * t6916 - 376544 * t6922 + 1843296 * t6924 - 2600928 * t6926
            t6938 = -3641820 * t6902 + 15051660 * t6904 - 25166140 * t6906 + 21755148 * t6908 + 9828 * t6916 - 290612 * t6922 + 2562308 * t6924 - 10280372 * t6926
            t6937 = -1950975 * t6901 - 21912 * t6915 + 273188 * t6923 - 1015512 * t6925 + 653518 * t6927 + 3562424 * t6929 - 8210540 * t6931 + 6709560 * t6933 + 249
            t6936 = -1017900 * t6901 - 101632 * t6915 + 1259664 * t6923 - 6578880 * t6925 + 16803864 * t6927 - 21574784 * t6929 + 12368720 * t6931 - 1160640 * t6933 + 1588
            t6921 = 4 * phi1
            t6920 = 8 * phi1
            t6919 = -7 * phi2
            t6918 = 7 * phi2
            t6917 = 12 * phi1
            tfunc[..., c] = (-0.31e2 / 0.524288e6*1j) * np.sqrt(0.2e1) * np.sqrt(0.23e2) * np.sqrt(0.3e1) * np.sqrt(0.7e1) * ((1 + t6916) ** (-0.1e1 / 0.2e1)) * ((1 - t6916) ** (-0.1e1 / 0.2e1)) * ((-t6937 + t6938) * np.exp((-1*1j) * (t6921 + t6919)) + (t6936 + t6939) * np.exp((-1*1j) * (t6920 + t6919)) + (t6937 + t6938) * np.exp((1j) * (t6921 + t6918)) + (-t6936 + t6939) * np.exp((1j) * (t6920 + t6918)) + (-t6940 + t6941) * np.exp((-1*1j) * (t6917 + t6919)) + (t6940 + t6941) * np.exp((1j) * (t6917 + t6918)))

        if Bindx == 209:
            t6962 = np.cos(phi)
            t6961 = t6962 ** 2
            t6966 = t6962 * t6961
            t6969 = t6966 ** 2
            t6970 = t6962 * t6969
            t6977 = t6970 ** 2
            t6948 = t6962 * t6977
            t6975 = t6969 ** 2
            t6950 = t6962 * t6975
            t6967 = t6961 ** 2
            t6968 = t6962 * t6967
            t6973 = t6968 ** 2
            t6952 = t6962 * t6973
            t6971 = t6967 ** 2
            t6954 = t6962 * t6971
            t6984 = -28275 * t6948 - 395265 * t6950 + 837525 * t6952 - 2145 * t6954 + 2925 * t6962 - 114465 * t6966 + 594165 * t6968 - 894465 * t6970
            t6983 = 49920 * t6961 - 115440 * t6967 - 343200 * t6969 + 1338480 * t6971 - 1235520 * t6973 + 127920 * t6975 + 180960 * t6977 - 3120
            t6982 = 88320 * t6961 - 1194896 * t6967 + 6331808 * t6969 - 16530928 * t6971 + 22573120 * t6973 - 15428400 * t6975 + 4162080 * t6977 - 1104
            t6981 = 222208 * t6961 - 1954176 * t6967 + 6209280 * t6969 - 6880896 * t6971 - 2168320 * t6973 + 8910720 * t6975 - 4343040 * t6977 - 3968
            t6980 = -1950975 * t6948 + 5162235 * t6950 - 3158935 * t6952 - 2535589 * t6954 - 10143 * t6962 + 255323 * t6966 - 1650871 * t6968 + 3888955 * t6970
            t6979 = -1017900 * t6948 - 3652740 * t6950 + 16225300 * t6952 - 19711076 * t6954 - 4780 * t6962 + 172284 * t6966 - 2288748 * t6968 + 10269468 * t6970
            t6965 = 3 * phi1
            t6964 = -2 * phi2
            t6963 = 2 * phi2
            tfunc[..., c] = (0.31e2 / 0.131072e6) * np.sqrt(0.7e1) * np.sqrt(0.3e1) * ((-t6979 + t6981) * np.exp((-8*1j) * (phi1 - phi2)) + (t6980 + t6982) * np.exp((-4*1j) * (phi1 + t6964)) + (t6983 + t6984) * np.exp((-4*1j) * (t6965 + t6964)) + (-t6980 + t6982) * np.exp((4*1j) * (phi1 + t6963)) + (t6983 - t6984) * np.exp((4*1j) * (t6965 + t6963)) + (t6979 + t6981) * np.exp((8*1j) * (phi1 + phi2)))

        if Bindx == 210:
            t7006 = np.cos(phi)
            t7005 = t7006 ** 2
            t7012 = t7005 ** 2
            t7016 = t7012 ** 2
            t6991 = t7016 ** 2
            t7011 = t7006 * t7005
            t7014 = t7011 ** 2
            t7013 = t7006 * t7012
            t7018 = t7013 ** 2
            t7020 = t7014 ** 2
            t7015 = t7006 * t7014
            t7022 = t7015 ** 2
            t7030 = -65975 * t6991 - 92040 * t7005 - 337740 * t7012 + 2865720 * t7014 - 5049330 * t7016 + 1870440 * t7018 + 2038660 * t7020 - 1241240 * t7022 + 11505
            t6992 = t7006 * t7022
            t6994 = t7006 * t7020
            t6996 = t7006 * t7018
            t6998 = t7006 * t7016
            t7029 = 475020 * t6992 + 907140 * t6994 - 4685460 * t6996 + 4126980 * t6998 - 36660 * t7006 + 511940 * t7011 - 1536340 * t7013 + 237380 * t7015
            t7028 = 10925460 * t6992 - 46877220 * t6994 + 80974260 * t6996 - 71862948 * t6998 - 42412 * t7006 + 1076124 * t7011 - 8869260 * t7013 + 34675996 * t7015
            t7027 = -11400480 * t6992 + 22407840 * t6994 + 6179040 * t6996 - 45335136 * t6998 - 150304 * t7006 + 2620576 * t7011 - 15916320 * t7013 + 41594784 * t7015
            t7026 = -4552275 * t6991 - 349416 * t7005 + 3919108 * t7012 - 15865768 * t7014 + 28351686 * t7016 - 19359928 * t7018 - 4957420 * t7020 + 12809160 * t7022 + 4853
            t7025 = -2375100 * t6991 + 431424 * t7005 - 1683696 * t7012 - 5115264 * t7014 + 37361016 * t7016 - 71845312 * t7018 + 55815760 * t7020 - 12579840 * t7022 - 8988
            t7010 = 4 * phi1
            t7009 = 8 * phi1
            t7008 = -9 * phi2
            t7007 = 9 * phi2
            tfunc[..., c] = (0.93e2 / 0.524288e6*1j) * np.sqrt(0.2e1) * ((t7029 + t7030) * np.exp((-3*1j) * (t7010 - 3 * phi2)) + (t7026 + t7028) * np.exp((-1*1j) * (t7010 + t7008)) + (-t7025 + t7027) * np.exp((-1*1j) * (t7009 + t7008)) + (-t7026 + t7028) * np.exp((1j) * (t7010 + t7007)) + (t7025 + t7027) * np.exp((1j) * (t7009 + t7007)) + (t7029 - t7030) * np.exp((3*1j) * (t7010 + 3 * phi2))) * ((1 + t7006) ** (-0.1e1 / 0.2e1)) * ((1 - t7006) ** (-0.1e1 / 0.2e1))

        if Bindx == 211:
            t7051 = np.cos(phi)
            t7050 = t7051 ** 2
            t7057 = t7051 * t7050
            t7060 = t7057 ** 2
            t7061 = t7051 * t7060
            t7068 = t7061 ** 2
            t7037 = t7051 * t7068
            t7066 = t7060 ** 2
            t7039 = t7051 * t7066
            t7058 = t7050 ** 2
            t7059 = t7051 * t7058
            t7064 = t7059 ** 2
            t7041 = t7051 * t7064
            t7062 = t7058 ** 2
            t7043 = t7051 * t7062
            t7075 = -7917 * t7037 - 200109 * t7039 + 11271 * t7041 + 646503 * t7043 - 10179 * t7051 + 70941 * t7057 + 5577 * t7059 - 516087 * t7061
            t7074 = -4056 * t7050 + 158964 * t7058 - 408408 * t7060 + 46332 * t7062 + 545688 * t7064 - 273156 * t7066 - 63336 * t7068 - 2028
            t7073 = -28520 * t7050 + 394220 * t7058 - 2304232 * t7060 + 6282404 * t7062 - 8545880 * t7064 + 5658276 * t7066 - 1456728 * t7068 + 460
            t7072 = -59584 * t7050 + 895776 * t7058 - 4154304 * t7060 + 7488096 * t7062 - 4459840 * t7064 - 1231776 * t7066 + 1520064 * t7068 + 1568
            t7071 = -285012 * t7037 - 2355444 * t7039 + 6984796 * t7041 - 5422340 * t7043 + 39508 * t7051 - 445452 * t7057 + 1285284 * t7059 + 198660 * t7061
            t7070 = -546273 * t7037 + 1061151 * t7039 + 1026467 * t7041 - 4261693 * t7043 - 16399 * t7051 + 327313 * t7057 - 1815827 * t7059 + 4225261 * t7061
            t7056 = 2 * phi1
            t7055 = 4 * phi1
            t7054 = 6 * phi1
            t7053 = -5 * phi2
            t7052 = 5 * phi2
            tfunc[..., c] = -(0.155e3 / 0.262144e6) * ((-t7070 + t7073) * np.exp((-2*1j) * (t7056 + t7053)) + (t7071 + t7072) * np.exp((-2*1j) * (t7055 + t7053)) + (t7074 - t7075) * np.exp((-2*1j) * (t7054 + t7053)) + (t7070 + t7073) * np.exp((2*1j) * (t7056 + t7052)) + (-t7071 + t7072) * np.exp((2*1j) * (t7055 + t7052)) + (t7074 + t7075) * np.exp((2*1j) * (t7054 + t7052))) * np.sqrt(0.3e1)

        if Bindx == 212:
            t7097 = np.cos(phi)
            t7096 = t7097 ** 2
            t7104 = t7096 ** 2
            t7108 = t7104 ** 2
            t7082 = t7108 ** 2
            t7103 = t7097 * t7096
            t7106 = t7103 ** 2
            t7105 = t7097 * t7104
            t7110 = t7105 ** 2
            t7112 = t7106 ** 2
            t7107 = t7097 * t7106
            t7114 = t7107 ** 2
            t7122 = 3045 * t7082 + 13068 * t7096 - 106392 * t7104 + 101244 * t7106 + 285714 * t7108 - 444444 * t7110 + 51168 * t7112 + 95508 * t7114 + 1089
            t7083 = t7097 * t7114
            t7085 = t7097 * t7112
            t7087 = t7097 * t7110
            t7089 = t7097 * t7108
            t7121 = -26796 * t7083 - 158532 * t7085 + 262548 * t7087 + 169884 * t7089 - 7212 * t7097 + 19068 * t7103 + 120276 * t7105 - 379236 * t7107
            t7120 = -616308 * t7083 + 2765796 * t7085 - 4907188 * t7087 + 4295940 * t7089 - 1012 * t7097 - 3036 * t7103 + 322828 * t7105 - 1857020 * t7107
            t7119 = 643104 * t7083 - 376992 * t7085 - 3161312 * t7087 + 5615456 * t7089 - 16352 * t7097 + 35168 * t7103 + 712992 * t7105 - 3452064 * t7107
            t7118 = -210105 * t7082 - 72956 * t7096 + 643448 * t7104 - 2285740 * t7106 + 3908390 * t7108 - 3170228 * t7110 + 758816 * t7112 + 426972 * t7114 + 1403
            t7117 = -109620 * t7082 + 112112 * t7096 - 805728 * t7104 + 1955184 * t7106 - 899976 * t7108 - 2748592 * t7110 + 3650752 * t7112 - 1150128 * t7114 - 4004
            t7102 = 4 * phi1
            t7101 = 8 * phi1
            t7100 = 12 * phi1
            t7099 = -11 * phi2
            t7098 = 11 * phi2
            tfunc[..., c] = (-0.31e2 / 0.524288e6*1j) * np.sqrt(0.3e1) * np.sqrt(0.13e2) * np.sqrt(0.5e1) * np.sqrt(0.2e1) * ((1 + t7097) ** (-0.1e1 / 0.2e1)) * ((1 - t7097) ** (-0.1e1 / 0.2e1)) * ((-t7118 + t7120) * np.exp((-1*1j) * (t7102 + t7099)) + (t7117 + t7119) * np.exp((-1*1j) * (t7101 + t7099)) + (t7118 + t7120) * np.exp((1j) * (t7102 + t7098)) + (-t7117 + t7119) * np.exp((1j) * (t7101 + t7098)) + (t7121 + t7122) * np.exp((-1*1j) * (t7100 + t7099)) + (t7121 - t7122) * np.exp((1j) * (t7100 + t7098)))

        if Bindx == 213:
            t7143 = np.cos(phi)
            t7142 = t7143 ** 2
            t7148 = t7142 ** 2
            t7147 = t7143 * t7142
            t7150 = t7147 ** 2
            t7152 = t7148 ** 2
            t7149 = t7143 * t7148
            t7154 = t7149 ** 2
            t7156 = t7150 ** 2
            t7151 = t7143 * t7150
            t7158 = t7151 ** 2
            t7165 = -11712 * t7142 + 30264 * t7148 + 80080 * t7150 - 175032 * t7152 - 13728 * t7154 + 84968 * t7156 + 9744 * t7158 - 488
            t7129 = t7143 * t7158
            t7131 = t7143 * t7156
            t7133 = t7143 * t7154
            t7135 = t7143 * t7152
            t7164 = 1015 * t7129 + 39669 * t7131 + 86775 * t7133 - 152867 * t7135 - 3945 * t7143 - 9451 * t7147 + 90519 * t7149 - 47619 * t7151
            t7163 = -22080 * t7142 + 60168 * t7148 + 193200 * t7150 - 952200 * t7152 + 1415328 * t7154 - 919080 * t7156 + 224112 * t7158 + 552
            t7162 = -36540 * t7129 - 510804 * t7131 + 1082340 * t7133 - 2772 * t7135 + 3780 * t7143 - 147924 * t7147 + 767844 * t7149 - 1155924 * t7151
            t7161 = 70035 * t7129 - 75831 * t7131 - 499629 * t7133 + 1366545 * t7135 + 10419 * t7143 - 144279 * t7147 + 677235 * t7149 - 1404495 * t7151
            t7160 = -64512 * t7142 + 149184 * t7148 + 443520 * t7150 - 1729728 * t7152 + 1596672 * t7154 - 165312 * t7156 - 233856 * t7158 + 4032
            t7146 = 2 * phi1
            t7145 = -3 * phi2
            t7144 = 3 * phi2
            tfunc[..., c] = (0.31e2 / 0.262144e6) * np.sqrt(0.2e1) * np.sqrt(0.5e1) * np.sqrt(0.13e2) * ((-t7161 + t7163) * np.exp((-4*1j) * (phi1 + t7145)) + (t7160 - t7162) * np.exp((-4*1j) * (t7146 + t7145)) + (t7161 + t7163) * np.exp((4*1j) * (phi1 + t7144)) + (t7160 + t7162) * np.exp((4*1j) * (t7146 + t7144)) + (-t7164 + t7165) * np.exp((-12*1j) * (phi1 - phi2)) + (t7164 + t7165) * np.exp((12*1j) * (phi1 + phi2)))

        if Bindx == 214:
            t7186 = np.cos(phi)
            t7185 = t7186 ** 2
            t7192 = t7186 * t7185
            t7195 = t7192 ** 2
            t7196 = t7186 * t7195
            t7203 = t7196 ** 2
            t7172 = t7186 * t7203
            t7207 = -91 - 145 * t7172
            t7206 = -1356 - 5220 * t7172
            t7205 = -391 - 10005 * t7172
            t7201 = t7195 ** 2
            t7193 = t7185 ** 2
            t7194 = t7186 * t7193
            t7199 = t7194 ** 2
            t7197 = t7193 ** 2
            t7191 = 4 * phi1
            t7190 = 8 * phi1
            t7189 = 12 * phi1
            t7188 = -13 * phi2
            t7187 = 13 * phi2
            t7178 = t7186 * t7197
            t7176 = t7186 * t7199
            t7174 = t7186 * t7201
            tfunc[..., c] = (0.31e2 / 0.524288e6*1j) * np.sqrt(0.3e1) * np.sqrt(0.2e1) * np.sqrt(0.5e1) * np.sqrt(0.7e1) * np.sqrt(0.13e2) * np.sqrt((1 - t7186)) * ((1 + t7186) ** (-0.1e1 / 0.2e1)) * ((-24679 * t7203 - 35627 * t7174 + 128225 * t7201 + 23897 * t7176 - 271331 * t7199 + 64745 * t7178 + 297045 * t7197 - 135585 * t7196 - 175605 * t7195 + 103615 * t7194 + 52739 * t7193 - 35213 * t7192 - 6785 * t7185 + 4163 * t7186 - t7205) * np.exp((-1*1j) * (t7191 + t7188)) + (30972 * t7203 - 56340 * t7174 - 17652 * t7201 + 184044 * t7176 - 170676 * t7199 - 128964 * t7178 + 302940 * t7197 - 79596 * t7196 - 171468 * t7195 + 126852 * t7194 + 17892 * t7193 - 44700 * t7192 + 9348 * t7185 + 3924 * t7186 + t7206) * np.exp((-1*1j) * (t7190 + t7188)) + (-44689 * t7203 - 33741 * t7174 + 130111 * t7201 + 234439 * t7176 - 60789 * t7199 - 396865 * t7178 - 164565 * t7197 + 268065 * t7196 + 228045 * t7195 - 51175 * t7194 - 102051 * t7193 - 14099 * t7192 + 14329 * t7185 + 3381 * t7186 + t7205) * np.exp((1j) * (t7191 + t7187)) + (41412 * t7203 + 128724 * t7174 + 167412 * t7201 - 34284 * t7176 - 389004 * t7199 - 430716 * t7178 + 1188 * t7197 + 383724 * t7196 + 291852 * t7195 - 6468 * t7194 - 115428 * t7193 - 52836 * t7192 + 1212 * t7185 + 6636 * t7186 - t7206) * np.exp((1j) * (t7190 + t7187)) + (-1363 * t7203 + 5369 * t7174 - 10803 * t7201 + 9061 * t7176 + 6721 * t7199 - 24739 * t7178 + 22737 * t7197 - 429 * t7196 - 17017 * t7195 + 14443 * t7194 - 2873 * t7193 - 3081 * t7192 + 2507 * t7185 - 769 * t7186 - t7207) * np.exp((-1*1j) * (t7189 + t7188)) + (-1653 * t7203 - 8385 * t7174 - 24557 * t7201 - 44421 * t7176 - 46761 * t7199 - 15301 * t7178 + 32175 * t7197 + 55341 * t7196 + 38753 * t7195 + 7293 * t7194 - 10023 * t7193 - 9815 * t7192 - 4227 * t7185 - 951 * t7186 + t7207) * np.exp((1j) * (t7189 + t7187)))

        if Bindx == 215:
            t7228 = np.cos(phi)
            t7227 = t7228 ** 2
            t7234 = t7228 * t7227
            t7237 = t7234 ** 2
            t7238 = t7228 * t7237
            t7245 = t7238 ** 2
            t7253 = -4 - 56 * t7245
            t7235 = t7227 ** 2
            t7239 = t7235 ** 2
            t7236 = t7228 * t7235
            t7241 = t7236 ** 2
            t7243 = t7237 ** 2
            t7252 = 56 * t7227 - 164 * t7235 + 120 * t7237 + 180 * t7239 - 376 * t7241 + 244 * t7243 + t7253
            t7214 = t7228 * t7245
            t7216 = t7228 * t7243
            t7218 = t7228 * t7241
            t7220 = t7228 * t7239
            t7251 = t7216 - 15 * t7214 + 221 * t7218 - 595 * t7220 - t7228 + 79 * t7234 - 365 * t7236 + 675 * t7238
            t7250 = -200 * t7227 - 676 * t7235 + 1144 * t7237 + 1716 * t7239 - 1144 * t7241 - 780 * t7243 + t7253
            t7249 = -5 * t7214 - 277 * t7216 - 1313 * t7218 + 143 * t7220 - 43 * t7228 - 507 * t7234 - 143 * t7236 + 2145 * t7238
            t7248 = 96 + 960 * t7227 - 6816 * t7235 + 6336 * t7237 + 9504 * t7239 - 14784 * t7241 + 3360 * t7243 + 1344 * t7245
            t7247 = -180 * t7214 - 3732 * t7216 + 5052 * t7218 + 9372 * t7220 - 588 * t7228 + 1428 * t7234 + 6468 * t7236 - 17820 * t7238
            t7233 = 2 * phi1
            t7232 = 4 * phi1
            t7231 = 6 * phi1
            t7230 = -7 * phi2
            t7229 = 7 * phi2
            tfunc[..., c] = -(0.31e2 / 0.262144e6) * np.sqrt(0.5e1) * np.sqrt(0.13e2) * np.sqrt(0.7e1) * np.sqrt(0.3e1) * np.sqrt(0.29e2) * ((t7247 + t7248) * np.exp((-2*1j) * (t7232 + t7230)) + (-t7249 + t7250) * np.exp((-2*1j) * (t7231 + t7230)) + (-t7247 + t7248) * np.exp((2*1j) * (t7232 + t7229)) + (t7249 + t7250) * np.exp((2*1j) * (t7231 + t7229)) + 23 * (-t7251 + t7252) * np.exp((-2*1j) * (t7233 + t7230)) + 23 * (t7251 + t7252) * np.exp((2*1j) * (t7233 + t7229)))

        if Bindx == 216:
            t7272 = np.cos(phi)
            t7271 = t7272 ** 2
            t7278 = t7271 ** 2
            t7279 = t7272 * t7278
            t7283 = t7279 ** 2
            t7263 = t7272 * t7283
            t7277 = t7272 * t7271
            t7296 = -4 * t7263 + 4 * t7277
            t7280 = t7277 ** 2
            t7285 = t7280 ** 2
            t7286 = t7272 * t7285
            t7295 = t7286 - t7272
            t7260 = t7272 * t7286
            t7294 = 1 - t7260
            t7281 = t7278 ** 2
            t7265 = t7272 * t7281
            t7293 = 20 * t7265 - 20 * t7279 + 4 * t7295 + 4 * t7296
            t7292 = 208 * t7263 + 572 * t7265 - 12 * t7272 - 208 * t7277 - 572 * t7279 + 12 * t7286
            t7291 = 3168 * t7265 - 3168 * t7279 - 288 * t7295 + 288 * t7296
            t7290 = t7271 - 19 * t7278 + 45 * t7280 - 45 * t7281 + 19 * t7283 - t7285 + t7294
            t7289 = 65 * t7271 + 429 * t7278 + 429 * t7280 - 429 * t7281 - 429 * t7283 - 65 * t7285 + t7294
            t7288 = 36 - 36 * t7260 + 900 * t7271 - 396 * t7278 - 3564 * t7280 + 3564 * t7281 + 396 * t7283 - 900 * t7285
            t7276 = 4 * phi1
            t7275 = 8 * phi1
            t7274 = -15 * phi2
            t7273 = 15 * phi2
            tfunc[..., c] = (-0.155e3 / 0.524288e6*1j) * np.sqrt((1 - t7272)) * np.sqrt((1 + t7272)) * np.sqrt(0.2e1) * np.sqrt(0.13e2) * np.sqrt(0.7e1) * np.sqrt(0.29e2) * ((t7289 + t7292) * np.exp((-3*1j) * (t7276 - 5 * phi2)) + (-t7289 + t7292) * np.exp((3*1j) * (t7276 + 5 * phi2)) + (-t7288 + t7291) * np.exp((-1*1j) * (t7275 + t7274)) + (t7288 + t7291) * np.exp((1j) * (t7275 + t7273)) + 69 * (t7290 + t7293) * np.exp((-1*1j) * (t7276 + t7274)) + 69 * (-t7290 + t7293) * np.exp((1j) * (t7276 + t7273)))

        if Bindx == 217:
            t7319 = np.cos(phi)
            t7318 = t7319 ** 2
            t7323 = t7319 * t7318
            t7326 = t7323 ** 2
            t7327 = t7319 * t7326
            t7334 = t7327 ** 2
            t7305 = t7319 * t7334
            t7343 = -t7305 - t7319
            t7324 = t7318 ** 2
            t7328 = t7324 ** 2
            t7304 = t7328 ** 2
            t7332 = t7326 ** 2
            t7342 = 1 + t7304 + 64 * t7318 + 364 * t7324 - 858 * t7328 + 364 * t7332 + 64 * t7334
            t7325 = t7319 * t7324
            t7330 = t7325 ** 2
            t7341 = -49 - 49 * t7304 + 980 * t7324 - 3136 * t7326 + 4410 * t7328 - 3136 * t7330 + 980 * t7332
            t7307 = t7319 * t7332
            t7309 = t7319 * t7330
            t7311 = t7319 * t7328
            t7340 = -12 * t7305 - 196 * t7307 - 364 * t7309 + 572 * t7311 - 12 * t7319 - 196 * t7323 - 364 * t7325 + 572 * t7327
            t7339 = -240 * t7307 + 1200 * t7309 - 880 * t7311 - 240 * t7323 + 1200 * t7325 - 880 * t7327 + 80 * t7343
            t7338 = 980 * t7307 - 1764 * t7309 + 980 * t7311 + 980 * t7323 - 1764 * t7325 + 980 * t7327 + 196 * t7343
            t7337 = 10 + 10 * t7304 + 240 * t7318 - 360 * t7324 - 880 * t7326 + 1980 * t7328 - 880 * t7330 - 360 * t7332 + 240 * t7334
            t7322 = 3 * phi1
            t7321 = -4 * phi2
            t7320 = 4 * phi2
            tfunc[..., c] = -(0.33e2 / 0.59244544e8) * np.sqrt(0.17e2) * np.sqrt(0.113e3) * np.sqrt(0.3e1) * np.sqrt(0.5e1) * np.sqrt(0.13e2) * np.sqrt(0.23e2) * np.sqrt(0.899e3) * ((76 * t7304 - 608 * t7334 + 2128 * t7332 - 4256 * t7330 + 5320 * t7328 - 4256 * t7326 + 2128 * t7324 - 608 * t7318 + 76) * np.exp((-16*1j) * phi2) + (-t7340 + t7342) * np.exp((-4*1j) * (t7322 + t7320)) + (t7340 + t7342) * np.exp((4*1j) * (t7322 + t7321)) + (t7338 + t7341) * np.exp((-4*1j) * (phi1 + t7320)) + (-t7338 + t7341) * np.exp((4*1j) * (phi1 + t7321)) + (t7337 - t7339) * np.exp((-8*1j) * (phi1 + 2 * phi2)) + (t7337 + t7339) * np.exp((8*1j) * (phi1 - 2 * phi2)))

        if Bindx == 218:
            t7368 = np.cos(phi)
            t7367 = t7368 ** 2
            t7372 = t7368 * t7367
            t7375 = t7372 ** 2
            t7376 = t7368 * t7375
            t7383 = t7376 ** 2
            t7354 = t7368 * t7383
            t7396 = -t7354 - t7368
            t7381 = t7375 ** 2
            t7356 = t7368 * t7381
            t7400 = -t7356 - t7372
            t7373 = t7367 ** 2
            t7377 = t7373 ** 2
            t7360 = t7368 * t7377
            t7399 = -t7360 - t7376
            t7374 = t7368 * t7373
            t7379 = t7374 ** 2
            t7398 = t7379 + t7375
            t7397 = t7381 + t7373
            t7394 = t7399 + t7400
            t7353 = t7377 ** 2
            t7393 = 248 * t7353 + 15872 * t7367 + 90272 * t7373 - 212784 * t7377 + 90272 * t7381 + 15872 * t7383 + 248
            t7358 = t7368 * t7379
            t7392 = -56058912 * t7358 - 56058912 * t7374 + 6228768 * t7396
            t7391 = 2976 * t7354 + 48608 * t7356 + 90272 * t7358 + 2976 * t7368 + 48608 * t7372 + 90272 * t7374 + 141856 * t7399
            t7390 = 1557192 * t7353 - 140147280 * t7377 + 99660288 * t7398 + 1557192
            t7389 = -63280 * t7356 - 63280 * t7372 - 1292720 * t7360 - 1292720 * t7376 - 493584 * t7358 - 493584 * t7374 + 1808 * t7396
            t7388 = 113 * t7353 + 13560 * t7367 + 1454310 * t7377 + 13560 * t7383 + 205660 * t7397 + 904904 * t7398 + 113
            t7387 = 72540 * t7353 + 1740960 * t7367 + 14362920 * t7377 + 1740960 * t7383 - 2611440 * t7397 - 6383520 * t7398 + 72540
            t7386 = 8704800 * t7358 + 8704800 * t7374 + 6383520 * t7399 + 1740960 * t7400 + 580320 * t7396
            t7371 = 3 * phi1
            t7370 = -4 * phi2
            t7369 = 4 * phi2
            t7350 = np.exp((-4*1j) * (phi1 + t7369))
            t7348 = np.exp((4*1j) * (phi1 + t7370))
            tfunc[..., c] = (0.11e2 / 0.1895825408e10) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.5e1) * np.sqrt(0.29e2) * np.sqrt(0.113e3) * ((290176740 * t7377 + 4145382 * t7353 + 4145382 - 232141392 * t7379 - 232141392 * t7375 + 116070696 * t7381 + 116070696 * t7373 - 33163056 * t7383 - 33163056 * t7367) * np.exp((-16*1j) * phi2) + ((t7390 - t7392) * t7350) + ((t7390 + t7392) * t7348) + (t7391 + t7393) * np.exp((-4*1j) * (t7371 + t7369)) + (-t7391 + t7393) * np.exp((4*1j) * (t7371 + t7370)) + (-t7386 + t7387) * np.exp((-8*1j) * (phi1 + 2 * phi2)) + (t7386 + t7387) * np.exp((8*1j) * (phi1 - 2 * phi2)) + (t7388 - t7389) * np.exp((-16*1j) * (phi1 + phi2)) + (t7388 + t7389) * np.exp((16*1j) * (phi1 - phi2)) + (31143840 * (t7394 - t7397) * t7350) + (31143840 * (-t7394 - t7397) * t7348))

        if Bindx == 219:
            t7422 = np.cos(phi)
            t7421 = t7422 ** 2
            t7427 = t7422 * t7421
            t7430 = t7427 ** 2
            t7431 = t7422 * t7430
            t7438 = t7431 ** 2
            t7408 = t7422 * t7438
            t7443 = -4 * t7408
            t7442 = -40 * t7408
            t7441 = 196 * t7408
            t7440 = 49 - 637 * t7421 - 98 * t7422
            t7436 = t7430 ** 2
            t7428 = t7421 ** 2
            t7429 = t7422 * t7428
            t7434 = t7429 ** 2
            t7432 = t7428 ** 2
            t7426 = 4 * phi1
            t7425 = 8 * phi1
            t7424 = -15 * phi2
            t7423 = 15 * phi2
            t7414 = t7422 * t7432
            t7412 = t7422 * t7434
            t7410 = t7422 * t7436
            tfunc[..., c] = (0.33e2 / 0.59244544e8*1j) * np.sqrt(0.899e3) * np.sqrt(0.23e2) * np.sqrt(0.13e2) * np.sqrt(0.5e1) * np.sqrt(0.3e1) * np.sqrt(0.113e3) * np.sqrt(0.17e2) * np.sqrt(0.2e1) * ((1 + t7422) ** (0.3e1 / 0.2e1)) * (304 * (-t7408 + 2 * t7438 + 5 * t7410 - 12 * t7436 - 9 * t7412 + 30 * t7434 + 5 * t7414 - 40 * t7432 + 5 * t7431 + 30 * t7430 - 9 * t7429 - 12 * t7428 + 5 * t7427 + 2 * t7421 - t7422) * np.exp((-15*1j) * phi2) + (t7443 - 37 * t7438 - 142 * t7410 - 271 * t7436 - 184 * t7412 + 275 * t7434 + 726 * t7414 + 561 * t7432 - 132 * t7431 - 583 * t7430 - 418 * t7429 - 37 * t7428 + 128 * t7427 + 89 * t7421 + 26 * t7422 + 3) * np.exp((-3*1j) * (t7426 + 5 * phi2)) + (t7443 + 53 * t7438 - 322 * t7410 + 1183 * t7436 - 2912 * t7412 + 5005 * t7434 - 6006 * t7414 + 4719 * t7432 - 1716 * t7431 - 1001 * t7430 + 2002 * t7429 - 1547 * t7428 + 728 * t7427 - 217 * t7421 + 38 * t7422 - 3) * np.exp((3*1j) * (t7426 - 5 * phi2)) + (t7441 + 343 * t7438 - 1078 * t7410 - 2107 * t7436 + 2352 * t7412 + 5439 * t7434 - 2450 * t7414 - 7595 * t7432 + 980 * t7431 + 6125 * t7430 + 294 * t7429 - 2793 * t7428 - 392 * t7427 - t7440) * np.exp((-1*1j) * (t7426 + t7423)) + (t7442 - 220 * t7438 - 320 * t7410 + 380 * t7436 + 1480 * t7412 + 740 * t7434 - 1840 * t7414 - 2340 * t7432 + 360 * t7431 + 2060 * t7430 + 800 * t7429 - 620 * t7428 - 520 * t7427 - 20 * t7421 + 80 * t7422 + 20) * np.exp((-1*1j) * (t7425 + t7423)) + (t7441 - 1127 * t7438 + 1862 * t7410 + 1323 * t7436 - 7448 * t7412 + 5537 * t7434 + 7154 * t7414 - 12789 * t7432 + 1764 * t7431 + 8771 * t7430 - 5782 * t7429 - 1127 * t7428 + 2352 * t7427 + t7440) * np.exp((1j) * (t7426 + t7424)) + (t7442 + 380 * t7438 - 1520 * t7410 + 3140 * t7436 - 2840 * t7412 - 1540 * t7434 + 7040 * t7414 - 7260 * t7432 + 1320 * t7431 + 4180 * t7430 - 4400 * t7429 + 1580 * t7428 + 280 * t7427 - 460 * t7421 + 160 * t7422 - 20) * np.exp((1j) * (t7425 + t7424))) * ((1 - t7422) ** (-0.1e1 / 0.2e1))

        if Bindx == 220:
            t7468 = np.cos(phi)
            t7494 = 1 - t7468
            t7467 = t7468 ** 2
            t7475 = t7467 ** 2
            t7479 = t7475 ** 2
            t7453 = t7479 ** 2
            t7493 = 113 * t7453
            t7492 = 248 * t7453
            t7491 = 72540 * t7453
            t7490 = 1557192 * t7453
            t7460 = t7468 * t7479
            t7476 = t7468 * t7475
            t7474 = t7468 * t7467
            t7477 = t7474 ** 2
            t7481 = t7476 ** 2
            t7489 = 186 + 79794 * t7460 - 28210 * t7476 - 62062 * t7477 + 62062 * t7481
            t7483 = t7477 ** 2
            t7456 = t7468 * t7483
            t7478 = t7468 * t7477
            t7485 = t7478 ** 2
            t7488 = 25304370 * t7456 - 5839470 * t7467 + 5839470 * t7485 + 389298 * t7494
            t7473 = 4 * phi1
            t7472 = 8 * phi1
            t7471 = 16 * phi1
            t7470 = -15 * phi2
            t7469 = 15 * phi2
            t7458 = t7468 * t7481
            t7454 = t7468 * t7485
            tfunc[..., c] = (0.11e2 / 0.236978176e9*1j) * np.sqrt(0.113e3) * np.sqrt(0.29e2) * np.sqrt(0.5e1) * np.sqrt(0.3e1) * np.sqrt((1 + t7468)) * t7494 ** (-0.1e1 / 0.2e1) * (4145382 * (-35 * t7481 + 35 * t7460 + 35 * t7479 - 35 * t7478 + 21 * t7483 - 21 * t7458 - 21 * t7477 + 21 * t7476 - 7 * t7485 + 7 * t7456 + 7 * t7475 - 7 * t7474 + t7453 - t7454 - t7467 + t7468) * np.exp((-15*1j) * phi2) + (t7493 + 1582 * t7454 + 10170 * t7485 + 39550 * t7456 - 39550 * t7474 - 10170 * t7467 - 1582 * t7468 - 113 + 226226 * t7481 - 226226 * t7477 + 185094 * t7458 - 185094 * t7476 + 161590 * t7460 - 161590 * t7478 + 102830 * t7483 - 102830 * t7475) * np.exp((-1*1j) * (t7471 + t7469)) + (t7492 + 2542 * t7454 + 11098 * t7485 + 25606 * t7456 + 28210 * t7483 - 5642 * t7458 - 26598 * t7479 + 44330 * t7478 - 5642 * t7475 - 13454 * t7474 - 7130 * t7467 - 1798 * t7468 - t7489) * np.exp((-3*1j) * (t7473 + 5 * phi2)) + (t7492 - 3038 * t7454 + 16678 * t7485 - 53382 * t7456 + 107198 * t7483 - 129766 * t7458 - 186186 * t7479 + 168454 * t7478 + 50778 * t7475 - 31682 * t7474 + 11098 * t7467 - 2170 * t7468 + t7489) * np.exp((3*1j) * (t7473 - 5 * phi2)) + (4282278 * t7454 + 61898382 * t7458 - 79806090 * t7460 + 1946490 * t7474 - 25304370 * t7475 - 19854198 * t7476 + 50998038 * t7477 + 56448210 * t7478 - 52555230 * t7479 + 23747178 * t7481 + 1946490 * t7483 - t7488 + t7490) * np.exp((-1*1j) * (t7473 + t7469)) + (471510 * t7454 - 108810 * t7456 - 4025970 * t7458 + 7580430 * t7460 - 108810 * t7467 - 181350 * t7468 + 979290 * t7474 + 2067390 * t7475 - 326430 * t7476 - 5186610 * t7477 - 4388670 * t7478 + 3590730 * t7479 + 1994850 * t7481 - 3373110 * t7483 + 979290 * t7485 + t7491 - 36270) * np.exp((-1*1j) * (t7472 + t7469)) + (-7396662 * t7454 - 15182622 * t7458 - 44769270 * t7460 + 13625430 * t7474 + 9732450 * t7475 - 54891018 * t7476 + 23747178 * t7477 + 83699070 * t7478 - 87592050 * t7479 + 100828182 * t7481 - 48662250 * t7483 + t7488 + t7490) * np.exp((1j) * (t7473 + t7470)) + (-616590 * t7454 - 2937870 * t7456 + 7943130 * t7458 + 398970 * t7460 + 544050 * t7467 - 253890 * t7468 + 326430 * t7474 - 3373110 * t7475 + 5114070 * t7476 + 398970 * t7477 - 9974250 * t7478 + 10772190 * t7479 - 9974250 * t7481 - 544050 * t7483 + 2067390 * t7485 + t7491 + 36270) * np.exp((1j) * (t7472 + t7470)) + (t7493 - 1808 * t7454 + 13560 * t7485 - 63280 * t7456 + 1454310 * t7479 - 63280 * t7474 + 13560 * t7467 - 1808 * t7468 + 113 - 1292720 * t7460 - 1292720 * t7478 + 904904 * t7481 + 904904 * t7477 - 493584 * t7458 - 493584 * t7476 + 205660 * t7483 + 205660 * t7475) * np.exp((1j) * (t7471 + t7470)))

        if Bindx == 221:
            t7517 = np.cos(phi)
            t7516 = t7517 ** 2
            t7523 = t7517 * t7516
            t7526 = t7523 ** 2
            t7527 = t7517 * t7526
            t7534 = t7527 ** 2
            t7503 = t7517 * t7534
            t7532 = t7526 ** 2
            t7505 = t7517 * t7532
            t7524 = t7516 ** 2
            t7525 = t7517 * t7524
            t7530 = t7525 ** 2
            t7507 = t7517 * t7530
            t7528 = t7524 ** 2
            t7509 = t7517 * t7528
            t7542 = -651 * t7503 - 7259 * t7505 - 2639 * t7507 + 20449 * t7509 + 315 * t7517 + 1771 * t7523 - 7553 * t7525 - 4433 * t7527
            t7541 = -4340 * t7503 - 5460 * t7505 + 43260 * t7507 - 49060 * t7509 + 500 * t7517 - 6060 * t7523 + 14340 * t7525 + 6820 * t7527
            t7540 = -10633 * t7503 + 49735 * t7505 - 88053 * t7507 + 66395 * t7509 - 1127 * t7517 + 9065 * t7523 - 17787 * t7525 - 7595 * t7527
            t7502 = t7528 ** 2
            t7539 = -34 + 62 * t7502 - 1156 * t7516 + 728 * t7524 + 12012 * t7526 - 12012 * t7528 - 12012 * t7530 + 9464 * t7532 + 2948 * t7534
            t7538 = -140 + 620 * t7502 + 840 * t7516 + 5880 * t7524 - 33880 * t7526 + 47520 * t7528 - 8360 * t7530 - 23160 * t7532 + 10680 * t7534
            t7537 = -3038 * t7502 - 2940 * t7516 + 25480 * t7524 - 83692 * t7526 + 132300 * t7528 - 104468 * t7530 + 33320 * t7532 + 2940 * t7534 + 98
            t7522 = 2 * phi1
            t7521 = 4 * phi1
            t7520 = 6 * phi1
            t7519 = -7 * phi2
            t7518 = 7 * phi2
            tfunc[..., c] = -(0.33e2 / 0.29622272e8) * np.sqrt(0.17e2) * np.sqrt(0.113e3) * np.sqrt(0.13e2) * np.sqrt(0.3e1) * np.sqrt(0.5e1) * np.sqrt(0.23e2) * np.sqrt(0.29e2) * ((4712 * t7502 - 33136 * t7534 + 100016 * t7532 - 168112 * t7530 + 170240 * t7528 - 104272 * t7526 + 36176 * t7524 - 5776 * t7516 + 152) * np.exp((-14*1j) * phi2) + (t7537 + t7540) * np.exp((-2*1j) * (t7522 + t7518)) + (t7538 - t7541) * np.exp((-2*1j) * (t7521 + t7518)) + (t7539 - t7542) * np.exp((-2*1j) * (t7520 + t7518)) + (t7537 - t7540) * np.exp((2*1j) * (t7522 + t7519)) + (t7538 + t7541) * np.exp((2*1j) * (t7521 + t7519)) + (t7539 + t7542) * np.exp((2*1j) * (t7520 + t7519)))

        if Bindx == 222:
            t7567 = np.cos(phi)
            t7566 = t7567 ** 2
            t7574 = t7567 * t7566
            t7577 = t7574 ** 2
            t7578 = t7567 * t7577
            t7585 = t7578 ** 2
            t7553 = t7567 * t7585
            t7583 = t7577 ** 2
            t7555 = t7567 * t7583
            t7575 = t7566 ** 2
            t7576 = t7567 * t7575
            t7581 = t7576 ** 2
            t7557 = t7567 * t7581
            t7579 = t7575 ** 2
            t7559 = t7567 * t7579
            t7595 = -2604 * t7553 - 29036 * t7555 - 10556 * t7557 + 81796 * t7559 + 1260 * t7567 + 7084 * t7574 - 30212 * t7576 - 17732 * t7578
            t7552 = t7579 ** 2
            t7594 = -136 + 248 * t7552 - 4624 * t7566 + 2912 * t7575 + 48048 * t7577 - 48048 * t7579 - 48048 * t7581 + 37856 * t7583 + 11792 * t7585
            t7593 = 113 * t7552 - 10170 * t7566 + 10170 * t7585 - 113 + 226226 * t7581 - 226226 * t7577 + 102830 * t7583 - 102830 * t7575
            t7592 = -1582 * t7553 - 39550 * t7555 + 1582 * t7567 + 39550 * t7574 - 185094 * t7557 + 185094 * t7576 - 161590 * t7559 + 161590 * t7578
            t7591 = 72540 * t7552 + 98280 * t7566 + 687960 * t7575 - 3963960 * t7577 + 5559840 * t7579 - 978120 * t7581 - 2709720 * t7583 + 1249560 * t7585 - 16380
            t7590 = -507780 * t7553 - 638820 * t7555 + 5061420 * t7557 - 5740020 * t7559 + 58500 * t7567 - 709020 * t7574 + 1677780 * t7576 + 797940 * t7578
            t7589 = -5450172 * t7553 + 25492740 * t7555 - 45133452 * t7557 + 34032180 * t7559 - 577668 * t7567 + 4646460 * t7574 - 9117108 * t7576 - 3892980 * t7578
            t7588 = 1557192 * t7552 + 1506960 * t7566 - 13060320 * t7575 + 42898128 * t7577 - 67813200 * t7579 + 53547312 * t7581 - 17078880 * t7583 - 1506960 * t7585 - 50232
            t7573 = 2 * phi1
            t7572 = 4 * phi1
            t7571 = 6 * phi1
            t7570 = 8 * phi1
            t7569 = -7 * phi2
            t7568 = 7 * phi2
            tfunc[..., c] = (0.11e2 / 0.473956352e9) * np.sqrt(0.31e2) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.5e1) * np.sqrt(0.29e2) * np.sqrt(0.113e3) * ((133722 + 4145382 * t7552 - 29151396 * t7585 + 87989076 * t7583 - 147896532 * t7581 + 149768640 * t7579 - 91733292 * t7577 + 31825836 * t7575 - 5081436 * t7566) * np.exp((-14*1j) * phi2) + (-t7592 + t7593) * np.exp((-2*1j) * (t7570 + t7568)) + (t7592 + t7593) * np.exp((2*1j) * (t7570 + t7569)) + (t7588 - t7589) * np.exp((-2*1j) * (t7573 + t7568)) + (-t7590 + t7591) * np.exp((-2*1j) * (t7572 + t7568)) + (t7594 - t7595) * np.exp((-2*1j) * (t7571 + t7568)) + (t7588 + t7589) * np.exp((2*1j) * (t7573 + t7569)) + (t7590 + t7591) * np.exp((2*1j) * (t7572 + t7569)) + (t7594 + t7595) * np.exp((2*1j) * (t7571 + t7569)))

        if Bindx == 223:
            t7618 = np.cos(phi)
            t7617 = t7618 ** 2
            t7625 = t7617 ** 2
            t7629 = t7625 ** 2
            t7603 = t7629 ** 2
            t7640 = -620 * t7603
            t7639 = -6200 * t7603
            t7638 = 30380 * t7603
            t7624 = t7618 * t7617
            t7627 = t7624 ** 2
            t7628 = t7618 * t7627
            t7635 = t7628 ** 2
            t7633 = t7627 ** 2
            t7626 = t7618 * t7625
            t7631 = t7626 ** 2
            t7623 = 4 * phi1
            t7622 = 8 * phi1
            t7621 = 12 * phi1
            t7620 = -13 * phi2
            t7619 = 13 * phi2
            t7610 = t7618 * t7629
            t7608 = t7618 * t7631
            t7606 = t7618 * t7633
            t7604 = t7618 * t7635
            tfunc[..., c] = (0.33e2 / 0.59244544e8*1j) * np.sqrt(0.29e2) * np.sqrt(0.23e2) * np.sqrt(0.3e1) * np.sqrt(0.13e2) * np.sqrt(0.113e3) * np.sqrt(0.17e2) * np.sqrt(0.2e1) * np.sqrt((1 + t7618)) * ((-47120 * t7603 + 47120 * t7604 - 74480 * t7625 + 74480 * t7624 + 4560 * t7617 - 4560 * t7618 + 1010800 * t7631 - 1010800 * t7610 - 798000 * t7629 + 798000 * t7628 - 734160 * t7633 + 734160 * t7608 + 351120 * t7627 - 351120 * t7626 + 287280 * t7635 - 287280 * t7606) * np.exp((-13*1j) * phi2) + (t7638 + 68355 * t7604 - 126175 * t7635 - 370685 * t7606 + 161945 * t7633 + 831775 * t7608 + 19845 * t7631 - 991025 * t7610 - 238875 * t7629 + 667625 * t7628 + 232995 * t7627 - 249655 * t7626 - 94325 * t7625 + 47285 * t7624 + 14455 * t7617 - 3675 * t7618 - 245) * np.exp((-1*1j) * (t7623 + t7619)) + (t7639 - 34100 * t7604 - 50700 * t7635 + 51740 * t7606 + 213380 * t7633 + 109020 * t7608 - 250140 * t7631 - 306900 * t7610 + 61380 * t7629 + 260260 * t7628 + 74140 * t7627 - 89580 * t7626 - 51700 * t7625 + 9140 * t7624 + 10380 * t7617 + 420 * t7618 - 540) * np.exp((-1*1j) * (t7622 + t7619)) + (t7638 - 129115 * t7604 + 71295 * t7635 + 425565 * t7606 - 634305 * t7633 - 359415 * t7608 + 1211035 * t7631 - 239855 * t7610 - 990045 * t7629 + 561295 * t7628 + 339325 * t7627 - 322665 * t7626 - 21315 * t7625 + 68355 * t7624 - 6615 * t7617 - 4165 * t7618 + 245) * np.exp((1j) * (t7623 + t7620)) + (t7639 + 46500 * t7604 - 131300 * t7635 + 130260 * t7606 + 134860 * t7633 - 457260 * t7608 + 316140 * t7631 + 240900 * t7610 - 486420 * t7629 + 164780 * t7628 + 169620 * t7627 - 154180 * t7626 + 12900 * t7625 + 29660 * t7624 - 10140 * t7617 - 660 * t7618 + 540) * np.exp((1j) * (t7622 + t7620)) + (t7640 - 5425 * t7604 - 19155 * t7635 - 31129 * t7606 - 8099 * t7633 + 55419 * t7608 + 89089 * t7631 + 29315 * t7610 - 63063 * t7629 - 77363 * t7628 - 17017 * t7627 + 27573 * t7626 + 22295 * t7625 + 3241 * t7624 - 3189 * t7617 - 1631 * t7618 - 241) * np.exp((-1*1j) * (t7621 + t7619)) + (t7640 + 6665 * t7604 - 31245 * t7635 + 81529 * t7606 - 120757 * t7633 + 73437 * t7608 + 71071 * t7631 - 189475 * t7610 + 155727 * t7629 - 15301 * t7628 - 79079 * t7627 + 68523 * t7626 - 18655 * t7625 - 6881 * t7624 + 6933 * t7617 - 2113 * t7618 + 241) * np.exp((1j) * (t7621 + t7620))) * ((1 - t7618) ** (-0.1e1 / 0.2e1))

        if Bindx == 224:
            t7665 = np.cos(phi)
            t7664 = t7665 ** 2
            t7673 = t7664 ** 2
            t7677 = t7673 ** 2
            t7650 = t7677 ** 2
            t7689 = 565 * t7650
            t7688 = 1240 * t7650
            t7687 = 362700 * t7650
            t7686 = 7785960 * t7650
            t7672 = t7665 * t7664
            t7675 = t7672 ** 2
            t7676 = t7665 * t7675
            t7683 = t7676 ** 2
            t7681 = t7675 ** 2
            t7674 = t7665 * t7673
            t7679 = t7674 ** 2
            t7671 = 4 * phi1
            t7670 = 8 * phi1
            t7669 = 12 * phi1
            t7668 = 16 * phi1
            t7667 = -13 * phi2
            t7666 = 13 * phi2
            t7657 = t7665 * t7677
            t7655 = t7665 * t7679
            t7653 = t7665 * t7681
            t7651 = t7665 * t7683
            tfunc[..., c] = (0.11e2 / 0.236978176e9*1j) * np.sqrt(0.31e2) * np.sqrt(0.113e3) * np.sqrt(0.29e2) * np.sqrt(0.3e1) * np.sqrt((1 + t7665)) * ((1 - t7665) ** (-0.1e1 / 0.2e1)) * ((t7689 + 6780 * t7651 + 36160 * t7683 - 484770 * t7677 + 36160 * t7664 + 6780 * t7665 + 565 - 323180 * t7657 - 323180 * t7676 + 110740 * t7653 + 110740 * t7672 + 205660 * t7681 + 205660 * t7655 + 205660 * t7674 + 205660 * t7673) * np.exp((-1*1j) * (t7668 + t7666)) + (-444625650 * t7679 + 444625650 * t7657 + 351020250 * t7677 - 351020250 * t7676 + 322938630 * t7681 - 322938630 * t7655 - 154448910 * t7675 + 154448910 * t7674 - 126367290 * t7683 + 126367290 * t7653 + 32761890 * t7673 - 32761890 * t7672 + 20726910 * t7650 - 20726910 * t7651 - 2005830 * t7664 + 2005830 * t7665) * np.exp((-13*1j) * phi2) + (t7689 - 7910 * t7651 + 50850 * t7683 - 50850 * t7664 + 7910 * t7665 - 565 + 1131130 * t7679 - 1131130 * t7675 - 925470 * t7655 + 925470 * t7674 - 807950 * t7657 + 807950 * t7676 + 514150 * t7681 - 514150 * t7673 - 197750 * t7653 + 197750 * t7672) * np.exp((1j) * (t7668 + t7667)) + (17518410 * t7651 - 95001270 * t7653 + 213172050 * t7655 - 253985550 * t7657 + 3704610 * t7664 - 941850 * t7665 + 12118470 * t7672 - 24174150 * t7673 - 63983010 * t7674 + 59713290 * t7675 + 171102750 * t7676 - 61220250 * t7677 + 5085990 * t7679 + 41504190 * t7681 - 32336850 * t7683 + t7686 - 62790) * np.exp((-1*1j) * (t7671 + t7666)) + (1994850 * t7651 - 3026790 * t7653 - 6377670 * t7655 + 17953650 * t7657 - 607230 * t7664 - 24570 * t7665 - 534690 * t7672 + 3024450 * t7673 + 5240430 * t7674 - 4337190 * t7675 - 15225210 * t7676 - 3590730 * t7677 + 14633190 * t7679 - 12482730 * t7681 + 2965950 * t7683 + 31590 + t7687) * np.exp((-1*1j) * (t7670 + t7666)) + (-33090330 * t7651 + 109066230 * t7653 - 92112930 * t7655 - 61471410 * t7657 - 1695330 * t7664 - 1067430 * t7665 + 17518410 * t7672 - 5462730 * t7673 - 82694430 * t7674 + 86964150 * t7675 + 143851890 * t7676 - 253734390 * t7677 + 310370970 * t7679 - 162563310 * t7681 + 18271890 * t7683 + t7686 + 62790) * np.exp((1j) * (t7671 + t7667)) + (-2720250 * t7651 - 7620210 * t7653 + 26749710 * t7655 - 14092650 * t7657 + 593190 * t7664 + 38610 * t7665 - 1735110 * t7672 - 754650 * t7673 + 9019530 * t7674 - 9922770 * t7675 - 9639630 * t7676 + 28455570 * t7677 - 18494190 * t7679 - 7889310 * t7681 + 7681050 * t7683 - 31590 + t7687) * np.exp((1j) * (t7670 + t7667)) + (t7688 + 10850 * t7651 + 38310 * t7683 + 62258 * t7653 + 16198 * t7681 + 482 - 110838 * t7655 - 178178 * t7679 - 58630 * t7657 + 126126 * t7677 + 154726 * t7676 + 34034 * t7675 - 55146 * t7674 - 44590 * t7673 - 6482 * t7672 + 6378 * t7664 + 3262 * t7665) * np.exp((-1*1j) * (t7669 + t7666)) + (t7688 - 13330 * t7651 + 62490 * t7683 - 163058 * t7653 + 241514 * t7681 - 482 - 146874 * t7655 - 142142 * t7679 + 378950 * t7657 - 311454 * t7677 + 30602 * t7676 + 158158 * t7675 - 137046 * t7674 + 37310 * t7673 + 13762 * t7672 - 13866 * t7664 + 4226 * t7665) * np.exp((1j) * (t7669 + t7667)))

        if Bindx == 225:
            t7712 = np.cos(phi)
            t7711 = t7712 ** 2
            t7716 = t7712 * t7711
            t7719 = t7716 ** 2
            t7720 = t7712 * t7719
            t7727 = t7720 ** 2
            t7698 = t7712 * t7727
            t7725 = t7719 ** 2
            t7700 = t7712 * t7725
            t7717 = t7711 ** 2
            t7718 = t7712 * t7717
            t7723 = t7718 ** 2
            t7702 = t7712 * t7723
            t7721 = t7717 ** 2
            t7704 = t7712 * t7721
            t7735 = -40455 * t7698 - 269381 * t7700 + 308217 * t7702 + 383955 * t7704 - 7303 * t7712 + 35259 * t7716 + 98553 * t7718 - 512941 * t7720
            t7734 = -269700 * t7698 + 67860 * t7700 + 1468380 * t7702 - 2280300 * t7704 + 6780 * t7712 - 34540 * t7716 - 170020 * t7718 + 1211540 * t7720
            t7733 = -660765 * t7698 + 2905945 * t7700 - 5004125 * t7702 + 4170145 * t7704 - 2205 * t7712 + 20825 * t7716 + 201635 * t7718 - 1631455 * t7720
            t7697 = t7721 ** 2
            t7732 = 4495 * t7697 + 9528 * t7711 - 129220 * t7717 + 216216 * t7719 + 265122 * t7721 - 664664 * t7723 + 151788 * t7725 + 149640 * t7727 + 1191
            t7731 = 44950 * t7697 - 35520 * t7711 + 299400 * t7717 - 855360 * t7719 + 642180 * t7721 + 855360 * t7723 - 1462520 * t7725 + 510400 * t7727 + 1110
            t7730 = -220255 * t7697 - 68600 * t7711 + 639940 * t7717 - 2381400 * t7719 + 4235070 * t7721 - 3592680 * t7723 + 988820 * t7725 + 397880 * t7727 + 1225
            t7715 = 2 * phi1
            t7714 = -3 * phi2
            t7713 = 3 * phi2
            tfunc[..., c] = -(0.33e2 / 0.29622272e8) * np.sqrt(0.2e1) * np.sqrt(0.17e2) * np.sqrt(0.113e3) * np.sqrt(0.23e2) * np.sqrt(0.13e2) * np.sqrt(0.3e1) * ((1140 + 341620 * t7697 - 2115840 * t7727 + 5522160 * t7725 - 7831040 * t7723 + 6463800 * t7721 - 3064320 * t7719 + 755440 * t7717 - 72960 * t7711) * np.exp((-12*1j) * phi2) + (t7730 + t7733) * np.exp((-4*1j) * (phi1 + t7713)) + (t7731 - t7734) * np.exp((-4*1j) * (t7715 + t7713)) + (t7730 - t7733) * np.exp((4*1j) * (phi1 + t7714)) + (t7731 + t7734) * np.exp((4*1j) * (t7715 + t7714)) + (t7732 - t7735) * np.exp((-12*1j) * (phi1 + phi2)) + (t7732 + t7735) * np.exp((12*1j) * (phi1 - phi2)))

        if Bindx == 226:
            t7760 = np.cos(phi)
            t7759 = t7760 ** 2
            t7766 = t7759 ** 2
            t7770 = t7766 ** 2
            t7745 = t7770 ** 2
            t7765 = t7760 * t7759
            t7768 = t7765 ** 2
            t7774 = t7768 ** 2
            t7769 = t7760 * t7768
            t7776 = t7769 ** 2
            t7786 = 16385 * t7745 + 1048640 * t7759 - 14058330 * t7770 + 1048640 * t7776 + 16385 + 5964140 * t7766 + 5964140 * t7774
            t7767 = t7760 * t7766
            t7772 = t7767 ** 2
            t7785 = 35960 * t7745 + 76224 * t7759 - 1033760 * t7766 + 1729728 * t7768 + 2120976 * t7770 - 5317312 * t7772 + 1214304 * t7774 + 1197120 * t7776 + 9528
            t7746 = t7760 * t7776
            t7748 = t7760 * t7774
            t7750 = t7760 * t7772
            t7752 = t7760 * t7770
            t7784 = -323640 * t7746 - 2155048 * t7748 + 2465736 * t7750 + 3071640 * t7752 - 58424 * t7760 + 282072 * t7765 + 788424 * t7767 - 4103528 * t7769
            t7783 = 9372220 * t7752 + 9372220 * t7769 - 5964140 * t7750 - 5964140 * t7767 - 3211460 * t7748 - 3211460 * t7765 - 196620 * t7746 - 196620 * t7760
            t7782 = -63109800 * t7746 + 15879240 * t7748 + 343600920 * t7750 - 533590200 * t7752 + 1586520 * t7760 - 8082360 * t7765 - 39784680 * t7767 + 283500360 * t7769
            t7781 = -677378520 * t7746 + 2979008760 * t7748 - 5129943000 * t7750 + 4274994360 * t7752 - 2260440 * t7760 + 21348600 * t7765 + 206704680 * t7767 - 1672474440 * t7769
            t7780 = 10518300 * t7745 - 8311680 * t7759 + 70059600 * t7766 + 150270120 * t7770 - 342229680 * t7774 + 119433600 * t7776 + 259740 + 200154240 * t7772 - 200154240 * t7768
            t7779 = 225792840 * t7745 + 70324800 * t7759 - 656029920 * t7766 + 2441275200 * t7768 - 4341551760 * t7770 + 3683010240 * t7772 - 1013681760 * t7774 - 407883840 * t7776 - 1255800
            t7764 = 2 * phi1
            t7763 = 4 * phi1
            t7762 = -3 * phi2
            t7761 = 3 * phi2
            tfunc[..., c] = (0.11e2 / 0.473956352e9) * np.sqrt(0.3e1) * np.sqrt(0.113e3) * np.sqrt(0.31e2) * ((2005830 + 601080390 * t7745 - 3722820480 * t7776 + 9716240520 * t7774 - 13778714880 * t7772 + 11373056100 * t7770 - 5391671040 * t7768 + 1329196680 * t7766 - 128373120 * t7759) * np.exp((-12*1j) * phi2) + (-t7783 + t7786) * np.exp((-4*1j) * (t7763 + t7761)) + (t7783 + t7786) * np.exp((4*1j) * (t7763 + t7762)) + (t7779 - t7781) * np.exp((-4*1j) * (phi1 + t7761)) + (t7780 - t7782) * np.exp((-4*1j) * (t7764 + t7761)) + (t7779 + t7781) * np.exp((4*1j) * (phi1 + t7762)) + (t7780 + t7782) * np.exp((4*1j) * (t7764 + t7762)) + (-t7784 + t7785) * np.exp((-12*1j) * (phi1 + phi2)) + (t7784 + t7785) * np.exp((12*1j) * (phi1 - phi2)))

        if Bindx == 227:
            t7810 = np.cos(phi)
            t7809 = t7810 ** 2
            t7817 = t7809 ** 2
            t7821 = t7817 ** 2
            t7829 = t7821 ** 2
            t7794 = t7810 * t7829
            t7816 = t7810 * t7809
            t7819 = t7816 ** 2
            t7820 = t7810 * t7819
            t7827 = t7820 ** 2
            t7796 = t7810 * t7827
            t7825 = t7819 ** 2
            t7798 = t7810 * t7825
            t7818 = t7810 * t7817
            t7823 = t7818 ** 2
            t7800 = t7810 * t7823
            t7802 = t7810 * t7821
            t7836 = 3596 * t7794 + 95236 * t7796 - 48132 * t7798 - 364156 * t7800 + 473044 * t7802 - 2640 * t7810 + 30668 * t7816 - 62348 * t7818 - 125268 * t7820
            t7835 = 2468 * t7809 + 43272 * t7817 - 224588 * t7819 + 286286 * t7821 + 94380 * t7823 - 354640 * t7825 + 123772 * t7827 + 29667 * t7829 - 617
            t7834 = -2640 * t7809 + 77920 * t7817 - 520400 * t7819 + 1390840 * t7821 - 1634160 * t7823 + 605440 * t7825 + 280720 * t7827 - 197780 * t7829 + 60
            t7833 = -5236 * t7809 + 93016 * t7817 - 696388 * t7819 + 2441978 * t7821 - 4485404 * t7823 + 4480784 * t7825 - 2313388 * t7827 + 484561 * t7829 + 77
            t7832 = 35960 * t7794 + 296960 * t7796 - 1191520 * t7798 + 1374720 * t7800 - 398640 * t7802 + 3960 * t7810 - 56320 * t7816 + 244640 * t7818 - 309760 * t7820
            t7831 = -176204 * t7794 + 471772 * t7796 + 186788 * t7798 - 2025380 * t7800 + 2969932 * t7802 + 4592 * t7810 - 102956 * t7816 + 677740 * t7818 - 2006284 * t7820
            t7815 = 4 * phi1
            t7814 = 8 * phi1
            t7813 = 12 * phi1
            t7812 = -11 * phi2
            t7811 = 11 * phi2
            tfunc[..., c] = (-0.33e2 / 0.59244544e8*1j) * np.sqrt(0.23e2) * np.sqrt(0.5e1) * np.sqrt(0.3e1) * np.sqrt(0.13e2) * np.sqrt(0.113e3) * np.sqrt(0.17e2) * np.sqrt(0.7e1) * np.sqrt(0.2e1) * ((1 + t7810) ** (-0.1e1 / 0.2e1)) * ((1 - t7810) ** (-0.1e1 / 0.2e1)) * ((4560 * t7810 + 273296 * t7794 - 1727936 * t7796 + 4632960 * t7798 - 6815680 * t7800 + 5931040 * t7802 - 3053376 * t7820 + 870656 * t7818 - 115520 * t7816) * np.exp((-11*1j) * phi2) + (t7831 - t7833) * np.exp((-1*1j) * (t7815 + t7811)) + (t7832 - t7834) * np.exp((-1*1j) * (t7814 + t7811)) + (t7831 + t7833) * np.exp((1j) * (t7815 + t7812)) + (t7832 + t7834) * np.exp((1j) * (t7814 + t7812)) + (t7835 + t7836) * np.exp((-1*1j) * (t7813 + t7811)) + (-t7835 + t7836) * np.exp((1j) * (t7813 + t7812)))

        if Bindx == 228:
            t7862 = np.cos(phi)
            t7861 = t7862 ** 2
            t7870 = t7861 ** 2
            t7869 = t7862 * t7861
            t7872 = t7869 ** 2
            t7874 = t7870 ** 2
            t7871 = t7862 * t7870
            t7876 = t7871 ** 2
            t7878 = t7872 ** 2
            t7873 = t7862 * t7872
            t7880 = t7873 ** 2
            t7882 = t7874 ** 2
            t7891 = 4936 * t7861 + 86544 * t7870 - 449176 * t7872 + 572572 * t7874 + 188760 * t7876 - 709280 * t7878 + 247544 * t7880 + 59334 * t7882 - 1234
            t7846 = t7862 * t7882
            t7848 = t7862 * t7880
            t7850 = t7862 * t7878
            t7852 = t7862 * t7876
            t7854 = t7862 * t7874
            t7890 = 7192 * t7846 + 190472 * t7848 - 96264 * t7850 - 728312 * t7852 + 946088 * t7854 - 5280 * t7862 + 61336 * t7869 - 124696 * t7871 - 250536 * t7873
            t7889 = -170404 * t7861 - 550536 * t7870 + 1192828 * t7872 + 937222 * t7874 - 1874444 * t7876 + 432564 * t7880 + 36047 * t7882 - 3277
            t7888 = 3277 * t7846 + 170404 * t7848 + 550536 * t7850 - 1192828 * t7852 - 937222 * t7854 - 36047 * t7862 - 432564 * t7869 + 1874444 * t7873
            t7887 = 154440 * t7861 - 4558320 * t7870 + 30443400 * t7872 - 81364140 * t7874 + 95598360 * t7876 - 35418240 * t7878 - 16422120 * t7880 + 11570130 * t7882 - 3510
            t7886 = -1341912 * t7861 + 23838672 * t7870 - 178474296 * t7872 + 625844076 * t7874 - 1149544968 * t7876 + 1148360928 * t7878 - 592888296 * t7880 + 124186062 * t7882 + 19734
            t7885 = 2103660 * t7846 + 17372160 * t7848 - 69703920 * t7850 + 80421120 * t7852 - 23320440 * t7854 + 231660 * t7862 - 3294720 * t7869 + 14311440 * t7871 - 18120960 * t7873
            t7884 = 45158568 * t7846 - 120908424 * t7848 - 47871096 * t7850 + 519075960 * t7852 - 761151144 * t7854 - 1176864 * t7862 + 26386152 * t7869 - 173695080 * t7871 + 514181928 * t7873
            t7868 = 4 * phi1
            t7867 = 8 * phi1
            t7866 = 12 * phi1
            t7865 = 16 * phi1
            t7864 = -11 * phi2
            t7863 = 11 * phi2
            tfunc[..., c] = (0.11e2 / 0.236978176e9*1j) * np.sqrt(0.7e1) * np.sqrt(0.31e2) * np.sqrt(0.113e3) * np.sqrt(0.5e1) * np.sqrt(0.3e1) * ((1 + t7862) ** (-0.1e1 / 0.2e1)) * ((1 - t7862) ** (-0.1e1 / 0.2e1)) * ((120216078 * t7846 - 760075848 * t7848 + 2037923280 * t7850 - 2998047240 * t7852 + 2608916220 * t7854 - 1343103768 * t7873 + 382979808 * t7871 - 50814360 * t7869 + 2005830 * t7862) * np.exp((-11*1j) * phi2) + (t7888 + t7889) * np.exp((-1*1j) * (t7865 + t7863)) + (t7888 - t7889) * np.exp((1j) * (t7865 + t7864)) + (t7884 + t7886) * np.exp((-1*1j) * (t7868 + t7863)) + (t7885 + t7887) * np.exp((-1*1j) * (t7867 + t7863)) + (t7884 - t7886) * np.exp((1j) * (t7868 + t7864)) + (t7885 - t7887) * np.exp((1j) * (t7867 + t7864)) + (t7890 + t7891) * np.exp((-1*1j) * (t7866 + t7863)) + (t7890 - t7891) * np.exp((1j) * (t7866 + t7864)))

        if Bindx == 229:
            t7914 = np.cos(phi)
            t7913 = t7914 ** 2
            t7921 = t7913 ** 2
            t7925 = t7921 ** 2
            t7899 = t7925 ** 2
            t7920 = t7914 * t7913
            t7923 = t7920 ** 2
            t7922 = t7914 * t7921
            t7927 = t7922 ** 2
            t7929 = t7923 ** 2
            t7924 = t7914 * t7923
            t7931 = t7924 ** 2
            t7939 = 16182 * t7899 + 23436 * t7913 - 8424 * t7921 - 447876 * t7923 + 1189188 * t7925 - 787644 * t7927 - 326664 * t7929 + 343476 * t7931 - 1674
            t7900 = t7914 * t7931
            t7902 = t7914 * t7929
            t7904 = t7914 * t7927
            t7906 = t7914 * t7925
            t7938 = -121365 * t7900 - 346869 * t7902 + 1146015 * t7904 - 606177 * t7906 + 3429 * t7914 - 81819 * t7920 + 368433 * t7922 - 361647 * t7924
            t7937 = 161820 * t7899 - 31320 * t7913 + 190680 * t7921 - 88440 * t7923 - 1663200 * t7925 + 4298360 * t7927 - 3902040 * t7929 + 1033560 * t7931 + 580
            t7936 = -792918 * t7899 - 55692 * t7913 + 670152 * t7921 - 2900604 * t7923 + 5610780 * t7925 - 4516932 * t7927 - 10584 * t7929 + 1995084 * t7931 + 714
            t7935 = -809100 * t7900 + 1237140 * t7902 + 1213380 * t7904 - 3611740 * t7906 - 6260 * t7914 + 126060 * t7920 - 902340 * t7922 + 2752860 * t7924
            t7934 = -1982295 * t7900 + 8248905 * t7902 - 13703067 * t7904 + 11560101 * t7906 + 4935 * t7914 - 136185 * t7920 + 1229067 * t7922 - 5221461 * t7924
            t7919 = 2 * phi1
            t7918 = 4 * phi1
            t7917 = 6 * phi1
            t7916 = -5 * phi2
            t7915 = 5 * phi2
            tfunc[..., c] = -(0.11e2 / 0.29622272e8) * np.sqrt(0.7e1) * np.sqrt(0.17e2) * np.sqrt(0.113e3) * np.sqrt(0.13e2) * np.sqrt(0.3e1) * np.sqrt(0.23e2) * np.sqrt(0.5e1) * ((1229832 * t7899 - 6744240 * t7931 + 15335280 * t7929 - 18557680 * t7927 + 760 + 12719360 * t7925 - 4828432 * t7923 + 910480 * t7921 - 65360 * t7913) * np.exp((-10*1j) * phi2) + (t7934 + t7936) * np.exp((-2*1j) * (t7919 + t7915)) + (-t7935 + t7937) * np.exp((-2*1j) * (t7918 + t7915)) + (-t7938 + t7939) * np.exp((-2*1j) * (t7917 + t7915)) + (-t7934 + t7936) * np.exp((2*1j) * (t7919 + t7916)) + (t7935 + t7937) * np.exp((2*1j) * (t7918 + t7916)) + (t7938 + t7939) * np.exp((2*1j) * (t7917 + t7916)))

        if Bindx == 230:
            t7964 = np.cos(phi)
            t7963 = t7964 ** 2
            t7971 = t7964 * t7963
            t7974 = t7971 ** 2
            t7975 = t7964 * t7974
            t7982 = t7975 ** 2
            t7950 = t7964 * t7982
            t7980 = t7974 ** 2
            t7952 = t7964 * t7980
            t7972 = t7963 ** 2
            t7973 = t7964 * t7972
            t7978 = t7973 ** 2
            t7954 = t7964 * t7978
            t7976 = t7972 ** 2
            t7956 = t7964 * t7976
            t7992 = -53940 * t7950 - 154164 * t7952 + 509340 * t7954 - 269412 * t7956 + 1524 * t7964 - 36364 * t7971 + 163748 * t7973 - 160732 * t7975
            t7949 = t7976 ** 2
            t7991 = 7192 * t7949 + 10416 * t7963 - 3744 * t7972 - 199056 * t7974 + 528528 * t7976 - 350064 * t7978 - 145184 * t7980 + 152656 * t7982 - 744
            t7990 = 3277 * t7949 - 3277 + 937222 * t7974 - 937222 * t7978 - 255606 * t7972 + 255606 * t7980 + 137634 * t7982 - 137634 * t7963
            t7989 = -32770 * t7950 + 32770 * t7964 + 937222 * t7956 - 937222 * t7975 - 294930 * t7952 + 294930 * t7971 + 255606 * t7954 - 255606 * t7973
            t7988 = -10518300 * t7950 + 16082820 * t7952 + 15773940 * t7954 - 46952620 * t7956 - 81380 * t7964 + 1638780 * t7971 - 11730420 * t7973 + 35787180 * t7975
            t7987 = -112896420 * t7950 + 469794780 * t7952 - 780422292 * t7954 + 658375276 * t7956 + 281060 * t7964 - 7756060 * t7971 + 69998292 * t7973 - 297374636 * t7975
            t7986 = 2103660 * t7949 - 407160 * t7963 + 2478840 * t7972 - 1149720 * t7974 - 21621600 * t7976 + 55878680 * t7978 - 50726520 * t7980 + 13436280 * t7982 + 7540
            t7985 = 45158568 * t7949 + 3171792 * t7963 - 38166752 * t7972 + 165196304 * t7974 - 319547280 * t7976 + 257250032 * t7978 + 602784 * t7980 - 113624784 * t7982 - 40664
            t7970 = 2 * phi1
            t7969 = 4 * phi1
            t7968 = 6 * phi1
            t7967 = 8 * phi1
            t7966 = -5 * phi2
            t7965 = 5 * phi2
            tfunc[..., c] = (0.33e2 / 0.473956352e9) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.5e1) * np.sqrt(0.113e3) * np.sqrt(0.7e1) * np.sqrt(0.31e2) * ((1243317440 * t7976 - 471979228 * t7974 + 88999420 * t7972 - 6388940 * t7963 + 120216078 * t7949 - 659249460 * t7982 + 1499023620 * t7980 - 1814013220 * t7978 + 74290) * np.exp((-10*1j) * phi2) + (-t7989 + t7990) * np.exp((-2*1j) * (t7967 + t7965)) + (t7989 + t7990) * np.exp((2*1j) * (t7967 + t7966)) + (t7985 - t7987) * np.exp((-2*1j) * (t7970 + t7965)) + (t7986 - t7988) * np.exp((-2*1j) * (t7969 + t7965)) + (t7991 - t7992) * np.exp((-2*1j) * (t7968 + t7965)) + (t7985 + t7987) * np.exp((2*1j) * (t7970 + t7966)) + (t7986 + t7988) * np.exp((2*1j) * (t7969 + t7966)) + (t7991 + t7992) * np.exp((2*1j) * (t7968 + t7966)))

        if Bindx == 231:
            t8016 = np.cos(phi)
            t8015 = t8016 ** 2
            t8022 = t8015 ** 2
            t8021 = t8016 * t8015
            t8024 = t8021 ** 2
            t8026 = t8022 ** 2
            t8023 = t8016 * t8022
            t8028 = t8023 ** 2
            t8030 = t8024 ** 2
            t8025 = t8016 * t8024
            t8032 = t8025 ** 2
            t8034 = t8026 ** 2
            t8041 = 564408 * t8015 - 3006900 * t8022 + 2683512 * t8024 + 13577850 * t8026 - 33575256 * t8028 + 24655644 * t8030 - 2035800 * t8032 - 2839941 * t8034 - 23517
            t8040 = -697600 * t8015 + 7675920 * t8022 - 33512640 * t8024 + 65998680 * t8026 - 47583360 * t8028 - 21818160 * t8030 + 48859200 * t8032 - 18932940 * t8034 + 10900
            t8000 = t8016 * t8034
            t8002 = t8016 * t8032
            t8004 = t8016 * t8030
            t8006 = t8016 * t8028
            t8008 = t8016 * t8026
            t8039 = 420732 * t8000 + 6528132 * t8002 - 16157700 * t8004 + 1919268 * t8006 + 22007700 * t8008 - 22464 * t8016 - 666900 * t8021 + 6990516 * t8023 - 21019284 * t8025
            t8038 = 685608 * t8015 - 10596348 * t8022 + 66588648 * t8024 - 215248866 * t8026 + 388443384 * t8028 - 394957836 * t8030 + 211478904 * t8032 - 46385703 * t8034 - 7791
            t8037 = 4207320 * t8000 + 15743520 * t8002 - 90417600 * t8004 + 142498720 * t8006 - 101815120 * t8008 + 18360 * t8016 - 130080 * t8021 - 4018560 * t8023 + 33913440 * t8025
            t8036 = -20615868 * t8000 + 68497884 * t8002 - 61159644 * t8004 - 35399364 * t8006 + 99922956 * t8008 + 98784 * t8016 - 2804172 * t8021 + 21869484 * t8023 - 70410060 * t8025
            t8020 = 4 * phi1
            t8019 = 8 * phi1
            t8018 = -9 * phi2
            t8017 = 9 * phi2
            tfunc[..., c] = (-0.11e2 / 0.59244544e8*1j) * np.sqrt(0.17e2) * np.sqrt(0.226e3) * np.sqrt(0.23e2) * np.sqrt(0.3e1) * np.sqrt(0.5e1) * ((1 + t8016) ** (-0.1e1 / 0.2e1)) * ((1 - t8016) ** (-0.1e1 / 0.2e1)) * ((138320 * t8016 + 31975632 * t8000 - 181539072 * t8002 + 431795520 * t8004 - 555176960 * t8006 + 414525280 * t8008 - 179009792 * t8025 + 41717312 * t8023 - 4426240 * t8021) * np.exp((-9*1j) * phi2) + (t8039 - t8041) * np.exp((-3*1j) * (t8020 + 3 * phi2)) + (t8036 + t8038) * np.exp((-1*1j) * (t8020 + t8017)) + (t8037 - t8040) * np.exp((-1*1j) * (t8019 + t8017)) + (t8036 - t8038) * np.exp((1j) * (t8020 + t8018)) + (t8037 + t8040) * np.exp((1j) * (t8019 + t8018)) + (t8039 + t8041) * np.exp((3*1j) * (t8020 - 3 * phi2)))

        if Bindx == 232:
            t8067 = np.cos(phi)
            t8066 = t8067 ** 2
            t8074 = t8066 ** 2
            t8073 = t8067 * t8066
            t8076 = t8073 ** 2
            t8078 = t8074 ** 2
            t8075 = t8067 * t8074
            t8080 = t8075 ** 2
            t8082 = t8076 ** 2
            t8077 = t8067 * t8076
            t8084 = t8077 ** 2
            t8086 = t8078 ** 2
            t8095 = -9648 * t8066 + 51400 * t8074 - 45872 * t8076 - 232100 * t8078 + 573936 * t8080 - 421464 * t8082 + 34800 * t8084 + 48546 * t8086 + 402
            t8094 = -104864 * t8066 + 39324 * t8074 + 681616 * t8076 - 937222 * t8078 + 511212 * t8082 - 157296 * t8084 - 29493 * t8086 - 3277
            t8051 = t8067 * t8086
            t8053 = t8067 * t8084
            t8055 = t8067 * t8082
            t8057 = t8067 * t8080
            t8059 = t8067 * t8078
            t8093 = 3277 * t8051 + 104864 * t8053 - 39324 * t8055 - 681616 * t8057 + 937222 * t8059 + 29493 * t8067 + 157296 * t8073 - 511212 * t8075
            t8092 = 7192 * t8051 + 111592 * t8053 - 276200 * t8055 + 32808 * t8057 + 376200 * t8059 - 384 * t8067 - 11400 * t8073 + 119496 * t8075 - 359304 * t8077
            t8091 = 2103660 * t8051 + 7871760 * t8053 - 45208800 * t8055 + 71249360 * t8057 - 50907560 * t8059 + 9180 * t8067 - 65040 * t8073 - 2009280 * t8075 + 16956720 * t8077
            t8090 = 348800 * t8066 - 3837960 * t8074 + 16756320 * t8076 - 32999340 * t8078 + 23791680 * t8080 + 10909080 * t8082 - 24429600 * t8084 + 9466470 * t8086 - 5450
            t8089 = 1501808 * t8066 - 23211048 * t8074 + 145860848 * t8076 - 471497516 * t8078 + 850875984 * t8080 - 865145736 * t8082 + 463239504 * t8084 - 101606778 * t8086 - 17066
            t8088 = 45158568 * t8051 - 150042984 * t8053 + 133968744 * t8055 + 77541464 * t8057 - 218878856 * t8059 - 216384 * t8067 + 6142472 * t8073 - 47904584 * t8075 + 154231560 * t8077
            t8072 = 4 * phi1
            t8071 = 8 * phi1
            t8070 = -9 * phi2
            t8069 = 9 * phi2
            t8068 = 16 * phi1
            tfunc[..., c] = (0.33e2 / 0.236978176e9*1j) * np.sqrt(0.3e1) * np.sqrt(0.5e1) * np.sqrt(0.113e3) * np.sqrt(0.31e2) * np.sqrt(0.13e2) * ((1 + t8067) ** (-0.1e1 / 0.2e1)) * ((1 - t8067) ** (-0.1e1 / 0.2e1)) * ((520030 * t8067 + 120216078 * t8051 - 682517088 * t8053 + 1623385080 * t8055 - 2087251840 * t8057 + 1558455620 * t8059 - 673007968 * t8077 + 156841048 * t8075 - 16640960 * t8073) * np.exp((-9*1j) * phi2) + (t8093 - t8094) * np.exp((-1*1j) * (t8068 + t8069)) + (t8093 + t8094) * np.exp((1j) * (t8068 + t8070)) + (t8092 + t8095) * np.exp((-3*1j) * (t8072 + 3 * phi2)) + (t8088 - t8089) * np.exp((-1*1j) * (t8072 + t8069)) + (t8090 + t8091) * np.exp((-1*1j) * (t8071 + t8069)) + (t8088 + t8089) * np.exp((1j) * (t8072 + t8070)) + (-t8090 + t8091) * np.exp((1j) * (t8071 + t8070)) + (t8092 - t8095) * np.exp((3*1j) * (t8072 - 3 * phi2)))

        if Bindx == 233:
            t8118 = np.cos(phi)
            t8117 = t8118 ** 2
            t8122 = t8118 * t8117
            t8125 = t8122 ** 2
            t8126 = t8118 * t8125
            t8133 = t8126 ** 2
            t8104 = t8118 * t8133
            t8131 = t8125 ** 2
            t8106 = t8118 * t8131
            t8123 = t8117 ** 2
            t8124 = t8118 * t8123
            t8129 = t8124 ** 2
            t8108 = t8118 * t8129
            t8127 = t8123 ** 2
            t8110 = t8118 * t8127
            t8141 = -3155490 * t8104 + 793962 * t8106 + 17180046 * t8108 - 26679510 * t8110 + 79326 * t8118 - 404118 * t8122 - 1989234 * t8124 + 14175018 * t8126
            t8140 = -21036600 * t8104 + 54152280 * t8106 - 38034360 * t8108 - 10769000 * t8110 - 81464 * t8118 + 1854552 * t8122 - 11197368 * t8124 + 25095576 * t8126
            t8139 = -51539670 * t8104 + 204496110 * t8106 - 326265030 * t8108 + 267388590 * t8110 + 91434 * t8118 - 2931474 * t8122 + 27776826 * t8124 - 119016786 * t8126
            t8103 = t8127 ** 2
            t8138 = 525915 * t8103 - 415584 * t8117 + 3502980 * t8123 - 10007712 * t8125 + 7513506 * t8127 + 10007712 * t8129 - 17111484 * t8131 + 5971680 * t8133 + 12987
            t8137 = -25769835 * t8103 - 324576 * t8117 + 4565820 * t8123 - 20975136 * t8125 + 33747966 * t8127 + 7032480 * t8129 - 78083460 * t8131 + 79803360 * t8133 + 3381
            t8136 = 5259150 * t8103 + 247824 * t8117 - 3755640 * t8123 + 24131184 * t8125 - 73520172 * t8127 + 110430320 * t8129 - 74987640 * t8131 + 12214800 * t8133 - 3442
            t8121 = 3 * phi1
            t8120 = -2 * phi2
            t8119 = 2 * phi2
            tfunc[..., c] = -(0.11e2 / 0.29622272e8) * np.sqrt(0.17e2) * np.sqrt(0.113e3) * np.sqrt(0.23e2) * np.sqrt(0.5e1) * np.sqrt(0.3e1) * ((39969540 * t8103 - 195979680 * t8133 + 393559920 * t8131 - 414525280 * t8129 + 243168536 * t8127 - 77625184 * t8125 + 12144496 * t8123 - 719264 * t8117 + 6916) * np.exp((-8*1j) * phi2) + (t8136 - t8140) * np.exp((-8*1j) * (phi1 + phi2)) + (t8137 + t8139) * np.exp((-4*1j) * (phi1 + t8119)) + (t8138 - t8141) * np.exp((-4*1j) * (t8121 + t8119)) + (t8137 - t8139) * np.exp((4*1j) * (phi1 + t8120)) + (t8138 + t8141) * np.exp((4*1j) * (t8121 + t8120)) + (t8136 + t8140) * np.exp((8*1j) * (phi1 - phi2)))

        if Bindx == 234:
            t8166 = np.cos(phi)
            t8165 = t8166 ** 2
            t8171 = t8166 * t8165
            t8174 = t8171 ** 2
            t8175 = t8166 * t8174
            t8182 = t8175 ** 2
            t8152 = t8166 * t8182
            t8180 = t8174 ** 2
            t8154 = t8166 * t8180
            t8172 = t8165 ** 2
            t8173 = t8166 * t8172
            t8178 = t8173 ** 2
            t8156 = t8166 * t8178
            t8176 = t8172 ** 2
            t8158 = t8166 * t8176
            t8192 = -215760 * t8152 + 54288 * t8154 + 1174704 * t8156 - 1824240 * t8158 + 5424 * t8166 - 27632 * t8171 - 136016 * t8173 + 969232 * t8175
            t8151 = t8176 ** 2
            t8191 = 35960 * t8151 - 28416 * t8165 + 239520 * t8172 - 684288 * t8174 + 513744 * t8176 + 684288 * t8178 - 1170016 * t8180 + 408320 * t8182 + 888
            t8190 = 16385 * t8151 + 393240 * t8165 - 589860 * t8172 - 1441880 * t8174 + 3244230 * t8176 - 1441880 * t8178 - 589860 * t8180 + 393240 * t8182 + 16385
            t8189 = 1966200 * t8156 + 1966200 * t8173 - 1441880 * t8158 - 1441880 * t8175 - 393240 * t8154 - 393240 * t8171 - 131080 * t8152 - 131080 * t8166
            t8188 = -42073200 * t8152 + 108304560 * t8154 - 76068720 * t8156 - 21538000 * t8158 - 162928 * t8166 + 3709104 * t8171 - 22394736 * t8173 + 50191152 * t8175
            t8187 = 10518300 * t8151 + 495648 * t8165 - 7511280 * t8172 + 48262368 * t8174 - 147040344 * t8176 + 220860640 * t8178 - 149975280 * t8180 + 24429600 * t8182 - 6884
            t8186 = -451585680 * t8152 + 1791775440 * t8154 - 2858703120 * t8156 + 2342833360 * t8158 + 801136 * t8166 - 25685296 * t8171 + 243377904 * t8173 - 1042813744 * t8175
            t8185 = 225792840 * t8151 + 2843904 * t8165 - 40005280 * t8172 + 183782144 * t8174 - 295696464 * t8176 - 61617920 * t8178 + 684159840 * t8180 - 699229440 * t8182 - 29624
            t8170 = 2 * phi1
            t8169 = 3 * phi1
            t8168 = -2 * phi2
            t8167 = 2 * phi2
            tfunc[..., c] = (0.33e2 / 0.947912704e9) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.5e1) * np.sqrt(0.113e3) * np.sqrt(0.31e2) * np.sqrt(0.13e2) * ((-2947232880 * t8182 + 5918535720 * t8180 - 6233822480 * t8178 + 3656880676 * t8176 - 1167363344 * t8174 + 182634536 * t8172 - 10816624 * t8165 + 601080390 * t8151 + 104006) * np.exp((-8*1j) * phi2) + (t8187 - t8188) * np.exp((-8*1j) * (phi1 + phi2)) + (-t8189 + t8190) * np.exp((-8*1j) * (t8170 + phi2)) + (t8185 - t8186) * np.exp((-4*1j) * (phi1 + t8167)) + (t8191 - t8192) * np.exp((-4*1j) * (t8169 + t8167)) + (t8185 + t8186) * np.exp((4*1j) * (phi1 + t8168)) + (t8191 + t8192) * np.exp((4*1j) * (t8169 + t8168)) + (t8187 + t8188) * np.exp((8*1j) * (phi1 - phi2)) + (t8189 + t8190) * np.exp((8*1j) * (t8170 - phi2)))

        if Bindx == 235:
            t8216 = np.cos(phi)
            t8215 = t8216 ** 2
            t8223 = t8215 ** 2
            t8222 = t8216 * t8215
            t8225 = t8222 ** 2
            t8227 = t8223 ** 2
            t8224 = t8216 * t8223
            t8229 = t8224 ** 2
            t8231 = t8225 ** 2
            t8226 = t8216 * t8225
            t8233 = t8226 ** 2
            t8235 = t8227 ** 2
            t8242 = 170040 * t8215 - 2640924 * t8223 + 13620984 * t8225 - 30161274 * t8227 + 29024424 * t8229 - 6153420 * t8231 - 7536984 * t8233 + 3681405 * t8235 - 4251
            t8241 = -239680 * t8215 + 2574544 * t8223 - 7121408 * t8225 - 6378152 * t8227 + 62152640 * t8229 - 112585200 * t8231 + 86136960 * t8233 - 24542700 * t8235 + 2996
            t8240 = 606424 * t8215 - 10521868 * t8223 + 71006488 * t8225 - 240374498 * t8227 + 450355080 * t8229 - 474730620 * t8231 + 263794440 * t8233 - 60129615 * t8235 - 5831
            t8200 = t8216 * t8235
            t8202 = t8216 * t8233
            t8204 = t8216 * t8231
            t8206 = t8216 * t8229
            t8208 = t8216 * t8227
            t8239 = -7012200 * t8200 - 904800 * t8202 + 68752320 * t8204 - 143517920 * t8206 + 131487664 * t8208 + 65272 * t8216 - 1796512 * t8222 + 15524096 * t8224 - 62597920 * t8226
            t8238 = 34359780 * t8200 - 131897220 * t8202 + 194272260 * t8204 - 131591460 * t8206 + 33328428 * t8208 - 17248 * t8216 + 543508 * t8222 - 3862964 * t8224 + 4864916 * t8226
            t8237 = -701220 * t8200 - 4727580 * t8202 + 23128092 * t8204 - 32868732 * t8206 + 16667508 * t8208 - 104832 * t8216 + 1278732 * t8222 - 4345068 * t8224 + 1673100 * t8226
            t8221 = 4 * phi1
            t8220 = 8 * phi1
            t8219 = -7 * phi2
            t8218 = 7 * phi2
            t8217 = 12 * phi1
            tfunc[..., c] = (0.33e2 / 0.59244544e8*1j) * np.sqrt(0.2e1) * np.sqrt(0.17e2) * np.sqrt(0.113e3) * np.sqrt(0.23e2) * np.sqrt(0.5e1) * ((-53292720 * t8200 + 275059200 * t8202 - 589717440 * t8204 + 676898560 * t8206 - 446441632 * t8208 + 168450048 * t8226 - 33971392 * t8224 + 3098368 * t8222 - 82992 * t8216) * np.exp((-7*1j) * phi2) + (t8238 - t8240) * np.exp((-1*1j) * (t8221 + t8218)) + (t8239 + t8241) * np.exp((-1*1j) * (t8220 + t8218)) + (t8238 + t8240) * np.exp((1j) * (t8221 + t8219)) + (t8239 - t8241) * np.exp((1j) * (t8220 + t8219)) + (t8237 - t8242) * np.exp((-1*1j) * (t8217 + t8218)) + (t8237 + t8242) * np.exp((1j) * (t8217 + t8219))) * ((1 + t8216) ** (-0.1e1 / 0.2e1)) * ((1 - t8216) ** (-0.1e1 / 0.2e1))

        if Bindx == 236:
            t8268 = np.cos(phi)
            t8267 = t8268 ** 2
            t8276 = t8267 ** 2
            t8280 = t8276 ** 2
            t8288 = t8280 ** 2
            t8252 = t8268 * t8288
            t8275 = t8268 * t8267
            t8278 = t8275 ** 2
            t8279 = t8268 * t8278
            t8286 = t8279 ** 2
            t8254 = t8268 * t8286
            t8284 = t8278 ** 2
            t8256 = t8268 * t8284
            t8277 = t8268 * t8276
            t8282 = t8277 ** 2
            t8258 = t8268 * t8282
            t8260 = t8268 * t8280
            t8297 = 35960 * t8252 + 242440 * t8254 - 1186056 * t8256 + 1685576 * t8258 - 854744 * t8260 + 5376 * t8268 - 65576 * t8275 + 222824 * t8277 - 85800 * t8279
            t8296 = -262160 * t8267 + 983100 * t8276 - 524320 * t8278 - 1802350 * t8280 + 2883760 * t8282 - 1376340 * t8284 + 114695 * t8288 - 16385
            t8295 = 16385 * t8252 + 262160 * t8254 - 983100 * t8256 + 524320 * t8258 + 1802350 * t8260 - 114695 * t8268 + 1376340 * t8277 - 2883760 * t8279
            t8294 = 8720 * t8267 - 135432 * t8276 + 698512 * t8278 - 1546732 * t8280 + 1488432 * t8282 - 315560 * t8284 - 386512 * t8286 + 188790 * t8288 - 218
            t8293 = -359520 * t8267 + 3861816 * t8276 - 10682112 * t8278 - 9567228 * t8280 + 93228960 * t8282 - 168877800 * t8284 + 129205440 * t8286 - 36814050 * t8288 + 4494
            t8292 = 10518300 * t8252 + 1357200 * t8254 - 103128480 * t8256 + 215276880 * t8258 - 197231496 * t8260 - 97908 * t8268 + 2694768 * t8275 - 23286144 * t8277 + 93896880 * t8279
            t8291 = 3985072 * t8267 - 69143704 * t8276 + 466614064 * t8278 - 1579603844 * t8280 + 2959476240 * t8282 - 3119658360 * t8284 + 1733506320 * t8286 - 395137470 * t8288 - 38318
            t8290 = 225792840 * t8252 - 866753160 * t8254 + 1276646280 * t8256 - 864743880 * t8258 + 219015384 * t8260 - 113344 * t8268 + 3571624 * t8275 - 25385192 * t8277 + 31969448 * t8279
            t8274 = 4 * phi1
            t8273 = 8 * phi1
            t8272 = -7 * phi2
            t8271 = 7 * phi2
            t8270 = 12 * phi1
            t8269 = 16 * phi1
            tfunc[..., c] = (0.33e2 / 0.236978176e9*1j) * np.sqrt(0.5e1) * np.sqrt(0.113e3) * np.sqrt(0.31e2) * np.sqrt(0.13e2) * ((1 + t8268) ** (-0.1e1 / 0.2e1)) * ((1 - t8268) ** (-0.1e1 / 0.2e1)) * ((601080390 * t8252 - 3102350400 * t8254 + 6651332280 * t8256 - 7634634720 * t8258 + 5035346484 * t8260 - 1899922176 * t8279 + 383158104 * t8277 - 34946016 * t8275 + 936054 * t8268) * np.exp((-7*1j) * phi2) + (t8295 + t8296) * np.exp((-1*1j) * (t8269 + t8271)) + (t8295 - t8296) * np.exp((1j) * (t8269 + t8272)) + (t8290 - t8291) * np.exp((-1*1j) * (t8274 + t8271)) + (t8292 - t8293) * np.exp((-1*1j) * (t8273 + t8271)) + (t8290 + t8291) * np.exp((1j) * (t8274 + t8272)) + (t8292 + t8293) * np.exp((1j) * (t8273 + t8272)) + (t8294 + t8297) * np.exp((-1*1j) * (t8270 + t8271)) + (-t8294 + t8297) * np.exp((1j) * (t8270 + t8272)))

        if Bindx == 237:
            t8320 = np.cos(phi)
            t8319 = t8320 ** 2
            t8325 = t8320 * t8319
            t8328 = t8325 ** 2
            t8329 = t8320 * t8328
            t8336 = t8329 ** 2
            t8306 = t8320 * t8336
            t8334 = t8328 ** 2
            t8308 = t8320 * t8334
            t8326 = t8319 ** 2
            t8327 = t8320 * t8326
            t8332 = t8327 ** 2
            t8310 = t8320 * t8332
            t8330 = t8326 ** 2
            t8312 = t8320 * t8330
            t8344 = -241920900 * t8306 + 819409500 * t8308 - 1071825300 * t8310 + 674978700 * t8312 + 12420 * t8320 - 1065820 * t8325 + 26793620 * t8327 - 206382220 * t8329
            t8343 = -36288135 * t8306 + 96898425 * t8308 - 39248235 * t8310 - 111151755 * t8312 - 811785 * t8320 + 12822615 * t8325 - 67315365 * t8327 + 145094235 * t8329
            t8305 = t8330 ** 2
            t8342 = 8064030 * t8305 - 1237860 * t8319 - 466440 * t8326 + 51505740 * t8328 - 193590540 * t8330 + 286340340 * t8332 - 180297000 * t8334 + 29654820 * t8336 + 26910
            t8341 = -592706205 * t8306 + 2262480675 * t8308 - 3468111465 * t8310 + 2719929975 * t8312 + 658413 * t8320 - 23898035 * t8325 + 249456697 * t8327 - 1147810055 * t8329
            t8340 = 80640300 * t8305 + 3837320 * t8319 - 53355400 * t8326 + 279605480 * t8328 - 693462880 * t8330 + 833432600 * t8332 - 383019000 * t8334 - 67633800 * t8336 - 44620
            t8339 = -395137470 * t8305 + 334180 * t8319 - 8606360 * t8326 + 95133108 * t8328 - 503971860 * t8330 + 1370454540 * t8332 - 1960303800 * t8334 + 1402100700 * t8336 - 3038
            t8324 = 2 * phi1
            t8323 = 4 * phi1
            t8322 = -3 * phi2
            t8321 = 3 * phi2
            tfunc[..., c] = -(0.33e2 / 0.29622272e8) * np.sqrt(0.17e2) * np.sqrt(0.113e3) * ((41496 + 612866280 * t8305 - 2728243440 * t8336 + 4937016240 * t8334 - 4649784880 * t8332 + 2421469440 * t8330 - 682443216 * t8328 + 93974608 * t8326 - 4896528 * t8319) * np.exp((-6*1j) * phi2) + (t8342 - t8343) * np.exp((-6*1j) * (t8324 + phi2)) + (t8339 + t8341) * np.exp((-2*1j) * (t8324 + t8321)) + (t8340 - t8344) * np.exp((-2*1j) * (t8323 + t8321)) + (t8339 - t8341) * np.exp((2*1j) * (t8324 + t8322)) + (t8340 + t8344) * np.exp((2*1j) * (t8323 + t8322)) + (t8342 + t8343) * np.exp((6*1j) * (t8324 - phi2)))

        if Bindx == 238:
            t8369 = np.cos(phi)
            t8368 = t8369 ** 2
            t8376 = t8368 ** 2
            t8380 = t8376 ** 2
            t8354 = t8380 ** 2
            t8375 = t8369 * t8368
            t8378 = t8375 ** 2
            t8377 = t8369 * t8376
            t8382 = t8377 ** 2
            t8384 = t8378 ** 2
            t8379 = t8369 * t8378
            t8386 = t8379 ** 2
            t8396 = 35960 * t8354 - 5520 * t8368 - 2080 * t8376 + 229680 * t8378 - 863280 * t8380 + 1276880 * t8382 - 804000 * t8384 + 132240 * t8386 + 120
            t8395 = 16385 * t8354 - 16385 + 1081410 * t8382 - 1081410 * t8378 - 819250 * t8384 + 819250 * t8376 - 163850 * t8368 + 163850 * t8386
            t8355 = t8369 * t8386
            t8357 = t8369 * t8384
            t8359 = t8369 * t8382
            t8361 = t8369 * t8380
            t8394 = -161820 * t8355 + 432100 * t8357 - 175020 * t8359 - 495660 * t8361 - 3620 * t8369 + 57180 * t8375 - 300180 * t8377 + 647020 * t8379
            t8393 = 98310 * t8355 - 98310 * t8369 + 1802350 * t8361 - 1802350 * t8379 - 557090 * t8359 + 557090 * t8377 - 163850 * t8357 + 163850 * t8375
            t8392 = -31554900 * t8355 + 106879500 * t8357 - 139803300 * t8359 + 88040700 * t8361 + 1620 * t8369 - 139020 * t8375 + 3494820 * t8377 - 26919420 * t8379
            t8391 = 10518300 * t8354 + 500520 * t8368 - 6959400 * t8376 + 36470280 * t8378 - 90451680 * t8380 + 108708600 * t8382 - 49959000 * t8384 - 8821800 * t8386 - 5820
            t8390 = -338689260 * t8355 + 1292846100 * t8357 - 1981777980 * t8359 + 1554245700 * t8361 + 376236 * t8369 - 13656020 * t8375 + 142546684 * t8377 - 655891460 * t8379
            t8389 = 225792840 * t8354 - 190960 * t8368 + 4917920 * t8376 - 54361776 * t8378 + 287983920 * t8380 - 783116880 * t8382 + 1120173600 * t8384 - 801200400 * t8386 + 1736
            t8374 = 2 * phi1
            t8373 = 4 * phi1
            t8372 = 8 * phi1
            t8371 = -3 * phi2
            t8370 = 3 * phi2
            tfunc[..., c] = (0.33e2 / 0.473956352e9) * np.sqrt(0.2e1) * np.sqrt(0.113e3) * np.sqrt(0.13e2) * np.sqrt(0.31e2) * np.sqrt(0.23e2) * ((601080390 * t8354 - 2675777220 * t8386 + 4842073620 * t8384 - 4560365940 * t8382 + 2374902720 * t8380 - 669319308 * t8378 + 92167404 * t8376 - 4802364 * t8368 + 40698) * np.exp((-6*1j) * phi2) + (t8393 + t8395) * np.exp((-2*1j) * (t8372 + t8370)) + (-t8393 + t8395) * np.exp((2*1j) * (t8372 + t8371)) + (-t8394 + t8396) * np.exp((-6*1j) * (t8374 + phi2)) + (t8389 - t8390) * np.exp((-2*1j) * (t8374 + t8370)) + (t8391 - t8392) * np.exp((-2*1j) * (t8373 + t8370)) + (t8389 + t8390) * np.exp((2*1j) * (t8374 + t8371)) + (t8391 + t8392) * np.exp((2*1j) * (t8373 + t8371)) + (t8394 + t8396) * np.exp((6*1j) * (t8374 - phi2)))

        if Bindx == 239:
            t8420 = np.cos(phi)
            t8419 = t8420 ** 2
            t8427 = t8419 ** 2
            t8426 = t8420 * t8419
            t8429 = t8426 ** 2
            t8431 = t8427 ** 2
            t8428 = t8420 * t8427
            t8433 = t8428 ** 2
            t8435 = t8429 ** 2
            t8430 = t8420 * t8429
            t8437 = t8430 ** 2
            t8439 = t8431 ** 2
            t8446 = 3089360 * t8419 - 51854880 * t8427 + 361477200 * t8429 - 1300498200 * t8431 + 2598383600 * t8433 - 2903409600 * t8435 + 1696047600 * t8437 - 403201500 * t8439 - 33580
            t8445 = 6815116 * t8419 - 129812760 * t8427 + 945287420 * t8429 - 3398637550 * t8431 + 6678759780 * t8433 - 7320811680 * t8435 + 4206302100 * t8437 - 987843675 * t8439 - 58751
            t8444 = 5364060 * t8419 - 40580280 * t8427 + 103459980 * t8429 - 51227670 * t8431 - 200048940 * t8433 + 371860320 * t8435 - 249204540 * t8437 + 60480225 * t8439 - 103155
            t8404 = t8420 * t8439
            t8406 = t8420 * t8437
            t8408 = t8420 * t8435
            t8410 = t8420 * t8433
            t8412 = t8420 * t8431
            t8443 = 16128060 * t8404 + 2601300 * t8406 - 227066580 * t8408 + 570366420 * t8410 - 627953820 * t8412 - 645840 * t8420 + 13257660 * t8426 - 101953020 * t8428 + 355265820 * t8430
            t8442 = 161280600 * t8404 - 416208000 * t8406 + 55255200 * t8408 + 850595200 * t8410 - 1149361520 * t8412 - 713000 * t8420 + 21417600 * t8426 - 181530720 * t8428 + 659264640 * t8430
            t8441 = -790274940 * t8404 + 3339548940 * t8406 - 5814981900 * t8408 + 5393033100 * t8410 - 2876351940 * t8412 - 301840 * t8420 + 12062820 * t8426 - 150426276 * t8428 + 887692036 * t8430
            t8425 = 4 * phi1
            t8424 = 8 * phi1
            t8423 = -5 * phi2
            t8422 = 5 * phi2
            t8421 = 12 * phi1
            tfunc[..., c] = (-0.33e2 / 0.59244544e8*1j) * np.sqrt(0.2e1) * np.sqrt(0.17e2) * np.sqrt(0.113e3) * ((1 + t8420) ** (-0.1e1 / 0.2e1)) * ((1 - t8420) ** (-0.1e1 / 0.2e1)) * ((1225732560 * t8404 - 5851884480 * t8406 + 11551063680 * t8408 - 12149159360 * t8410 + 7308947360 * t8412 - 2505552192 * t8430 + 457673216 * t8428 - 37733696 * t8426 + 912912 * t8420) * np.exp((-5*1j) * phi2) + (t8441 + t8445) * np.exp((-1*1j) * (t8425 + t8422)) + (t8442 - t8446) * np.exp((-1*1j) * (t8424 + t8422)) + (t8441 - t8445) * np.exp((1j) * (t8425 + t8423)) + (t8442 + t8446) * np.exp((1j) * (t8424 + t8423)) + (t8443 + t8444) * np.exp((-1*1j) * (t8421 + t8422)) + (t8443 - t8444) * np.exp((1j) * (t8421 + t8423)))

        if Bindx == 240:
            t8472 = np.cos(phi)
            t8471 = t8472 ** 2
            t8480 = t8471 ** 2
            t8484 = t8480 ** 2
            t8492 = t8484 ** 2
            t8456 = t8472 * t8492
            t8479 = t8472 * t8471
            t8482 = t8479 ** 2
            t8483 = t8472 * t8482
            t8490 = t8483 ** 2
            t8458 = t8472 * t8490
            t8488 = t8482 ** 2
            t8460 = t8472 * t8488
            t8481 = t8472 * t8480
            t8486 = t8481 ** 2
            t8462 = t8472 * t8486
            t8464 = t8472 * t8484
            t8501 = 35960 * t8456 + 5800 * t8458 - 506280 * t8460 + 1271720 * t8462 - 1400120 * t8464 - 1440 * t8472 + 29560 * t8479 - 227320 * t8481 + 792120 * t8483
            t8500 = -11960 * t8471 + 90480 * t8480 - 230680 * t8482 + 114220 * t8484 + 446040 * t8486 - 829120 * t8488 + 555640 * t8490 - 134850 * t8492 + 230
            t8499 = 65540 * t8471 - 655400 * t8480 + 1638500 * t8482 - 1802350 * t8484 + 720940 * t8486 + 262160 * t8488 - 327700 * t8490 + 81925 * t8492 + 16385
            t8498 = 16385 * t8456 + 65540 * t8458 - 655400 * t8460 + 1638500 * t8462 - 1802350 * t8464 + 81925 * t8472 - 327700 * t8479 + 262160 * t8481 + 720940 * t8483
            t8497 = -201480 * t8471 + 3381840 * t8480 - 23574600 * t8482 + 84815100 * t8484 - 169459800 * t8486 + 189352800 * t8488 - 110611800 * t8490 + 26295750 * t8492 + 2190
            t8496 = 10518300 * t8456 - 27144000 * t8458 + 3603600 * t8460 + 55473600 * t8462 - 74958360 * t8464 - 46500 * t8472 + 1396800 * t8479 - 11838960 * t8481 + 42995520 * t8483
            t8495 = 1947176 * t8471 - 37089360 * t8480 + 270082120 * t8482 - 971039300 * t8484 + 1908217080 * t8486 - 2091660480 * t8488 + 1201800600 * t8490 - 282241050 * t8492 - 16786
            t8494 = 225792840 * t8456 - 954156840 * t8458 + 1661423400 * t8460 - 1540866600 * t8462 + 821814840 * t8464 + 86240 * t8472 - 3446520 * t8479 + 42978936 * t8481 - 253626296 * t8483
            t8478 = 4 * phi1
            t8477 = 8 * phi1
            t8476 = -5 * phi2
            t8475 = 5 * phi2
            t8474 = 12 * phi1
            t8473 = 16 * phi1
            tfunc[..., c] = (0.33e2 / 0.236978176e9*1j) * np.sqrt(0.113e3) * np.sqrt(0.31e2) * np.sqrt(0.13e2) * np.sqrt(0.23e2) * ((1 + t8472) ** (-0.1e1 / 0.2e1)) * ((1 - t8472) ** (-0.1e1 / 0.2e1)) * ((601080390 * t8456 - 2869674120 * t8458 + 5664463920 * t8460 - 5957760840 * t8462 + 3584195340 * t8464 - 1228684248 * t8483 + 224435904 * t8481 - 18504024 * t8479 + 447678 * t8472) * np.exp((-5*1j) * phi2) + (t8494 - t8495) * np.exp((-1*1j) * (t8478 + t8475)) + (t8496 + t8497) * np.exp((-1*1j) * (t8477 + t8475)) + (t8494 + t8495) * np.exp((1j) * (t8478 + t8476)) + (t8496 - t8497) * np.exp((1j) * (t8477 + t8476)) + (-t8500 + t8501) * np.exp((-1*1j) * (t8474 + t8475)) + (t8498 + t8499) * np.exp((-1*1j) * (t8473 + t8475)) + (t8500 + t8501) * np.exp((1j) * (t8474 + t8476)) + (t8498 - t8499) * np.exp((1j) * (t8473 + t8476)))

        if Bindx == 241:
            t8524 = np.cos(phi)
            t8523 = t8524 ** 2
            t8527 = t8524 * t8523
            t8530 = t8527 ** 2
            t8531 = t8524 * t8530
            t8538 = t8531 ** 2
            t8510 = t8524 * t8538
            t8536 = t8530 ** 2
            t8512 = t8524 * t8536
            t8528 = t8523 ** 2
            t8529 = t8524 * t8528
            t8534 = t8529 ** 2
            t8514 = t8524 * t8534
            t8532 = t8528 ** 2
            t8516 = t8524 * t8532
            t8546 = -12096045 * t8510 + 53196585 * t8512 - 91606125 * t8514 + 76339185 * t8516 - 40365 * t8524 + 381225 * t8527 + 3691155 * t8529 - 29865615 * t8531
            t8545 = -80640300 * t8510 + 319959900 * t8512 - 510482700 * t8514 + 418363100 * t8516 + 143060 * t8524 - 4586660 * t8527 + 43460340 * t8529 - 186216740 * t8531
            t8544 = -197568735 * t8510 + 732916275 * t8512 - 1085670495 * t8514 + 816475275 * t8516 + 150689 * t8524 - 5943245 * t8527 + 66777249 * t8529 - 327165685 * t8531
            t8509 = t8532 ** 2
            t8543 = -4032015 * t8509 - 1255800 * t8523 + 11714820 * t8528 - 43594200 * t8530 + 77527710 * t8532 - 65768040 * t8534 + 18101460 * t8536 + 7283640 * t8538 + 22425
            t8542 = -40320150 * t8509 - 507840 * t8523 + 7143800 * t8528 - 32818240 * t8530 + 52802940 * t8532 + 11003200 * t8534 - 122171400 * t8536 + 124862400 * t8538 + 5290
            t8541 = 197568735 * t8509 - 766920 * t8523 + 15373820 * t8528 - 119731304 * t8530 + 466534530 * t8532 - 1002881880 * t8534 + 1208707500 * t8536 - 764782200 * t8538 + 6391
            t8526 = 2 * phi1
            t8525 = 3 * phi1
            tfunc[..., c] = (0.33e2 / 0.29622272e8) * np.sqrt(0.2e1) * np.sqrt(0.7e1) * np.sqrt(0.17e2) * np.sqrt(0.113e3) * ((-10868 - 306433140 * t8509 + 1265272320 * t8538 - 2117422320 * t8536 + 1839735040 * t8534 - 882372920 * t8532 + 228836608 * t8530 - 28995824 * t8528 + 1391104 * t8523) * np.exp((-4*1j) * phi2) + (t8541 - t8544) * np.exp((-4*1j) * (phi1 + phi2)) + (t8542 + t8545) * np.exp((-4*1j) * (t8526 + phi2)) + (t8543 + t8546) * np.exp((-4*1j) * (t8525 + phi2)) + (t8541 + t8544) * np.exp((4*1j) * (phi1 - phi2)) + (t8542 - t8545) * np.exp((4*1j) * (t8526 - phi2)) + (t8543 - t8546) * np.exp((4*1j) * (t8525 - phi2)))

        if Bindx == 242:
            t8571 = np.cos(phi)
            t8570 = t8571 ** 2
            t8576 = t8570 ** 2
            t8575 = t8571 * t8570
            t8578 = t8575 ** 2
            t8584 = t8578 ** 2
            t8598 = -t8576 - t8584
            t8559 = t8571 * t8584
            t8580 = t8576 ** 2
            t8563 = t8571 * t8580
            t8579 = t8571 * t8578
            t8597 = -t8559 - t8563 - t8575 - t8579
            t8586 = t8579 ** 2
            t8557 = t8571 * t8586
            t8577 = t8571 * t8576
            t8582 = t8577 ** 2
            t8561 = t8571 * t8582
            t8596 = -65540 * t8557 - 65540 * t8571 - 589860 * t8561 - 589860 * t8577
            t8556 = t8580 ** 2
            t8595 = 16385 * t8556 + 1048640 * t8578 - 1474650 * t8580 + 1048640 * t8582 + 16385
            t8594 = -107880 * t8557 + 474440 * t8559 - 817000 * t8561 + 680840 * t8563 - 360 * t8571 + 3400 * t8575 + 32920 * t8577 - 266360 * t8579
            t8593 = 35960 * t8556 + 11200 * t8570 - 104480 * t8576 + 388800 * t8578 - 691440 * t8580 + 586560 * t8582 - 161440 * t8584 - 64960 * t8586 - 200
            t8592 = -21036600 * t8557 + 83467800 * t8559 - 133169400 * t8561 + 109138200 * t8563 + 37320 * t8571 - 1196520 * t8575 + 11337480 * t8577 - 48578280 * t8579
            t8591 = 10518300 * t8556 + 132480 * t8570 - 1863600 * t8576 + 8561280 * t8578 - 13774680 * t8580 - 2870400 * t8582 + 31870800 * t8584 - 32572800 * t8586 - 1380
            t8590 = -225792840 * t8557 + 837618600 * t8559 - 1240766280 * t8561 + 933114600 * t8563 + 172216 * t8571 - 6792280 * t8575 + 76316856 * t8577 - 373903640 * t8579
            t8589 = 225792840 * t8556 - 876480 * t8570 + 17570080 * t8576 - 136835776 * t8578 + 533182320 * t8580 - 1146150720 * t8582 + 1381380000 * t8584 - 874036800 * t8586 + 7304
            t8574 = 2 * phi1
            t8573 = 3 * phi1
            t8572 = 4 * phi1
            t8551 = np.exp((-4*1j) * (t8572 + phi2))
            t8547 = np.exp((4*1j) * (t8572 - phi2))
            tfunc[..., c] = (0.33e2 / 0.473956352e9) * np.sqrt(0.113e3) * np.sqrt(0.31e2) * np.sqrt(0.23e2) * np.sqrt(0.13e2) * np.sqrt(0.7e1) * ((1730808420 * t8580 - 448871808 * t8578 + 56876424 * t8576 - 2728704 * t8570 + 4153405320 * t8584 + 601080390 * t8556 - 3608711040 * t8582 - 2481880320 * t8586 + 21318) * np.exp((-4*1j) * phi2) + ((t8595 - t8596) * t8551) + ((t8595 + t8596) * t8547) + (t8589 - t8590) * np.exp((-4*1j) * (phi1 + phi2)) + (t8591 - t8592) * np.exp((-4*1j) * (t8574 + phi2)) + (t8593 - t8594) * np.exp((-4*1j) * (t8573 + phi2)) + (t8589 + t8590) * np.exp((4*1j) * (phi1 - phi2)) + (t8591 + t8592) * np.exp((4*1j) * (t8574 - phi2)) + (t8593 + t8594) * np.exp((4*1j) * (t8573 - phi2)) + (327700 * (t8597 + t8598) * t8551) + (327700 * (-t8597 + t8598) * t8547))

        if Bindx == 243:
            t8622 = np.cos(phi)
            t8621 = t8622 ** 2
            t8628 = t8621 ** 2
            t8632 = t8628 ** 2
            t8640 = t8632 ** 2
            t8606 = t8622 * t8640
            t8627 = t8622 * t8621
            t8630 = t8627 ** 2
            t8631 = t8622 * t8630
            t8638 = t8631 ** 2
            t8608 = t8622 * t8638
            t8636 = t8630 ** 2
            t8610 = t8622 * t8636
            t8629 = t8622 * t8628
            t8634 = t8629 ** 2
            t8612 = t8622 * t8634
            t8614 = t8622 * t8632
            t8647 = 12406200 * t8606 - 54427200 * t8608 + 96346080 * t8610 - 87753280 * t8612 + 43435408 * t8614 + 1656 * t8622 - 78016 * t8627 + 1440352 * t8629 - 11371200 * t8631
            t8646 = 211140 * t8621 - 2405616 * t8628 + 11775540 * t8630 - 29937030 * t8632 + 42912204 * t8634 - 35121000 * t8636 + 15359676 * t8638 - 2791395 * t8640 - 3519
            t8645 = 1240620 * t8606 - 5242620 * t8608 + 6933948 * t8610 + 595332 * t8612 - 10337580 * t8614 - 47472 * t8622 + 907212 * t8627 - 4784460 * t8629 + 10735020 * t8631
            t8644 = 285200 * t8621 - 4716288 * t8628 + 30110864 * t8630 - 95939624 * t8632 + 168707760 * t8634 - 166759200 * t8636 + 86923440 * t8638 - 18609300 * t8640 - 2852
            t8643 = 238700 * t8621 - 4830672 * t8628 + 37111228 * t8630 - 139707106 * t8632 + 285308100 * t8634 - 322740600 * t8636 + 190215060 * t8638 - 45592785 * t8640 - 1925
            t8642 = -60790380 * t8606 + 272576220 * t8608 - 507352860 * t8610 + 505961820 * t8612 - 290663604 * t8614 - 33264 * t8622 + 1382612 * t8627 - 17053652 * t8629 + 95973108 * t8631
            t8626 = 4 * phi1
            t8625 = 8 * phi1
            t8624 = -3 * phi2
            t8623 = 3 * phi2
            tfunc[..., c] = (-0.33e2 / 0.59244544e8*1j) * np.sqrt(0.2e1) * np.sqrt(0.7e1) * np.sqrt(0.17e2) * np.sqrt(0.113e3) * np.sqrt(0.5e1) * np.sqrt(0.13e2) * ((1 + t8622) ** (-0.1e1 / 0.2e1)) * ((1 - t8622) ** (-0.1e1 / 0.2e1)) * ((94287120 * t8606 - 425812800 * t8608 + 793731840 * t8610 - 787159360 * t8612 + 445935776 * t8614 - 143805376 * t8631 + 24692096 * t8629 - 1912768 * t8627 + 43472 * t8622) * np.exp((-3*1j) * phi2) + (t8645 - t8646) * np.exp((-3*1j) * (t8626 + phi2)) + (t8642 + t8643) * np.exp((-1*1j) * (t8626 + t8623)) + (-t8644 + t8647) * np.exp((-1*1j) * (t8625 + t8623)) + (t8642 - t8643) * np.exp((1j) * (t8626 + t8624)) + (t8644 + t8647) * np.exp((1j) * (t8625 + t8624)) + (t8645 + t8646) * np.exp((3*1j) * (t8626 - phi2)))

        if Bindx == 244:
            t8673 = np.cos(phi)
            t8672 = t8673 ** 2
            t8679 = t8673 * t8672
            t8682 = t8679 ** 2
            t8680 = t8672 ** 2
            t8684 = t8680 ** 2
            t8681 = t8673 * t8680
            t8686 = t8681 ** 2
            t8688 = t8682 ** 2
            t8683 = t8673 * t8682
            t8690 = t8683 ** 2
            t8692 = t8684 ** 2
            t8701 = 65540 * t8672 - 458780 * t8682 + 1146950 * t8684 - 1376340 * t8686 + 917560 * t8688 - 327700 * t8690 + 49155 * t8692 - 16385
            t8657 = t8673 * t8692
            t8659 = t8673 * t8690
            t8663 = t8673 * t8686
            t8665 = t8673 * t8684
            t8700 = 16385 * t8657 - 65540 * t8659 + 458780 * t8663 - 1146950 * t8665 - 49155 * t8673 + 327700 * t8679 - 917560 * t8681 + 1376340 * t8683
            t8699 = -6120 * t8672 + 69728 * t8680 - 341320 * t8682 + 867740 * t8684 - 1243832 * t8686 + 1018000 * t8688 - 445208 * t8690 + 80910 * t8692 + 102
            t8661 = t8673 * t8688
            t8698 = 35960 * t8657 - 151960 * t8659 + 200984 * t8661 + 17256 * t8663 - 299640 * t8665 - 1376 * t8673 + 26296 * t8679 - 138680 * t8681 + 311160 * t8683
            t8697 = 10518300 * t8657 - 46144800 * t8659 + 81684720 * t8661 - 74399520 * t8663 + 36825672 * t8665 + 1404 * t8673 - 66144 * t8679 + 1221168 * t8681 - 9640800 * t8683
            t8696 = -241800 * t8672 + 3998592 * t8680 - 25528776 * t8682 + 81340116 * t8684 - 143034840 * t8686 + 141382800 * t8688 - 73695960 * t8690 + 15777450 * t8692 + 2418
            t8695 = -886600 * t8672 + 17942496 * t8680 - 137841704 * t8682 + 518912108 * t8684 - 1059715800 * t8686 + 1198750800 * t8688 - 706513080 * t8690 + 169344630 * t8692 + 7150
            t8694 = 225792840 * t8657 - 1012425960 * t8659 + 1884453480 * t8661 - 1879286760 * t8663 + 1079607672 * t8665 + 123552 * t8673 - 5135416 * t8679 + 63342136 * t8681 - 356471544 * t8683
            t8678 = 4 * phi1
            t8677 = 8 * phi1
            t8676 = -3 * phi2
            t8675 = 3 * phi2
            t8674 = 16 * phi1
            tfunc[..., c] = (0.33e2 / 0.236978176e9*1j) * np.sqrt(0.5e1) * np.sqrt(0.113e3) * np.sqrt(0.31e2) * np.sqrt(0.23e2) * np.sqrt(0.7e1) * ((1 + t8673) ** (-0.1e1 / 0.2e1)) * ((1 - t8673) ** (-0.1e1 / 0.2e1)) * ((601080390 * t8657 - 2714556600 * t8659 + 5060040480 * t8661 - 5018140920 * t8663 + 2842840572 * t8665 - 916759272 * t8683 + 157412112 * t8681 - 12193896 * t8679 + 277134 * t8673) * np.exp((-3*1j) * phi2) + (t8700 + t8701) * np.exp((-1*1j) * (t8674 + t8675)) + (t8700 - t8701) * np.exp((1j) * (t8674 + t8676)) + (t8698 + t8699) * np.exp((-3*1j) * (t8678 + phi2)) + (t8694 + t8695) * np.exp((-1*1j) * (t8678 + t8675)) + (t8696 + t8697) * np.exp((-1*1j) * (t8677 + t8675)) + (t8694 - t8695) * np.exp((1j) * (t8678 + t8676)) + (-t8696 + t8697) * np.exp((1j) * (t8677 + t8676)) + (t8698 - t8699) * np.exp((3*1j) * (t8678 - phi2)))

        if Bindx == 245:
            t8724 = np.cos(phi)
            t8723 = t8724 ** 2
            t8729 = t8723 ** 2
            t8733 = t8729 ** 2
            t8709 = t8733 ** 2
            t8728 = t8724 * t8723
            t8731 = t8728 ** 2
            t8730 = t8724 * t8729
            t8735 = t8730 ** 2
            t8737 = t8731 ** 2
            t8732 = t8724 * t8731
            t8739 = t8732 ** 2
            t8747 = 620310 * t8709 + 8556 * t8723 + 19320 * t8729 - 840420 * t8731 + 3622500 * t8733 - 6763932 * t8735 + 6495384 * t8737 - 3161580 * t8739 - 138
            t8710 = t8724 * t8739
            t8712 = t8724 * t8737
            t8714 = t8724 * t8735
            t8716 = t8724 * t8733
            t8746 = -930465 * t8710 + 5056527 * t8712 - 11351949 * t8714 + 13478115 * t8716 + 26289 * t8724 - 535647 * t8728 + 3214365 * t8730 - 8957235 * t8732
            t8745 = -15197595 * t8710 + 55397685 * t8712 - 80180415 * t8714 + 58575825 * t8716 + 9163 * t8724 - 378917 * t8728 + 4448367 * t8730 - 22674113 * t8732
            t8744 = -6203100 * t8710 + 26773380 * t8712 - 46405260 * t8714 + 41057300 * t8716 + 14812 * t8724 - 495236 * t8728 + 4700556 * t8730 - 19442452 * t8732
            t8743 = 6203100 * t8709 - 65688 * t8723 + 1127000 * t8729 - 7572152 * t8731 + 25606176 * t8733 - 47886920 * t8735 + 50201640 * t8737 - 27613800 * t8739 + 644
            t8742 = -30395190 * t8709 + 135828 * t8723 - 2798488 * t8729 + 21928676 * t8731 - 84349188 * t8733 + 176285340 * t8735 - 204347640 * t8737 + 123541740 * t8739 - 1078
            t8727 = 2 * phi1
            t8726 = 4 * phi1
            t8725 = 6 * phi1
            tfunc[..., c] = -(0.33e2 / 0.29622272e8) * np.sqrt(0.17e2) * np.sqrt(0.113e3) * np.sqrt(0.13e2) * np.sqrt(0.5e1) * np.sqrt(0.19e2) * ((47143560 * t8709 - 185532720 * t8739 + 295866480 * t8737 - 244964720 * t8735 + 111983872 * t8733 - 27691664 * t8731 + 3347344 * t8729 - 153296 * t8723 + 1144) * np.exp((-2*1j) * phi2) + (t8742 + t8745) * np.exp((-2*1j) * (t8727 + phi2)) + (t8743 - t8744) * np.exp((-2*1j) * (t8726 + phi2)) + (-t8746 + t8747) * np.exp((-2*1j) * (t8725 + phi2)) + (t8742 - t8745) * np.exp((2*1j) * (t8727 - phi2)) + (t8743 + t8744) * np.exp((2*1j) * (t8726 - phi2)) + (t8746 + t8747) * np.exp((2*1j) * (t8725 - phi2)))

        if Bindx == 246:
            t8772 = np.cos(phi)
            t8771 = t8772 ** 2
            t8777 = t8772 * t8771
            t8780 = t8777 ** 2
            t8786 = t8780 ** 2
            t8760 = t8772 * t8786
            t8800 = t8777 - t8760
            t8778 = t8771 ** 2
            t8779 = t8772 * t8778
            t8784 = t8779 ** 2
            t8799 = t8780 + t8786 - t8778 - t8784
            t8782 = t8778 ** 2
            t8757 = t8782 ** 2
            t8781 = t8772 * t8780
            t8788 = t8781 ** 2
            t8798 = -16385 + 16385 * t8757 + 98310 * t8771 - 98310 * t8788
            t8758 = t8772 * t8788
            t8762 = t8772 * t8784
            t8764 = t8772 * t8782
            t8797 = -32770 * t8758 + 32770 * t8772 + 1146950 * t8764 - 1146950 * t8781 - 688170 * t8762 + 688170 * t8779
            t8796 = 35960 * t8757 + 496 * t8771 + 1120 * t8778 - 48720 * t8780 + 210000 * t8782 - 392112 * t8784 + 376544 * t8786 - 183280 * t8788 - 8
            t8795 = 53940 * t8758 - 293132 * t8760 + 658084 * t8762 - 781340 * t8764 - 1524 * t8772 + 31052 * t8777 - 186340 * t8779 + 519260 * t8781
            t8794 = -10518300 * t8758 + 45398340 * t8760 - 78687180 * t8762 + 69618900 * t8764 + 25116 * t8772 - 839748 * t8777 + 7970508 * t8779 - 32967636 * t8781
            t8793 = -112896420 * t8758 + 411525660 * t8760 - 595625940 * t8762 + 435134700 * t8764 + 68068 * t8772 - 2814812 * t8777 + 33045012 * t8779 - 168436268 * t8781
            t8792 = 10518300 * t8757 - 111384 * t8771 + 1911000 * t8778 - 12839736 * t8780 + 43419168 * t8782 - 81199560 * t8784 + 85124520 * t8786 - 46823400 * t8788 + 1092
            t8791 = 225792840 * t8757 - 1009008 * t8771 + 20788768 * t8778 - 162898736 * t8780 + 626593968 * t8782 - 1309548240 * t8784 + 1518011040 * t8786 - 917738640 * t8788 + 8008
            t8776 = 2 * phi1
            t8775 = 4 * phi1
            t8774 = 6 * phi1
            t8773 = 8 * phi1
            t8752 = np.exp((-2*1j) * (t8773 + phi2))
            t8748 = np.exp((2*1j) * (t8773 - phi2))
            tfunc[..., c] = (0.33e2 / 0.473956352e9) * np.sqrt(0.2e1) * np.sqrt(0.5e1) * np.sqrt(0.113e3) * np.sqrt(0.23e2) * np.sqrt(0.31e2) * np.sqrt(0.19e2) * ((14586 + 601080390 * t8757 - 2365542180 * t8788 + 3772297620 * t8786 - 3123300180 * t8784 + 1427794368 * t8782 - 353068716 * t8780 + 42678636 * t8778 - 1954524 * t8771) * np.exp((-2*1j) * phi2) + ((-t8797 + t8798) * t8752) + ((t8797 + t8798) * t8748) + (t8791 - t8793) * np.exp((-2*1j) * (t8776 + phi2)) + (t8792 - t8794) * np.exp((-2*1j) * (t8775 + phi2)) + (t8795 + t8796) * np.exp((-2*1j) * (t8774 + phi2)) + (t8791 + t8793) * np.exp((2*1j) * (t8776 - phi2)) + (t8792 + t8794) * np.exp((2*1j) * (t8775 - phi2)) + (-t8795 + t8796) * np.exp((2*1j) * (t8774 - phi2)) + (229390 * (t8799 + t8800) * t8752) + (229390 * (t8799 - t8800) * t8748))

        if Bindx == 247:
            t8824 = np.cos(phi)
            t8823 = t8824 ** 2
            t8829 = t8823 ** 2
            t8828 = t8824 * t8823
            t8831 = t8828 ** 2
            t8833 = t8829 ** 2
            t8830 = t8824 * t8829
            t8835 = t8830 ** 2
            t8837 = t8831 ** 2
            t8832 = t8824 * t8831
            t8839 = t8832 ** 2
            t8841 = t8833 ** 2
            t8848 = 596160 * t8823 - 6172740 * t8829 + 25038720 * t8831 - 52816050 * t8833 + 63987840 * t8835 - 45121860 * t8837 + 17288640 * t8839 - 2791395 * t8841 - 9315
            t8847 = 334880 * t8823 - 5654320 * t8829 + 36141280 * t8831 - 113216120 * t8833 + 192997600 * t8835 - 183236400 * t8837 + 91245600 * t8839 - 18609300 * t8841 - 3220
            t8846 = 206976 * t8823 - 4314156 * t8829 + 34047552 * t8831 - 131284230 * t8833 + 273725760 * t8835 - 315041580 * t8837 + 188254080 * t8839 - 45592785 * t8841 - 1617
            t8808 = t8824 * t8841
            t8810 = t8824 * t8839
            t8812 = t8824 * t8837
            t8814 = t8824 * t8835
            t8816 = t8824 * t8833
            t8845 = 3721860 * t8808 - 23891940 * t8810 + 65291940 * t8812 - 98445060 * t8814 + 88533900 * t8816 + 99360 * t8824 - 2156940 * t8828 + 14576940 * t8830 - 47730060 * t8832
            t8844 = 37218600 * t8808 - 196898400 * t8810 + 434534400 * t8812 - 516101600 * t8814 + 354463120 * t8816 + 83720 * t8824 - 2910880 * t8828 + 29933120 * t8830 - 140322080 * t8832
            t8843 = -182371140 * t8808 + 841260420 * t8810 - 1604014020 * t8812 + 1629439140 * t8814 - 946882860 * t8816 - 103488 * t8824 + 4417644 * t8828 - 55385484 * t8830 + 313639788 * t8832
            t8827 = 4 * phi1
            t8826 = 8 * phi1
            t8825 = 12 * phi1
            tfunc[..., c] = (-0.11e2 / 0.59244544e8*1j) * np.sqrt(0.2e1) * np.sqrt(0.1921e4) * np.sqrt(0.13e2) * np.sqrt(0.3e1) * np.sqrt(0.19e2) * ((1 + t8824) ** (-0.1e1 / 0.2e1)) * ((1 - t8824) ** (-0.1e1 / 0.2e1)) * ((62078016 * t8830 - 4667520 * t8828 + 102960 * t8824 + 282861360 * t8808 - 1240940160 * t8810 + 2246529600 * t8812 - 2163324800 * t8814 + 1189828640 * t8816 - 372468096 * t8832) * np.exp((-1*1j) * phi2) + (t8843 + t8846) * np.exp((-1*1j) * (t8827 + phi2)) + (t8844 - t8847) * np.exp((-1*1j) * (t8826 + phi2)) + (t8843 - t8846) * np.exp((1j) * (t8827 - phi2)) + (t8844 + t8847) * np.exp((1j) * (t8826 - phi2)) + (t8845 - t8848) * np.exp((-1*1j) * (t8825 + phi2)) + (t8845 + t8848) * np.exp((1j) * (t8825 - phi2)))

        if Bindx == 248:
            t8874 = np.cos(phi)
            t8873 = t8874 ** 2
            t8880 = t8873 ** 2
            t8879 = t8874 * t8873
            t8882 = t8879 ** 2
            t8884 = t8880 ** 2
            t8881 = t8874 * t8880
            t8886 = t8881 ** 2
            t8888 = t8882 ** 2
            t8883 = t8874 * t8882
            t8890 = t8883 ** 2
            t8892 = t8884 ** 2
            t8901 = -5760 * t8873 + 59640 * t8880 - 241920 * t8882 + 510300 * t8884 - 618240 * t8886 + 435960 * t8888 - 167040 * t8890 + 26970 * t8892 + 90
            t8858 = t8874 * t8892
            t8860 = t8874 * t8890
            t8862 = t8874 * t8888
            t8864 = t8874 * t8886
            t8866 = t8874 * t8884
            t8900 = 35960 * t8858 - 230840 * t8860 + 630840 * t8862 - 951160 * t8864 + 855400 * t8866 + 960 * t8874 - 20840 * t8879 + 140840 * t8881 - 461160 * t8883
            t8899 = -131080 * t8873 + 458780 * t8880 - 917560 * t8882 + 1146950 * t8884 - 917560 * t8886 + 458780 * t8888 - 131080 * t8890 + 16385 * t8892 + 16385
            t8898 = 16385 * t8858 - 131080 * t8860 + 458780 * t8862 - 917560 * t8864 + 1146950 * t8866 + 16385 * t8874 - 131080 * t8879 + 458780 * t8881 - 917560 * t8883
            t8897 = 94640 * t8873 - 1597960 * t8880 + 10213840 * t8882 - 31995860 * t8884 + 54542800 * t8886 - 51784200 * t8888 + 25786800 * t8890 - 5259150 * t8892 - 910
            t8896 = 256256 * t8873 - 5341336 * t8880 + 42154112 * t8882 - 162542380 * t8884 + 338898560 * t8886 - 390051480 * t8888 + 233076480 * t8890 - 56448210 * t8892 - 2002
            t8895 = 10518300 * t8858 - 55645200 * t8860 + 122803200 * t8862 - 145854800 * t8864 + 100174360 * t8866 + 23660 * t8874 - 822640 * t8879 + 8459360 * t8881 - 39656240 * t8883
            t8894 = 225792840 * t8858 - 1041560520 * t8860 + 1985922120 * t8862 - 2017400840 * t8864 + 1172331160 * t8866 + 128128 * t8874 - 5469464 * t8879 + 68572504 * t8881 - 388315928 * t8883
            t8878 = 4 * phi1
            t8877 = 8 * phi1
            t8876 = 12 * phi1
            t8875 = 16 * phi1
            tfunc[..., c] = (0.33e2 / 0.236978176e9*1j) * np.sqrt(0.3e1) * np.sqrt(0.113e3) * np.sqrt(0.31e2) * np.sqrt(0.19e2) * np.sqrt(0.23e2) * ((1 + t8874) ** (-0.1e1 / 0.2e1)) * ((1 - t8874) ** (-0.1e1 / 0.2e1)) * ((601080390 * t8858 - 2636997840 * t8860 + 4773875400 * t8862 - 4597065200 * t8864 + 2528385860 * t8866 - 791494704 * t8883 + 131915784 * t8881 - 9918480 * t8879 + 218790 * t8874) * np.exp((-1*1j) * phi2) + (t8894 - t8896) * np.exp((-1*1j) * (t8878 + phi2)) + (t8895 - t8897) * np.exp((-1*1j) * (t8877 + phi2)) + (t8894 + t8896) * np.exp((1j) * (t8878 - phi2)) + (t8895 + t8897) * np.exp((1j) * (t8877 - phi2)) + (t8900 + t8901) * np.exp((-1*1j) * (t8876 + phi2)) + (t8898 + t8899) * np.exp((-1*1j) * (t8875 + phi2)) + (t8900 - t8901) * np.exp((1j) * (t8876 - phi2)) + (t8898 - t8899) * np.exp((1j) * (t8875 - phi2)))

        if Bindx == 249:
            t8913 = np.cos(phi)
            t8912 = t8913 ** 2
            t8914 = t8912 ** 2
            t8915 = t8912 * t8914
            t8918 = t8915 ** 2
            t8916 = t8914 ** 2
            t8908 = t8912 * t8916
            t8906 = t8912 * t8918
            t8905 = t8916 ** 2
            tfunc[..., c] = -0.11e2 / 0.29622272e8 * np.sqrt(0.2e1) * np.sqrt(0.113e3) * np.sqrt(0.19e2) * np.sqrt(0.13e2) * np.sqrt(0.3e1) * ((601080390 * t8905) - (2326762800 * t8906) + (3650610600 * t8918) - (2974571600 * t8908) + (1338557220 * t8916) - (325909584 * t8915) + (38798760 * t8914) - (1750320 * t8912) + 0.12870e5 + (-775077345 * t8905 + 3200319360 * t8906 - 5355706860 * t8918 + 4653337920 * t8908 - 2231831910 * t8916 + 578808384 * t8915 - 73340652 * t8914 + 3518592 * t8912 - 27489) * np.cos((4 * phi1)) + (158179050 * t8905 - 775587600 * t8906 + 1557509400 * t8918 - 1640479600 * t8908 + 962337020 * t8916 - 307200880 * t8915 + 48061720 * t8914 - 2846480 * t8912 + 27370) * np.cos((8 * phi1)) + (15817905 * t8905 - 97968960 * t8906 + 255690540 * t8918 - 362597760 * t8908 + 299290950 * t8916 - 141886080 * t8915 + 34978860 * t8914 - 3378240 * t8912 + 52785) * np.cos((12 * phi1)))

        if Bindx == 250:
            t8933 = np.cos(phi)
            t8932 = t8933 ** 2
            t8934 = t8932 ** 2
            t8935 = t8932 * t8934
            t8938 = t8935 ** 2
            t8936 = t8934 ** 2
            t8928 = t8932 * t8936
            t8926 = t8932 * t8938
            t8925 = t8936 ** 2
            tfunc[..., c] = 0.33e2 / 0.473956352e9 * np.sqrt(0.3e1) * np.sqrt(0.113e3) * np.sqrt(0.31e2) * np.sqrt(0.19e2) * np.sqrt(0.23e2) * np.sqrt(0.17e2) * ((300540195 * t8925) - (1163381400 * t8926) + (1825305300 * t8938) - (1487285800 * t8928) + (669278610 * t8936) - (162954792 * t8935) + (19399380 * t8934) - (875160 * t8932) + 0.6435e4 + (225792840 * t8925 - 932305920 * t8926 + 1560205920 * t8938 - 1355594240 * t8928 + 650169520 * t8936 - 168616448 * t8935 + 21365344 * t8934 - 1025024 * t8932 + 8008) * np.cos((4 * phi1)) + (10518300 * t8925 - 51573600 * t8926 + 103568400 * t8938 - 109085600 * t8928 + 63991720 * t8936 - 20427680 * t8935 + 3195920 * t8934 - 189280 * t8932 + 1820) * np.cos((8 * phi1)) + (35960 * t8925 - 222720 * t8926 + 581280 * t8938 - 824320 * t8928 + 680400 * t8936 - 322560 * t8935 + 79520 * t8934 - 7680 * t8932 + 120) * np.cos((12 * phi1)) + (16385 * t8925 + 1146950 * t8936 + 16385 - 917560 * t8928 - 917560 * t8935 + 458780 * t8938 + 458780 * t8934 - 131080 * t8926 - 131080 * t8932) * np.cos((16 * phi1)))

        if Bindx == 251:
            t8964 = np.cos(phi)
            t8963 = t8964 ** 2
            t8969 = t8963 ** 2
            t8968 = t8964 * t8963
            t8971 = t8968 ** 2
            t8973 = t8969 ** 2
            t8970 = t8964 * t8969
            t8975 = t8970 ** 2
            t8977 = t8971 ** 2
            t8972 = t8964 * t8971
            t8979 = t8972 ** 2
            t8981 = t8973 ** 2
            t8988 = 596160 * t8963 - 6172740 * t8969 + 25038720 * t8971 - 52816050 * t8973 + 63987840 * t8975 - 45121860 * t8977 + 17288640 * t8979 - 2791395 * t8981 - 9315
            t8987 = 334880 * t8963 - 5654320 * t8969 + 36141280 * t8971 - 113216120 * t8973 + 192997600 * t8975 - 183236400 * t8977 + 91245600 * t8979 - 18609300 * t8981 - 3220
            t8986 = 206976 * t8963 - 4314156 * t8969 + 34047552 * t8971 - 131284230 * t8973 + 273725760 * t8975 - 315041580 * t8977 + 188254080 * t8979 - 45592785 * t8981 - 1617
            t8948 = t8964 * t8981
            t8950 = t8964 * t8979
            t8952 = t8964 * t8977
            t8954 = t8964 * t8975
            t8956 = t8964 * t8973
            t8985 = 3721860 * t8948 - 23891940 * t8950 + 65291940 * t8952 - 98445060 * t8954 + 88533900 * t8956 + 99360 * t8964 - 2156940 * t8968 + 14576940 * t8970 - 47730060 * t8972
            t8984 = 37218600 * t8948 - 196898400 * t8950 + 434534400 * t8952 - 516101600 * t8954 + 354463120 * t8956 + 83720 * t8964 - 2910880 * t8968 + 29933120 * t8970 - 140322080 * t8972
            t8983 = -182371140 * t8948 + 841260420 * t8950 - 1604014020 * t8952 + 1629439140 * t8954 - 946882860 * t8956 - 103488 * t8964 + 4417644 * t8968 - 55385484 * t8970 + 313639788 * t8972
            t8967 = 4 * phi1
            t8966 = 8 * phi1
            t8965 = 12 * phi1
            tfunc[..., c] = (-0.11e2 / 0.59244544e8*1j) * np.sqrt(0.2e1) * np.sqrt(0.1921e4) * np.sqrt(0.13e2) * np.sqrt(0.3e1) * np.sqrt(0.19e2) * ((1 + t8964) ** (-0.1e1 / 0.2e1)) * ((1 - t8964) ** (-0.1e1 / 0.2e1)) * ((282861360 * t8948 - 1240940160 * t8950 + 2246529600 * t8952 - 2163324800 * t8954 + 1189828640 * t8956 - 372468096 * t8972 + 62078016 * t8970 - 4667520 * t8968 + 102960 * t8964) * np.exp((1j) * phi2) + (t8983 - t8986) * np.exp((-1*1j) * (t8967 - phi2)) + (t8984 + t8987) * np.exp((-1*1j) * (t8966 - phi2)) + (t8983 + t8986) * np.exp((1j) * (t8967 + phi2)) + (t8984 - t8987) * np.exp((1j) * (t8966 + phi2)) + (t8985 + t8988) * np.exp((-1*1j) * (t8965 - phi2)) + (t8985 - t8988) * np.exp((1j) * (t8965 + phi2)))

        if Bindx == 252:
            t9014 = np.cos(phi)
            t9013 = t9014 ** 2
            t9020 = t9013 ** 2
            t9019 = t9014 * t9013
            t9022 = t9019 ** 2
            t9024 = t9020 ** 2
            t9021 = t9014 * t9020
            t9026 = t9021 ** 2
            t9028 = t9022 ** 2
            t9023 = t9014 * t9022
            t9030 = t9023 ** 2
            t9032 = t9024 ** 2
            t9041 = -5760 * t9013 + 59640 * t9020 - 241920 * t9022 + 510300 * t9024 - 618240 * t9026 + 435960 * t9028 - 167040 * t9030 + 26970 * t9032 + 90
            t8998 = t9014 * t9032
            t9000 = t9014 * t9030
            t9002 = t9014 * t9028
            t9004 = t9014 * t9026
            t9006 = t9014 * t9024
            t9040 = 35960 * t8998 - 230840 * t9000 + 630840 * t9002 - 951160 * t9004 + 855400 * t9006 + 960 * t9014 - 20840 * t9019 + 140840 * t9021 - 461160 * t9023
            t9039 = -131080 * t9013 + 458780 * t9020 - 917560 * t9022 + 1146950 * t9024 - 917560 * t9026 + 458780 * t9028 - 131080 * t9030 + 16385 * t9032 + 16385
            t9038 = 16385 * t8998 - 131080 * t9000 + 458780 * t9002 - 917560 * t9004 + 1146950 * t9006 + 16385 * t9014 - 131080 * t9019 + 458780 * t9021 - 917560 * t9023
            t9037 = 94640 * t9013 - 1597960 * t9020 + 10213840 * t9022 - 31995860 * t9024 + 54542800 * t9026 - 51784200 * t9028 + 25786800 * t9030 - 5259150 * t9032 - 910
            t9036 = 256256 * t9013 - 5341336 * t9020 + 42154112 * t9022 - 162542380 * t9024 + 338898560 * t9026 - 390051480 * t9028 + 233076480 * t9030 - 56448210 * t9032 - 2002
            t9035 = 10518300 * t8998 - 55645200 * t9000 + 122803200 * t9002 - 145854800 * t9004 + 100174360 * t9006 + 23660 * t9014 - 822640 * t9019 + 8459360 * t9021 - 39656240 * t9023
            t9034 = 225792840 * t8998 - 1041560520 * t9000 + 1985922120 * t9002 - 2017400840 * t9004 + 1172331160 * t9006 + 128128 * t9014 - 5469464 * t9019 + 68572504 * t9021 - 388315928 * t9023
            t9018 = 4 * phi1
            t9017 = 8 * phi1
            t9016 = 12 * phi1
            t9015 = 16 * phi1
            tfunc[..., c] = (0.33e2 / 0.236978176e9*1j) * np.sqrt(0.3e1) * np.sqrt(0.113e3) * np.sqrt(0.31e2) * np.sqrt(0.19e2) * np.sqrt(0.23e2) * ((1 + t9014) ** (-0.1e1 / 0.2e1)) * ((1 - t9014) ** (-0.1e1 / 0.2e1)) * ((601080390 * t8998 - 2636997840 * t9000 + 4773875400 * t9002 - 4597065200 * t9004 + 2528385860 * t9006 - 791494704 * t9023 + 131915784 * t9021 - 9918480 * t9019 + 218790 * t9014) * np.exp((1j) * phi2) + (t9034 + t9036) * np.exp((-1*1j) * (t9018 - phi2)) + (t9035 + t9037) * np.exp((-1*1j) * (t9017 - phi2)) + (t9034 - t9036) * np.exp((1j) * (t9018 + phi2)) + (t9035 - t9037) * np.exp((1j) * (t9017 + phi2)) + (t9040 - t9041) * np.exp((-1*1j) * (t9016 - phi2)) + (t9038 - t9039) * np.exp((-1*1j) * (t9015 - phi2)) + (t9040 + t9041) * np.exp((1j) * (t9016 + phi2)) + (t9038 + t9039) * np.exp((1j) * (t9015 + phi2)))

        if Bindx == 253:
            t9064 = np.cos(phi)
            t9063 = t9064 ** 2
            t9069 = t9063 ** 2
            t9073 = t9069 ** 2
            t9049 = t9073 ** 2
            t9068 = t9064 * t9063
            t9071 = t9068 ** 2
            t9070 = t9064 * t9069
            t9075 = t9070 ** 2
            t9077 = t9071 ** 2
            t9072 = t9064 * t9071
            t9079 = t9072 ** 2
            t9087 = 620310 * t9049 + 8556 * t9063 + 19320 * t9069 - 840420 * t9071 + 3622500 * t9073 - 6763932 * t9075 + 6495384 * t9077 - 3161580 * t9079 - 138
            t9050 = t9064 * t9079
            t9052 = t9064 * t9077
            t9054 = t9064 * t9075
            t9056 = t9064 * t9073
            t9086 = -930465 * t9050 + 5056527 * t9052 - 11351949 * t9054 + 13478115 * t9056 + 26289 * t9064 - 535647 * t9068 + 3214365 * t9070 - 8957235 * t9072
            t9085 = -15197595 * t9050 + 55397685 * t9052 - 80180415 * t9054 + 58575825 * t9056 + 9163 * t9064 - 378917 * t9068 + 4448367 * t9070 - 22674113 * t9072
            t9084 = -6203100 * t9050 + 26773380 * t9052 - 46405260 * t9054 + 41057300 * t9056 + 14812 * t9064 - 495236 * t9068 + 4700556 * t9070 - 19442452 * t9072
            t9083 = 6203100 * t9049 - 65688 * t9063 + 1127000 * t9069 - 7572152 * t9071 + 25606176 * t9073 - 47886920 * t9075 + 50201640 * t9077 - 27613800 * t9079 + 644
            t9082 = -30395190 * t9049 + 135828 * t9063 - 2798488 * t9069 + 21928676 * t9071 - 84349188 * t9073 + 176285340 * t9075 - 204347640 * t9077 + 123541740 * t9079 - 1078
            t9067 = 2 * phi1
            t9066 = 4 * phi1
            t9065 = 6 * phi1
            tfunc[..., c] = -(0.33e2 / 0.29622272e8) * np.sqrt(0.17e2) * np.sqrt(0.113e3) * np.sqrt(0.5e1) * np.sqrt(0.19e2) * np.sqrt(0.13e2) * ((47143560 * t9049 - 185532720 * t9079 + 295866480 * t9077 - 244964720 * t9075 + 111983872 * t9073 - 27691664 * t9071 + 3347344 * t9069 - 153296 * t9063 + 1144) * np.exp((2*1j) * phi2) + (t9082 - t9085) * np.exp((-2*1j) * (t9067 - phi2)) + (t9083 + t9084) * np.exp((-2*1j) * (t9066 - phi2)) + (t9086 + t9087) * np.exp((-2*1j) * (t9065 - phi2)) + (t9082 + t9085) * np.exp((2*1j) * (t9067 + phi2)) + (t9083 - t9084) * np.exp((2*1j) * (t9066 + phi2)) + (-t9086 + t9087) * np.exp((2*1j) * (t9065 + phi2)))

        if Bindx == 254:
            t9112 = np.cos(phi)
            t9111 = t9112 ** 2
            t9117 = t9112 * t9111
            t9120 = t9117 ** 2
            t9126 = t9120 ** 2
            t9100 = t9112 * t9126
            t9140 = t9117 - t9100
            t9118 = t9111 ** 2
            t9119 = t9112 * t9118
            t9124 = t9119 ** 2
            t9139 = t9120 + t9126 - t9118 - t9124
            t9122 = t9118 ** 2
            t9097 = t9122 ** 2
            t9121 = t9112 * t9120
            t9128 = t9121 ** 2
            t9138 = -16385 + 16385 * t9097 + 98310 * t9111 - 98310 * t9128
            t9098 = t9112 * t9128
            t9102 = t9112 * t9124
            t9104 = t9112 * t9122
            t9137 = -32770 * t9098 + 32770 * t9112 + 1146950 * t9104 - 1146950 * t9121 - 688170 * t9102 + 688170 * t9119
            t9136 = 35960 * t9097 + 496 * t9111 + 1120 * t9118 - 48720 * t9120 + 210000 * t9122 - 392112 * t9124 + 376544 * t9126 - 183280 * t9128 - 8
            t9135 = 53940 * t9098 - 293132 * t9100 + 658084 * t9102 - 781340 * t9104 - 1524 * t9112 + 31052 * t9117 - 186340 * t9119 + 519260 * t9121
            t9134 = -10518300 * t9098 + 45398340 * t9100 - 78687180 * t9102 + 69618900 * t9104 + 25116 * t9112 - 839748 * t9117 + 7970508 * t9119 - 32967636 * t9121
            t9133 = -112896420 * t9098 + 411525660 * t9100 - 595625940 * t9102 + 435134700 * t9104 + 68068 * t9112 - 2814812 * t9117 + 33045012 * t9119 - 168436268 * t9121
            t9132 = 10518300 * t9097 - 111384 * t9111 + 1911000 * t9118 - 12839736 * t9120 + 43419168 * t9122 - 81199560 * t9124 + 85124520 * t9126 - 46823400 * t9128 + 1092
            t9131 = 225792840 * t9097 - 1009008 * t9111 + 20788768 * t9118 - 162898736 * t9120 + 626593968 * t9122 - 1309548240 * t9124 + 1518011040 * t9126 - 917738640 * t9128 + 8008
            t9116 = 2 * phi1
            t9115 = 4 * phi1
            t9114 = 6 * phi1
            t9113 = 8 * phi1
            t9092 = np.exp((-2*1j) * (t9113 - phi2))
            t9088 = np.exp((2*1j) * (t9113 + phi2))
            tfunc[..., c] = (0.33e2 / 0.473956352e9) * np.sqrt(0.2e1) * np.sqrt(0.5e1) * np.sqrt(0.113e3) * np.sqrt(0.31e2) * np.sqrt(0.19e2) * np.sqrt(0.23e2) * ((601080390 * t9097 - 2365542180 * t9128 + 3772297620 * t9126 - 3123300180 * t9124 + 1427794368 * t9122 - 353068716 * t9120 + 42678636 * t9118 - 1954524 * t9111 + 14586) * np.exp((2*1j) * phi2) + ((t9137 + t9138) * t9092) + ((-t9137 + t9138) * t9088) + (t9131 + t9133) * np.exp((-2*1j) * (t9116 - phi2)) + (t9132 + t9134) * np.exp((-2*1j) * (t9115 - phi2)) + (-t9135 + t9136) * np.exp((-2*1j) * (t9114 - phi2)) + (t9131 - t9133) * np.exp((2*1j) * (t9116 + phi2)) + (t9132 - t9134) * np.exp((2*1j) * (t9115 + phi2)) + (t9135 + t9136) * np.exp((2*1j) * (t9114 + phi2)) + (229390 * (t9139 - t9140) * t9092) + (229390 * (t9139 + t9140) * t9088))

        if Bindx == 255:
            t9164 = np.cos(phi)
            t9163 = t9164 ** 2
            t9170 = t9163 ** 2
            t9174 = t9170 ** 2
            t9182 = t9174 ** 2
            t9148 = t9164 * t9182
            t9169 = t9164 * t9163
            t9172 = t9169 ** 2
            t9173 = t9164 * t9172
            t9180 = t9173 ** 2
            t9150 = t9164 * t9180
            t9178 = t9172 ** 2
            t9152 = t9164 * t9178
            t9171 = t9164 * t9170
            t9176 = t9171 ** 2
            t9154 = t9164 * t9176
            t9156 = t9164 * t9174
            t9189 = 12406200 * t9148 - 54427200 * t9150 + 96346080 * t9152 - 87753280 * t9154 + 43435408 * t9156 + 1656 * t9164 - 78016 * t9169 + 1440352 * t9171 - 11371200 * t9173
            t9188 = -211140 * t9163 + 2405616 * t9170 - 11775540 * t9172 + 29937030 * t9174 - 42912204 * t9176 + 35121000 * t9178 - 15359676 * t9180 + 2791395 * t9182 + 3519
            t9187 = 1240620 * t9148 - 5242620 * t9150 + 6933948 * t9152 + 595332 * t9154 - 10337580 * t9156 - 47472 * t9164 + 907212 * t9169 - 4784460 * t9171 + 10735020 * t9173
            t9186 = -285200 * t9163 + 4716288 * t9170 - 30110864 * t9172 + 95939624 * t9174 - 168707760 * t9176 + 166759200 * t9178 - 86923440 * t9180 + 18609300 * t9182 + 2852
            t9185 = -238700 * t9163 + 4830672 * t9170 - 37111228 * t9172 + 139707106 * t9174 - 285308100 * t9176 + 322740600 * t9178 - 190215060 * t9180 + 45592785 * t9182 + 1925
            t9184 = -60790380 * t9148 + 272576220 * t9150 - 507352860 * t9152 + 505961820 * t9154 - 290663604 * t9156 - 33264 * t9164 + 1382612 * t9169 - 17053652 * t9171 + 95973108 * t9173
            t9168 = 4 * phi1
            t9167 = 8 * phi1
            t9166 = -3 * phi2
            t9165 = 3 * phi2
            tfunc[..., c] = (-0.33e2 / 0.59244544e8*1j) * np.sqrt(0.2e1) * np.sqrt(0.7e1) * np.sqrt(0.17e2) * np.sqrt(0.113e3) * np.sqrt(0.13e2) * np.sqrt(0.5e1) * ((1 + t9164) ** (-0.1e1 / 0.2e1)) * ((1 - t9164) ** (-0.1e1 / 0.2e1)) * ((445935776 * t9156 - 143805376 * t9173 + 24692096 * t9171 - 1912768 * t9169 + 43472 * t9164 + 94287120 * t9148 - 425812800 * t9150 + 793731840 * t9152 - 787159360 * t9154) * np.exp((3*1j) * phi2) + (t9187 - t9188) * np.exp((-3*1j) * (t9168 - phi2)) + (t9184 + t9185) * np.exp((-1*1j) * (t9168 + t9166)) + (-t9186 + t9189) * np.exp((-1*1j) * (t9167 + t9166)) + (t9184 - t9185) * np.exp((1j) * (t9168 + t9165)) + (t9186 + t9189) * np.exp((1j) * (t9167 + t9165)) + (t9187 + t9188) * np.exp((3*1j) * (t9168 + phi2)))

        if Bindx == 256:
            t9215 = np.cos(phi)
            t9214 = t9215 ** 2
            t9221 = t9215 * t9214
            t9224 = t9221 ** 2
            t9222 = t9214 ** 2
            t9226 = t9222 ** 2
            t9223 = t9215 * t9222
            t9228 = t9223 ** 2
            t9230 = t9224 ** 2
            t9225 = t9215 * t9224
            t9232 = t9225 ** 2
            t9234 = t9226 ** 2
            t9243 = 65540 * t9214 - 458780 * t9224 + 1146950 * t9226 - 1376340 * t9228 + 917560 * t9230 - 327700 * t9232 + 49155 * t9234 - 16385
            t9199 = t9215 * t9234
            t9201 = t9215 * t9232
            t9205 = t9215 * t9228
            t9207 = t9215 * t9226
            t9242 = 16385 * t9199 - 65540 * t9201 + 458780 * t9205 - 1146950 * t9207 - 49155 * t9215 + 327700 * t9221 - 917560 * t9223 + 1376340 * t9225
            t9241 = -6120 * t9214 + 69728 * t9222 - 341320 * t9224 + 867740 * t9226 - 1243832 * t9228 + 1018000 * t9230 - 445208 * t9232 + 80910 * t9234 + 102
            t9203 = t9215 * t9230
            t9240 = 35960 * t9199 - 151960 * t9201 + 200984 * t9203 + 17256 * t9205 - 299640 * t9207 - 1376 * t9215 + 26296 * t9221 - 138680 * t9223 + 311160 * t9225
            t9239 = 10518300 * t9199 - 46144800 * t9201 + 81684720 * t9203 - 74399520 * t9205 + 36825672 * t9207 + 1404 * t9215 - 66144 * t9221 + 1221168 * t9223 - 9640800 * t9225
            t9238 = 241800 * t9214 - 3998592 * t9222 + 25528776 * t9224 - 81340116 * t9226 + 143034840 * t9228 - 141382800 * t9230 + 73695960 * t9232 - 15777450 * t9234 - 2418
            t9237 = 886600 * t9214 - 17942496 * t9222 + 137841704 * t9224 - 518912108 * t9226 + 1059715800 * t9228 - 1198750800 * t9230 + 706513080 * t9232 - 169344630 * t9234 - 7150
            t9236 = 225792840 * t9199 - 1012425960 * t9201 + 1884453480 * t9203 - 1879286760 * t9205 + 1079607672 * t9207 + 123552 * t9215 - 5135416 * t9221 + 63342136 * t9223 - 356471544 * t9225
            t9220 = 4 * phi1
            t9219 = 8 * phi1
            t9218 = -3 * phi2
            t9217 = 3 * phi2
            t9216 = 16 * phi1
            tfunc[..., c] = (0.33e2 / 0.236978176e9*1j) * np.sqrt(0.5e1) * np.sqrt(0.113e3) * np.sqrt(0.31e2) * np.sqrt(0.23e2) * np.sqrt(0.7e1) * ((1 + t9215) ** (-0.1e1 / 0.2e1)) * ((1 - t9215) ** (-0.1e1 / 0.2e1)) * ((601080390 * t9199 - 2714556600 * t9201 + 5060040480 * t9203 - 5018140920 * t9205 + 2842840572 * t9207 - 916759272 * t9225 + 157412112 * t9223 - 12193896 * t9221 + 277134 * t9215) * np.exp((3*1j) * phi2) + (t9242 - t9243) * np.exp((-1*1j) * (t9216 + t9218)) + (t9242 + t9243) * np.exp((1j) * (t9216 + t9217)) + (t9240 - t9241) * np.exp((-3*1j) * (t9220 - phi2)) + (t9236 + t9237) * np.exp((-1*1j) * (t9220 + t9218)) + (t9238 + t9239) * np.exp((-1*1j) * (t9219 + t9218)) + (t9236 - t9237) * np.exp((1j) * (t9220 + t9217)) + (-t9238 + t9239) * np.exp((1j) * (t9219 + t9217)) + (t9240 + t9241) * np.exp((3*1j) * (t9220 + phi2)))

        if Bindx == 257:
            t9266 = np.cos(phi)
            t9265 = t9266 ** 2
            t9269 = t9266 * t9265
            t9272 = t9269 ** 2
            t9273 = t9266 * t9272
            t9280 = t9273 ** 2
            t9252 = t9266 * t9280
            t9278 = t9272 ** 2
            t9254 = t9266 * t9278
            t9270 = t9265 ** 2
            t9271 = t9266 * t9270
            t9276 = t9271 ** 2
            t9256 = t9266 * t9276
            t9274 = t9270 ** 2
            t9258 = t9266 * t9274
            t9288 = -12096045 * t9252 + 53196585 * t9254 - 91606125 * t9256 + 76339185 * t9258 - 40365 * t9266 + 381225 * t9269 + 3691155 * t9271 - 29865615 * t9273
            t9287 = 80640300 * t9252 - 319959900 * t9254 + 510482700 * t9256 - 418363100 * t9258 - 143060 * t9266 + 4586660 * t9269 - 43460340 * t9271 + 186216740 * t9273
            t9286 = -197568735 * t9252 + 732916275 * t9254 - 1085670495 * t9256 + 816475275 * t9258 + 150689 * t9266 - 5943245 * t9269 + 66777249 * t9271 - 327165685 * t9273
            t9251 = t9274 ** 2
            t9285 = -4032015 * t9251 - 1255800 * t9265 + 11714820 * t9270 - 43594200 * t9272 + 77527710 * t9274 - 65768040 * t9276 + 18101460 * t9278 + 7283640 * t9280 + 22425
            t9284 = -40320150 * t9251 - 507840 * t9265 + 7143800 * t9270 - 32818240 * t9272 + 52802940 * t9274 + 11003200 * t9276 - 122171400 * t9278 + 124862400 * t9280 + 5290
            t9283 = 197568735 * t9251 - 766920 * t9265 + 15373820 * t9270 - 119731304 * t9272 + 466534530 * t9274 - 1002881880 * t9276 + 1208707500 * t9278 - 764782200 * t9280 + 6391
            t9268 = 2 * phi1
            t9267 = 3 * phi1
            tfunc[..., c] = (0.33e2 / 0.29622272e8) * np.sqrt(0.2e1) * np.sqrt(0.7e1) * np.sqrt(0.17e2) * np.sqrt(0.113e3) * ((-10868 - 306433140 * t9251 + 1265272320 * t9280 - 2117422320 * t9278 + 1839735040 * t9276 - 882372920 * t9274 + 228836608 * t9272 - 28995824 * t9270 + 1391104 * t9265) * np.exp((4*1j) * phi2) + (t9283 + t9286) * np.exp((-4*1j) * (phi1 - phi2)) + (t9284 + t9287) * np.exp((-4*1j) * (t9268 - phi2)) + (t9285 - t9288) * np.exp((-4*1j) * (t9267 - phi2)) + (t9283 - t9286) * np.exp((4*1j) * (phi1 + phi2)) + (t9284 - t9287) * np.exp((4*1j) * (t9268 + phi2)) + (t9285 + t9288) * np.exp((4*1j) * (t9267 + phi2)))

        if Bindx == 258:
            t9313 = np.cos(phi)
            t9312 = t9313 ** 2
            t9318 = t9312 ** 2
            t9317 = t9313 * t9312
            t9320 = t9317 ** 2
            t9326 = t9320 ** 2
            t9340 = -t9318 - t9326
            t9301 = t9313 * t9326
            t9322 = t9318 ** 2
            t9305 = t9313 * t9322
            t9321 = t9313 * t9320
            t9339 = -t9301 - t9305 - t9317 - t9321
            t9328 = t9321 ** 2
            t9299 = t9313 * t9328
            t9319 = t9313 * t9318
            t9324 = t9319 ** 2
            t9303 = t9313 * t9324
            t9338 = -65540 * t9299 - 65540 * t9313 - 589860 * t9303 - 589860 * t9319
            t9298 = t9322 ** 2
            t9337 = 16385 * t9298 + 1048640 * t9320 - 1474650 * t9322 + 1048640 * t9324 + 16385
            t9336 = -107880 * t9299 + 474440 * t9301 - 817000 * t9303 + 680840 * t9305 - 360 * t9313 + 3400 * t9317 + 32920 * t9319 - 266360 * t9321
            t9335 = 35960 * t9298 + 11200 * t9312 - 104480 * t9318 + 388800 * t9320 - 691440 * t9322 + 586560 * t9324 - 161440 * t9326 - 64960 * t9328 - 200
            t9334 = -21036600 * t9299 + 83467800 * t9301 - 133169400 * t9303 + 109138200 * t9305 + 37320 * t9313 - 1196520 * t9317 + 11337480 * t9319 - 48578280 * t9321
            t9333 = 10518300 * t9298 + 132480 * t9312 - 1863600 * t9318 + 8561280 * t9320 - 13774680 * t9322 - 2870400 * t9324 + 31870800 * t9326 - 32572800 * t9328 - 1380
            t9332 = -225792840 * t9299 + 837618600 * t9301 - 1240766280 * t9303 + 933114600 * t9305 + 172216 * t9313 - 6792280 * t9317 + 76316856 * t9319 - 373903640 * t9321
            t9331 = 225792840 * t9298 - 876480 * t9312 + 17570080 * t9318 - 136835776 * t9320 + 533182320 * t9322 - 1146150720 * t9324 + 1381380000 * t9326 - 874036800 * t9328 + 7304
            t9316 = 2 * phi1
            t9315 = 3 * phi1
            t9314 = 4 * phi1
            t9293 = np.exp((-4*1j) * (t9314 - phi2))
            t9289 = np.exp((4*1j) * (t9314 + phi2))
            tfunc[..., c] = (0.33e2 / 0.473956352e9) * np.sqrt(0.113e3) * np.sqrt(0.31e2) * np.sqrt(0.23e2) * np.sqrt(0.13e2) * np.sqrt(0.7e1) * ((56876424 * t9318 - 2728704 * t9312 + 601080390 * t9298 - 2481880320 * t9328 + 4153405320 * t9326 - 3608711040 * t9324 + 1730808420 * t9322 - 448871808 * t9320 + 21318) * np.exp((4*1j) * phi2) + ((t9337 + t9338) * t9293) + ((t9337 - t9338) * t9289) + (t9331 + t9332) * np.exp((-4*1j) * (phi1 - phi2)) + (t9333 + t9334) * np.exp((-4*1j) * (t9316 - phi2)) + (t9335 + t9336) * np.exp((-4*1j) * (t9315 - phi2)) + (t9331 - t9332) * np.exp((4*1j) * (phi1 + phi2)) + (t9333 - t9334) * np.exp((4*1j) * (t9316 + phi2)) + (t9335 - t9336) * np.exp((4*1j) * (t9315 + phi2)) + (327700 * (-t9339 + t9340) * t9293) + (327700 * (t9339 + t9340) * t9289))

        if Bindx == 259:
            t9364 = np.cos(phi)
            t9363 = t9364 ** 2
            t9371 = t9363 ** 2
            t9370 = t9364 * t9363
            t9373 = t9370 ** 2
            t9375 = t9371 ** 2
            t9372 = t9364 * t9371
            t9377 = t9372 ** 2
            t9379 = t9373 ** 2
            t9374 = t9364 * t9373
            t9381 = t9374 ** 2
            t9383 = t9375 ** 2
            t9390 = 3089360 * t9363 - 51854880 * t9371 + 361477200 * t9373 - 1300498200 * t9375 + 2598383600 * t9377 - 2903409600 * t9379 + 1696047600 * t9381 - 403201500 * t9383 - 33580
            t9389 = 6815116 * t9363 - 129812760 * t9371 + 945287420 * t9373 - 3398637550 * t9375 + 6678759780 * t9377 - 7320811680 * t9379 + 4206302100 * t9381 - 987843675 * t9383 - 58751
            t9388 = 5364060 * t9363 - 40580280 * t9371 + 103459980 * t9373 - 51227670 * t9375 - 200048940 * t9377 + 371860320 * t9379 - 249204540 * t9381 + 60480225 * t9383 - 103155
            t9348 = t9364 * t9383
            t9350 = t9364 * t9381
            t9352 = t9364 * t9379
            t9354 = t9364 * t9377
            t9356 = t9364 * t9375
            t9387 = 16128060 * t9348 + 2601300 * t9350 - 227066580 * t9352 + 570366420 * t9354 - 627953820 * t9356 - 645840 * t9364 + 13257660 * t9370 - 101953020 * t9372 + 355265820 * t9374
            t9386 = 161280600 * t9348 - 416208000 * t9350 + 55255200 * t9352 + 850595200 * t9354 - 1149361520 * t9356 - 713000 * t9364 + 21417600 * t9370 - 181530720 * t9372 + 659264640 * t9374
            t9385 = -790274940 * t9348 + 3339548940 * t9350 - 5814981900 * t9352 + 5393033100 * t9354 - 2876351940 * t9356 - 301840 * t9364 + 12062820 * t9370 - 150426276 * t9372 + 887692036 * t9374
            t9369 = 4 * phi1
            t9368 = 8 * phi1
            t9367 = -5 * phi2
            t9366 = 5 * phi2
            t9365 = 12 * phi1
            tfunc[..., c] = (-0.33e2 / 0.59244544e8*1j) * np.sqrt(0.2e1) * np.sqrt(0.17e2) * np.sqrt(0.113e3) * ((1 + t9364) ** (-0.1e1 / 0.2e1)) * ((1 - t9364) ** (-0.1e1 / 0.2e1)) * ((1225732560 * t9348 - 5851884480 * t9350 + 11551063680 * t9352 - 12149159360 * t9354 + 7308947360 * t9356 - 2505552192 * t9374 + 457673216 * t9372 - 37733696 * t9370 + 912912 * t9364) * np.exp((5*1j) * phi2) + (t9385 - t9389) * np.exp((-1*1j) * (t9369 + t9367)) + (t9386 + t9390) * np.exp((-1*1j) * (t9368 + t9367)) + (t9385 + t9389) * np.exp((1j) * (t9369 + t9366)) + (t9386 - t9390) * np.exp((1j) * (t9368 + t9366)) + (t9387 - t9388) * np.exp((-1*1j) * (t9365 + t9367)) + (t9387 + t9388) * np.exp((1j) * (t9365 + t9366)))

        if Bindx == 260:
            t9416 = np.cos(phi)
            t9415 = t9416 ** 2
            t9424 = t9415 ** 2
            t9428 = t9424 ** 2
            t9436 = t9428 ** 2
            t9400 = t9416 * t9436
            t9423 = t9416 * t9415
            t9426 = t9423 ** 2
            t9427 = t9416 * t9426
            t9434 = t9427 ** 2
            t9402 = t9416 * t9434
            t9432 = t9426 ** 2
            t9404 = t9416 * t9432
            t9425 = t9416 * t9424
            t9430 = t9425 ** 2
            t9406 = t9416 * t9430
            t9408 = t9416 * t9428
            t9445 = 35960 * t9400 + 5800 * t9402 - 506280 * t9404 + 1271720 * t9406 - 1400120 * t9408 - 1440 * t9416 + 29560 * t9423 - 227320 * t9425 + 792120 * t9427
            t9444 = -11960 * t9415 + 90480 * t9424 - 230680 * t9426 + 114220 * t9428 + 446040 * t9430 - 829120 * t9432 + 555640 * t9434 - 134850 * t9436 + 230
            t9443 = 65540 * t9415 - 655400 * t9424 + 1638500 * t9426 - 1802350 * t9428 + 720940 * t9430 + 262160 * t9432 - 327700 * t9434 + 81925 * t9436 + 16385
            t9442 = 16385 * t9400 + 65540 * t9402 - 655400 * t9404 + 1638500 * t9406 - 1802350 * t9408 + 81925 * t9416 - 327700 * t9423 + 262160 * t9425 + 720940 * t9427
            t9441 = 201480 * t9415 - 3381840 * t9424 + 23574600 * t9426 - 84815100 * t9428 + 169459800 * t9430 - 189352800 * t9432 + 110611800 * t9434 - 26295750 * t9436 - 2190
            t9440 = 10518300 * t9400 - 27144000 * t9402 + 3603600 * t9404 + 55473600 * t9406 - 74958360 * t9408 - 46500 * t9416 + 1396800 * t9423 - 11838960 * t9425 + 42995520 * t9427
            t9439 = 1947176 * t9415 - 37089360 * t9424 + 270082120 * t9426 - 971039300 * t9428 + 1908217080 * t9430 - 2091660480 * t9432 + 1201800600 * t9434 - 282241050 * t9436 - 16786
            t9438 = 225792840 * t9400 - 954156840 * t9402 + 1661423400 * t9404 - 1540866600 * t9406 + 821814840 * t9408 + 86240 * t9416 - 3446520 * t9423 + 42978936 * t9425 - 253626296 * t9427
            t9422 = 4 * phi1
            t9421 = 8 * phi1
            t9420 = -5 * phi2
            t9419 = 5 * phi2
            t9418 = 12 * phi1
            t9417 = 16 * phi1
            tfunc[..., c] = (0.33e2 / 0.236978176e9*1j) * np.sqrt(0.113e3) * np.sqrt(0.31e2) * np.sqrt(0.13e2) * np.sqrt(0.23e2) * ((1 + t9416) ** (-0.1e1 / 0.2e1)) * ((1 - t9416) ** (-0.1e1 / 0.2e1)) * ((601080390 * t9400 - 2869674120 * t9402 + 5664463920 * t9404 - 5957760840 * t9406 + 3584195340 * t9408 - 1228684248 * t9427 + 224435904 * t9425 - 18504024 * t9423 + 447678 * t9416) * np.exp((5*1j) * phi2) + (t9438 + t9439) * np.exp((-1*1j) * (t9422 + t9420)) + (t9440 + t9441) * np.exp((-1*1j) * (t9421 + t9420)) + (t9438 - t9439) * np.exp((1j) * (t9422 + t9419)) + (t9440 - t9441) * np.exp((1j) * (t9421 + t9419)) + (t9444 + t9445) * np.exp((-1*1j) * (t9418 + t9420)) + (t9442 - t9443) * np.exp((-1*1j) * (t9417 + t9420)) + (-t9444 + t9445) * np.exp((1j) * (t9418 + t9419)) + (t9442 + t9443) * np.exp((1j) * (t9417 + t9419)))

        if Bindx == 261:
            t9468 = np.cos(phi)
            t9467 = t9468 ** 2
            t9473 = t9468 * t9467
            t9476 = t9473 ** 2
            t9477 = t9468 * t9476
            t9484 = t9477 ** 2
            t9454 = t9468 * t9484
            t9482 = t9476 ** 2
            t9456 = t9468 * t9482
            t9474 = t9467 ** 2
            t9475 = t9468 * t9474
            t9480 = t9475 ** 2
            t9458 = t9468 * t9480
            t9478 = t9474 ** 2
            t9460 = t9468 * t9478
            t9492 = -241920900 * t9454 + 819409500 * t9456 - 1071825300 * t9458 + 674978700 * t9460 + 12420 * t9468 - 1065820 * t9473 + 26793620 * t9475 - 206382220 * t9477
            t9491 = -36288135 * t9454 + 96898425 * t9456 - 39248235 * t9458 - 111151755 * t9460 - 811785 * t9468 + 12822615 * t9473 - 67315365 * t9475 + 145094235 * t9477
            t9453 = t9478 ** 2
            t9490 = 8064030 * t9453 - 1237860 * t9467 - 466440 * t9474 + 51505740 * t9476 - 193590540 * t9478 + 286340340 * t9480 - 180297000 * t9482 + 29654820 * t9484 + 26910
            t9489 = 592706205 * t9454 - 2262480675 * t9456 + 3468111465 * t9458 - 2719929975 * t9460 - 658413 * t9468 + 23898035 * t9473 - 249456697 * t9475 + 1147810055 * t9477
            t9488 = 80640300 * t9453 + 3837320 * t9467 - 53355400 * t9474 + 279605480 * t9476 - 693462880 * t9478 + 833432600 * t9480 - 383019000 * t9482 - 67633800 * t9484 - 44620
            t9487 = -395137470 * t9453 + 334180 * t9467 - 8606360 * t9474 + 95133108 * t9476 - 503971860 * t9478 + 1370454540 * t9480 - 1960303800 * t9482 + 1402100700 * t9484 - 3038
            t9472 = 2 * phi1
            t9471 = 4 * phi1
            t9470 = -3 * phi2
            t9469 = 3 * phi2
            tfunc[..., c] = -(0.33e2 / 0.29622272e8) * np.sqrt(0.17e2) * np.sqrt(0.113e3) * ((41496 + 612866280 * t9453 - 2728243440 * t9484 + 4937016240 * t9482 - 4649784880 * t9480 + 2421469440 * t9478 - 682443216 * t9476 + 93974608 * t9474 - 4896528 * t9467) * np.exp((6*1j) * phi2) + (t9490 + t9491) * np.exp((-6*1j) * (t9472 - phi2)) + (t9487 + t9489) * np.exp((-2*1j) * (t9472 + t9470)) + (t9488 + t9492) * np.exp((-2*1j) * (t9471 + t9470)) + (t9487 - t9489) * np.exp((2*1j) * (t9472 + t9469)) + (t9488 - t9492) * np.exp((2*1j) * (t9471 + t9469)) + (t9490 - t9491) * np.exp((6*1j) * (t9472 + phi2)))

        if Bindx == 262:
            t9517 = np.cos(phi)
            t9516 = t9517 ** 2
            t9524 = t9516 ** 2
            t9528 = t9524 ** 2
            t9502 = t9528 ** 2
            t9523 = t9517 * t9516
            t9526 = t9523 ** 2
            t9525 = t9517 * t9524
            t9530 = t9525 ** 2
            t9532 = t9526 ** 2
            t9527 = t9517 * t9526
            t9534 = t9527 ** 2
            t9544 = 35960 * t9502 - 5520 * t9516 - 2080 * t9524 + 229680 * t9526 - 863280 * t9528 + 1276880 * t9530 - 804000 * t9532 + 132240 * t9534 + 120
            t9543 = 16385 * t9502 - 16385 + 1081410 * t9530 - 1081410 * t9526 - 819250 * t9532 + 819250 * t9524 - 163850 * t9516 + 163850 * t9534
            t9503 = t9517 * t9534
            t9505 = t9517 * t9532
            t9507 = t9517 * t9530
            t9509 = t9517 * t9528
            t9542 = -161820 * t9503 + 432100 * t9505 - 175020 * t9507 - 495660 * t9509 - 3620 * t9517 + 57180 * t9523 - 300180 * t9525 + 647020 * t9527
            t9541 = 98310 * t9503 - 98310 * t9517 + 1802350 * t9509 - 1802350 * t9527 - 557090 * t9507 + 557090 * t9525 - 163850 * t9505 + 163850 * t9523
            t9540 = -31554900 * t9503 + 106879500 * t9505 - 139803300 * t9507 + 88040700 * t9509 + 1620 * t9517 - 139020 * t9523 + 3494820 * t9525 - 26919420 * t9527
            t9539 = 10518300 * t9502 + 500520 * t9516 - 6959400 * t9524 + 36470280 * t9526 - 90451680 * t9528 + 108708600 * t9530 - 49959000 * t9532 - 8821800 * t9534 - 5820
            t9538 = 338689260 * t9503 - 1292846100 * t9505 + 1981777980 * t9507 - 1554245700 * t9509 - 376236 * t9517 + 13656020 * t9523 - 142546684 * t9525 + 655891460 * t9527
            t9537 = 225792840 * t9502 - 190960 * t9516 + 4917920 * t9524 - 54361776 * t9526 + 287983920 * t9528 - 783116880 * t9530 + 1120173600 * t9532 - 801200400 * t9534 + 1736
            t9522 = 2 * phi1
            t9521 = 4 * phi1
            t9520 = 8 * phi1
            t9519 = -3 * phi2
            t9518 = 3 * phi2
            tfunc[..., c] = (0.33e2 / 0.473956352e9) * np.sqrt(0.2e1) * np.sqrt(0.113e3) * np.sqrt(0.13e2) * np.sqrt(0.23e2) * np.sqrt(0.31e2) * ((2374902720 * t9528 - 669319308 * t9526 + 92167404 * t9524 - 4802364 * t9516 + 40698 + 601080390 * t9502 - 2675777220 * t9534 + 4842073620 * t9532 - 4560365940 * t9530) * np.exp((6*1j) * phi2) + (-t9541 + t9543) * np.exp((-2*1j) * (t9520 + t9519)) + (t9541 + t9543) * np.exp((2*1j) * (t9520 + t9518)) + (t9542 + t9544) * np.exp((-6*1j) * (t9522 - phi2)) + (t9537 - t9538) * np.exp((-2*1j) * (t9522 + t9519)) + (t9539 + t9540) * np.exp((-2*1j) * (t9521 + t9519)) + (t9537 + t9538) * np.exp((2*1j) * (t9522 + t9518)) + (t9539 - t9540) * np.exp((2*1j) * (t9521 + t9518)) + (-t9542 + t9544) * np.exp((6*1j) * (t9522 + phi2)))

        if Bindx == 263:
            t9568 = np.cos(phi)
            t9567 = t9568 ** 2
            t9575 = t9567 ** 2
            t9574 = t9568 * t9567
            t9577 = t9574 ** 2
            t9579 = t9575 ** 2
            t9576 = t9568 * t9575
            t9581 = t9576 ** 2
            t9583 = t9577 ** 2
            t9578 = t9568 * t9577
            t9585 = t9578 ** 2
            t9587 = t9579 ** 2
            t9594 = 170040 * t9567 - 2640924 * t9575 + 13620984 * t9577 - 30161274 * t9579 + 29024424 * t9581 - 6153420 * t9583 - 7536984 * t9585 + 3681405 * t9587 - 4251
            t9593 = 239680 * t9567 - 2574544 * t9575 + 7121408 * t9577 + 6378152 * t9579 - 62152640 * t9581 + 112585200 * t9583 - 86136960 * t9585 + 24542700 * t9587 - 2996
            t9592 = 606424 * t9567 - 10521868 * t9575 + 71006488 * t9577 - 240374498 * t9579 + 450355080 * t9581 - 474730620 * t9583 + 263794440 * t9585 - 60129615 * t9587 - 5831
            t9552 = t9568 * t9587
            t9554 = t9568 * t9585
            t9556 = t9568 * t9583
            t9558 = t9568 * t9581
            t9560 = t9568 * t9579
            t9591 = 7012200 * t9552 + 904800 * t9554 - 68752320 * t9556 + 143517920 * t9558 - 131487664 * t9560 - 65272 * t9568 + 1796512 * t9574 - 15524096 * t9576 + 62597920 * t9578
            t9590 = -34359780 * t9552 + 131897220 * t9554 - 194272260 * t9556 + 131591460 * t9558 - 33328428 * t9560 + 17248 * t9568 - 543508 * t9574 + 3862964 * t9576 - 4864916 * t9578
            t9589 = 701220 * t9552 + 4727580 * t9554 - 23128092 * t9556 + 32868732 * t9558 - 16667508 * t9560 + 104832 * t9568 - 1278732 * t9574 + 4345068 * t9576 - 1673100 * t9578
            t9573 = 4 * phi1
            t9572 = 8 * phi1
            t9571 = -7 * phi2
            t9570 = 7 * phi2
            t9569 = 12 * phi1
            tfunc[..., c] = (-0.33e2 / 0.59244544e8*1j) * np.sqrt(0.2e1) * np.sqrt(0.17e2) * np.sqrt(0.113e3) * np.sqrt(0.23e2) * np.sqrt(0.5e1) * ((1 + t9568) ** (-0.1e1 / 0.2e1)) * ((1 - t9568) ** (-0.1e1 / 0.2e1)) * ((53292720 * t9552 - 275059200 * t9554 + 589717440 * t9556 - 676898560 * t9558 + 446441632 * t9560 - 168450048 * t9578 + 33971392 * t9576 - 3098368 * t9574 + 82992 * t9568) * np.exp((7*1j) * phi2) + (t9590 - t9592) * np.exp((-1*1j) * (t9573 + t9571)) + (t9591 - t9593) * np.exp((-1*1j) * (t9572 + t9571)) + (t9590 + t9592) * np.exp((1j) * (t9573 + t9570)) + (t9591 + t9593) * np.exp((1j) * (t9572 + t9570)) + (t9589 - t9594) * np.exp((-1*1j) * (t9569 + t9571)) + (t9589 + t9594) * np.exp((1j) * (t9569 + t9570)))

        if Bindx == 264:
            t9620 = np.cos(phi)
            t9619 = t9620 ** 2
            t9628 = t9619 ** 2
            t9632 = t9628 ** 2
            t9640 = t9632 ** 2
            t9604 = t9620 * t9640
            t9627 = t9620 * t9619
            t9630 = t9627 ** 2
            t9631 = t9620 * t9630
            t9638 = t9631 ** 2
            t9606 = t9620 * t9638
            t9636 = t9630 ** 2
            t9608 = t9620 * t9636
            t9629 = t9620 * t9628
            t9634 = t9629 ** 2
            t9610 = t9620 * t9634
            t9612 = t9620 * t9632
            t9649 = 35960 * t9604 + 242440 * t9606 - 1186056 * t9608 + 1685576 * t9610 - 854744 * t9612 + 5376 * t9620 - 65576 * t9627 + 222824 * t9629 - 85800 * t9631
            t9648 = -262160 * t9619 + 983100 * t9628 - 524320 * t9630 - 1802350 * t9632 + 2883760 * t9634 - 1376340 * t9636 + 114695 * t9640 - 16385
            t9647 = 16385 * t9604 + 262160 * t9606 - 983100 * t9608 + 524320 * t9610 + 1802350 * t9612 - 114695 * t9620 + 1376340 * t9629 - 2883760 * t9631
            t9646 = 8720 * t9619 - 135432 * t9628 + 698512 * t9630 - 1546732 * t9632 + 1488432 * t9634 - 315560 * t9636 - 386512 * t9638 + 188790 * t9640 - 218
            t9645 = 359520 * t9619 - 3861816 * t9628 + 10682112 * t9630 + 9567228 * t9632 - 93228960 * t9634 + 168877800 * t9636 - 129205440 * t9638 + 36814050 * t9640 - 4494
            t9644 = 10518300 * t9604 + 1357200 * t9606 - 103128480 * t9608 + 215276880 * t9610 - 197231496 * t9612 - 97908 * t9620 + 2694768 * t9627 - 23286144 * t9629 + 93896880 * t9631
            t9643 = -3985072 * t9619 + 69143704 * t9628 - 466614064 * t9630 + 1579603844 * t9632 - 2959476240 * t9634 + 3119658360 * t9636 - 1733506320 * t9638 + 395137470 * t9640 + 38318
            t9642 = 225792840 * t9604 - 866753160 * t9606 + 1276646280 * t9608 - 864743880 * t9610 + 219015384 * t9612 - 113344 * t9620 + 3571624 * t9627 - 25385192 * t9629 + 31969448 * t9631
            t9626 = 4 * phi1
            t9625 = 8 * phi1
            t9624 = -7 * phi2
            t9623 = 7 * phi2
            t9622 = 12 * phi1
            t9621 = 16 * phi1
            tfunc[..., c] = (0.33e2 / 0.236978176e9*1j) * np.sqrt(0.5e1) * np.sqrt(0.113e3) * np.sqrt(0.31e2) * np.sqrt(0.13e2) * ((1 + t9620) ** (-0.1e1 / 0.2e1)) * ((1 - t9620) ** (-0.1e1 / 0.2e1)) * ((-1899922176 * t9631 + 383158104 * t9629 - 34946016 * t9627 + 936054 * t9620 + 601080390 * t9604 - 3102350400 * t9606 + 6651332280 * t9608 - 7634634720 * t9610 + 5035346484 * t9612) * np.exp((7*1j) * phi2) + (t9647 - t9648) * np.exp((-1*1j) * (t9621 + t9624)) + (t9647 + t9648) * np.exp((1j) * (t9621 + t9623)) + (t9642 - t9643) * np.exp((-1*1j) * (t9626 + t9624)) + (t9644 - t9645) * np.exp((-1*1j) * (t9625 + t9624)) + (t9642 + t9643) * np.exp((1j) * (t9626 + t9623)) + (t9644 + t9645) * np.exp((1j) * (t9625 + t9623)) + (-t9646 + t9649) * np.exp((-1*1j) * (t9622 + t9624)) + (t9646 + t9649) * np.exp((1j) * (t9622 + t9623)))

        if Bindx == 265:
            t9672 = np.cos(phi)
            t9671 = t9672 ** 2
            t9676 = t9672 * t9671
            t9679 = t9676 ** 2
            t9680 = t9672 * t9679
            t9687 = t9680 ** 2
            t9658 = t9672 * t9687
            t9685 = t9679 ** 2
            t9660 = t9672 * t9685
            t9677 = t9671 ** 2
            t9678 = t9672 * t9677
            t9683 = t9678 ** 2
            t9662 = t9672 * t9683
            t9681 = t9677 ** 2
            t9664 = t9672 * t9681
            t9695 = -3155490 * t9658 + 793962 * t9660 + 17180046 * t9662 - 26679510 * t9664 + 79326 * t9672 - 404118 * t9676 - 1989234 * t9678 + 14175018 * t9680
            t9694 = -21036600 * t9658 + 54152280 * t9660 - 38034360 * t9662 - 10769000 * t9664 - 81464 * t9672 + 1854552 * t9676 - 11197368 * t9678 + 25095576 * t9680
            t9693 = -51539670 * t9658 + 204496110 * t9660 - 326265030 * t9662 + 267388590 * t9664 + 91434 * t9672 - 2931474 * t9676 + 27776826 * t9678 - 119016786 * t9680
            t9657 = t9681 ** 2
            t9692 = 525915 * t9657 - 415584 * t9671 + 3502980 * t9677 - 10007712 * t9679 + 7513506 * t9681 + 10007712 * t9683 - 17111484 * t9685 + 5971680 * t9687 + 12987
            t9691 = -25769835 * t9657 - 324576 * t9671 + 4565820 * t9677 - 20975136 * t9679 + 33747966 * t9681 + 7032480 * t9683 - 78083460 * t9685 + 79803360 * t9687 + 3381
            t9690 = 5259150 * t9657 + 247824 * t9671 - 3755640 * t9677 + 24131184 * t9679 - 73520172 * t9681 + 110430320 * t9683 - 74987640 * t9685 + 12214800 * t9687 - 3442
            t9675 = 3 * phi1
            t9674 = -2 * phi2
            t9673 = 2 * phi2
            tfunc[..., c] = -(0.11e2 / 0.29622272e8) * np.sqrt(0.17e2) * np.sqrt(0.113e3) * np.sqrt(0.3e1) * np.sqrt(0.5e1) * np.sqrt(0.23e2) * ((6916 + 39969540 * t9657 - 195979680 * t9687 + 393559920 * t9685 - 414525280 * t9683 + 243168536 * t9681 - 77625184 * t9679 + 12144496 * t9677 - 719264 * t9671) * np.exp((8*1j) * phi2) + (t9690 + t9694) * np.exp((-8*1j) * (phi1 - phi2)) + (t9691 - t9693) * np.exp((-4*1j) * (phi1 + t9674)) + (t9692 + t9695) * np.exp((-4*1j) * (t9675 + t9674)) + (t9691 + t9693) * np.exp((4*1j) * (phi1 + t9673)) + (t9692 - t9695) * np.exp((4*1j) * (t9675 + t9673)) + (t9690 - t9694) * np.exp((8*1j) * (phi1 + phi2)))

        if Bindx == 266:
            t9720 = np.cos(phi)
            t9719 = t9720 ** 2
            t9725 = t9720 * t9719
            t9728 = t9725 ** 2
            t9729 = t9720 * t9728
            t9736 = t9729 ** 2
            t9706 = t9720 * t9736
            t9734 = t9728 ** 2
            t9708 = t9720 * t9734
            t9726 = t9719 ** 2
            t9727 = t9720 * t9726
            t9732 = t9727 ** 2
            t9710 = t9720 * t9732
            t9730 = t9726 ** 2
            t9712 = t9720 * t9730
            t9746 = -215760 * t9706 + 54288 * t9708 + 1174704 * t9710 - 1824240 * t9712 + 5424 * t9720 - 27632 * t9725 - 136016 * t9727 + 969232 * t9729
            t9705 = t9730 ** 2
            t9745 = 35960 * t9705 - 28416 * t9719 + 239520 * t9726 - 684288 * t9728 + 513744 * t9730 + 684288 * t9732 - 1170016 * t9734 + 408320 * t9736 + 888
            t9744 = 16385 * t9705 + 393240 * t9719 - 589860 * t9726 - 1441880 * t9728 + 3244230 * t9730 - 1441880 * t9732 - 589860 * t9734 + 393240 * t9736 + 16385
            t9743 = 1966200 * t9710 + 1966200 * t9727 - 1441880 * t9712 - 1441880 * t9729 - 393240 * t9708 - 393240 * t9725 - 131080 * t9706 - 131080 * t9720
            t9742 = 42073200 * t9706 - 108304560 * t9708 + 76068720 * t9710 + 21538000 * t9712 + 162928 * t9720 - 3709104 * t9725 + 22394736 * t9727 - 50191152 * t9729
            t9741 = 10518300 * t9705 + 495648 * t9719 - 7511280 * t9726 + 48262368 * t9728 - 147040344 * t9730 + 220860640 * t9732 - 149975280 * t9734 + 24429600 * t9736 - 6884
            t9740 = -451585680 * t9706 + 1791775440 * t9708 - 2858703120 * t9710 + 2342833360 * t9712 + 801136 * t9720 - 25685296 * t9725 + 243377904 * t9727 - 1042813744 * t9729
            t9739 = 225792840 * t9705 + 2843904 * t9719 - 40005280 * t9726 + 183782144 * t9728 - 295696464 * t9730 - 61617920 * t9732 + 684159840 * t9734 - 699229440 * t9736 - 29624
            t9724 = 2 * phi1
            t9723 = 3 * phi1
            t9722 = -2 * phi2
            t9721 = 2 * phi2
            tfunc[..., c] = (0.33e2 / 0.947912704e9) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.5e1) * np.sqrt(0.113e3) * np.sqrt(0.31e2) * np.sqrt(0.13e2) * ((104006 + 601080390 * t9705 - 2947232880 * t9736 + 5918535720 * t9734 - 6233822480 * t9732 + 3656880676 * t9730 - 1167363344 * t9728 + 182634536 * t9726 - 10816624 * t9719) * np.exp((8*1j) * phi2) + (t9741 - t9742) * np.exp((-8*1j) * (phi1 - phi2)) + (t9743 + t9744) * np.exp((-8*1j) * (t9724 - phi2)) + (t9739 + t9740) * np.exp((-4*1j) * (phi1 + t9722)) + (t9745 + t9746) * np.exp((-4*1j) * (t9723 + t9722)) + (t9739 - t9740) * np.exp((4*1j) * (phi1 + t9721)) + (t9745 - t9746) * np.exp((4*1j) * (t9723 + t9721)) + (t9741 + t9742) * np.exp((8*1j) * (phi1 + phi2)) + (-t9743 + t9744) * np.exp((8*1j) * (t9724 + phi2)))

        if Bindx == 267:
            t9770 = np.cos(phi)
            t9769 = t9770 ** 2
            t9776 = t9769 ** 2
            t9775 = t9770 * t9769
            t9778 = t9775 ** 2
            t9780 = t9776 ** 2
            t9777 = t9770 * t9776
            t9782 = t9777 ** 2
            t9784 = t9778 ** 2
            t9779 = t9770 * t9778
            t9786 = t9779 ** 2
            t9788 = t9780 ** 2
            t9795 = 564408 * t9769 - 3006900 * t9776 + 2683512 * t9778 + 13577850 * t9780 - 33575256 * t9782 + 24655644 * t9784 - 2035800 * t9786 - 2839941 * t9788 - 23517
            t9794 = -697600 * t9769 + 7675920 * t9776 - 33512640 * t9778 + 65998680 * t9780 - 47583360 * t9782 - 21818160 * t9784 + 48859200 * t9786 - 18932940 * t9788 + 10900
            t9754 = t9770 * t9788
            t9756 = t9770 * t9786
            t9758 = t9770 * t9784
            t9760 = t9770 * t9782
            t9762 = t9770 * t9780
            t9793 = 420732 * t9754 + 6528132 * t9756 - 16157700 * t9758 + 1919268 * t9760 + 22007700 * t9762 - 22464 * t9770 - 666900 * t9775 + 6990516 * t9777 - 21019284 * t9779
            t9792 = -685608 * t9769 + 10596348 * t9776 - 66588648 * t9778 + 215248866 * t9780 - 388443384 * t9782 + 394957836 * t9784 - 211478904 * t9786 + 46385703 * t9788 + 7791
            t9791 = 4207320 * t9754 + 15743520 * t9756 - 90417600 * t9758 + 142498720 * t9760 - 101815120 * t9762 + 18360 * t9770 - 130080 * t9775 - 4018560 * t9777 + 33913440 * t9779
            t9790 = -20615868 * t9754 + 68497884 * t9756 - 61159644 * t9758 - 35399364 * t9760 + 99922956 * t9762 + 98784 * t9770 - 2804172 * t9775 + 21869484 * t9777 - 70410060 * t9779
            t9774 = 4 * phi1
            t9773 = 8 * phi1
            t9772 = -9 * phi2
            t9771 = 9 * phi2
            tfunc[..., c] = (-0.11e2 / 0.59244544e8*1j) * np.sqrt(0.17e2) * np.sqrt(0.226e3) * np.sqrt(0.23e2) * np.sqrt(0.3e1) * np.sqrt(0.5e1) * ((1 + t9770) ** (-0.1e1 / 0.2e1)) * ((1 - t9770) ** (-0.1e1 / 0.2e1)) * ((31975632 * t9754 - 181539072 * t9756 + 431795520 * t9758 - 555176960 * t9760 + 414525280 * t9762 - 179009792 * t9779 + 41717312 * t9777 - 4426240 * t9775 + 138320 * t9770) * np.exp((9*1j) * phi2) + (t9793 + t9795) * np.exp((-3*1j) * (t9774 - 3 * phi2)) + (t9790 + t9792) * np.exp((-1*1j) * (t9774 + t9772)) + (t9791 + t9794) * np.exp((-1*1j) * (t9773 + t9772)) + (t9790 - t9792) * np.exp((1j) * (t9774 + t9771)) + (t9791 - t9794) * np.exp((1j) * (t9773 + t9771)) + (t9793 - t9795) * np.exp((3*1j) * (t9774 + 3 * phi2)))

        if Bindx == 268:
            t9821 = np.cos(phi)
            t9820 = t9821 ** 2
            t9828 = t9820 ** 2
            t9827 = t9821 * t9820
            t9830 = t9827 ** 2
            t9832 = t9828 ** 2
            t9829 = t9821 * t9828
            t9834 = t9829 ** 2
            t9836 = t9830 ** 2
            t9831 = t9821 * t9830
            t9838 = t9831 ** 2
            t9840 = t9832 ** 2
            t9849 = -9648 * t9820 + 51400 * t9828 - 45872 * t9830 - 232100 * t9832 + 573936 * t9834 - 421464 * t9836 + 34800 * t9838 + 48546 * t9840 + 402
            t9848 = -104864 * t9820 + 39324 * t9828 + 681616 * t9830 - 937222 * t9832 + 511212 * t9836 - 157296 * t9838 - 29493 * t9840 - 3277
            t9805 = t9821 * t9840
            t9807 = t9821 * t9838
            t9809 = t9821 * t9836
            t9811 = t9821 * t9834
            t9813 = t9821 * t9832
            t9847 = 3277 * t9805 + 104864 * t9807 - 39324 * t9809 - 681616 * t9811 + 937222 * t9813 + 29493 * t9821 + 157296 * t9827 - 511212 * t9829
            t9846 = 7192 * t9805 + 111592 * t9807 - 276200 * t9809 + 32808 * t9811 + 376200 * t9813 - 384 * t9821 - 11400 * t9827 + 119496 * t9829 - 359304 * t9831
            t9845 = 2103660 * t9805 + 7871760 * t9807 - 45208800 * t9809 + 71249360 * t9811 - 50907560 * t9813 + 9180 * t9821 - 65040 * t9827 - 2009280 * t9829 + 16956720 * t9831
            t9844 = 348800 * t9820 - 3837960 * t9828 + 16756320 * t9830 - 32999340 * t9832 + 23791680 * t9834 + 10909080 * t9836 - 24429600 * t9838 + 9466470 * t9840 - 5450
            t9843 = -1501808 * t9820 + 23211048 * t9828 - 145860848 * t9830 + 471497516 * t9832 - 850875984 * t9834 + 865145736 * t9836 - 463239504 * t9838 + 101606778 * t9840 + 17066
            t9842 = 45158568 * t9805 - 150042984 * t9807 + 133968744 * t9809 + 77541464 * t9811 - 218878856 * t9813 - 216384 * t9821 + 6142472 * t9827 - 47904584 * t9829 + 154231560 * t9831
            t9826 = 4 * phi1
            t9825 = 8 * phi1
            t9824 = -9 * phi2
            t9823 = 9 * phi2
            t9822 = 16 * phi1
            tfunc[..., c] = (0.33e2 / 0.236978176e9*1j) * np.sqrt(0.3e1) * np.sqrt(0.5e1) * np.sqrt(0.113e3) * np.sqrt(0.31e2) * np.sqrt(0.13e2) * ((1 + t9821) ** (-0.1e1 / 0.2e1)) * ((1 - t9821) ** (-0.1e1 / 0.2e1)) * ((120216078 * t9805 - 682517088 * t9807 + 1623385080 * t9809 - 2087251840 * t9811 + 1558455620 * t9813 - 673007968 * t9831 + 156841048 * t9829 - 16640960 * t9827 + 520030 * t9821) * np.exp((9*1j) * phi2) + (t9847 + t9848) * np.exp((-1*1j) * (t9822 + t9824)) + (t9847 - t9848) * np.exp((1j) * (t9822 + t9823)) + (t9846 - t9849) * np.exp((-3*1j) * (t9826 - 3 * phi2)) + (t9842 - t9843) * np.exp((-1*1j) * (t9826 + t9824)) + (-t9844 + t9845) * np.exp((-1*1j) * (t9825 + t9824)) + (t9842 + t9843) * np.exp((1j) * (t9826 + t9823)) + (t9844 + t9845) * np.exp((1j) * (t9825 + t9823)) + (t9846 + t9849) * np.exp((3*1j) * (t9826 + 3 * phi2)))

        if Bindx == 269:
            t9872 = np.cos(phi)
            t9871 = t9872 ** 2
            t9879 = t9871 ** 2
            t9883 = t9879 ** 2
            t9857 = t9883 ** 2
            t9878 = t9872 * t9871
            t9881 = t9878 ** 2
            t9880 = t9872 * t9879
            t9885 = t9880 ** 2
            t9887 = t9881 ** 2
            t9882 = t9872 * t9881
            t9889 = t9882 ** 2
            t9897 = 16182 * t9857 + 23436 * t9871 - 8424 * t9879 - 447876 * t9881 + 1189188 * t9883 - 787644 * t9885 - 326664 * t9887 + 343476 * t9889 - 1674
            t9858 = t9872 * t9889
            t9860 = t9872 * t9887
            t9862 = t9872 * t9885
            t9864 = t9872 * t9883
            t9896 = -121365 * t9858 - 346869 * t9860 + 1146015 * t9862 - 606177 * t9864 + 3429 * t9872 - 81819 * t9878 + 368433 * t9880 - 361647 * t9882
            t9895 = 161820 * t9857 - 31320 * t9871 + 190680 * t9879 - 88440 * t9881 - 1663200 * t9883 + 4298360 * t9885 - 3902040 * t9887 + 1033560 * t9889 + 580
            t9894 = -792918 * t9857 - 55692 * t9871 + 670152 * t9879 - 2900604 * t9881 + 5610780 * t9883 - 4516932 * t9885 - 10584 * t9887 + 1995084 * t9889 + 714
            t9893 = -809100 * t9858 + 1237140 * t9860 + 1213380 * t9862 - 3611740 * t9864 - 6260 * t9872 + 126060 * t9878 - 902340 * t9880 + 2752860 * t9882
            t9892 = -1982295 * t9858 + 8248905 * t9860 - 13703067 * t9862 + 11560101 * t9864 + 4935 * t9872 - 136185 * t9878 + 1229067 * t9880 - 5221461 * t9882
            t9877 = 2 * phi1
            t9876 = 4 * phi1
            t9875 = 6 * phi1
            t9874 = -5 * phi2
            t9873 = 5 * phi2
            tfunc[..., c] = -(0.11e2 / 0.29622272e8) * np.sqrt(0.7e1) * np.sqrt(0.17e2) * np.sqrt(0.113e3) * np.sqrt(0.23e2) * np.sqrt(0.3e1) * np.sqrt(0.5e1) * np.sqrt(0.13e2) * ((1229832 * t9857 - 6744240 * t9889 + 15335280 * t9887 - 18557680 * t9885 + 12719360 * t9883 - 4828432 * t9881 + 910480 * t9879 - 65360 * t9871 + 760) * np.exp((10*1j) * phi2) + (-t9892 + t9894) * np.exp((-2*1j) * (t9877 + t9874)) + (t9893 + t9895) * np.exp((-2*1j) * (t9876 + t9874)) + (t9896 + t9897) * np.exp((-2*1j) * (t9875 + t9874)) + (t9892 + t9894) * np.exp((2*1j) * (t9877 + t9873)) + (-t9893 + t9895) * np.exp((2*1j) * (t9876 + t9873)) + (-t9896 + t9897) * np.exp((2*1j) * (t9875 + t9873)))

        if Bindx == 270:
            t9922 = np.cos(phi)
            t9921 = t9922 ** 2
            t9929 = t9922 * t9921
            t9932 = t9929 ** 2
            t9933 = t9922 * t9932
            t9940 = t9933 ** 2
            t9908 = t9922 * t9940
            t9938 = t9932 ** 2
            t9910 = t9922 * t9938
            t9930 = t9921 ** 2
            t9931 = t9922 * t9930
            t9936 = t9931 ** 2
            t9912 = t9922 * t9936
            t9934 = t9930 ** 2
            t9914 = t9922 * t9934
            t9950 = -53940 * t9908 - 154164 * t9910 + 509340 * t9912 - 269412 * t9914 + 1524 * t9922 - 36364 * t9929 + 163748 * t9931 - 160732 * t9933
            t9907 = t9934 ** 2
            t9949 = 7192 * t9907 + 10416 * t9921 - 3744 * t9930 - 199056 * t9932 + 528528 * t9934 - 350064 * t9936 - 145184 * t9938 + 152656 * t9940 - 744
            t9948 = 3277 * t9907 - 3277 + 937222 * t9932 - 937222 * t9936 - 255606 * t9930 + 255606 * t9938 + 137634 * t9940 - 137634 * t9921
            t9947 = -32770 * t9908 + 32770 * t9922 + 937222 * t9914 - 937222 * t9933 - 294930 * t9910 + 294930 * t9929 + 255606 * t9912 - 255606 * t9931
            t9946 = -10518300 * t9908 + 16082820 * t9910 + 15773940 * t9912 - 46952620 * t9914 - 81380 * t9922 + 1638780 * t9929 - 11730420 * t9931 + 35787180 * t9933
            t9945 = 112896420 * t9908 - 469794780 * t9910 + 780422292 * t9912 - 658375276 * t9914 - 281060 * t9922 + 7756060 * t9929 - 69998292 * t9931 + 297374636 * t9933
            t9944 = 2103660 * t9907 - 407160 * t9921 + 2478840 * t9930 - 1149720 * t9932 - 21621600 * t9934 + 55878680 * t9936 - 50726520 * t9938 + 13436280 * t9940 + 7540
            t9943 = 45158568 * t9907 + 3171792 * t9921 - 38166752 * t9930 + 165196304 * t9932 - 319547280 * t9934 + 257250032 * t9936 + 602784 * t9938 - 113624784 * t9940 - 40664
            t9928 = 2 * phi1
            t9927 = 4 * phi1
            t9926 = 6 * phi1
            t9925 = 8 * phi1
            t9924 = -5 * phi2
            t9923 = 5 * phi2
            tfunc[..., c] = (0.33e2 / 0.473956352e9) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.5e1) * np.sqrt(0.113e3) * np.sqrt(0.31e2) * np.sqrt(0.7e1) * ((74290 + 120216078 * t9907 - 659249460 * t9940 + 1499023620 * t9938 - 1814013220 * t9936 + 1243317440 * t9934 - 471979228 * t9932 + 88999420 * t9930 - 6388940 * t9921) * np.exp((10*1j) * phi2) + (t9947 + t9948) * np.exp((-2*1j) * (t9925 + t9924)) + (-t9947 + t9948) * np.exp((2*1j) * (t9925 + t9923)) + (t9943 - t9945) * np.exp((-2*1j) * (t9928 + t9924)) + (t9944 + t9946) * np.exp((-2*1j) * (t9927 + t9924)) + (t9949 + t9950) * np.exp((-2*1j) * (t9926 + t9924)) + (t9943 + t9945) * np.exp((2*1j) * (t9928 + t9923)) + (t9944 - t9946) * np.exp((2*1j) * (t9927 + t9923)) + (t9949 - t9950) * np.exp((2*1j) * (t9926 + t9923)))

        if Bindx == 271:
            t9974 = np.cos(phi)
            t9973 = t9974 ** 2
            t9981 = t9973 ** 2
            t9985 = t9981 ** 2
            t9993 = t9985 ** 2
            t9958 = t9974 * t9993
            t9980 = t9974 * t9973
            t9983 = t9980 ** 2
            t9984 = t9974 * t9983
            t9991 = t9984 ** 2
            t9960 = t9974 * t9991
            t9989 = t9983 ** 2
            t9962 = t9974 * t9989
            t9982 = t9974 * t9981
            t9987 = t9982 ** 2
            t9964 = t9974 * t9987
            t9966 = t9974 * t9985
            t10000 = 3596 * t9958 + 95236 * t9960 - 48132 * t9962 - 364156 * t9964 + 473044 * t9966 - 2640 * t9974 + 30668 * t9980 - 62348 * t9982 - 125268 * t9984
            t9999 = 2468 * t9973 + 43272 * t9981 - 224588 * t9983 + 286286 * t9985 + 94380 * t9987 - 354640 * t9989 + 123772 * t9991 + 29667 * t9993 - 617
            t9998 = -2640 * t9973 + 77920 * t9981 - 520400 * t9983 + 1390840 * t9985 - 1634160 * t9987 + 605440 * t9989 + 280720 * t9991 - 197780 * t9993 + 60
            t9997 = -5236 * t9973 + 93016 * t9981 - 696388 * t9983 + 2441978 * t9985 - 4485404 * t9987 + 4480784 * t9989 - 2313388 * t9991 + 484561 * t9993 + 77
            t9996 = 35960 * t9958 + 296960 * t9960 - 1191520 * t9962 + 1374720 * t9964 - 398640 * t9966 + 3960 * t9974 - 56320 * t9980 + 244640 * t9982 - 309760 * t9984
            t9995 = -176204 * t9958 + 471772 * t9960 + 186788 * t9962 - 2025380 * t9964 + 2969932 * t9966 + 4592 * t9974 - 102956 * t9980 + 677740 * t9982 - 2006284 * t9984
            t9979 = 4 * phi1
            t9978 = 8 * phi1
            t9977 = 12 * phi1
            t9976 = -11 * phi2
            t9975 = 11 * phi2
            tfunc[..., c] = (-0.33e2 / 0.59244544e8*1j) * np.sqrt(0.5e1) * np.sqrt(0.3e1) * np.sqrt(0.23e2) * np.sqrt(0.13e2) * np.sqrt(0.113e3) * np.sqrt(0.17e2) * np.sqrt(0.7e1) * np.sqrt(0.2e1) * ((1 + t9974) ** (-0.1e1 / 0.2e1)) * ((1 - t9974) ** (-0.1e1 / 0.2e1)) * ((273296 * t9958 - 1727936 * t9960 + 4632960 * t9962 - 6815680 * t9964 + 5931040 * t9966 - 3053376 * t9984 + 870656 * t9982 - 115520 * t9980 + 4560 * t9974) * np.exp((11*1j) * phi2) + (t9995 + t9997) * np.exp((-1*1j) * (t9979 + t9976)) + (t9996 + t9998) * np.exp((-1*1j) * (t9978 + t9976)) + (t9995 - t9997) * np.exp((1j) * (t9979 + t9975)) + (t9996 - t9998) * np.exp((1j) * (t9978 + t9975)) + (t10000 - t9999) * np.exp((-1*1j) * (t9977 + t9976)) + (t10000 + t9999) * np.exp((1j) * (t9977 + t9975)))

        if Bindx == 272:
            t10026 = np.cos(phi)
            t10025 = t10026 ** 2
            t10034 = t10025 ** 2
            t10033 = t10026 * t10025
            t10036 = t10033 ** 2
            t10038 = t10034 ** 2
            t10035 = t10026 * t10034
            t10040 = t10035 ** 2
            t10042 = t10036 ** 2
            t10037 = t10026 * t10036
            t10044 = t10037 ** 2
            t10046 = t10038 ** 2
            t10055 = 4936 * t10025 + 86544 * t10034 - 449176 * t10036 + 572572 * t10038 + 188760 * t10040 - 709280 * t10042 + 247544 * t10044 + 59334 * t10046 - 1234
            t10010 = t10026 * t10046
            t10012 = t10026 * t10044
            t10014 = t10026 * t10042
            t10016 = t10026 * t10040
            t10018 = t10026 * t10038
            t10054 = 7192 * t10010 + 190472 * t10012 - 96264 * t10014 - 728312 * t10016 + 946088 * t10018 - 5280 * t10026 + 61336 * t10033 - 124696 * t10035 - 250536 * t10037
            t10053 = -170404 * t10025 - 550536 * t10034 + 1192828 * t10036 + 937222 * t10038 - 1874444 * t10040 + 432564 * t10044 + 36047 * t10046 - 3277
            t10052 = 3277 * t10010 + 170404 * t10012 + 550536 * t10014 - 1192828 * t10016 - 937222 * t10018 - 36047 * t10026 - 432564 * t10033 + 1874444 * t10037
            t10051 = 154440 * t10025 - 4558320 * t10034 + 30443400 * t10036 - 81364140 * t10038 + 95598360 * t10040 - 35418240 * t10042 - 16422120 * t10044 + 11570130 * t10046 - 3510
            t10050 = 1341912 * t10025 - 23838672 * t10034 + 178474296 * t10036 - 625844076 * t10038 + 1149544968 * t10040 - 1148360928 * t10042 + 592888296 * t10044 - 124186062 * t10046 - 19734
            t10049 = 2103660 * t10010 + 17372160 * t10012 - 69703920 * t10014 + 80421120 * t10016 - 23320440 * t10018 + 231660 * t10026 - 3294720 * t10033 + 14311440 * t10035 - 18120960 * t10037
            t10048 = 45158568 * t10010 - 120908424 * t10012 - 47871096 * t10014 + 519075960 * t10016 - 761151144 * t10018 - 1176864 * t10026 + 26386152 * t10033 - 173695080 * t10035 + 514181928 * t10037
            t10032 = 4 * phi1
            t10031 = 8 * phi1
            t10030 = 12 * phi1
            t10029 = 16 * phi1
            t10028 = -11 * phi2
            t10027 = 11 * phi2
            tfunc[..., c] = (0.11e2 / 0.236978176e9*1j) * np.sqrt(0.31e2) * np.sqrt(0.7e1) * np.sqrt(0.113e3) * np.sqrt(0.5e1) * np.sqrt(0.3e1) * ((1 + t10026) ** (-0.1e1 / 0.2e1)) * ((1 - t10026) ** (-0.1e1 / 0.2e1)) * ((120216078 * t10010 - 760075848 * t10012 + 2037923280 * t10014 - 2998047240 * t10016 + 2608916220 * t10018 - 1343103768 * t10037 + 382979808 * t10035 - 50814360 * t10033 + 2005830 * t10026) * np.exp((11*1j) * phi2) + (t10052 - t10053) * np.exp((-1*1j) * (t10029 + t10028)) + (t10052 + t10053) * np.exp((1j) * (t10029 + t10027)) + (t10048 + t10050) * np.exp((-1*1j) * (t10032 + t10028)) + (t10049 - t10051) * np.exp((-1*1j) * (t10031 + t10028)) + (t10048 - t10050) * np.exp((1j) * (t10032 + t10027)) + (t10049 + t10051) * np.exp((1j) * (t10031 + t10027)) + (t10054 - t10055) * np.exp((-1*1j) * (t10030 + t10028)) + (t10054 + t10055) * np.exp((1j) * (t10030 + t10027)))

        if Bindx == 273:
            t10078 = np.cos(phi)
            t10077 = t10078 ** 2
            t10082 = t10078 * t10077
            t10085 = t10082 ** 2
            t10086 = t10078 * t10085
            t10093 = t10086 ** 2
            t10064 = t10078 * t10093
            t10091 = t10085 ** 2
            t10066 = t10078 * t10091
            t10083 = t10077 ** 2
            t10084 = t10078 * t10083
            t10089 = t10084 ** 2
            t10068 = t10078 * t10089
            t10087 = t10083 ** 2
            t10070 = t10078 * t10087
            t10101 = -40455 * t10064 - 269381 * t10066 + 308217 * t10068 + 383955 * t10070 - 7303 * t10078 + 35259 * t10082 + 98553 * t10084 - 512941 * t10086
            t10100 = -269700 * t10064 + 67860 * t10066 + 1468380 * t10068 - 2280300 * t10070 + 6780 * t10078 - 34540 * t10082 - 170020 * t10084 + 1211540 * t10086
            t10099 = -660765 * t10064 + 2905945 * t10066 - 5004125 * t10068 + 4170145 * t10070 - 2205 * t10078 + 20825 * t10082 + 201635 * t10084 - 1631455 * t10086
            t10063 = t10087 ** 2
            t10098 = -4495 * t10063 - 9528 * t10077 + 129220 * t10083 - 216216 * t10085 - 265122 * t10087 + 664664 * t10089 - 151788 * t10091 - 149640 * t10093 - 1191
            t10097 = -44950 * t10063 + 35520 * t10077 - 299400 * t10083 + 855360 * t10085 - 642180 * t10087 - 855360 * t10089 + 1462520 * t10091 - 510400 * t10093 - 1110
            t10096 = 220255 * t10063 + 68600 * t10077 - 639940 * t10083 + 2381400 * t10085 - 4235070 * t10087 + 3592680 * t10089 - 988820 * t10091 - 397880 * t10093 - 1225
            t10081 = 2 * phi1
            t10080 = -3 * phi2
            t10079 = 3 * phi2
            tfunc[..., c] = (0.33e2 / 0.29622272e8) * np.sqrt(0.2e1) * np.sqrt(0.17e2) * np.sqrt(0.113e3) * np.sqrt(0.23e2) * np.sqrt(0.13e2) * np.sqrt(0.3e1) * ((-341620 * t10063 + 2115840 * t10093 - 5522160 * t10091 + 7831040 * t10089 - 6463800 * t10087 + 3064320 * t10085 - 755440 * t10083 + 72960 * t10077 - 1140) * np.exp((12*1j) * phi2) + (t10096 + t10099) * np.exp((-4*1j) * (phi1 + t10080)) + (t10097 - t10100) * np.exp((-4*1j) * (t10081 + t10080)) + (t10096 - t10099) * np.exp((4*1j) * (phi1 + t10079)) + (t10097 + t10100) * np.exp((4*1j) * (t10081 + t10079)) + (t10098 - t10101) * np.exp((-12*1j) * (phi1 - phi2)) + (t10098 + t10101) * np.exp((12*1j) * (phi1 + phi2)))

        if Bindx == 274:
            t10126 = np.cos(phi)
            t10125 = t10126 ** 2
            t10132 = t10125 ** 2
            t10136 = t10132 ** 2
            t10111 = t10136 ** 2
            t10131 = t10126 * t10125
            t10134 = t10131 ** 2
            t10140 = t10134 ** 2
            t10135 = t10126 * t10134
            t10142 = t10135 ** 2
            t10152 = 16385 * t10111 + 1048640 * t10125 + 5964140 * t10132 - 14058330 * t10136 + 5964140 * t10140 + 1048640 * t10142 + 16385
            t10133 = t10126 * t10132
            t10138 = t10133 ** 2
            t10151 = 35960 * t10111 + 76224 * t10125 - 1033760 * t10132 + 1729728 * t10134 + 2120976 * t10136 - 5317312 * t10138 + 1214304 * t10140 + 1197120 * t10142 + 9528
            t10112 = t10126 * t10142
            t10114 = t10126 * t10140
            t10116 = t10126 * t10138
            t10118 = t10126 * t10136
            t10150 = -323640 * t10112 - 2155048 * t10114 + 2465736 * t10116 + 3071640 * t10118 - 58424 * t10126 + 282072 * t10131 + 788424 * t10133 - 4103528 * t10135
            t10149 = 9372220 * t10118 + 9372220 * t10135 - 5964140 * t10116 - 5964140 * t10133 - 3211460 * t10114 - 3211460 * t10131 - 196620 * t10112 - 196620 * t10126
            t10148 = -63109800 * t10112 + 15879240 * t10114 + 343600920 * t10116 - 533590200 * t10118 + 1586520 * t10126 - 8082360 * t10131 - 39784680 * t10133 + 283500360 * t10135
            t10147 = -677378520 * t10112 + 2979008760 * t10114 - 5129943000 * t10116 + 4274994360 * t10118 - 2260440 * t10126 + 21348600 * t10131 + 206704680 * t10133 - 1672474440 * t10135
            t10146 = 10518300 * t10111 - 8311680 * t10125 + 70059600 * t10132 - 200154240 * t10134 + 150270120 * t10136 + 200154240 * t10138 - 342229680 * t10140 + 119433600 * t10142 + 259740
            t10145 = 225792840 * t10111 + 70324800 * t10125 - 656029920 * t10132 + 2441275200 * t10134 - 4341551760 * t10136 + 3683010240 * t10138 - 1013681760 * t10140 - 407883840 * t10142 - 1255800
            t10130 = 2 * phi1
            t10129 = 4 * phi1
            t10128 = -3 * phi2
            t10127 = 3 * phi2
            tfunc[..., c] = (0.11e2 / 0.473956352e9) * np.sqrt(0.3e1) * np.sqrt(0.113e3) * np.sqrt(0.31e2) * ((2005830 + 601080390 * t10111 - 3722820480 * t10142 + 9716240520 * t10140 - 13778714880 * t10138 + 11373056100 * t10136 - 5391671040 * t10134 + 1329196680 * t10132 - 128373120 * t10125) * np.exp((12*1j) * phi2) + (t10149 + t10152) * np.exp((-4*1j) * (t10129 + t10128)) + (-t10149 + t10152) * np.exp((4*1j) * (t10129 + t10127)) + (t10145 + t10147) * np.exp((-4*1j) * (phi1 + t10128)) + (t10146 + t10148) * np.exp((-4*1j) * (t10130 + t10128)) + (t10145 - t10147) * np.exp((4*1j) * (phi1 + t10127)) + (t10146 - t10148) * np.exp((4*1j) * (t10130 + t10127)) + (t10150 + t10151) * np.exp((-12*1j) * (phi1 - phi2)) + (-t10150 + t10151) * np.exp((12*1j) * (phi1 + phi2)))

        if Bindx == 275:
            t10175 = np.cos(phi)
            t10174 = t10175 ** 2
            t10182 = t10174 ** 2
            t10186 = t10182 ** 2
            t10160 = t10186 ** 2
            t10197 = 620 * t10160
            t10196 = 6200 * t10160
            t10195 = -30380 * t10160
            t10181 = t10175 * t10174
            t10184 = t10181 ** 2
            t10185 = t10175 * t10184
            t10192 = t10185 ** 2
            t10190 = t10184 ** 2
            t10183 = t10175 * t10182
            t10188 = t10183 ** 2
            t10180 = 4 * phi1
            t10179 = 8 * phi1
            t10178 = 12 * phi1
            t10177 = -13 * phi2
            t10176 = 13 * phi2
            t10167 = t10175 * t10186
            t10165 = t10175 * t10188
            t10163 = t10175 * t10190
            t10161 = t10175 * t10192
            tfunc[..., c] = (0.33e2 / 0.59244544e8*1j) * np.sqrt(0.3e1) * np.sqrt(0.13e2) * np.sqrt(0.23e2) * np.sqrt(0.29e2) * np.sqrt(0.113e3) * np.sqrt(0.17e2) * np.sqrt(0.2e1) * np.sqrt((1 - t10175)) * ((47120 * t10160 + 47120 * t10161 + 74480 * t10182 + 74480 * t10181 - 4560 * t10174 - 4560 * t10175 - 1010800 * t10188 - 1010800 * t10167 + 798000 * t10186 + 798000 * t10185 + 734160 * t10190 + 734160 * t10165 - 351120 * t10184 - 351120 * t10183 - 287280 * t10192 - 287280 * t10163) * np.exp((13*1j) * phi2) + (t10195 + 68355 * t10161 + 126175 * t10192 - 370685 * t10163 - 161945 * t10190 + 831775 * t10165 - 19845 * t10188 - 991025 * t10167 + 238875 * t10186 + 667625 * t10185 - 232995 * t10184 - 249655 * t10183 + 94325 * t10182 + 47285 * t10181 - 14455 * t10174 - 3675 * t10175 + 245) * np.exp((-1*1j) * (t10180 + t10177)) + (t10196 - 34100 * t10161 + 50700 * t10192 + 51740 * t10163 - 213380 * t10190 + 109020 * t10165 + 250140 * t10188 - 306900 * t10167 - 61380 * t10186 + 260260 * t10185 - 74140 * t10184 - 89580 * t10183 + 51700 * t10182 + 9140 * t10181 - 10380 * t10174 + 420 * t10175 + 540) * np.exp((-1*1j) * (t10179 + t10177)) + (t10195 - 129115 * t10161 - 71295 * t10192 + 425565 * t10163 + 634305 * t10190 - 359415 * t10165 - 1211035 * t10188 - 239855 * t10167 + 990045 * t10186 + 561295 * t10185 - 339325 * t10184 - 322665 * t10183 + 21315 * t10182 + 68355 * t10181 + 6615 * t10174 - 4165 * t10175 - 245) * np.exp((1j) * (t10180 + t10176)) + (t10196 + 46500 * t10161 + 131300 * t10192 + 130260 * t10163 - 134860 * t10190 - 457260 * t10165 - 316140 * t10188 + 240900 * t10167 + 486420 * t10186 + 164780 * t10185 - 169620 * t10184 - 154180 * t10183 - 12900 * t10182 + 29660 * t10181 + 10140 * t10174 - 660 * t10175 - 540) * np.exp((1j) * (t10179 + t10176)) + (t10197 - 5425 * t10161 + 19155 * t10192 - 31129 * t10163 + 8099 * t10190 + 55419 * t10165 - 89089 * t10188 + 29315 * t10167 + 63063 * t10186 - 77363 * t10185 + 17017 * t10184 + 27573 * t10183 - 22295 * t10182 + 3241 * t10181 + 3189 * t10174 - 1631 * t10175 + 241) * np.exp((-1*1j) * (t10178 + t10177)) + (t10197 + 6665 * t10161 + 31245 * t10192 + 81529 * t10163 + 120757 * t10190 + 73437 * t10165 - 71071 * t10188 - 189475 * t10167 - 155727 * t10186 - 15301 * t10185 + 79079 * t10184 + 68523 * t10183 + 18655 * t10182 - 6881 * t10181 - 6933 * t10174 - 2113 * t10175 - 241) * np.exp((1j) * (t10178 + t10176))) * ((1 + t10175) ** (-0.1e1 / 0.2e1))

        if Bindx == 276:
            t10222 = np.cos(phi)
            t10221 = t10222 ** 2
            t10230 = t10221 ** 2
            t10234 = t10230 ** 2
            t10207 = t10234 ** 2
            t10246 = 565 * t10207
            t10245 = 1240 * t10207
            t10244 = 362700 * t10207
            t10243 = 7785960 * t10207
            t10229 = t10222 * t10221
            t10232 = t10229 ** 2
            t10233 = t10222 * t10232
            t10240 = t10233 ** 2
            t10238 = t10232 ** 2
            t10231 = t10222 * t10230
            t10236 = t10231 ** 2
            t10228 = 4 * phi1
            t10227 = 8 * phi1
            t10226 = 12 * phi1
            t10225 = 16 * phi1
            t10224 = -13 * phi2
            t10223 = 13 * phi2
            t10214 = t10222 * t10234
            t10212 = t10222 * t10236
            t10210 = t10222 * t10238
            t10208 = t10222 * t10240
            tfunc[..., c] = (-0.11e2 / 0.236978176e9*1j) * np.sqrt(0.31e2) * np.sqrt(0.113e3) * np.sqrt(0.29e2) * np.sqrt(0.3e1) * np.sqrt((1 - t10222)) * ((1 + t10222) ** (-0.1e1 / 0.2e1)) * ((t10246 - 6780 * t10208 + 36160 * t10240 - 484770 * t10234 + 36160 * t10221 - 6780 * t10222 + 565 + 323180 * t10214 + 323180 * t10233 - 110740 * t10210 - 110740 * t10229 + 205660 * t10238 - 205660 * t10212 - 205660 * t10231 + 205660 * t10230) * np.exp((-1*1j) * (t10225 + t10224)) + (-444625650 * t10236 - 444625650 * t10214 + 351020250 * t10234 + 351020250 * t10233 + 322938630 * t10238 + 322938630 * t10212 - 154448910 * t10232 - 154448910 * t10231 - 126367290 * t10240 - 126367290 * t10210 + 32761890 * t10230 + 32761890 * t10229 + 20726910 * t10207 + 20726910 * t10208 - 2005830 * t10221 - 2005830 * t10222) * np.exp((13*1j) * phi2) + (t10246 + 7910 * t10208 + 50850 * t10240 - 50850 * t10221 - 7910 * t10222 - 565 + 1131130 * t10236 - 1131130 * t10232 + 925470 * t10212 - 925470 * t10231 + 807950 * t10214 - 807950 * t10233 + 514150 * t10238 - 514150 * t10230 + 197750 * t10210 - 197750 * t10229) * np.exp((1j) * (t10225 + t10223)) + (-17518410 * t10208 + 95001270 * t10210 - 213172050 * t10212 + 253985550 * t10214 + 3704610 * t10221 + 941850 * t10222 - 12118470 * t10229 - 24174150 * t10230 + 63983010 * t10231 + 59713290 * t10232 - 171102750 * t10233 - 61220250 * t10234 + 5085990 * t10236 + 41504190 * t10238 - 32336850 * t10240 + t10243 - 62790) * np.exp((-1*1j) * (t10228 + t10224)) + (-1994850 * t10208 + 3026790 * t10210 + 6377670 * t10212 - 17953650 * t10214 - 607230 * t10221 + 24570 * t10222 + 534690 * t10229 + 3024450 * t10230 - 5240430 * t10231 - 4337190 * t10232 + 15225210 * t10233 - 3590730 * t10234 + 14633190 * t10236 - 12482730 * t10238 + 2965950 * t10240 + 31590 + t10244) * np.exp((-1*1j) * (t10227 + t10224)) + (33090330 * t10208 - 109066230 * t10210 + 92112930 * t10212 + 61471410 * t10214 - 1695330 * t10221 + 1067430 * t10222 - 17518410 * t10229 - 5462730 * t10230 + 82694430 * t10231 + 86964150 * t10232 - 143851890 * t10233 - 253734390 * t10234 + 310370970 * t10236 - 162563310 * t10238 + 18271890 * t10240 + t10243 + 62790) * np.exp((1j) * (t10228 + t10223)) + (2720250 * t10208 + 7620210 * t10210 - 26749710 * t10212 + 14092650 * t10214 + 593190 * t10221 - 38610 * t10222 + 1735110 * t10229 - 754650 * t10230 - 9019530 * t10231 - 9922770 * t10232 + 9639630 * t10233 + 28455570 * t10234 - 18494190 * t10236 - 7889310 * t10238 + 7681050 * t10240 - 31590 + t10244) * np.exp((1j) * (t10227 + t10223)) + (482 + 126126 * t10234 - 154726 * t10233 + 34034 * t10232 + 55146 * t10231 - 44590 * t10230 + 6482 * t10229 + 6378 * t10221 - 3262 * t10222 + t10245 - 10850 * t10208 + 38310 * t10240 - 62258 * t10210 + 16198 * t10238 + 110838 * t10212 - 178178 * t10236 + 58630 * t10214) * np.exp((-1*1j) * (t10226 + t10224)) + (-482 - 378950 * t10214 - 311454 * t10234 - 30602 * t10233 + 158158 * t10232 + 137046 * t10231 + 37310 * t10230 - 13762 * t10229 - 13866 * t10221 - 4226 * t10222 + t10245 + 13330 * t10208 + 62490 * t10240 + 163058 * t10210 + 241514 * t10238 + 146874 * t10212 - 142142 * t10236) * np.exp((1j) * (t10226 + t10223)))

        if Bindx == 277:
            t10269 = np.cos(phi)
            t10268 = t10269 ** 2
            t10275 = t10269 * t10268
            t10278 = t10275 ** 2
            t10279 = t10269 * t10278
            t10286 = t10279 ** 2
            t10255 = t10269 * t10286
            t10284 = t10278 ** 2
            t10257 = t10269 * t10284
            t10276 = t10268 ** 2
            t10277 = t10269 * t10276
            t10282 = t10277 ** 2
            t10259 = t10269 * t10282
            t10280 = t10276 ** 2
            t10261 = t10269 * t10280
            t10294 = -651 * t10255 - 7259 * t10257 - 2639 * t10259 + 20449 * t10261 + 315 * t10269 + 1771 * t10275 - 7553 * t10277 - 4433 * t10279
            t10293 = -4340 * t10255 - 5460 * t10257 + 43260 * t10259 - 49060 * t10261 + 500 * t10269 - 6060 * t10275 + 14340 * t10277 + 6820 * t10279
            t10292 = -10633 * t10255 + 49735 * t10257 - 88053 * t10259 + 66395 * t10261 - 1127 * t10269 + 9065 * t10275 - 17787 * t10277 - 7595 * t10279
            t10254 = t10280 ** 2
            t10291 = -34 + 62 * t10254 - 1156 * t10268 + 728 * t10276 + 12012 * t10278 - 12012 * t10280 - 12012 * t10282 + 9464 * t10284 + 2948 * t10286
            t10290 = -140 + 620 * t10254 + 840 * t10268 + 5880 * t10276 - 33880 * t10278 + 47520 * t10280 - 8360 * t10282 - 23160 * t10284 + 10680 * t10286
            t10289 = -3038 * t10254 - 2940 * t10268 + 25480 * t10276 - 83692 * t10278 + 132300 * t10280 - 104468 * t10282 + 33320 * t10284 + 2940 * t10286 + 98
            t10274 = 2 * phi1
            t10273 = 4 * phi1
            t10272 = 6 * phi1
            t10271 = -7 * phi2
            t10270 = 7 * phi2
            tfunc[..., c] = -(0.33e2 / 0.29622272e8) * np.sqrt(0.17e2) * np.sqrt(0.113e3) * np.sqrt(0.5e1) * np.sqrt(0.29e2) * np.sqrt(0.23e2) * np.sqrt(0.13e2) * np.sqrt(0.3e1) * ((4712 * t10254 - 33136 * t10286 + 100016 * t10284 - 168112 * t10282 + 170240 * t10280 - 104272 * t10278 + 36176 * t10276 - 5776 * t10268 + 152) * np.exp((14*1j) * phi2) + (t10289 - t10292) * np.exp((-2*1j) * (t10274 + t10271)) + (t10290 + t10293) * np.exp((-2*1j) * (t10273 + t10271)) + (t10291 + t10294) * np.exp((-2*1j) * (t10272 + t10271)) + (t10289 + t10292) * np.exp((2*1j) * (t10274 + t10270)) + (t10290 - t10293) * np.exp((2*1j) * (t10273 + t10270)) + (t10291 - t10294) * np.exp((2*1j) * (t10272 + t10270)))

        if Bindx == 278:
            t10319 = np.cos(phi)
            t10318 = t10319 ** 2
            t10326 = t10319 * t10318
            t10329 = t10326 ** 2
            t10330 = t10319 * t10329
            t10337 = t10330 ** 2
            t10305 = t10319 * t10337
            t10335 = t10329 ** 2
            t10307 = t10319 * t10335
            t10327 = t10318 ** 2
            t10328 = t10319 * t10327
            t10333 = t10328 ** 2
            t10309 = t10319 * t10333
            t10331 = t10327 ** 2
            t10311 = t10319 * t10331
            t10347 = -2604 * t10305 - 29036 * t10307 - 10556 * t10309 + 81796 * t10311 + 1260 * t10319 + 7084 * t10326 - 30212 * t10328 - 17732 * t10330
            t10304 = t10331 ** 2
            t10346 = -136 + 248 * t10304 - 4624 * t10318 + 2912 * t10327 + 48048 * t10329 - 48048 * t10331 - 48048 * t10333 + 37856 * t10335 + 11792 * t10337
            t10345 = 113 * t10304 - 10170 * t10318 + 10170 * t10337 - 113 + 226226 * t10333 - 226226 * t10329 + 102830 * t10335 - 102830 * t10327
            t10344 = -1582 * t10305 - 39550 * t10307 + 1582 * t10319 + 39550 * t10326 - 185094 * t10309 + 185094 * t10328 - 161590 * t10311 + 161590 * t10330
            t10343 = 72540 * t10304 + 98280 * t10318 + 687960 * t10327 - 3963960 * t10329 + 5559840 * t10331 - 978120 * t10333 - 2709720 * t10335 + 1249560 * t10337 - 16380
            t10342 = -507780 * t10305 - 638820 * t10307 + 5061420 * t10309 - 5740020 * t10311 + 58500 * t10319 - 709020 * t10326 + 1677780 * t10328 + 797940 * t10330
            t10341 = -5450172 * t10305 + 25492740 * t10307 - 45133452 * t10309 + 34032180 * t10311 - 577668 * t10319 + 4646460 * t10326 - 9117108 * t10328 - 3892980 * t10330
            t10340 = 1557192 * t10304 + 1506960 * t10318 - 13060320 * t10327 + 42898128 * t10329 - 67813200 * t10331 + 53547312 * t10333 - 17078880 * t10335 - 1506960 * t10337 - 50232
            t10325 = 2 * phi1
            t10324 = 4 * phi1
            t10323 = 6 * phi1
            t10322 = 8 * phi1
            t10321 = -7 * phi2
            t10320 = 7 * phi2
            tfunc[..., c] = (0.11e2 / 0.473956352e9) * np.sqrt(0.31e2) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.5e1) * np.sqrt(0.29e2) * np.sqrt(0.113e3) * ((4145382 * t10304 - 29151396 * t10337 + 87989076 * t10335 - 147896532 * t10333 + 133722 + 149768640 * t10331 - 91733292 * t10329 + 31825836 * t10327 - 5081436 * t10318) * np.exp((14*1j) * phi2) + (t10344 + t10345) * np.exp((-2*1j) * (t10322 + t10321)) + (-t10344 + t10345) * np.exp((2*1j) * (t10322 + t10320)) + (t10340 + t10341) * np.exp((-2*1j) * (t10325 + t10321)) + (t10342 + t10343) * np.exp((-2*1j) * (t10324 + t10321)) + (t10346 + t10347) * np.exp((-2*1j) * (t10323 + t10321)) + (t10340 - t10341) * np.exp((2*1j) * (t10325 + t10320)) + (-t10342 + t10343) * np.exp((2*1j) * (t10324 + t10320)) + (t10346 - t10347) * np.exp((2*1j) * (t10323 + t10320)))

        if Bindx == 279:
            t10369 = np.cos(phi)
            t10368 = t10369 ** 2
            t10374 = t10369 * t10368
            t10377 = t10374 ** 2
            t10378 = t10369 * t10377
            t10385 = t10378 ** 2
            t10355 = t10369 * t10385
            t10390 = 4 * t10355
            t10389 = 40 * t10355
            t10388 = -196 * t10355
            t10387 = 49 - 637 * t10368 + 98 * t10369
            t10383 = t10377 ** 2
            t10375 = t10368 ** 2
            t10376 = t10369 * t10375
            t10381 = t10376 ** 2
            t10379 = t10375 ** 2
            t10373 = 4 * phi1
            t10372 = 8 * phi1
            t10371 = -15 * phi2
            t10370 = 15 * phi2
            t10361 = t10369 * t10379
            t10359 = t10369 * t10381
            t10357 = t10369 * t10383
            tfunc[..., c] = (-0.33e2 / 0.59244544e8*1j) * np.sqrt(0.3e1) * np.sqrt(0.23e2) * np.sqrt(0.899e3) * np.sqrt(0.13e2) * np.sqrt(0.5e1) * np.sqrt(0.113e3) * np.sqrt(0.17e2) * np.sqrt(0.2e1) * ((1 - t10369) ** (0.3e1 / 0.2e1)) * (304 * (t10355 + 2 * t10385 - 5 * t10357 - 12 * t10383 + 9 * t10359 + 30 * t10381 - 5 * t10361 - 40 * t10379 - 5 * t10378 + 30 * t10377 + 9 * t10376 - 12 * t10375 - 5 * t10374 + 2 * t10368 + t10369) * np.exp((15*1j) * phi2) + (t10390 - 37 * t10385 + 142 * t10357 - 271 * t10383 + 184 * t10359 + 275 * t10381 - 726 * t10361 + 561 * t10379 + 132 * t10378 - 583 * t10377 + 418 * t10376 - 37 * t10375 - 128 * t10374 + 89 * t10368 - 26 * t10369 + 3) * np.exp((-3*1j) * (t10373 - 5 * phi2)) + (t10390 + 53 * t10385 + 322 * t10357 + 1183 * t10383 + 2912 * t10359 + 5005 * t10381 + 6006 * t10361 + 4719 * t10379 + 1716 * t10378 - 1001 * t10377 - 2002 * t10376 - 1547 * t10375 - 728 * t10374 - 217 * t10368 - 38 * t10369 - 3) * np.exp((3*1j) * (t10373 + 5 * phi2)) + (t10388 + 343 * t10385 + 1078 * t10357 - 2107 * t10383 - 2352 * t10359 + 5439 * t10381 + 2450 * t10361 - 7595 * t10379 - 980 * t10378 + 6125 * t10377 - 294 * t10376 - 2793 * t10375 + 392 * t10374 - t10387) * np.exp((-1*1j) * (t10373 + t10371)) + (t10389 - 220 * t10385 + 320 * t10357 + 380 * t10383 - 1480 * t10359 + 740 * t10381 + 1840 * t10361 - 2340 * t10379 - 360 * t10378 + 2060 * t10377 - 800 * t10376 - 620 * t10375 + 520 * t10374 - 20 * t10368 - 80 * t10369 + 20) * np.exp((-1*1j) * (t10372 + t10371)) + (t10388 - 1127 * t10385 - 1862 * t10357 + 1323 * t10383 + 7448 * t10359 + 5537 * t10381 - 7154 * t10361 - 12789 * t10379 - 1764 * t10378 + 8771 * t10377 + 5782 * t10376 - 1127 * t10375 - 2352 * t10374 + t10387) * np.exp((1j) * (t10373 + t10370)) + (t10389 + 380 * t10385 + 1520 * t10357 + 3140 * t10383 + 2840 * t10359 - 1540 * t10381 - 7040 * t10361 - 7260 * t10379 - 1320 * t10378 + 4180 * t10377 + 4400 * t10376 + 1580 * t10375 - 280 * t10374 - 460 * t10368 - 160 * t10369 - 20) * np.exp((1j) * (t10372 + t10370))) * ((1 + t10369) ** (-0.1e1 / 0.2e1))

        if Bindx == 280:
            t10415 = np.cos(phi)
            t10441 = 1 + t10415
            t10414 = t10415 ** 2
            t10422 = t10414 ** 2
            t10426 = t10422 ** 2
            t10400 = t10426 ** 2
            t10440 = 113 * t10400
            t10439 = 248 * t10400
            t10438 = 72540 * t10400
            t10437 = 1557192 * t10400
            t10407 = t10415 * t10426
            t10423 = t10415 * t10422
            t10421 = t10415 * t10414
            t10424 = t10421 ** 2
            t10428 = t10423 ** 2
            t10436 = -186 + 79794 * t10407 - 28210 * t10423 + 62062 * t10424 - 62062 * t10428
            t10430 = t10424 ** 2
            t10403 = t10415 * t10430
            t10425 = t10415 * t10424
            t10432 = t10425 ** 2
            t10435 = -25304370 * t10403 - 5839470 * t10414 + 5839470 * t10432 + 389298 * t10441
            t10420 = 4 * phi1
            t10419 = 8 * phi1
            t10418 = 16 * phi1
            t10417 = -15 * phi2
            t10416 = 15 * phi2
            t10405 = t10415 * t10428
            t10401 = t10415 * t10432
            tfunc[..., c] = (-0.11e2 / 0.236978176e9*1j) * np.sqrt(0.113e3) * np.sqrt(0.29e2) * np.sqrt(0.5e1) * np.sqrt(0.3e1) * np.sqrt((1 - t10415)) * t10441 ** (-0.1e1 / 0.2e1) * (4145382 * (-35 * t10428 - 35 * t10407 + 35 * t10426 + 35 * t10425 + 21 * t10430 + 21 * t10405 - 21 * t10424 - 21 * t10423 - 7 * t10432 - 7 * t10403 + 7 * t10422 + 7 * t10421 + t10400 + t10401 - t10414 - t10415) * np.exp((15*1j) * phi2) + (t10440 - 1582 * t10401 + 10170 * t10432 - 39550 * t10403 + 39550 * t10421 - 10170 * t10414 + 1582 * t10415 - 113 + 226226 * t10428 - 226226 * t10424 - 185094 * t10405 + 185094 * t10423 - 161590 * t10407 + 161590 * t10425 + 102830 * t10430 - 102830 * t10422) * np.exp((-1*1j) * (t10418 + t10417)) + (-2542 * t10401 + 11098 * t10432 - 25606 * t10403 + 28210 * t10430 + 5642 * t10405 - 26598 * t10426 - 44330 * t10425 - 5642 * t10422 + 13454 * t10421 - 7130 * t10414 + 1798 * t10415 + t10439 + t10436) * np.exp((-3*1j) * (t10420 - 5 * phi2)) + (3038 * t10401 + 16678 * t10432 + 53382 * t10403 + 107198 * t10430 + 129766 * t10405 - 186186 * t10426 - 168454 * t10425 + 50778 * t10422 + 31682 * t10421 + 11098 * t10414 + 2170 * t10415 + t10439 - t10436) * np.exp((3*1j) * (t10420 + 5 * phi2)) + (-4282278 * t10401 - 61898382 * t10405 + 79806090 * t10407 - 1946490 * t10421 - 25304370 * t10422 + 19854198 * t10423 + 50998038 * t10424 - 56448210 * t10425 - 52555230 * t10426 + 23747178 * t10428 + 1946490 * t10430 - t10435 + t10437) * np.exp((-1*1j) * (t10420 + t10417)) + (-471510 * t10401 + 108810 * t10403 + 4025970 * t10405 - 7580430 * t10407 - 108810 * t10414 + 181350 * t10415 - 979290 * t10421 + 2067390 * t10422 + 326430 * t10423 - 5186610 * t10424 + 4388670 * t10425 + 3590730 * t10426 + 1994850 * t10428 - 3373110 * t10430 + 979290 * t10432 + t10438 - 36270) * np.exp((-1*1j) * (t10419 + t10417)) + (7396662 * t10401 + 15182622 * t10405 + 44769270 * t10407 - 13625430 * t10421 + 9732450 * t10422 + 54891018 * t10423 + 23747178 * t10424 - 83699070 * t10425 - 87592050 * t10426 + 100828182 * t10428 - 48662250 * t10430 + t10435 + t10437) * np.exp((1j) * (t10420 + t10416)) + (616590 * t10401 + 2937870 * t10403 - 7943130 * t10405 - 398970 * t10407 + 544050 * t10414 + 253890 * t10415 - 326430 * t10421 - 3373110 * t10422 - 5114070 * t10423 + 398970 * t10424 + 9974250 * t10425 + 10772190 * t10426 - 9974250 * t10428 - 544050 * t10430 + 2067390 * t10432 + t10438 + 36270) * np.exp((1j) * (t10419 + t10416)) + (t10440 + 1808 * t10401 + 13560 * t10432 + 63280 * t10403 + 1454310 * t10426 + 63280 * t10421 + 13560 * t10414 + 1808 * t10415 + 113 + 1292720 * t10407 + 1292720 * t10425 + 904904 * t10428 + 904904 * t10424 + 493584 * t10405 + 493584 * t10423 + 205660 * t10430 + 205660 * t10422) * np.exp((1j) * (t10418 + t10416)))

        if Bindx == 281:
            t10464 = np.cos(phi)
            t10463 = t10464 ** 2
            t10468 = t10464 * t10463
            t10471 = t10468 ** 2
            t10472 = t10464 * t10471
            t10479 = t10472 ** 2
            t10450 = t10464 * t10479
            t10488 = -t10450 - t10464
            t10469 = t10463 ** 2
            t10473 = t10469 ** 2
            t10449 = t10473 ** 2
            t10477 = t10471 ** 2
            t10487 = 1 + t10449 + 64 * t10463 + 364 * t10469 - 858 * t10473 + 364 * t10477 + 64 * t10479
            t10470 = t10464 * t10469
            t10475 = t10470 ** 2
            t10486 = -49 - 49 * t10449 + 980 * t10469 - 3136 * t10471 + 4410 * t10473 - 3136 * t10475 + 980 * t10477
            t10452 = t10464 * t10477
            t10454 = t10464 * t10475
            t10456 = t10464 * t10473
            t10485 = -12 * t10450 - 196 * t10452 - 364 * t10454 + 572 * t10456 - 12 * t10464 - 196 * t10468 - 364 * t10470 + 572 * t10472
            t10484 = -240 * t10452 + 1200 * t10454 - 880 * t10456 - 240 * t10468 + 1200 * t10470 - 880 * t10472 + 80 * t10488
            t10483 = 980 * t10452 - 1764 * t10454 + 980 * t10456 + 980 * t10468 - 1764 * t10470 + 980 * t10472 + 196 * t10488
            t10482 = 10 + 10 * t10449 + 240 * t10463 - 360 * t10469 - 880 * t10471 + 1980 * t10473 - 880 * t10475 - 360 * t10477 + 240 * t10479
            t10467 = 3 * phi1
            t10466 = -4 * phi2
            t10465 = 4 * phi2
            tfunc[..., c] = -(0.33e2 / 0.59244544e8) * np.sqrt(0.17e2) * np.sqrt(0.113e3) * np.sqrt(0.5e1) * np.sqrt(0.23e2) * np.sqrt(0.899e3) * np.sqrt(0.13e2) * np.sqrt(0.3e1) * ((76 * t10449 - 608 * t10479 + 2128 * t10477 - 4256 * t10475 + 5320 * t10473 - 4256 * t10471 + 2128 * t10469 - 608 * t10463 + 76) * np.exp((16*1j) * phi2) + (t10485 + t10487) * np.exp((-4*1j) * (t10467 + t10466)) + (-t10485 + t10487) * np.exp((4*1j) * (t10467 + t10465)) + (-t10483 + t10486) * np.exp((-4*1j) * (phi1 + t10466)) + (t10483 + t10486) * np.exp((4*1j) * (phi1 + t10465)) + (t10482 + t10484) * np.exp((-8*1j) * (phi1 - 2 * phi2)) + (t10482 - t10484) * np.exp((8*1j) * (phi1 + 2 * phi2)))

        if Bindx == 282:
            t10513 = np.cos(phi)
            t10512 = t10513 ** 2
            t10517 = t10513 * t10512
            t10520 = t10517 ** 2
            t10521 = t10513 * t10520
            t10528 = t10521 ** 2
            t10499 = t10513 * t10528
            t10541 = -t10499 - t10513
            t10526 = t10520 ** 2
            t10501 = t10513 * t10526
            t10545 = -t10501 - t10517
            t10518 = t10512 ** 2
            t10522 = t10518 ** 2
            t10505 = t10513 * t10522
            t10544 = -t10505 - t10521
            t10519 = t10513 * t10518
            t10524 = t10519 ** 2
            t10543 = t10524 + t10520
            t10542 = t10526 + t10518
            t10539 = t10544 + t10545
            t10498 = t10522 ** 2
            t10538 = 248 * t10498 + 15872 * t10512 + 90272 * t10518 - 212784 * t10522 + 90272 * t10526 + 15872 * t10528 + 248
            t10503 = t10513 * t10524
            t10537 = -56058912 * t10503 - 56058912 * t10519 + 6228768 * t10541
            t10536 = 2976 * t10499 + 48608 * t10501 + 90272 * t10503 + 2976 * t10513 + 48608 * t10517 + 90272 * t10519 + 141856 * t10544
            t10535 = 1557192 * t10498 - 140147280 * t10522 + 99660288 * t10543 + 1557192
            t10534 = -63280 * t10501 - 63280 * t10517 - 1292720 * t10505 - 1292720 * t10521 - 493584 * t10503 - 493584 * t10519 + 1808 * t10541
            t10533 = 113 * t10498 + 13560 * t10512 + 1454310 * t10522 + 13560 * t10528 + 205660 * t10542 + 904904 * t10543 + 113
            t10532 = 72540 * t10498 + 1740960 * t10512 + 14362920 * t10522 + 1740960 * t10528 - 2611440 * t10542 - 6383520 * t10543 + 72540
            t10531 = 8704800 * t10503 + 8704800 * t10519 + 6383520 * t10544 + 1740960 * t10545 + 580320 * t10541
            t10516 = 3 * phi1
            t10515 = -4 * phi2
            t10514 = 4 * phi2
            t10495 = np.exp((-4*1j) * (phi1 + t10515))
            t10493 = np.exp((4*1j) * (phi1 + t10514))
            tfunc[..., c] = (0.11e2 / 0.1895825408e10) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.5e1) * np.sqrt(0.29e2) * np.sqrt(0.113e3) * ((290176740 * t10522 + 4145382 * t10498 + 4145382 - 232141392 * t10524 - 232141392 * t10520 + 116070696 * t10526 + 116070696 * t10518 - 33163056 * t10528 - 33163056 * t10512) * np.exp((16*1j) * phi2) + ((t10535 + t10537) * t10495) + ((t10535 - t10537) * t10493) + (-t10536 + t10538) * np.exp((-4*1j) * (t10516 + t10515)) + (t10536 + t10538) * np.exp((4*1j) * (t10516 + t10514)) + (t10531 + t10532) * np.exp((-8*1j) * (phi1 - 2 * phi2)) + (-t10531 + t10532) * np.exp((8*1j) * (phi1 + 2 * phi2)) + (t10533 + t10534) * np.exp((-16*1j) * (phi1 - phi2)) + (t10533 - t10534) * np.exp((16*1j) * (phi1 + phi2)) + (31143840 * (-t10539 - t10542) * t10495) + (31143840 * (t10539 - t10542) * t10493))

        if Bindx == 283:
            t10570 = np.cos(phi)
            t10569 = t10570 ** 2
            t10578 = t10569 ** 2
            t10582 = t10578 ** 2
            t10590 = t10582 ** 2
            t10554 = t10570 * t10590
            t10598 = -1 + t10554
            t10597 = 6 - 6 * t10554
            t10596 = 754 - 754 * t10554
            t10595 = 6670 - 6670 * t10554
            t10577 = t10570 * t10569
            t10580 = t10577 ** 2
            t10581 = t10570 * t10580
            t10579 = t10570 * t10578
            t10584 = t10579 ** 2
            t10594 = -3432 * t10581 + 3432 * t10584
            t10560 = t10570 * t10584
            t10593 = 2184 * t10560 - 2184 * t10580 + t10594
            t10588 = t10581 ** 2
            t10556 = t10570 * t10588
            t10592 = 26680 * t10556 - 26680 * t10569 + 133400 * t10588 - 133400 * t10577
            t10586 = t10580 ** 2
            t10576 = 4 * phi1
            t10575 = 8 * phi1
            t10574 = 12 * phi1
            t10573 = 16 * phi1
            t10572 = -17 * phi2
            t10571 = 17 * phi2
            t10562 = t10570 * t10582
            t10558 = t10570 * t10586
            tfunc[..., c] = (-0.35e2 / 0.4194304e7*1j) * np.sqrt((1 + t10570)) * np.sqrt(0.11e2) * np.sqrt(0.31e2) * np.sqrt(0.17e2) * ((1 - t10570) ** (-0.1e1 / 0.2e1)) * ((-186760 * t10560 + 466900 * t10562 + 20010 * t10570 + 373520 * t10579 + 186760 * t10580 - 560280 * t10581 - 466900 * t10582 + 560280 * t10584 - 373520 * t10586 - 20010 * t10590 + t10592 + t10595) * np.exp((-1*1j) * (t10576 + t10571)) + (-5278 * t10590 - 12064 * t10556 + 45240 * t10558 + 63336 * t10586 - 24128 * t10560 - 82940 * t10562 + 82940 * t10582 + 24128 * t10580 - 63336 * t10579 - 45240 * t10578 + 12064 * t10569 + 5278 * t10570 - 132704 * t10584 + 132704 * t10581 + t10596) * np.exp((-1*1j) * (t10575 + t10571)) + (-6786 * t10590 + 24128 * t10556 - 36192 * t10588 - 9048 * t10558 + 9048 * t10578 + 36192 * t10577 - 24128 * t10569 + 6786 * t10570 + 215644 * t10562 - 215644 * t10582 - 156832 * t10560 + 156832 * t10580 + 117624 * t10586 - 117624 * t10579 - t10596) * np.exp((1j) * (t10575 + t10572)) + (66 * t10570 - 66 * t10590 - 312 * t10556 - 792 * t10588 - 1008 * t10558 + 1716 * t10562 - 1716 * t10582 + 1008 * t10578 + 792 * t10577 + 312 * t10569 + t10593 + t10597) * np.exp((-1*1j) * (t10574 + t10571)) + (-104 * t10569 - 15 * t10570 + 15 * t10590 + 104 * t10556 + 440 * t10588 + 1260 * t10558 + 2548 * t10586 + 3640 * t10560 + 1430 * t10562 - 1430 * t10582 - 3640 * t10580 - 2548 * t10579 - 1260 * t10578 - 440 * t10577 + t10594 + t10598) * np.exp((-1*1j) * (t10573 + t10571)) + (136 * t10569 - 17 * t10570 + 17 * t10590 - 136 * t10556 + 680 * t10588 - 2380 * t10558 + 6188 * t10586 - 12376 * t10560 + 19448 * t10584 - 24310 * t10562 + 24310 * t10582 - 19448 * t10581 + 12376 * t10580 - 6188 * t10579 + 2380 * t10578 - 680 * t10577 - t10598) * np.exp((1j) * (t10573 + t10572)) + (-266800 * t10558 + 667000 * t10560 - 733700 * t10562 + 33350 * t10570 + 266800 * t10578 + 106720 * t10579 - 667000 * t10580 + 293480 * t10581 + 733700 * t10582 - 293480 * t10584 - 106720 * t10586 - 33350 * t10590 + t10592 - t10595) * np.exp((1j) * (t10576 + t10572)) + (-456 * t10569 + 78 * t10570 - 78 * t10590 + 456 * t10556 - 1560 * t10588 + 3360 * t10558 - 4368 * t10586 - 8580 * t10562 + 8580 * t10582 + 4368 * t10579 - 3360 * t10578 + 1560 * t10577 + t10593 - t10597) * np.exp((1j) * (t10574 + t10572)))

        if Bindx == 284:
            t10623 = np.cos(phi)
            t10622 = t10623 ** 2
            t10628 = t10622 ** 2
            t10627 = t10623 * t10622
            t10630 = t10627 ** 2
            t10632 = t10628 ** 2
            t10629 = t10623 * t10628
            t10634 = t10629 ** 2
            t10636 = t10630 ** 2
            t10631 = t10623 * t10630
            t10638 = t10631 ** 2
            t10640 = t10632 ** 2
            t10649 = -16 - 1648 * t10622 - 19600 * t10628 - 53872 * t10630 - 11440 * t10632 + 66352 * t10634 + 45136 * t10636 + 7600 * t10638 + 256 * t10640
            t10648 = 72 + 3384 * t10622 + 6216 * t10628 - 37128 * t10630 - 3432 * t10632 + 58344 * t10634 - 10920 * t10636 - 15384 * t10638 - 1152 * t10640
            t10607 = t10623 * t10640
            t10609 = t10623 * t10638
            t10611 = t10623 * t10636
            t10613 = t10623 * t10634
            t10615 = t10623 * t10632
            t10647 = 17 * t10607 + 1784 * t10609 + 21980 * t10611 + 66248 * t10613 + 35750 * t10615 - 239 * t10623 - 6920 * t10627 - 38948 * t10629 - 46904 * t10631
            t10646 = 102 * t10607 + 5664 * t10609 + 23016 * t10611 - 26208 * t10613 - 46332 * t10615 - 762 * t10623 - 7584 * t10627 + 10920 * t10629 + 41184 * t10631
            t10645 = 42224 * t10622 - 524784 * t10628 + 1007344 * t10630 + 66352 * t10632 - 1658800 * t10634 + 1321008 * t10636 - 162864 * t10638 - 96512 * t10640 + 6032
            t10644 = -12818 * t10607 - 259376 * t10609 + 606216 * t10611 + 404144 * t10613 - 2007148 * t10615 + 35438 * t10623 - 162864 * t10627 - 262392 * t10629 + 1658800 * t10631
            t10643 = -453560 * t10622 + 1734200 * t10628 - 2374520 * t10630 - 133400 * t10632 + 3975320 * t10634 - 4615640 * t10636 + 2267800 * t10638 - 426880 * t10640 + 26680
            t10642 = -113390 * t10607 + 106720 * t10609 + 1734200 * t10611 - 6296480 * t10613 + 9671500 * t10615 - 6670 * t10623 - 533600 * t10627 + 3228280 * t10629 - 7790560 * t10631
            t10626 = 3 * phi1
            t10625 = -4 * phi2
            t10624 = 4 * phi2
            tfunc[..., c] = -(0.35e2 / 0.4194304e7) * np.sqrt(0.2e1) * np.sqrt(0.11e2) * np.sqrt(0.31e2) * ((t10644 + t10645) * np.exp((-8*1j) * (phi1 + 2 * phi2)) + (t10642 + t10643) * np.exp((-4*1j) * (phi1 + t10624)) + (-t10646 + t10648) * np.exp((-4*1j) * (t10626 + t10624)) + (-t10642 + t10643) * np.exp((4*1j) * (phi1 + t10625)) + (t10646 + t10648) * np.exp((4*1j) * (t10626 + t10625)) + (-t10644 + t10645) * np.exp((8*1j) * (phi1 - 2 * phi2)) + (t10647 + t10649) * np.exp((-16*1j) * (phi1 + phi2)) + (-t10647 + t10649) * np.exp((16*1j) * (phi1 - phi2)))

        if Bindx == 285:
            t10675 = np.cos(phi)
            t10674 = t10675 ** 2
            t10682 = t10674 ** 2
            t10686 = t10682 ** 2
            t10694 = t10686 ** 2
            t10659 = t10675 * t10694
            t10681 = t10675 * t10674
            t10684 = t10681 ** 2
            t10685 = t10675 * t10684
            t10692 = t10685 ** 2
            t10661 = t10675 * t10692
            t10690 = t10684 ** 2
            t10663 = t10675 * t10690
            t10683 = t10675 * t10682
            t10688 = t10683 ** 2
            t10665 = t10675 * t10688
            t10687 = t10675 * t10686
            t10704 = 2640 * t10659 + 65120 * t10661 + 268576 * t10663 + 41184 * t10665 + 2288 * t10675 + 53152 * t10681 + 184800 * t10683 - 114400 * t10685 - 503360 * t10687
            t10703 = -11880 * t10659 - 125040 * t10661 + 61936 * t10663 + 444496 * t10665 - 4920 * t10675 - 18320 * t10681 + 159376 * t10683 - 98384 * t10685 - 407264 * t10687
            t10658 = t10687 ** 2
            t10702 = 1122 * t10658 + 16802 * t10674 - 41368 * t10682 - 168168 * t10684 + 441012 * t10686 - 56628 * t10688 - 379288 * t10690 + 132632 * t10692 + 53342 * t10694 + 542
            t10701 = -187 * t10658 - 14355 * t10674 - 125620 * t10682 - 124124 * t10684 + 405834 * t10686 + 298870 * t10688 - 260260 * t10690 - 163020 * t10692 - 16973 * t10694 - 165
            t10700 = -995280 * t10659 - 422240 * t10661 + 11472864 * t10663 - 20738016 * t10665 - 90480 * t10675 + 1387360 * t10681 - 4813536 * t10683 + 2786784 * t10685 + 11412544 * t10687
            t10699 = -4402200 * t10659 + 24812400 * t10661 - 55974640 * t10663 + 61310640 * t10665 + 453560 * t10675 - 4322160 * t10681 + 12006000 * t10683 - 6670000 * t10685 - 27213600 * t10687
            t10698 = -140998 * t10658 + 251082 * t10674 + 805272 * t10682 - 8393528 * t10684 + 18561972 * t10686 - 13784628 * t10688 - 2512328 * t10690 + 7591272 * t10692 - 2350218 * t10694 - 27898
            t10697 = -1247290 * t10658 + 1100550 * t10674 - 11072200 * t10682 + 43941960 * t10684 - 88564260 * t10686 + 98382500 * t10688 - 58029000 * t10690 + 13206600 * t10692 + 2314490 * t10694 - 33350
            t10680 = 4 * phi1
            t10679 = 8 * phi1
            t10678 = 16 * phi1
            t10677 = -15 * phi2
            t10676 = 15 * phi2
            tfunc[..., c] = (-0.35e2 / 0.4194304e7*1j) * np.sqrt(0.3e1) * np.sqrt(0.31e2) * ((1 + t10675) ** (-0.1e1 / 0.2e1)) * ((1 - t10675) ** (-0.1e1 / 0.2e1)) * ((-t10702 + t10703) * np.exp((-3*1j) * (t10680 + 5 * phi2)) + (t10702 + t10703) * np.exp((3*1j) * (t10680 - 5 * phi2)) + (t10697 + t10699) * np.exp((-1*1j) * (t10680 + t10676)) + (t10698 + t10700) * np.exp((-1*1j) * (t10679 + t10676)) + (-t10697 + t10699) * np.exp((1j) * (t10680 + t10677)) + (-t10698 + t10700) * np.exp((1j) * (t10679 + t10677)) + (-t10701 + t10704) * np.exp((-1*1j) * (t10678 + t10676)) + (t10701 + t10704) * np.exp((1j) * (t10678 + t10677)))

        if Bindx == 286:
            t10729 = np.cos(phi)
            t10728 = t10729 ** 2
            t10737 = t10728 ** 2
            t10736 = t10729 * t10728
            t10739 = t10736 ** 2
            t10741 = t10737 ** 2
            t10738 = t10729 * t10737
            t10743 = t10738 ** 2
            t10745 = t10739 ** 2
            t10740 = t10729 * t10739
            t10747 = t10740 ** 2
            t10749 = t10741 ** 2
            t10758 = 11242 * t10728 + 74690 * t10737 + 2002 * t10739 - 267410 * t10741 - 40898 * t10743 + 166166 * t10745 + 51590 * t10747 + 2464 * t10749 + 154
            t10757 = -6069 * t10728 + 44079 * t10737 - 9009 * t10739 - 224367 * t10741 + 242385 * t10743 + 62517 * t10745 - 98091 * t10747 - 11088 * t10749 - 357
            t10713 = t10729 * t10749
            t10715 = t10729 * t10747
            t10717 = t10729 * t10745
            t10719 = t10729 * t10743
            t10721 = t10729 * t10741
            t10756 = 1122 * t10713 + 46044 * t10715 + 88536 * t10717 - 254436 * t10719 + 12012 * t10721 + 2658 * t10729 - 4044 * t10736 - 72072 * t10738 + 180180 * t10740
            t10755 = -187 * t10713 - 14674 * t10715 - 116270 * t10717 - 122122 * t10719 + 220220 * t10721 - 1969 * t10729 - 37070 * t10736 - 82082 * t10738 + 154154 * t10740
            t10754 = 225446 * t10728 - 1062386 * t10737 + 306878 * t10739 + 6328322 * t10741 - 12449294 * t10743 + 7785050 * t10745 - 195286 * t10747 - 928928 * t10749 - 9802
            t10753 = -470235 * t10728 + 2317825 * t10737 - 777055 * t10739 - 15124225 * t10741 + 37808895 * t10743 - 40083365 * t10745 + 20426875 * t10747 - 4108720 * t10749 + 10005
            t10752 = -140998 * t10713 - 2016196 * t10715 + 5906836 * t10717 - 2323828 * t10719 - 6535672 * t10721 + 5278 * t10729 + 327236 * t10736 - 2902900 * t10738 + 7680244 * t10740
            t10751 = 1247290 * t10713 - 2174420 * t10715 - 9471400 * t10717 + 36458220 * t10719 - 51425700 * t10721 - 140070 * t10729 + 2334500 * t10736 - 13633480 * t10738 + 36805060 * t10740
            t10735 = 2 * phi1
            t10734 = 4 * phi1
            t10733 = 6 * phi1
            t10732 = 8 * phi1
            t10731 = -7 * phi2
            t10730 = 7 * phi2
            tfunc[..., c] = -(0.35e2 / 0.1048576e7) * np.sqrt(0.2e1) * np.sqrt(0.31e2) * ((-t10751 + t10753) * np.exp((-2*1j) * (t10735 + t10730)) + (t10752 + t10754) * np.exp((-2*1j) * (t10734 + t10730)) + (-t10756 + t10757) * np.exp((-2*1j) * (t10733 + t10730)) + (-t10755 + t10758) * np.exp((-2*1j) * (t10732 + t10730)) + (t10751 + t10753) * np.exp((2*1j) * (t10735 + t10731)) + (-t10752 + t10754) * np.exp((2*1j) * (t10734 + t10731)) + (t10756 + t10757) * np.exp((2*1j) * (t10733 + t10731)) + (t10755 + t10758) * np.exp((2*1j) * (t10732 + t10731)))

        if Bindx == 287:
            t10784 = np.cos(phi)
            t10783 = t10784 ** 2
            t10792 = t10783 ** 2
            t10796 = t10792 ** 2
            t10804 = t10796 ** 2
            t10768 = t10784 * t10804
            t10791 = t10784 * t10783
            t10794 = t10791 ** 2
            t10795 = t10784 * t10794
            t10802 = t10795 ** 2
            t10770 = t10784 * t10802
            t10800 = t10794 ** 2
            t10772 = t10784 * t10800
            t10793 = t10784 * t10792
            t10798 = t10793 ** 2
            t10774 = t10784 * t10798
            t10797 = t10784 * t10796
            t10814 = -70928 * t10768 - 1170312 * t10770 - 1737736 * t10772 + 4929496 * t10774 + 51832 * t10784 + 712008 * t10791 - 19096 * t10793 - 4645784 * t10795 + 1950520 * t10797
            t10813 = 319176 * t10768 + 2016612 * t10770 - 4061148 * t10772 - 2013804 * t10774 - 39036 * t10784 + 321948 * t10791 + 17388 * t10793 - 3776916 * t10795 + 7215780 * t10797
            t10767 = t10797 ** 2
            t10812 = -34782 * t10767 + 20826 * t10783 - 820560 * t10792 + 2738736 * t10794 - 983268 * t10796 - 5983692 * t10798 + 6761664 * t10800 - 522720 * t10802 - 1183146 * t10804 + 6942
            t10811 = -5797 * t10767 + 261547 * t10783 + 975260 * t10792 - 2606604 * t10794 - 3023306 * t10796 + 5754034 * t10798 + 1117116 * t10800 - 2093740 * t10802 - 382943 * t10804 + 4433
            t10810 = 26739856 * t10768 - 25524408 * t10770 - 157890616 * t10772 + 373613032 * t10774 + 630344 * t10784 - 5238792 * t10791 - 2258984 * t10793 + 105930968 * t10795 - 316001400 * t10797
            t10809 = 118272440 * t10768 - 628994340 * t10770 + 1366029340 * t10772 - 1534246740 * t10774 - 520260 * t10784 + 7457060 * t10791 + 8150740 * t10793 - 252672940 * t10795 + 916524700 * t10797
            t10808 = 4370938 * t10767 + 2706106 * t10783 - 28576600 * t10792 + 111371832 * t10794 - 169479596 * t10796 + 25163996 * t10798 + 197164968 * t10800 - 191289800 * t10802 + 48641294 * t10804 - 73138
            t10807 = -38665990 * t10767 + 10985490 * t10783 - 117125200 * t10792 + 519779760 * t10794 - 1175240660 * t10796 + 1432595940 * t10798 - 874250240 * t10800 + 141404000 * t10802 + 100696990 * t10804 - 180090
            t10790 = 4 * phi1
            t10789 = 8 * phi1
            t10788 = 12 * phi1
            t10787 = 16 * phi1
            t10786 = -13 * phi2
            t10785 = 13 * phi2
            tfunc[..., c] = (0.35e2 / 0.2097152e7*1j) * np.sqrt(0.2e1) * ((-t10807 + t10809) * np.exp((-1*1j) * (t10790 + t10785)) + (t10808 + t10810) * np.exp((-1*1j) * (t10789 + t10785)) + (t10807 + t10809) * np.exp((1j) * (t10790 + t10786)) + (-t10808 + t10810) * np.exp((1j) * (t10789 + t10786)) + (-t10812 + t10813) * np.exp((-1*1j) * (t10788 + t10785)) + (t10811 + t10814) * np.exp((-1*1j) * (t10787 + t10785)) + (t10812 + t10813) * np.exp((1j) * (t10788 + t10786)) + (-t10811 + t10814) * np.exp((1j) * (t10787 + t10786))) * ((1 + t10784) ** (-0.1e1 / 0.2e1)) * ((1 - t10784) ** (-0.1e1 / 0.2e1))

        if Bindx == 288:
            t10839 = np.cos(phi)
            t10838 = t10839 ** 2
            t10845 = t10838 ** 2
            t10849 = t10845 ** 2
            t10857 = t10849 ** 2
            t10823 = t10839 * t10857
            t10844 = t10839 * t10838
            t10847 = t10844 ** 2
            t10848 = t10839 * t10847
            t10855 = t10848 ** 2
            t10825 = t10839 * t10855
            t10853 = t10847 ** 2
            t10827 = t10839 * t10853
            t10846 = t10839 * t10845
            t10851 = t10846 ** 2
            t10829 = t10839 * t10851
            t10831 = t10839 * t10849
            t10866 = -34782 * t10823 - 990512 * t10825 - 5880 * t10827 + 4022928 * t10829 - 3875300 * t10831 + 14226 * t10839 - 233680 * t10844 + 744744 * t10846 + 350064 * t10848
            t10865 = -192324 * t10838 - 353276 * t10845 + 2110108 * t10847 + 195052 * t10849 - 3315884 * t10851 + 620620 * t10853 + 874324 * t10855 + 65472 * t10857 - 4092
            t10864 = -36702 * t10838 - 206850 * t10845 + 1779778 * t10847 - 3170310 * t10849 + 225654 * t10851 + 3146234 * t10853 - 1455450 * t10855 - 294624 * t10857 + 4078
            t10863 = -5797 * t10823 - 321904 * t10825 - 1308076 * t10827 + 1489488 * t10829 + 2633202 * t10831 + 43307 * t10839 + 431024 * t10844 - 620620 * t10846 - 2340624 * t10848
            t10862 = 73892 * t10838 + 5451420 * t10845 - 50245052 * t10847 + 156839540 * t10849 - 208063284 * t10851 + 94215316 * t10853 + 26412620 * t10855 - 24682944 * t10857 - 1508
            t10861 = 486910 * t10838 - 12759710 * t10845 + 120120030 * t10847 - 471562330 * t10849 + 923574890 * t10851 - 961193690 * t10853 + 510515130 * t10855 - 109174560 * t10857 - 6670
            t10860 = 4370938 * t10823 + 40016288 * t10825 - 144903720 * t10827 + 144200992 * t10829 - 15841540 * t10831 + 377754 * t10839 - 6092320 * t10844 + 30820504 * t10846 - 52948896 * t10848
            t10859 = 38665990 * t10823 - 94287120 * t10825 - 79266280 * t10827 + 503985200 * t10829 - 691719020 * t10831 - 873770 * t10839 + 20863760 * t10844 - 144472200 * t10846 + 447103440 * t10848
            t10843 = 2 * phi1
            t10842 = 4 * phi1
            t10841 = -3 * phi2
            t10840 = 3 * phi2
            tfunc[..., c] = -(0.35e2 / 0.1048576e7) * np.sqrt(0.3e1) * ((-t10859 + t10861) * np.exp((-4*1j) * (phi1 + t10840)) + (-t10860 + t10862) * np.exp((-4*1j) * (t10843 + t10840)) + (-t10863 + t10865) * np.exp((-4*1j) * (t10842 + t10840)) + (t10859 + t10861) * np.exp((4*1j) * (phi1 + t10841)) + (t10860 + t10862) * np.exp((4*1j) * (t10843 + t10841)) + (t10863 + t10865) * np.exp((4*1j) * (t10842 + t10841)) + (t10864 + t10866) * np.exp((-12*1j) * (phi1 + phi2)) + (t10864 - t10866) * np.exp((12*1j) * (phi1 - phi2)))

        if Bindx == 289:
            t10892 = np.cos(phi)
            t10891 = t10892 ** 2
            t10900 = t10891 ** 2
            t10904 = t10900 ** 2
            t10912 = t10904 ** 2
            t10876 = t10892 * t10912
            t10899 = t10892 * t10891
            t10902 = t10899 ** 2
            t10903 = t10892 * t10902
            t10910 = t10903 ** 2
            t10878 = t10892 * t10910
            t10908 = t10902 ** 2
            t10880 = t10892 * t10908
            t10901 = t10892 * t10900
            t10906 = t10901 ** 2
            t10882 = t10892 * t10906
            t10905 = t10892 * t10904
            t10922 = -60016 * t10876 - 570152 * t10878 + 630168 * t10880 + 1950520 * t10882 - 35464 * t10892 - 193688 * t10899 + 973896 * t10901 + 35464 * t10903 - 2730728 * t10905
            t10875 = t10905 ** 2
            t10921 = -34782 * t10875 + 45738 * t10891 - 163680 * t10900 - 384384 * t10902 + 2743884 * t10904 - 4425564 * t10906 + 1891344 * t10908 + 1109520 * t10910 - 779898 * t10912 - 2178
            t10920 = 270072 * t10876 + 732468 * t10878 - 3308844 * t10880 + 2795364 * t10882 + 1668 * t10892 - 107508 * t10899 + 790524 * t10901 - 1834404 * t10903 + 660660 * t10905
            t10919 = -5797 * t10875 - 131285 * t10891 + 135036 * t10900 + 1365364 * t10902 - 2243098 * t10904 - 487630 * t10906 + 2110108 * t10908 - 478764 * t10910 - 260183 * t10912 - 3751
            t10918 = 22626032 * t10876 - 48337432 * t10878 - 25246936 * t10880 + 157047176 * t10882 - 98488 * t10892 + 2396888 * t10899 - 21905416 * t10901 + 89059256 * t10903 - 175541080 * t10905
            t10917 = 100076680 * t10876 - 504932340 * t10878 + 1052859500 * t10880 - 1167893540 * t10882 + 156860 * t10892 - 4872780 * t10899 + 51819460 * t10901 - 266312860 * t10903 + 739099020 * t10905
            t10916 = 4370938 * t10875 + 819962 * t10891 - 6961240 * t10900 + 16987256 * t10902 + 13491764 * t10904 - 123565156 * t10906 + 205313576 * t10908 - 138328840 * t10910 + 27885182 * t10912 - 13442
            t10915 = -38665990 * t10875 + 2482850 * t10891 - 33940640 * t10900 + 176043840 * t10902 - 442558180 * t10904 + 564677140 * t10906 - 302667120 * t10908 - 50852080 * t10910 + 125509390 * t10912 - 29210
            t10898 = 4 * phi1
            t10897 = 8 * phi1
            t10896 = 12 * phi1
            t10895 = 16 * phi1
            t10894 = -11 * phi2
            t10893 = 11 * phi2
            tfunc[..., c] = (0.35e2 / 0.2097152e7*1j) * np.sqrt(0.2e1) * np.sqrt(0.29e2) * ((-t10915 + t10917) * np.exp((-1*1j) * (t10898 + t10893)) + (t10916 + t10918) * np.exp((-1*1j) * (t10897 + t10893)) + (t10915 + t10917) * np.exp((1j) * (t10898 + t10894)) + (-t10916 + t10918) * np.exp((1j) * (t10897 + t10894)) + (t10920 - t10921) * np.exp((-1*1j) * (t10896 + t10893)) + (t10919 + t10922) * np.exp((-1*1j) * (t10895 + t10893)) + (t10920 + t10921) * np.exp((1j) * (t10896 + t10894)) + (-t10919 + t10922) * np.exp((1j) * (t10895 + t10894))) * ((1 + t10892) ** (-0.1e1 / 0.2e1)) * ((1 - t10892) ** (-0.1e1 / 0.2e1))

        if Bindx == 290:
            t10947 = np.cos(phi)
            t10946 = t10947 ** 2
            t10955 = t10946 ** 2
            t10954 = t10947 * t10946
            t10957 = t10954 ** 2
            t10959 = t10955 ** 2
            t10956 = t10947 * t10955
            t10961 = t10956 ** 2
            t10963 = t10957 ** 2
            t10958 = t10947 * t10957
            t10965 = t10958 ** 2
            t10967 = t10959 ** 2
            t10976 = 85250 * t10946 - 255750 * t10955 - 523094 * t10957 + 1657942 * t10959 - 682682 * t10961 - 718146 * t10963 + 378510 * t10965 + 54560 * t10967 + 3410
            t10931 = t10947 * t10967
            t10933 = t10947 * t10965
            t10935 = t10947 * t10963
            t10937 = t10947 * t10961
            t10939 = t10947 * t10959
            t10975 = -5797 * t10931 - 209374 * t10933 - 145266 * t10935 + 1391962 * t10937 - 975260 * t10939 - 28303 * t10947 - 63426 * t10954 + 718146 * t10956 - 682682 * t10958
            t10974 = -34782 * t10931 - 620868 * t10933 + 1089720 * t10935 + 602940 * t10937 - 2170740 * t10939 + 3330 * t10947 + 6420 * t10954 - 332904 * t10956 + 1456884 * t10958
            t10973 = 30783 * t10946 - 230445 * t10955 + 486915 * t10957 + 336765 * t10959 - 2209779 * t10961 + 2233569 * t10963 - 401295 * t10965 - 245520 * t10967 - 993
            t10972 = -522418 * t10946 + 6491030 * t10955 - 32362330 * t10957 + 74278490 * t10959 - 71231446 * t10961 - 385294 * t10963 + 44293730 * t10965 - 20569120 * t10967 + 7358
            t10971 = -4370938 * t10931 - 20989852 * t10933 + 99701420 * t10935 - 137994220 * t10937 + 83128760 * t10939 - 35230 * t10947 + 625820 * t10954 - 236236 * t10956 - 19829524 * t10958
            t10970 = 928625 * t10946 - 15435875 * t10955 + 104051885 * t10957 - 358428205 * t10959 + 682586755 * t10961 - 725399185 * t10963 + 402684575 * t10965 - 90978800 * t10967 - 9775
            t10969 = -38665990 * t10931 + 117031820 * t10933 - 70408520 * t10935 - 132383860 * t10937 + 233829500 * t10939 + 165370 * t10947 - 5051260 * t10954 + 42239960 * t10956 - 146757020 * t10958
            t10953 = 2 * phi1
            t10952 = 4 * phi1
            t10951 = 6 * phi1
            t10950 = 8 * phi1
            t10949 = -5 * phi2
            t10948 = 5 * phi2
            tfunc[..., c] = -(0.35e2 / 0.1048576e7) * np.sqrt(0.2e1) * np.sqrt(0.29e2) * ((t10969 + t10970) * np.exp((-2*1j) * (t10953 + t10948)) + (t10971 + t10972) * np.exp((-2*1j) * (t10952 + t10948)) + (t10973 + t10974) * np.exp((-2*1j) * (t10951 + t10948)) + (-t10975 + t10976) * np.exp((-2*1j) * (t10950 + t10948)) + (-t10969 + t10970) * np.exp((2*1j) * (t10953 + t10949)) + (-t10971 + t10972) * np.exp((2*1j) * (t10952 + t10949)) + (t10973 - t10974) * np.exp((2*1j) * (t10951 + t10949)) + (t10975 + t10976) * np.exp((2*1j) * (t10950 + t10949)))

        if Bindx == 291:
            t11002 = np.cos(phi)
            t11001 = t11002 ** 2
            t11009 = t11001 ** 2
            t11013 = t11009 ** 2
            t11021 = t11013 ** 2
            t10986 = t11002 * t11021
            t11008 = t11002 * t11001
            t11011 = t11008 ** 2
            t11012 = t11002 * t11011
            t11019 = t11012 ** 2
            t10988 = t11002 * t11019
            t11017 = t11011 ** 2
            t10990 = t11002 * t11017
            t11010 = t11002 * t11009
            t11015 = t11010 ** 2
            t10992 = t11002 * t11015
            t11014 = t11002 * t11013
            t11031 = 662904 * t10986 - 194184 * t10988 - 4631112 * t10990 + 8692632 * t10992 + 12384 * t11002 - 134904 * t11008 + 239208 * t11010 + 1376232 * t11012 - 6023160 * t11014
            t11030 = -147312 * t10986 - 540144 * t10988 + 2602512 * t10990 - 1915056 * t10992 + 65472 * t11002 - 114576 * t11008 - 1227600 * t11010 + 3617328 * t11012 - 2340624 * t11014
            t10985 = t11014 ** 2
            t11029 = -17391 * t10985 + 138105 * t11001 - 945252 * t11009 + 797940 * t11011 + 2633202 * t11013 - 4973826 * t11015 + 2181036 * t11017 + 650628 * t11019 - 473649 * t11021 + 9207
            t11028 = -104346 * t10985 - 39114 * t11001 + 501480 * t11009 - 2337192 * t11011 + 4473612 * t11013 - 2373228 * t11015 - 3145272 * t11017 + 4354680 * t11019 - 1331574 * t11021 + 954
            t11027 = 55536624 * t10986 - 173341584 * t10988 + 158466672 * t10990 + 35116848 * t10992 - 155584 * t11002 + 4137744 * t11008 - 31882032 * t11010 + 105932112 * t11012 - 153810800 * t11014
            t11026 = -13112814 * t10985 + 212706 * t11001 - 4734600 * t11009 + 43795752 * t11011 - 186609852 * t11013 + 407470492 * t11015 - 465657192 * t11017 + 250403400 * t11019 - 31765266 * t11021 - 2626
            t11025 = 245642760 * t10986 - 1183551480 * t10988 + 2368303560 * t10990 - 2542895640 * t10992 + 290720 * t11002 - 10343560 * t11008 + 112152600 * t11010 - 568809320 * t11012 + 1579210360 * t11014
            t11024 = -115997970 * t10985 + 1473150 * t11001 - 23902520 * t11009 + 138299000 * t11011 - 351735780 * t11013 + 352070660 * t11015 + 115205160 * t11017 - 553956840 * t11019 + 438559170 * t11021 - 14030
            t11007 = 4 * phi1
            t11006 = 8 * phi1
            t11005 = -9 * phi2
            t11004 = 9 * phi2
            t11003 = 16 * phi1
            tfunc[..., c] = (0.35e2 / 0.2097152e7*1j) * np.sqrt(0.3e1) * np.sqrt(0.29e2) * ((-t11028 + t11031) * np.exp((-3*1j) * (t11007 + 3 * phi2)) + (-t11024 + t11025) * np.exp((-1*1j) * (t11007 + t11004)) + (-t11026 + t11027) * np.exp((-1*1j) * (t11006 + t11004)) + (t11024 + t11025) * np.exp((1j) * (t11007 + t11005)) + (t11026 + t11027) * np.exp((1j) * (t11006 + t11005)) + (t11028 + t11031) * np.exp((3*1j) * (t11007 - 3 * phi2)) + (t11029 + t11030) * np.exp((-1*1j) * (t11003 + t11004)) + (-t11029 + t11030) * np.exp((1j) * (t11003 + t11005))) * ((1 + t11002) ** (-0.1e1 / 0.2e1)) * ((1 - t11002) ** (-0.1e1 / 0.2e1))

        if Bindx == 292:
            t11056 = np.cos(phi)
            t11055 = t11056 ** 2
            t11062 = t11055 ** 2
            t11061 = t11056 * t11055
            t11064 = t11061 ** 2
            t11066 = t11062 ** 2
            t11063 = t11056 * t11062
            t11068 = t11063 ** 2
            t11070 = t11064 ** 2
            t11065 = t11056 * t11064
            t11072 = t11065 ** 2
            t11074 = t11066 ** 2
            t11083 = 57288 * t11055 - 712008 * t11062 + 1366728 * t11064 + 90024 * t11066 - 2250600 * t11068 + 1792296 * t11070 - 220968 * t11072 - 130944 * t11074 + 8184
            t11082 = -1764 * t11055 - 130140 * t11062 + 1199484 * t11064 - 3744180 * t11066 + 4967028 * t11068 - 2249172 * t11070 - 630540 * t11072 + 589248 * t11074 + 36
            t11040 = t11056 * t11074
            t11042 = t11056 * t11072
            t11044 = t11056 * t11070
            t11046 = t11056 * t11068
            t11048 = t11056 * t11066
            t11081 = -17391 * t11040 - 351912 * t11042 + 822492 * t11044 + 548328 * t11046 - 2723226 * t11048 + 48081 * t11056 - 220968 * t11061 - 356004 * t11063 + 2250600 * t11065
            t11080 = -104346 * t11040 - 955296 * t11042 + 3459240 * t11044 - 3442464 * t11046 + 378180 * t11048 - 9018 * t11056 + 145440 * t11061 - 735768 * t11063 + 1264032 * t11065
            t11079 = 460664 * t11055 - 5964280 * t11062 + 25021304 * t11064 - 31917160 * t11066 - 41866968 * t11068 + 154983192 * t11070 - 150061080 * t11072 + 49365888 * t11074 - 5176
            t11078 = -1507420 * t11055 + 28113820 * t11062 - 202380220 * t11064 + 726541940 * t11066 - 1436023860 * t11068 + 1588673940 * t11070 - 921780660 * t11072 + 218349120 * t11074 + 13340
            t11077 = 13112814 * t11040 + 16268304 * t11042 - 161823480 * t11044 + 282447984 * t11046 - 225370860 * t11048 - 65042 * t11056 + 2018320 * t11061 - 20083448 * t11063 + 93511792 * t11065
            t11076 = 115997970 * t11040 - 406923360 * t11042 + 513776760 * t11044 - 237481440 * t11046 - 36836340 * t11048 - 72910 * t11056 + 2579680 * t11061 - 23113160 * t11063 + 72072800 * t11065
            t11060 = 2 * phi1
            t11059 = 3 * phi1
            t11058 = -2 * phi2
            t11057 = 2 * phi2
            tfunc[..., c] = (0.35e2 / 0.6291456e7) * np.sqrt(0.2e1) * np.sqrt(0.29e2) * np.sqrt(0.13e2) * np.sqrt(0.3e1) * ((t11077 + t11079) * np.exp((-8*1j) * (phi1 + phi2)) + (t11081 + t11083) * np.exp((-8*1j) * (t11060 + phi2)) + (t11076 + t11078) * np.exp((-4*1j) * (phi1 + t11057)) + (-t11080 + t11082) * np.exp((-4*1j) * (t11059 + t11057)) + (-t11076 + t11078) * np.exp((4*1j) * (phi1 + t11058)) + (t11080 + t11082) * np.exp((4*1j) * (t11059 + t11058)) + (-t11077 + t11079) * np.exp((8*1j) * (phi1 - phi2)) + (-t11081 + t11083) * np.exp((8*1j) * (t11060 - phi2)))

        if Bindx == 293:
            t11109 = np.cos(phi)
            t11108 = t11109 ** 2
            t11117 = t11108 ** 2
            t11121 = t11117 ** 2
            t11129 = t11121 ** 2
            t11093 = t11109 * t11129
            t11116 = t11109 * t11108
            t11119 = t11116 ** 2
            t11120 = t11109 * t11119
            t11127 = t11120 ** 2
            t11095 = t11109 * t11127
            t11125 = t11119 ** 2
            t11097 = t11109 * t11125
            t11118 = t11109 * t11117
            t11123 = t11118 ** 2
            t11099 = t11109 * t11123
            t11122 = t11109 * t11121
            t11139 = -515592 * t11093 + 1390536 * t11095 - 214200 * t11097 - 3003480 * t11099 + 4176 * t11109 - 89928 * t11116 + 703512 * t11118 - 2476584 * t11120 + 4201560 * t11122
            t11092 = t11122 ** 2
            t11138 = 17391 * t11092 - 7161 * t11108 - 429660 * t11117 + 1689996 * t11119 - 2273106 * t11121 + 652674 * t11123 + 1158036 * t11125 - 1043460 * t11127 + 228129 * t11129 + 7161
            t11137 = 114576 * t11093 - 114576 * t11095 - 1031184 * t11097 + 2831664 * t11099 + 32736 * t11109 - 278256 * t11116 + 441936 * t11118 + 703824 * t11120 - 2700720 * t11122
            t11136 = -104346 * t11092 - 21546 * t11108 + 148680 * t11117 - 160776 * t11119 - 1174932 * t11121 + 4156020 * t11123 - 5494680 * t11125 + 3176280 * t11127 - 525078 * t11129 + 378
            t11135 = -43195152 * t11093 + 168853776 * t11095 - 259804272 * t11097 + 194919504 * t11099 + 17696 * t11109 - 492688 * t11116 + 2441264 * t11118 + 5698352 * t11120 - 68438480 * t11122
            t11134 = 115997970 * t11092 - 94622 * t11108 + 1259480 * t11117 + 181608 * t11119 - 59741948 * t11121 + 309206940 * t11123 - 701837640 * t11125 + 823211400 * t11127 - 488183970 * t11129 + 782
            t11133 = -191055480 * t11093 + 885802680 * t11095 - 1704932040 * t11097 + 1758503640 * t11099 - 136528 * t11109 + 5513928 * t11116 - 65763992 * t11118 + 357357992 * t11120 - 1045290200 * t11122
            t11132 = -13112814 * t11092 + 413026 * t11108 - 6813320 * t11117 + 44633512 * t11119 - 147454076 * t11121 + 264131868 * t11123 - 249214056 * t11125 + 97673160 * t11127 + 9746958 * t11129 - 4258
            t11115 = 4 * phi1
            t11114 = 8 * phi1
            t11113 = -7 * phi2
            t11112 = 7 * phi2
            t11111 = 12 * phi1
            t11110 = 16 * phi1
            tfunc[..., c] = (-0.35e2 / 0.6291456e7*1j) * np.sqrt(0.3e1) * np.sqrt(0.5e1) * np.sqrt(0.13e2) * np.sqrt(0.29e2) * ((1 + t11109) ** (-0.1e1 / 0.2e1)) * ((1 - t11109) ** (-0.1e1 / 0.2e1)) * ((t11133 - t11134) * np.exp((-1*1j) * (t11115 + t11112)) + (t11132 + t11135) * np.exp((-1*1j) * (t11114 + t11112)) + (t11133 + t11134) * np.exp((1j) * (t11115 + t11113)) + (-t11132 + t11135) * np.exp((1j) * (t11114 + t11113)) + (t11136 + t11139) * np.exp((-1*1j) * (t11111 + t11112)) + (t11137 + t11138) * np.exp((-1*1j) * (t11110 + t11112)) + (-t11136 + t11139) * np.exp((1j) * (t11111 + t11113)) + (t11137 - t11138) * np.exp((1j) * (t11110 + t11113)))

        if Bindx == 294:
            t11164 = np.cos(phi)
            t11163 = t11164 ** 2
            t11171 = t11163 ** 2
            t11175 = t11171 ** 2
            t11183 = t11175 ** 2
            t11148 = t11164 * t11183
            t11170 = t11164 * t11163
            t11173 = t11170 ** 2
            t11174 = t11164 * t11173
            t11181 = t11174 ** 2
            t11150 = t11164 * t11181
            t11179 = t11173 ** 2
            t11152 = t11164 * t11179
            t11172 = t11164 * t11171
            t11177 = t11172 ** 2
            t11154 = t11164 * t11177
            t11156 = t11164 * t11175
            t11192 = -1581 * t11148 - 12462 * t11150 + 73470 * t11152 - 123318 * t11154 + 61380 * t11156 - 1767 * t11164 + 21390 * t11170 - 60078 * t11172 + 42966 * t11174
            t11191 = -3906 * t11163 - 12090 * t11171 + 90582 * t11173 - 173910 * t11175 + 137082 * t11177 - 25854 * t11179 - 21390 * t11181 + 8928 * t11183 + 558
            t11190 = -2079 * t11163 + 21069 * t11171 - 81219 * t11173 + 130563 * t11175 - 44397 * t11177 - 111297 * t11179 + 127503 * t11181 - 40176 * t11183 + 33
            t11189 = 9486 * t11148 + 22692 * t11150 - 186552 * t11152 + 346788 * t11154 - 291372 * t11156 - 18 * t11164 + 1164 * t11170 - 21528 * t11172 + 119340 * t11174
            t11188 = 6386 * t11163 - 137046 * t11171 + 1264858 * t11173 - 5817178 * t11175 + 14197014 * t11177 - 18699954 * t11179 + 12551838 * t11181 - 3365856 * t11183 - 62
            t11187 = 67183 * t11163 - 1385405 * t11171 + 10827411 * t11173 - 41499475 * t11175 + 86478045 * t11177 - 100080015 * t11179 + 60480225 * t11181 - 14887440 * t11183 - 529
            t11186 = -10545270 * t11148 + 40940460 * t11150 - 64432200 * t11152 + 52907820 * t11154 - 24377700 * t11156 - 1334 * t11164 + 60260 * t11170 - 892584 * t11172 + 6340548 * t11174
            t11185 = 1192074 * t11148 - 1823172 * t11150 - 3515148 * t11152 + 10783500 * t11154 - 10645752 * t11156 - 3762 * t11164 + 126916 * t11170 - 1219540 * t11172 + 5104884 * t11174
            t11169 = 2 * phi1
            t11168 = 4 * phi1
            t11167 = 8 * phi1
            t11166 = -3 * phi2
            t11165 = 3 * phi2
            tfunc[..., c] = -(0.35e2 / 0.1048576e7) * np.sqrt(0.2e1) * np.sqrt(0.11e2) * np.sqrt(0.5e1) * np.sqrt(0.13e2) * np.sqrt(0.29e2) * ((-t11189 + t11190) * np.exp((-6*1j) * (t11169 + phi2)) + (t11186 + t11187) * np.exp((-2*1j) * (t11169 + t11165)) + (-t11185 + t11188) * np.exp((-2*1j) * (t11168 + t11165)) + (t11191 - t11192) * np.exp((-2*1j) * (t11167 + t11165)) + (-t11186 + t11187) * np.exp((2*1j) * (t11169 + t11166)) + (t11185 + t11188) * np.exp((2*1j) * (t11168 + t11166)) + (t11191 + t11192) * np.exp((2*1j) * (t11167 + t11166)) + (t11189 + t11190) * np.exp((6*1j) * (t11169 - phi2)))

        if Bindx == 295:
            t11218 = np.cos(phi)
            t11217 = t11218 ** 2
            t11226 = t11217 ** 2
            t11230 = t11226 ** 2
            t11238 = t11230 ** 2
            t11202 = t11218 * t11238
            t11225 = t11218 * t11217
            t11228 = t11225 ** 2
            t11229 = t11218 * t11228
            t11236 = t11229 ** 2
            t11204 = t11218 * t11236
            t11234 = t11228 ** 2
            t11206 = t11218 * t11234
            t11227 = t11218 * t11226
            t11232 = t11227 ** 2
            t11208 = t11218 * t11232
            t11231 = t11218 * t11230
            t11248 = 7440 * t11202 - 33480 * t11204 + 43896 * t11206 + 23064 * t11208 - 744 * t11218 + 15624 * t11225 - 70680 * t11227 + 137640 * t11229 - 122760 * t11231
            t11247 = -33480 * t11202 + 150660 * t11204 - 262044 * t11206 + 208116 * t11208 + 180 * t11218 - 3780 * t11225 + 19116 * t11227 - 25524 * t11229 - 53244 * t11231
            t11201 = t11231 ** 2
            t11246 = -1581 * t11201 - 6045 * t11217 + 13020 * t11226 + 21204 * t11228 - 120714 * t11230 + 194370 * t11232 - 150660 * t11234 + 53940 * t11236 - 3999 * t11238 + 465
            t11245 = -9486 * t11201 + 1242 * t11217 - 16128 * t11226 + 88992 * t11228 - 249588 * t11230 + 379044 * t11232 - 303696 * t11234 + 102384 * t11236 + 7254 * t11238 - 18
            t11244 = -2804880 * t11202 + 12621960 * t11204 - 23497656 * t11206 + 23383464 * t11208 - 1880 * t11218 + 70200 * t11225 - 813736 * t11227 + 4458904 * t11229 - 13416376 * t11231
            t11243 = 1192074 * t11201 - 15478 * t11217 + 267112 * t11226 - 1696968 * t11228 + 5027732 * t11230 - 7162116 * t11232 + 3452904 * t11234 + 2651064 * t11236 - 3716466 * t11238 + 142
            t11242 = -12406200 * t11202 + 55827900 * t11204 - 103931940 * t11206 + 103172940 * t11208 - 5748 * t11218 + 253828 * t11225 - 3271660 * t11227 + 18980980 * t11229 - 58620100 * t11231
            t11241 = -10545270 * t11201 - 19950 * t11217 + 458560 * t11226 - 4239648 * t11228 + 20340188 * t11230 - 56241900 * t11232 + 92929200 * t11234 - 90445200 * t11236 + 47763870 * t11238 + 150
            t11224 = 4 * phi1
            t11223 = 8 * phi1
            t11222 = -5 * phi2
            t11221 = 5 * phi2
            t11220 = 12 * phi1
            t11219 = 16 * phi1
            tfunc[..., c] = (-0.35e2 / 0.6291456e7*1j) * np.sqrt(0.2e1) * np.sqrt(0.11e2) * np.sqrt(0.3e1) * np.sqrt(0.5e1) * np.sqrt(0.13e2) * np.sqrt(0.23e2) * np.sqrt(0.29e2) * ((t11241 + t11242) * np.exp((-1*1j) * (t11224 + t11221)) + (-t11243 + t11244) * np.exp((-1*1j) * (t11223 + t11221)) + (-t11241 + t11242) * np.exp((1j) * (t11224 + t11222)) + (t11243 + t11244) * np.exp((1j) * (t11223 + t11222)) + (t11245 + t11247) * np.exp((-1*1j) * (t11220 + t11221)) + (-t11246 + t11248) * np.exp((-1*1j) * (t11219 + t11221)) + (-t11245 + t11247) * np.exp((1j) * (t11220 + t11222)) + (t11246 + t11248) * np.exp((1j) * (t11219 + t11222))) * ((1 + t11218) ** (-0.1e1 / 0.2e1)) * ((1 - t11218) ** (-0.1e1 / 0.2e1))

        if Bindx == 296:
            t11273 = np.cos(phi)
            t11272 = t11273 ** 2
            t11278 = t11272 ** 2
            t11277 = t11273 * t11272
            t11280 = t11277 ** 2
            t11282 = t11278 ** 2
            t11279 = t11273 * t11278
            t11284 = t11279 ** 2
            t11286 = t11280 ** 2
            t11281 = t11273 * t11280
            t11288 = t11281 ** 2
            t11290 = t11282 ** 2
            t11299 = 69564 * t11272 - 265980 * t11278 + 364188 * t11280 + 20460 * t11282 - 609708 * t11284 + 707916 * t11286 - 347820 * t11288 + 65472 * t11290 - 4092
            t11257 = t11273 * t11290
            t11259 = t11273 * t11288
            t11261 = t11273 * t11286
            t11263 = t11273 * t11284
            t11265 = t11273 * t11282
            t11298 = 17391 * t11257 - 16368 * t11259 - 265980 * t11261 + 965712 * t11263 - 1483350 * t11265 + 1023 * t11273 + 81840 * t11277 - 495132 * t11279 + 1194864 * t11281
            t11297 = 1314 * t11272 - 34434 * t11278 + 324162 * t11280 - 1272582 * t11282 + 2492406 * t11284 - 2593926 * t11286 + 1377702 * t11288 - 294624 * t11290 - 18
            t11296 = -104346 * t11257 + 254448 * t11259 + 213912 * t11261 - 1360080 * t11263 + 1866708 * t11265 + 2358 * t11273 - 56304 * t11277 + 389880 * t11279 - 1206576 * t11281
            t11295 = 170404 * t11272 - 3178084 * t11278 + 22877764 * t11280 - 82130828 * t11282 + 162333132 * t11284 - 179589228 * t11286 + 104201292 * t11288 - 24682944 * t11290 - 1508
            t11294 = -13112814 * t11257 + 46000032 * t11259 - 58079112 * t11261 + 26845728 * t11263 + 4164108 * t11265 + 8242 * t11273 - 291616 * t11277 + 2612792 * t11279 - 8147360 * t11281
            t11293 = 352638 * t11272 - 7797790 * t11278 + 64878814 * t11280 - 262626650 * t11282 + 573371370 * t11284 - 690124890 * t11286 + 431115450 * t11288 - 109174560 * t11290 - 2574
            t11292 = -115997970 * t11257 + 481360560 * t11259 - 826413000 * t11261 + 758000880 * t11263 - 399613500 * t11265 - 31746 * t11273 + 1452880 * t11277 - 19643624 * t11279 + 120877328 * t11281
            t11276 = 2 * phi1
            t11275 = 3 * phi1
            t11274 = 4 * phi1
            tfunc[..., c] = -(0.35e2 / 0.3145728e7) * np.sqrt(0.5e1) * np.sqrt(0.23e2) * np.sqrt(0.29e2) * np.sqrt(0.3e1) * ((t11292 + t11293) * np.exp((-4*1j) * (phi1 + phi2)) + (t11294 + t11295) * np.exp((-4*1j) * (t11276 + phi2)) + (t11296 + t11297) * np.exp((-4*1j) * (t11275 + phi2)) + (t11298 + t11299) * np.exp((-4*1j) * (t11274 + phi2)) + (-t11292 + t11293) * np.exp((4*1j) * (phi1 - phi2)) + (-t11294 + t11295) * np.exp((4*1j) * (t11276 - phi2)) + (-t11296 + t11297) * np.exp((4*1j) * (t11275 - phi2)) + (-t11298 + t11299) * np.exp((4*1j) * (t11274 - phi2)))

        if Bindx == 297:
            t11325 = np.cos(phi)
            t11324 = t11325 ** 2
            t11332 = t11324 ** 2
            t11336 = t11332 ** 2
            t11337 = t11325 * t11336
            t11308 = t11337 ** 2
            t11331 = t11325 * t11324
            t11334 = t11331 ** 2
            t11333 = t11325 * t11332
            t11338 = t11333 ** 2
            t11340 = t11334 ** 2
            t11335 = t11325 * t11334
            t11342 = t11335 ** 2
            t11344 = t11336 ** 2
            t11354 = -17391 * t11308 + 64449 * t11324 - 347820 * t11332 + 887964 * t11334 - 1246014 * t11336 + 959574 * t11338 - 315084 * t11340 - 61380 * t11342 + 78771 * t11344 - 3069
            t11309 = t11325 * t11344
            t11311 = t11325 * t11342
            t11313 = t11325 * t11340
            t11315 = t11325 * t11338
            t11353 = 49104 * t11309 - 335544 * t11311 + 973896 * t11313 - 1546776 * t11315 - 8184 * t11325 + 8184 * t11331 + 171864 * t11333 - 744744 * t11335 + 1432200 * t11337
            t11352 = -220968 * t11309 + 1259964 * t11311 - 3017028 * t11313 + 3921036 * t11315 - 1476 * t11325 + 39108 * t11331 - 328524 * t11333 + 1328628 * t11335 - 2980740 * t11337
            t11351 = -104346 * t11308 + 7854 * t11324 - 91920 * t11332 + 384048 * t11334 - 704844 * t11336 + 443772 * t11338 + 378336 * t11340 - 795840 * t11342 + 483042 * t11344 - 102
            t11350 = -18512208 * t11309 + 90597624 * t11311 - 184172040 * t11313 + 200617560 * t11315 - 19656 * t11325 + 765128 * t11331 - 8742552 * t11333 + 45285864 * t11335 - 125819720 * t11337
            t11349 = -81880920 * t11309 + 361020420 * t11311 - 655807740 * t11313 + 632223540 * t11315 - 28028 * t11325 + 1309308 * t11331 - 17765748 * t11333 + 107918668 * t11335 - 346989500 * t11337
            t11348 = -13112814 * t11308 - 21294 * t11324 + 491400 * t11332 - 4879784 * t11334 + 25235652 * t11336 - 73325460 * t11338 + 123544200 * t11340 - 119569320 * t11342 + 61637238 * t11344 + 182
            t11347 = -115997970 * t11308 - 282282 * t11324 + 6646640 * t11332 - 61069008 * t11334 + 284603748 * t11336 - 753641460 * t11338 + 1184470560 * t11340 - 1094947200 * t11342 + 550214970 * t11344 + 2002
            t11330 = 4 * phi1
            t11329 = 8 * phi1
            t11328 = -3 * phi2
            t11327 = 3 * phi2
            t11326 = 16 * phi1
            tfunc[..., c] = (-0.35e2 / 0.2097152e7*1j) * np.sqrt(0.2e1) * np.sqrt(0.29e2) * np.sqrt(0.23e2) * np.sqrt(0.5e1) * ((1 + t11325) ** (-0.1e1 / 0.2e1)) * ((1 - t11325) ** (-0.1e1 / 0.2e1)) * ((t11351 + t11352) * np.exp((-3*1j) * (t11330 + phi2)) + (t11347 + t11349) * np.exp((-1*1j) * (t11330 + t11327)) + (t11348 + t11350) * np.exp((-1*1j) * (t11329 + t11327)) + (-t11347 + t11349) * np.exp((1j) * (t11330 + t11328)) + (-t11348 + t11350) * np.exp((1j) * (t11329 + t11328)) + (-t11351 + t11352) * np.exp((3*1j) * (t11330 - phi2)) + (t11353 - t11354) * np.exp((-1*1j) * (t11326 + t11327)) + (t11353 + t11354) * np.exp((1j) * (t11326 + t11328)))

        if Bindx == 298:
            t11379 = np.cos(phi)
            t11378 = t11379 ** 2
            t11385 = t11378 ** 2
            t11384 = t11379 * t11378
            t11387 = t11384 ** 2
            t11389 = t11385 ** 2
            t11386 = t11379 * t11385
            t11391 = t11386 ** 2
            t11393 = t11387 ** 2
            t11388 = t11379 * t11387
            t11395 = t11388 ** 2
            t11397 = t11389 ** 2
            t11406 = 47058 * t11378 - 272118 * t11385 + 759066 * t11387 - 1217370 * t11389 + 1188726 * t11391 - 701778 * t11393 + 231198 * t11395 - 32736 * t11397 - 2046
            t11363 = t11379 * t11397
            t11365 = t11379 * t11395
            t11367 = t11379 * t11393
            t11369 = t11379 * t11391
            t11371 = t11379 * t11389
            t11405 = -104346 * t11363 + 556884 * t11365 - 1222200 * t11367 + 1409940 * t11369 - 903420 * t11371 - 90 * t11379 + 3420 * t11384 - 50904 * t11386 + 310716 * t11388
            t11404 = 17391 * t11363 - 108438 * t11365 + 272118 * t11367 - 329406 * t11369 + 143220 * t11371 - 13299 * t11379 + 75702 * t11384 - 157542 * t11386 + 100254 * t11388
            t11403 = -10665 * t11378 + 136395 * t11385 - 674037 * t11387 + 1688085 * t11389 - 2374155 * t11391 + 1908585 * t11393 - 821655 * t11395 + 147312 * t11397 + 135
            t11402 = -108290 * t11378 + 2072070 * t11385 - 14885962 * t11387 + 52017290 * t11389 - 98193030 * t11391 + 102502530 * t11393 - 55746990 * t11395 + 12341472 * t11397 + 910
            t11401 = -143143 * t11378 + 3296293 * t11385 - 28479451 * t11387 + 119308475 * t11389 - 268530405 * t11391 + 331795815 * t11393 - 211835865 * t11395 + 54587280 * t11397 + 1001
            t11400 = -13112814 * t11363 + 61567116 * t11365 - 119637180 * t11367 + 124211100 * t11369 - 74157720 * t11371 - 10010 * t11379 + 398580 * t11384 - 4709796 * t11386 + 25450724 * t11388
            t11399 = -115997970 * t11363 + 499969860 * t11365 - 888363960 * t11367 + 838390020 * t11369 - 450921900 * t11371 - 34034 * t11379 + 1613612 * t11384 - 22254232 * t11386 + 137598604 * t11388
            t11383 = 2 * phi1
            t11382 = 4 * phi1
            t11381 = 6 * phi1
            t11380 = 8 * phi1
            tfunc[..., c] = (0.35e2 / 0.3145728e7) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.29e2) * np.sqrt(0.23e2) * np.sqrt(0.5e1) * ((-t11399 + t11401) * np.exp((-2*1j) * (t11383 + phi2)) + (-t11400 + t11402) * np.exp((-2*1j) * (t11382 + phi2)) + (t11403 - t11405) * np.exp((-2*1j) * (t11381 + phi2)) + (-t11404 + t11406) * np.exp((-2*1j) * (t11380 + phi2)) + (t11399 + t11401) * np.exp((2*1j) * (t11383 - phi2)) + (t11400 + t11402) * np.exp((2*1j) * (t11382 - phi2)) + (t11403 + t11405) * np.exp((2*1j) * (t11381 - phi2)) + (t11404 + t11406) * np.exp((2*1j) * (t11380 - phi2)))

        if Bindx == 299:
            t11432 = np.cos(phi)
            t11431 = t11432 ** 2
            t11438 = t11431 ** 2
            t11442 = t11438 ** 2
            t11450 = t11442 ** 2
            t11416 = t11432 * t11450
            t11437 = t11432 * t11431
            t11440 = t11437 ** 2
            t11441 = t11432 * t11440
            t11448 = t11441 ** 2
            t11418 = t11432 * t11448
            t11446 = t11440 ** 2
            t11420 = t11432 * t11446
            t11439 = t11432 * t11438
            t11444 = t11439 ** 2
            t11422 = t11432 * t11444
            t11443 = t11432 * t11442
            t11460 = 73656 * t11416 - 464256 * t11418 + 1239840 * t11420 - 1814400 * t11422 + 1080 * t11432 - 28800 * t11437 + 223776 * t11439 - 798336 * t11441 + 1567440 * t11443
            t11459 = -16368 * t11416 + 130944 * t11418 - 458304 * t11420 + 916608 * t11422 - 16368 * t11432 + 130944 * t11437 - 458304 * t11439 + 916608 * t11441 - 1145760 * t11443
            t11415 = t11443 ** 2
            t11458 = 17391 * t11415 + 25575 * t11431 - 167772 * t11438 + 544236 * t11440 - 1045506 * t11442 + 1274658 * t11444 - 1002540 * t11446 + 495132 * t11448 - 140151 * t11450 - 1023
            t11457 = -104346 * t11415 - 7290 * t11431 + 100440 * t11438 - 558936 * t11440 + 1641276 * t11442 - 2838780 * t11444 + 3006360 * t11446 - 1923480 * t11448 + 684666 * t11450 + 90
            t11456 = 6170736 * t11416 - 31414656 * t11418 + 66231360 * t11420 - 74455680 * t11422 + 7280 * t11432 - 291200 * t11437 + 3372096 * t11439 - 17453696 * t11441 + 47833760 * t11443
            t11455 = 27293640 * t11416 - 119099520 * t11418 + 213546720 * t11420 - 202650240 * t11422 + 8008 * t11432 - 384384 * t11437 + 5349344 * t11439 - 33258368 * t11441 + 109194800 * t11443
            t11454 = -13112814 * t11415 - 110110 * t11431 + 2216760 * t11438 - 17379544 * t11440 + 69084964 * t11442 - 156189540 * t11444 + 210002520 * t11446 - 166528440 * t11448 + 72015294 * t11450 + 910
            t11453 = -115997970 * t11415 - 290290 * t11431 + 6974968 * t11438 - 64888824 * t11440 + 303890444 * t11442 - 802976460 * t11444 + 1251315000 * t11446 - 1140650040 * t11448 + 562621170 * t11450 + 2002
            t11436 = 4 * phi1
            t11435 = 8 * phi1
            t11434 = 12 * phi1
            t11433 = 16 * phi1
            tfunc[..., c] = (0.35e2 / 0.12582912e8*1j) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.5e1) * np.sqrt(0.23e2) * np.sqrt(0.29e2) * np.sqrt(0.19e2) * ((-t11453 + t11455) * np.exp((-1*1j) * (t11436 + phi2)) + (-t11454 + t11456) * np.exp((-1*1j) * (t11435 + phi2)) + (t11453 + t11455) * np.exp((1j) * (t11436 - phi2)) + (t11454 + t11456) * np.exp((1j) * (t11435 - phi2)) + (-t11457 + t11460) * np.exp((-1*1j) * (t11434 + phi2)) + (-t11458 + t11459) * np.exp((-1*1j) * (t11433 + phi2)) + (t11457 + t11460) * np.exp((1j) * (t11434 - phi2)) + (t11458 + t11459) * np.exp((1j) * (t11433 - phi2))) * ((1 + t11432) ** (-0.1e1 / 0.2e1)) * ((1 - t11432) ** (-0.1e1 / 0.2e1))

        if Bindx == 300:
            t11473 = np.cos(phi)
            t11472 = t11473 ** 2
            t11474 = t11472 ** 2
            t11475 = t11472 * t11474
            t11478 = t11475 ** 2
            t11476 = t11474 ** 2
            t11468 = t11472 * t11476
            t11466 = t11472 * t11478
            t11465 = t11476 ** 2
            tfunc[..., c] = (-0.35e2 / 0.1048576e7*1j) * t11473 * np.sqrt(0.3e1) * np.sqrt(0.5e1) * np.sqrt(0.23e2) * np.sqrt(0.29e2) * np.sqrt(0.323e3) * ((6823410 * t11465 - 29774880 * t11466 + 53386680 * t11478 - 50662560 * t11468 + 27298700 * t11476 - 8314592 * t11475 + 1337336 * t11474 - 96096 * t11472 + 2002) * np.sin((4 * phi1)) + (771342 * t11465 - 3926832 * t11466 + 8278920 * t11478 - 9306960 * t11468 + 5979220 * t11476 - 2181712 * t11475 + 421512 * t11474 - 36400 * t11472 + 910) * np.sin((8 * phi1)) + (6138 * t11465 - 38688 * t11466 + 103320 * t11478 - 151200 * t11468 + 130620 * t11476 - 66528 * t11475 + 18648 * t11474 - 2400 * t11472 + 90) * np.sin((12 * phi1)) + (-1023 * t11465 + 8184 * t11466 - 28644 * t11478 + 57288 * t11468 - 71610 * t11476 + 57288 * t11475 - 28644 * t11474 + 8184 * t11472 - 1023) * np.sin((16 * phi1)))

        if Bindx == 301:
            t11506 = np.cos(phi)
            t11505 = t11506 ** 2
            t11512 = t11505 ** 2
            t11516 = t11512 ** 2
            t11524 = t11516 ** 2
            t11490 = t11506 * t11524
            t11511 = t11506 * t11505
            t11514 = t11511 ** 2
            t11515 = t11506 * t11514
            t11522 = t11515 ** 2
            t11492 = t11506 * t11522
            t11520 = t11514 ** 2
            t11494 = t11506 * t11520
            t11513 = t11506 * t11512
            t11518 = t11513 ** 2
            t11496 = t11506 * t11518
            t11517 = t11506 * t11516
            t11534 = -73656 * t11490 + 464256 * t11492 - 1239840 * t11494 + 1814400 * t11496 - 1080 * t11506 + 28800 * t11511 - 223776 * t11513 + 798336 * t11515 - 1567440 * t11517
            t11533 = 16368 * t11490 - 130944 * t11492 + 458304 * t11494 - 916608 * t11496 + 16368 * t11506 - 130944 * t11511 + 458304 * t11513 - 916608 * t11515 + 1145760 * t11517
            t11489 = t11517 ** 2
            t11532 = 17391 * t11489 + 25575 * t11505 - 167772 * t11512 + 544236 * t11514 - 1045506 * t11516 + 1274658 * t11518 - 1002540 * t11520 + 495132 * t11522 - 140151 * t11524 - 1023
            t11531 = 104346 * t11489 + 7290 * t11505 - 100440 * t11512 + 558936 * t11514 - 1641276 * t11516 + 2838780 * t11518 - 3006360 * t11520 + 1923480 * t11522 - 684666 * t11524 - 90
            t11530 = -6170736 * t11490 + 31414656 * t11492 - 66231360 * t11494 + 74455680 * t11496 - 7280 * t11506 + 291200 * t11511 - 3372096 * t11513 + 17453696 * t11515 - 47833760 * t11517
            t11529 = -27293640 * t11490 + 119099520 * t11492 - 213546720 * t11494 + 202650240 * t11496 - 8008 * t11506 + 384384 * t11511 - 5349344 * t11513 + 33258368 * t11515 - 109194800 * t11517
            t11528 = 13112814 * t11489 + 110110 * t11505 - 2216760 * t11512 + 17379544 * t11514 - 69084964 * t11516 + 156189540 * t11518 - 210002520 * t11520 + 166528440 * t11522 - 72015294 * t11524 - 910
            t11527 = 115997970 * t11489 + 290290 * t11505 - 6974968 * t11512 + 64888824 * t11514 - 303890444 * t11516 + 802976460 * t11518 - 1251315000 * t11520 + 1140650040 * t11522 - 562621170 * t11524 - 2002
            t11510 = 4 * phi1
            t11509 = 8 * phi1
            t11508 = 12 * phi1
            t11507 = 16 * phi1
            tfunc[..., c] = (0.35e2 / 0.12582912e8*1j) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.5e1) * np.sqrt(0.23e2) * np.sqrt(0.29e2) * np.sqrt(0.19e2) * ((t11527 + t11529) * np.exp((-1*1j) * (t11510 - phi2)) + (t11528 + t11530) * np.exp((-1*1j) * (t11509 - phi2)) + (-t11527 + t11529) * np.exp((1j) * (t11510 + phi2)) + (-t11528 + t11530) * np.exp((1j) * (t11509 + phi2)) + (t11531 + t11534) * np.exp((-1*1j) * (t11508 - phi2)) + (-t11532 + t11533) * np.exp((-1*1j) * (t11507 - phi2)) + (-t11531 + t11534) * np.exp((1j) * (t11508 + phi2)) + (t11532 + t11533) * np.exp((1j) * (t11507 + phi2))) * ((1 + t11506) ** (-0.1e1 / 0.2e1)) * ((1 - t11506) ** (-0.1e1 / 0.2e1))

        if Bindx == 302:
            t11559 = np.cos(phi)
            t11558 = t11559 ** 2
            t11565 = t11558 ** 2
            t11564 = t11559 * t11558
            t11567 = t11564 ** 2
            t11569 = t11565 ** 2
            t11566 = t11559 * t11565
            t11571 = t11566 ** 2
            t11573 = t11567 ** 2
            t11568 = t11559 * t11567
            t11575 = t11568 ** 2
            t11577 = t11569 ** 2
            t11586 = -47058 * t11558 + 272118 * t11565 - 759066 * t11567 + 1217370 * t11569 - 1188726 * t11571 + 701778 * t11573 - 231198 * t11575 + 32736 * t11577 + 2046
            t11543 = t11559 * t11577
            t11545 = t11559 * t11575
            t11547 = t11559 * t11573
            t11549 = t11559 * t11571
            t11551 = t11559 * t11569
            t11585 = -104346 * t11543 + 556884 * t11545 - 1222200 * t11547 + 1409940 * t11549 - 903420 * t11551 - 90 * t11559 + 3420 * t11564 - 50904 * t11566 + 310716 * t11568
            t11584 = 17391 * t11543 - 108438 * t11545 + 272118 * t11547 - 329406 * t11549 + 143220 * t11551 - 13299 * t11559 + 75702 * t11564 - 157542 * t11566 + 100254 * t11568
            t11583 = 10665 * t11558 - 136395 * t11565 + 674037 * t11567 - 1688085 * t11569 + 2374155 * t11571 - 1908585 * t11573 + 821655 * t11575 - 147312 * t11577 - 135
            t11582 = 108290 * t11558 - 2072070 * t11565 + 14885962 * t11567 - 52017290 * t11569 + 98193030 * t11571 - 102502530 * t11573 + 55746990 * t11575 - 12341472 * t11577 - 910
            t11581 = 143143 * t11558 - 3296293 * t11565 + 28479451 * t11567 - 119308475 * t11569 + 268530405 * t11571 - 331795815 * t11573 + 211835865 * t11575 - 54587280 * t11577 - 1001
            t11580 = -13112814 * t11543 + 61567116 * t11545 - 119637180 * t11547 + 124211100 * t11549 - 74157720 * t11551 - 10010 * t11559 + 398580 * t11564 - 4709796 * t11566 + 25450724 * t11568
            t11579 = -115997970 * t11543 + 499969860 * t11545 - 888363960 * t11547 + 838390020 * t11549 - 450921900 * t11551 - 34034 * t11559 + 1613612 * t11564 - 22254232 * t11566 + 137598604 * t11568
            t11563 = 2 * phi1
            t11562 = 4 * phi1
            t11561 = 6 * phi1
            t11560 = 8 * phi1
            tfunc[..., c] = (0.35e2 / 0.3145728e7) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.29e2) * np.sqrt(0.5e1) * np.sqrt(0.23e2) * ((-t11579 + t11581) * np.exp((-2*1j) * (t11563 - phi2)) + (-t11580 + t11582) * np.exp((-2*1j) * (t11562 - phi2)) + (t11583 - t11585) * np.exp((-2*1j) * (t11561 - phi2)) + (-t11584 + t11586) * np.exp((-2*1j) * (t11560 - phi2)) + (t11579 + t11581) * np.exp((2*1j) * (t11563 + phi2)) + (t11580 + t11582) * np.exp((2*1j) * (t11562 + phi2)) + (t11583 + t11585) * np.exp((2*1j) * (t11561 + phi2)) + (t11584 + t11586) * np.exp((2*1j) * (t11560 + phi2)))

        if Bindx == 303:
            t11612 = np.cos(phi)
            t11611 = t11612 ** 2
            t11619 = t11611 ** 2
            t11623 = t11619 ** 2
            t11624 = t11612 * t11623
            t11595 = t11624 ** 2
            t11618 = t11612 * t11611
            t11621 = t11618 ** 2
            t11620 = t11612 * t11619
            t11625 = t11620 ** 2
            t11627 = t11621 ** 2
            t11622 = t11612 * t11621
            t11629 = t11622 ** 2
            t11631 = t11623 ** 2
            t11641 = -17391 * t11595 + 64449 * t11611 - 347820 * t11619 + 887964 * t11621 - 1246014 * t11623 + 959574 * t11625 - 315084 * t11627 - 61380 * t11629 + 78771 * t11631 - 3069
            t11596 = t11612 * t11631
            t11598 = t11612 * t11629
            t11600 = t11612 * t11627
            t11602 = t11612 * t11625
            t11640 = -49104 * t11596 + 335544 * t11598 - 973896 * t11600 + 1546776 * t11602 + 8184 * t11612 - 8184 * t11618 - 171864 * t11620 + 744744 * t11622 - 1432200 * t11624
            t11639 = 220968 * t11596 - 1259964 * t11598 + 3017028 * t11600 - 3921036 * t11602 + 1476 * t11612 - 39108 * t11618 + 328524 * t11620 - 1328628 * t11622 + 2980740 * t11624
            t11638 = -104346 * t11595 + 7854 * t11611 - 91920 * t11619 + 384048 * t11621 - 704844 * t11623 + 443772 * t11625 + 378336 * t11627 - 795840 * t11629 + 483042 * t11631 - 102
            t11637 = 18512208 * t11596 - 90597624 * t11598 + 184172040 * t11600 - 200617560 * t11602 + 19656 * t11612 - 765128 * t11618 + 8742552 * t11620 - 45285864 * t11622 + 125819720 * t11624
            t11636 = 81880920 * t11596 - 361020420 * t11598 + 655807740 * t11600 - 632223540 * t11602 + 28028 * t11612 - 1309308 * t11618 + 17765748 * t11620 - 107918668 * t11622 + 346989500 * t11624
            t11635 = -13112814 * t11595 - 21294 * t11611 + 491400 * t11619 - 4879784 * t11621 + 25235652 * t11623 - 73325460 * t11625 + 123544200 * t11627 - 119569320 * t11629 + 61637238 * t11631 + 182
            t11634 = -115997970 * t11595 - 282282 * t11611 + 6646640 * t11619 - 61069008 * t11621 + 284603748 * t11623 - 753641460 * t11625 + 1184470560 * t11627 - 1094947200 * t11629 + 550214970 * t11631 + 2002
            t11617 = 4 * phi1
            t11616 = 8 * phi1
            t11615 = -3 * phi2
            t11614 = 3 * phi2
            t11613 = 16 * phi1
            tfunc[..., c] = (-0.35e2 / 0.2097152e7*1j) * np.sqrt(0.2e1) * np.sqrt(0.29e2) * np.sqrt(0.5e1) * np.sqrt(0.23e2) * ((t11638 + t11639) * np.exp((-3*1j) * (t11617 - phi2)) + (t11634 + t11636) * np.exp((-1*1j) * (t11617 + t11615)) + (t11635 + t11637) * np.exp((-1*1j) * (t11616 + t11615)) + (-t11634 + t11636) * np.exp((1j) * (t11617 + t11614)) + (-t11635 + t11637) * np.exp((1j) * (t11616 + t11614)) + (-t11638 + t11639) * np.exp((3*1j) * (t11617 + phi2)) + (t11640 - t11641) * np.exp((-1*1j) * (t11613 + t11615)) + (t11640 + t11641) * np.exp((1j) * (t11613 + t11614))) * ((1 + t11612) ** (-0.1e1 / 0.2e1)) * ((1 - t11612) ** (-0.1e1 / 0.2e1))

        if Bindx == 304:
            t11666 = np.cos(phi)
            t11665 = t11666 ** 2
            t11671 = t11665 ** 2
            t11670 = t11666 * t11665
            t11673 = t11670 ** 2
            t11675 = t11671 ** 2
            t11672 = t11666 * t11671
            t11677 = t11672 ** 2
            t11679 = t11673 ** 2
            t11674 = t11666 * t11673
            t11681 = t11674 ** 2
            t11683 = t11675 ** 2
            t11692 = 69564 * t11665 - 265980 * t11671 + 364188 * t11673 + 20460 * t11675 - 609708 * t11677 + 707916 * t11679 - 347820 * t11681 + 65472 * t11683 - 4092
            t11650 = t11666 * t11683
            t11652 = t11666 * t11681
            t11654 = t11666 * t11679
            t11656 = t11666 * t11677
            t11658 = t11666 * t11675
            t11691 = 17391 * t11650 - 16368 * t11652 - 265980 * t11654 + 965712 * t11656 - 1483350 * t11658 + 1023 * t11666 + 81840 * t11670 - 495132 * t11672 + 1194864 * t11674
            t11690 = 1314 * t11665 - 34434 * t11671 + 324162 * t11673 - 1272582 * t11675 + 2492406 * t11677 - 2593926 * t11679 + 1377702 * t11681 - 294624 * t11683 - 18
            t11689 = -104346 * t11650 + 254448 * t11652 + 213912 * t11654 - 1360080 * t11656 + 1866708 * t11658 + 2358 * t11666 - 56304 * t11670 + 389880 * t11672 - 1206576 * t11674
            t11688 = 170404 * t11665 - 3178084 * t11671 + 22877764 * t11673 - 82130828 * t11675 + 162333132 * t11677 - 179589228 * t11679 + 104201292 * t11681 - 24682944 * t11683 - 1508
            t11687 = -13112814 * t11650 + 46000032 * t11652 - 58079112 * t11654 + 26845728 * t11656 + 4164108 * t11658 + 8242 * t11666 - 291616 * t11670 + 2612792 * t11672 - 8147360 * t11674
            t11686 = 352638 * t11665 - 7797790 * t11671 + 64878814 * t11673 - 262626650 * t11675 + 573371370 * t11677 - 690124890 * t11679 + 431115450 * t11681 - 109174560 * t11683 - 2574
            t11685 = 115997970 * t11650 - 481360560 * t11652 + 826413000 * t11654 - 758000880 * t11656 + 399613500 * t11658 + 31746 * t11666 - 1452880 * t11670 + 19643624 * t11672 - 120877328 * t11674
            t11669 = 2 * phi1
            t11668 = 3 * phi1
            t11667 = 4 * phi1
            tfunc[..., c] = (0.35e2 / 0.3145728e7) * np.sqrt(0.3e1) * np.sqrt(0.29e2) * np.sqrt(0.5e1) * np.sqrt(0.23e2) * ((t11685 + t11686) * np.exp((-4*1j) * (phi1 - phi2)) + (-t11687 + t11688) * np.exp((-4*1j) * (t11669 - phi2)) + (-t11689 + t11690) * np.exp((-4*1j) * (t11668 - phi2)) + (-t11691 + t11692) * np.exp((-4*1j) * (t11667 - phi2)) + (-t11685 + t11686) * np.exp((4*1j) * (phi1 + phi2)) + (t11687 + t11688) * np.exp((4*1j) * (t11669 + phi2)) + (t11689 + t11690) * np.exp((4*1j) * (t11668 + phi2)) + (t11691 + t11692) * np.exp((4*1j) * (t11667 + phi2)))

        if Bindx == 305:
            t11718 = np.cos(phi)
            t11717 = t11718 ** 2
            t11726 = t11717 ** 2
            t11730 = t11726 ** 2
            t11738 = t11730 ** 2
            t11702 = t11718 * t11738
            t11725 = t11718 * t11717
            t11728 = t11725 ** 2
            t11729 = t11718 * t11728
            t11736 = t11729 ** 2
            t11704 = t11718 * t11736
            t11734 = t11728 ** 2
            t11706 = t11718 * t11734
            t11727 = t11718 * t11726
            t11732 = t11727 ** 2
            t11708 = t11718 * t11732
            t11731 = t11718 * t11730
            t11748 = 7440 * t11702 - 33480 * t11704 + 43896 * t11706 + 23064 * t11708 - 744 * t11718 + 15624 * t11725 - 70680 * t11727 + 137640 * t11729 - 122760 * t11731
            t11747 = -33480 * t11702 + 150660 * t11704 - 262044 * t11706 + 208116 * t11708 + 180 * t11718 - 3780 * t11725 + 19116 * t11727 - 25524 * t11729 - 53244 * t11731
            t11701 = t11731 ** 2
            t11746 = -1581 * t11701 - 6045 * t11717 + 13020 * t11726 + 21204 * t11728 - 120714 * t11730 + 194370 * t11732 - 150660 * t11734 + 53940 * t11736 - 3999 * t11738 + 465
            t11745 = -9486 * t11701 + 1242 * t11717 - 16128 * t11726 + 88992 * t11728 - 249588 * t11730 + 379044 * t11732 - 303696 * t11734 + 102384 * t11736 + 7254 * t11738 - 18
            t11744 = -2804880 * t11702 + 12621960 * t11704 - 23497656 * t11706 + 23383464 * t11708 - 1880 * t11718 + 70200 * t11725 - 813736 * t11727 + 4458904 * t11729 - 13416376 * t11731
            t11743 = 1192074 * t11701 - 15478 * t11717 + 267112 * t11726 - 1696968 * t11728 + 5027732 * t11730 - 7162116 * t11732 + 3452904 * t11734 + 2651064 * t11736 - 3716466 * t11738 + 142
            t11742 = -12406200 * t11702 + 55827900 * t11704 - 103931940 * t11706 + 103172940 * t11708 - 5748 * t11718 + 253828 * t11725 - 3271660 * t11727 + 18980980 * t11729 - 58620100 * t11731
            t11741 = 10545270 * t11701 + 19950 * t11717 - 458560 * t11726 + 4239648 * t11728 - 20340188 * t11730 + 56241900 * t11732 - 92929200 * t11734 + 90445200 * t11736 - 47763870 * t11738 - 150
            t11724 = 4 * phi1
            t11723 = 8 * phi1
            t11722 = -5 * phi2
            t11721 = 5 * phi2
            t11720 = 12 * phi1
            t11719 = 16 * phi1
            tfunc[..., c] = (0.35e2 / 0.6291456e7*1j) * np.sqrt(0.2e1) * np.sqrt(0.11e2) * np.sqrt(0.3e1) * np.sqrt(0.5e1) * np.sqrt(0.13e2) * np.sqrt(0.23e2) * np.sqrt(0.29e2) * ((t11741 + t11742) * np.exp((-1*1j) * (t11724 + t11722)) + (t11743 + t11744) * np.exp((-1*1j) * (t11723 + t11722)) + (-t11741 + t11742) * np.exp((1j) * (t11724 + t11721)) + (-t11743 + t11744) * np.exp((1j) * (t11723 + t11721)) + (-t11745 + t11747) * np.exp((-1*1j) * (t11720 + t11722)) + (t11746 + t11748) * np.exp((-1*1j) * (t11719 + t11722)) + (t11745 + t11747) * np.exp((1j) * (t11720 + t11721)) + (-t11746 + t11748) * np.exp((1j) * (t11719 + t11721))) * ((1 + t11718) ** (-0.1e1 / 0.2e1)) * ((1 - t11718) ** (-0.1e1 / 0.2e1))

        if Bindx == 306:
            t11773 = np.cos(phi)
            t11772 = t11773 ** 2
            t11780 = t11772 ** 2
            t11784 = t11780 ** 2
            t11792 = t11784 ** 2
            t11757 = t11773 * t11792
            t11779 = t11773 * t11772
            t11782 = t11779 ** 2
            t11783 = t11773 * t11782
            t11790 = t11783 ** 2
            t11759 = t11773 * t11790
            t11788 = t11782 ** 2
            t11761 = t11773 * t11788
            t11781 = t11773 * t11780
            t11786 = t11781 ** 2
            t11763 = t11773 * t11786
            t11765 = t11773 * t11784
            t11801 = -1581 * t11757 - 12462 * t11759 + 73470 * t11761 - 123318 * t11763 + 61380 * t11765 - 1767 * t11773 + 21390 * t11779 - 60078 * t11781 + 42966 * t11783
            t11800 = -3906 * t11772 - 12090 * t11780 + 90582 * t11782 - 173910 * t11784 + 137082 * t11786 - 25854 * t11788 - 21390 * t11790 + 8928 * t11792 + 558
            t11799 = -2079 * t11772 + 21069 * t11780 - 81219 * t11782 + 130563 * t11784 - 44397 * t11786 - 111297 * t11788 + 127503 * t11790 - 40176 * t11792 + 33
            t11798 = 9486 * t11757 + 22692 * t11759 - 186552 * t11761 + 346788 * t11763 - 291372 * t11765 - 18 * t11773 + 1164 * t11779 - 21528 * t11781 + 119340 * t11783
            t11797 = 6386 * t11772 - 137046 * t11780 + 1264858 * t11782 - 5817178 * t11784 + 14197014 * t11786 - 18699954 * t11788 + 12551838 * t11790 - 3365856 * t11792 - 62
            t11796 = 67183 * t11772 - 1385405 * t11780 + 10827411 * t11782 - 41499475 * t11784 + 86478045 * t11786 - 100080015 * t11788 + 60480225 * t11790 - 14887440 * t11792 - 529
            t11795 = -10545270 * t11757 + 40940460 * t11759 - 64432200 * t11761 + 52907820 * t11763 - 24377700 * t11765 - 1334 * t11773 + 60260 * t11779 - 892584 * t11781 + 6340548 * t11783
            t11794 = -1192074 * t11757 + 1823172 * t11759 + 3515148 * t11761 - 10783500 * t11763 + 10645752 * t11765 + 3762 * t11773 - 126916 * t11779 + 1219540 * t11781 - 5104884 * t11783
            t11778 = 2 * phi1
            t11777 = 4 * phi1
            t11776 = 8 * phi1
            t11775 = -3 * phi2
            t11774 = 3 * phi2
            tfunc[..., c] = (0.35e2 / 0.1048576e7) * np.sqrt(0.2e1) * np.sqrt(0.11e2) * np.sqrt(0.5e1) * np.sqrt(0.29e2) * np.sqrt(0.13e2) * ((t11798 + t11799) * np.exp((-6*1j) * (t11778 - phi2)) + (-t11795 + t11796) * np.exp((-2*1j) * (t11778 + t11775)) + (-t11794 + t11797) * np.exp((-2*1j) * (t11777 + t11775)) + (t11800 + t11801) * np.exp((-2*1j) * (t11776 + t11775)) + (t11795 + t11796) * np.exp((2*1j) * (t11778 + t11774)) + (t11794 + t11797) * np.exp((2*1j) * (t11777 + t11774)) + (t11800 - t11801) * np.exp((2*1j) * (t11776 + t11774)) + (-t11798 + t11799) * np.exp((6*1j) * (t11778 + phi2)))

        if Bindx == 307:
            t11827 = np.cos(phi)
            t11826 = t11827 ** 2
            t11835 = t11826 ** 2
            t11839 = t11835 ** 2
            t11847 = t11839 ** 2
            t11811 = t11827 * t11847
            t11834 = t11827 * t11826
            t11837 = t11834 ** 2
            t11838 = t11827 * t11837
            t11845 = t11838 ** 2
            t11813 = t11827 * t11845
            t11843 = t11837 ** 2
            t11815 = t11827 * t11843
            t11836 = t11827 * t11835
            t11841 = t11836 ** 2
            t11817 = t11827 * t11841
            t11840 = t11827 * t11839
            t11857 = -515592 * t11811 + 1390536 * t11813 - 214200 * t11815 - 3003480 * t11817 + 4176 * t11827 - 89928 * t11834 + 703512 * t11836 - 2476584 * t11838 + 4201560 * t11840
            t11810 = t11840 ** 2
            t11856 = 17391 * t11810 - 7161 * t11826 - 429660 * t11835 + 1689996 * t11837 - 2273106 * t11839 + 652674 * t11841 + 1158036 * t11843 - 1043460 * t11845 + 228129 * t11847 + 7161
            t11855 = 114576 * t11811 - 114576 * t11813 - 1031184 * t11815 + 2831664 * t11817 + 32736 * t11827 - 278256 * t11834 + 441936 * t11836 + 703824 * t11838 - 2700720 * t11840
            t11854 = -104346 * t11810 - 21546 * t11826 + 148680 * t11835 - 160776 * t11837 - 1174932 * t11839 + 4156020 * t11841 - 5494680 * t11843 + 3176280 * t11845 - 525078 * t11847 + 378
            t11853 = -43195152 * t11811 + 168853776 * t11813 - 259804272 * t11815 + 194919504 * t11817 + 17696 * t11827 - 492688 * t11834 + 2441264 * t11836 + 5698352 * t11838 - 68438480 * t11840
            t11852 = 115997970 * t11810 - 94622 * t11826 + 1259480 * t11835 + 181608 * t11837 - 59741948 * t11839 + 309206940 * t11841 - 701837640 * t11843 + 823211400 * t11845 - 488183970 * t11847 + 782
            t11851 = -191055480 * t11811 + 885802680 * t11813 - 1704932040 * t11815 + 1758503640 * t11817 - 136528 * t11827 + 5513928 * t11834 - 65763992 * t11836 + 357357992 * t11838 - 1045290200 * t11840
            t11850 = 13112814 * t11810 - 413026 * t11826 + 6813320 * t11835 - 44633512 * t11837 + 147454076 * t11839 - 264131868 * t11841 + 249214056 * t11843 - 97673160 * t11845 - 9746958 * t11847 + 4258
            t11833 = 4 * phi1
            t11832 = 8 * phi1
            t11831 = -7 * phi2
            t11830 = 7 * phi2
            t11829 = 12 * phi1
            t11828 = 16 * phi1
            tfunc[..., c] = (0.35e2 / 0.6291456e7*1j) * np.sqrt(0.13e2) * np.sqrt(0.3e1) * np.sqrt(0.29e2) * np.sqrt(0.5e1) * ((t11851 + t11852) * np.exp((-1*1j) * (t11833 + t11831)) + (t11850 + t11853) * np.exp((-1*1j) * (t11832 + t11831)) + (t11851 - t11852) * np.exp((1j) * (t11833 + t11830)) + (-t11850 + t11853) * np.exp((1j) * (t11832 + t11830)) + (-t11854 + t11857) * np.exp((-1*1j) * (t11829 + t11831)) + (t11855 - t11856) * np.exp((-1*1j) * (t11828 + t11831)) + (t11854 + t11857) * np.exp((1j) * (t11829 + t11830)) + (t11855 + t11856) * np.exp((1j) * (t11828 + t11830))) * ((1 + t11827) ** (-0.1e1 / 0.2e1)) * ((1 - t11827) ** (-0.1e1 / 0.2e1))

        if Bindx == 308:
            t11882 = np.cos(phi)
            t11881 = t11882 ** 2
            t11888 = t11881 ** 2
            t11887 = t11882 * t11881
            t11890 = t11887 ** 2
            t11892 = t11888 ** 2
            t11889 = t11882 * t11888
            t11894 = t11889 ** 2
            t11896 = t11890 ** 2
            t11891 = t11882 * t11890
            t11898 = t11891 ** 2
            t11900 = t11892 ** 2
            t11909 = 57288 * t11881 - 712008 * t11888 + 1366728 * t11890 + 90024 * t11892 - 2250600 * t11894 + 1792296 * t11896 - 220968 * t11898 - 130944 * t11900 + 8184
            t11908 = -1764 * t11881 - 130140 * t11888 + 1199484 * t11890 - 3744180 * t11892 + 4967028 * t11894 - 2249172 * t11896 - 630540 * t11898 + 589248 * t11900 + 36
            t11866 = t11882 * t11900
            t11868 = t11882 * t11898
            t11870 = t11882 * t11896
            t11872 = t11882 * t11894
            t11874 = t11882 * t11892
            t11907 = -17391 * t11866 - 351912 * t11868 + 822492 * t11870 + 548328 * t11872 - 2723226 * t11874 + 48081 * t11882 - 220968 * t11887 - 356004 * t11889 + 2250600 * t11891
            t11906 = -104346 * t11866 - 955296 * t11868 + 3459240 * t11870 - 3442464 * t11872 + 378180 * t11874 - 9018 * t11882 + 145440 * t11887 - 735768 * t11889 + 1264032 * t11891
            t11905 = 460664 * t11881 - 5964280 * t11888 + 25021304 * t11890 - 31917160 * t11892 - 41866968 * t11894 + 154983192 * t11896 - 150061080 * t11898 + 49365888 * t11900 - 5176
            t11904 = -1507420 * t11881 + 28113820 * t11888 - 202380220 * t11890 + 726541940 * t11892 - 1436023860 * t11894 + 1588673940 * t11896 - 921780660 * t11898 + 218349120 * t11900 + 13340
            t11903 = 13112814 * t11866 + 16268304 * t11868 - 161823480 * t11870 + 282447984 * t11872 - 225370860 * t11874 - 65042 * t11882 + 2018320 * t11887 - 20083448 * t11889 + 93511792 * t11891
            t11902 = 115997970 * t11866 - 406923360 * t11868 + 513776760 * t11870 - 237481440 * t11872 - 36836340 * t11874 - 72910 * t11882 + 2579680 * t11887 - 23113160 * t11889 + 72072800 * t11891
            t11886 = 2 * phi1
            t11885 = 3 * phi1
            t11884 = -2 * phi2
            t11883 = 2 * phi2
            tfunc[..., c] = -(0.35e2 / 0.6291456e7) * np.sqrt(0.2e1) * np.sqrt(0.29e2) * np.sqrt(0.13e2) * np.sqrt(0.3e1) * ((-t11903 + t11905) * np.exp((-8*1j) * (phi1 - phi2)) + (-t11907 + t11909) * np.exp((-8*1j) * (t11886 - phi2)) + (-t11902 + t11904) * np.exp((-4*1j) * (phi1 + t11884)) + (t11906 + t11908) * np.exp((-4*1j) * (t11885 + t11884)) + (t11902 + t11904) * np.exp((4*1j) * (phi1 + t11883)) + (-t11906 + t11908) * np.exp((4*1j) * (t11885 + t11883)) + (t11903 + t11905) * np.exp((8*1j) * (phi1 + phi2)) + (t11907 + t11909) * np.exp((8*1j) * (t11886 + phi2)))

        if Bindx == 309:
            t11935 = np.cos(phi)
            t11934 = t11935 ** 2
            t11942 = t11934 ** 2
            t11946 = t11942 ** 2
            t11954 = t11946 ** 2
            t11919 = t11935 * t11954
            t11941 = t11935 * t11934
            t11944 = t11941 ** 2
            t11945 = t11935 * t11944
            t11952 = t11945 ** 2
            t11921 = t11935 * t11952
            t11950 = t11944 ** 2
            t11923 = t11935 * t11950
            t11943 = t11935 * t11942
            t11948 = t11943 ** 2
            t11925 = t11935 * t11948
            t11947 = t11935 * t11946
            t11964 = 662904 * t11919 - 194184 * t11921 - 4631112 * t11923 + 8692632 * t11925 + 12384 * t11935 - 134904 * t11941 + 239208 * t11943 + 1376232 * t11945 - 6023160 * t11947
            t11963 = -147312 * t11919 - 540144 * t11921 + 2602512 * t11923 - 1915056 * t11925 + 65472 * t11935 - 114576 * t11941 - 1227600 * t11943 + 3617328 * t11945 - 2340624 * t11947
            t11918 = t11947 ** 2
            t11962 = -17391 * t11918 + 138105 * t11934 - 945252 * t11942 + 797940 * t11944 + 2633202 * t11946 - 4973826 * t11948 + 2181036 * t11950 + 650628 * t11952 - 473649 * t11954 + 9207
            t11961 = -104346 * t11918 - 39114 * t11934 + 501480 * t11942 - 2337192 * t11944 + 4473612 * t11946 - 2373228 * t11948 - 3145272 * t11950 + 4354680 * t11952 - 1331574 * t11954 + 954
            t11960 = 55536624 * t11919 - 173341584 * t11921 + 158466672 * t11923 + 35116848 * t11925 - 155584 * t11935 + 4137744 * t11941 - 31882032 * t11943 + 105932112 * t11945 - 153810800 * t11947
            t11959 = 13112814 * t11918 - 212706 * t11934 + 4734600 * t11942 - 43795752 * t11944 + 186609852 * t11946 - 407470492 * t11948 + 465657192 * t11950 - 250403400 * t11952 + 31765266 * t11954 + 2626
            t11958 = 245642760 * t11919 - 1183551480 * t11921 + 2368303560 * t11923 - 2542895640 * t11925 + 290720 * t11935 - 10343560 * t11941 + 112152600 * t11943 - 568809320 * t11945 + 1579210360 * t11947
            t11957 = 115997970 * t11918 - 1473150 * t11934 + 23902520 * t11942 - 138299000 * t11944 + 351735780 * t11946 - 352070660 * t11948 - 115205160 * t11950 + 553956840 * t11952 - 438559170 * t11954 + 14030
            t11940 = 4 * phi1
            t11939 = 8 * phi1
            t11938 = -9 * phi2
            t11937 = 9 * phi2
            t11936 = 16 * phi1
            tfunc[..., c] = (-0.35e2 / 0.2097152e7*1j) * np.sqrt(0.3e1) * np.sqrt(0.29e2) * ((1 + t11935) ** (-0.1e1 / 0.2e1)) * ((1 - t11935) ** (-0.1e1 / 0.2e1)) * ((t11961 + t11964) * np.exp((-3*1j) * (t11940 - 3 * phi2)) + (-t11957 + t11958) * np.exp((-1*1j) * (t11940 + t11938)) + (-t11959 + t11960) * np.exp((-1*1j) * (t11939 + t11938)) + (t11957 + t11958) * np.exp((1j) * (t11940 + t11937)) + (t11959 + t11960) * np.exp((1j) * (t11939 + t11937)) + (-t11961 + t11964) * np.exp((3*1j) * (t11940 + 3 * phi2)) + (-t11962 + t11963) * np.exp((-1*1j) * (t11936 + t11938)) + (t11962 + t11963) * np.exp((1j) * (t11936 + t11937)))

        if Bindx == 310:
            t11989 = np.cos(phi)
            t11988 = t11989 ** 2
            t11997 = t11988 ** 2
            t11996 = t11989 * t11988
            t11999 = t11996 ** 2
            t12001 = t11997 ** 2
            t11998 = t11989 * t11997
            t12003 = t11998 ** 2
            t12005 = t11999 ** 2
            t12000 = t11989 * t11999
            t12007 = t12000 ** 2
            t12009 = t12001 ** 2
            t12018 = -85250 * t11988 + 255750 * t11997 + 523094 * t11999 - 1657942 * t12001 + 682682 * t12003 + 718146 * t12005 - 378510 * t12007 - 54560 * t12009 - 3410
            t11973 = t11989 * t12009
            t11975 = t11989 * t12007
            t11977 = t11989 * t12005
            t11979 = t11989 * t12003
            t11981 = t11989 * t12001
            t12017 = -5797 * t11973 - 209374 * t11975 - 145266 * t11977 + 1391962 * t11979 - 975260 * t11981 - 28303 * t11989 - 63426 * t11996 + 718146 * t11998 - 682682 * t12000
            t12016 = -34782 * t11973 - 620868 * t11975 + 1089720 * t11977 + 602940 * t11979 - 2170740 * t11981 + 3330 * t11989 + 6420 * t11996 - 332904 * t11998 + 1456884 * t12000
            t12015 = -30783 * t11988 + 230445 * t11997 - 486915 * t11999 - 336765 * t12001 + 2209779 * t12003 - 2233569 * t12005 + 401295 * t12007 + 245520 * t12009 + 993
            t12014 = 522418 * t11988 - 6491030 * t11997 + 32362330 * t11999 - 74278490 * t12001 + 71231446 * t12003 + 385294 * t12005 - 44293730 * t12007 + 20569120 * t12009 - 7358
            t12013 = -4370938 * t11973 - 20989852 * t11975 + 99701420 * t11977 - 137994220 * t11979 + 83128760 * t11981 - 35230 * t11989 + 625820 * t11996 - 236236 * t11998 - 19829524 * t12000
            t12012 = -928625 * t11988 + 15435875 * t11997 - 104051885 * t11999 + 358428205 * t12001 - 682586755 * t12003 + 725399185 * t12005 - 402684575 * t12007 + 90978800 * t12009 + 9775
            t12011 = -38665990 * t11973 + 117031820 * t11975 - 70408520 * t11977 - 132383860 * t11979 + 233829500 * t11981 + 165370 * t11989 - 5051260 * t11996 + 42239960 * t11998 - 146757020 * t12000
            t11995 = 2 * phi1
            t11994 = 4 * phi1
            t11993 = 6 * phi1
            t11992 = 8 * phi1
            t11991 = -5 * phi2
            t11990 = 5 * phi2
            tfunc[..., c] = -(0.35e2 / 0.1048576e7) * np.sqrt(0.2e1) * np.sqrt(0.29e2) * ((t12011 + t12012) * np.exp((-2*1j) * (t11995 + t11991)) + (t12013 + t12014) * np.exp((-2*1j) * (t11994 + t11991)) + (t12015 + t12016) * np.exp((-2*1j) * (t11993 + t11991)) + (-t12017 + t12018) * np.exp((-2*1j) * (t11992 + t11991)) + (-t12011 + t12012) * np.exp((2*1j) * (t11995 + t11990)) + (-t12013 + t12014) * np.exp((2*1j) * (t11994 + t11990)) + (t12015 - t12016) * np.exp((2*1j) * (t11993 + t11990)) + (t12017 + t12018) * np.exp((2*1j) * (t11992 + t11990)))

        if Bindx == 311:
            t12044 = np.cos(phi)
            t12043 = t12044 ** 2
            t12052 = t12043 ** 2
            t12056 = t12052 ** 2
            t12064 = t12056 ** 2
            t12028 = t12044 * t12064
            t12051 = t12044 * t12043
            t12054 = t12051 ** 2
            t12055 = t12044 * t12054
            t12062 = t12055 ** 2
            t12030 = t12044 * t12062
            t12060 = t12054 ** 2
            t12032 = t12044 * t12060
            t12053 = t12044 * t12052
            t12058 = t12053 ** 2
            t12034 = t12044 * t12058
            t12057 = t12044 * t12056
            t12074 = 60016 * t12028 + 570152 * t12030 - 630168 * t12032 - 1950520 * t12034 + 35464 * t12044 + 193688 * t12051 - 973896 * t12053 - 35464 * t12055 + 2730728 * t12057
            t12027 = t12057 ** 2
            t12073 = -34782 * t12027 + 45738 * t12043 - 163680 * t12052 - 384384 * t12054 + 2743884 * t12056 - 4425564 * t12058 + 1891344 * t12060 + 1109520 * t12062 - 779898 * t12064 - 2178
            t12072 = -270072 * t12028 - 732468 * t12030 + 3308844 * t12032 - 2795364 * t12034 - 1668 * t12044 + 107508 * t12051 - 790524 * t12053 + 1834404 * t12055 - 660660 * t12057
            t12071 = -5797 * t12027 - 131285 * t12043 + 135036 * t12052 + 1365364 * t12054 - 2243098 * t12056 - 487630 * t12058 + 2110108 * t12060 - 478764 * t12062 - 260183 * t12064 - 3751
            t12070 = -22626032 * t12028 + 48337432 * t12030 + 25246936 * t12032 - 157047176 * t12034 + 98488 * t12044 - 2396888 * t12051 + 21905416 * t12053 - 89059256 * t12055 + 175541080 * t12057
            t12069 = -100076680 * t12028 + 504932340 * t12030 - 1052859500 * t12032 + 1167893540 * t12034 - 156860 * t12044 + 4872780 * t12051 - 51819460 * t12053 + 266312860 * t12055 - 739099020 * t12057
            t12068 = -4370938 * t12027 - 819962 * t12043 + 6961240 * t12052 - 16987256 * t12054 - 13491764 * t12056 + 123565156 * t12058 - 205313576 * t12060 + 138328840 * t12062 - 27885182 * t12064 + 13442
            t12067 = -38665990 * t12027 + 2482850 * t12043 - 33940640 * t12052 + 176043840 * t12054 - 442558180 * t12056 + 564677140 * t12058 - 302667120 * t12060 - 50852080 * t12062 + 125509390 * t12064 - 29210
            t12050 = 4 * phi1
            t12049 = 8 * phi1
            t12048 = 12 * phi1
            t12047 = 16 * phi1
            t12046 = -11 * phi2
            t12045 = 11 * phi2
            tfunc[..., c] = (0.35e2 / 0.2097152e7*1j) * np.sqrt(0.2e1) * np.sqrt(0.29e2) * ((-t12067 + t12069) * np.exp((-1*1j) * (t12050 + t12046)) + (-t12068 + t12070) * np.exp((-1*1j) * (t12049 + t12046)) + (t12067 + t12069) * np.exp((1j) * (t12050 + t12045)) + (t12068 + t12070) * np.exp((1j) * (t12049 + t12045)) + (t12072 - t12073) * np.exp((-1*1j) * (t12048 + t12046)) + (t12071 + t12074) * np.exp((-1*1j) * (t12047 + t12046)) + (t12072 + t12073) * np.exp((1j) * (t12048 + t12045)) + (-t12071 + t12074) * np.exp((1j) * (t12047 + t12045))) * ((1 + t12044) ** (-0.1e1 / 0.2e1)) * ((1 - t12044) ** (-0.1e1 / 0.2e1))

        if Bindx == 312:
            t12099 = np.cos(phi)
            t12098 = t12099 ** 2
            t12105 = t12098 ** 2
            t12109 = t12105 ** 2
            t12117 = t12109 ** 2
            t12083 = t12099 * t12117
            t12104 = t12099 * t12098
            t12107 = t12104 ** 2
            t12108 = t12099 * t12107
            t12115 = t12108 ** 2
            t12085 = t12099 * t12115
            t12113 = t12107 ** 2
            t12087 = t12099 * t12113
            t12106 = t12099 * t12105
            t12111 = t12106 ** 2
            t12089 = t12099 * t12111
            t12091 = t12099 * t12109
            t12126 = -34782 * t12083 - 990512 * t12085 - 5880 * t12087 + 4022928 * t12089 - 3875300 * t12091 + 14226 * t12099 - 233680 * t12104 + 744744 * t12106 + 350064 * t12108
            t12125 = 192324 * t12098 + 353276 * t12105 - 2110108 * t12107 - 195052 * t12109 + 3315884 * t12111 - 620620 * t12113 - 874324 * t12115 - 65472 * t12117 + 4092
            t12124 = 36702 * t12098 + 206850 * t12105 - 1779778 * t12107 + 3170310 * t12109 - 225654 * t12111 - 3146234 * t12113 + 1455450 * t12115 + 294624 * t12117 - 4078
            t12123 = -5797 * t12083 - 321904 * t12085 - 1308076 * t12087 + 1489488 * t12089 + 2633202 * t12091 + 43307 * t12099 + 431024 * t12104 - 620620 * t12106 - 2340624 * t12108
            t12122 = -73892 * t12098 - 5451420 * t12105 + 50245052 * t12107 - 156839540 * t12109 + 208063284 * t12111 - 94215316 * t12113 - 26412620 * t12115 + 24682944 * t12117 + 1508
            t12121 = -486910 * t12098 + 12759710 * t12105 - 120120030 * t12107 + 471562330 * t12109 - 923574890 * t12111 + 961193690 * t12113 - 510515130 * t12115 + 109174560 * t12117 + 6670
            t12120 = -4370938 * t12083 - 40016288 * t12085 + 144903720 * t12087 - 144200992 * t12089 + 15841540 * t12091 - 377754 * t12099 + 6092320 * t12104 - 30820504 * t12106 + 52948896 * t12108
            t12119 = -38665990 * t12083 + 94287120 * t12085 + 79266280 * t12087 - 503985200 * t12089 + 691719020 * t12091 + 873770 * t12099 - 20863760 * t12104 + 144472200 * t12106 - 447103440 * t12108
            t12103 = 2 * phi1
            t12102 = 4 * phi1
            t12101 = -3 * phi2
            t12100 = 3 * phi2
            tfunc[..., c] = -(0.35e2 / 0.1048576e7) * np.sqrt(0.3e1) * ((t12119 + t12121) * np.exp((-4*1j) * (phi1 + t12101)) + (t12120 + t12122) * np.exp((-4*1j) * (t12103 + t12101)) + (-t12123 + t12125) * np.exp((-4*1j) * (t12102 + t12101)) + (-t12119 + t12121) * np.exp((4*1j) * (phi1 + t12100)) + (-t12120 + t12122) * np.exp((4*1j) * (t12103 + t12100)) + (t12123 + t12125) * np.exp((4*1j) * (t12102 + t12100)) + (t12124 + t12126) * np.exp((-12*1j) * (phi1 - phi2)) + (t12124 - t12126) * np.exp((12*1j) * (phi1 + phi2)))

        if Bindx == 313:
            t12152 = np.cos(phi)
            t12151 = t12152 ** 2
            t12160 = t12151 ** 2
            t12164 = t12160 ** 2
            t12172 = t12164 ** 2
            t12136 = t12152 * t12172
            t12159 = t12152 * t12151
            t12162 = t12159 ** 2
            t12163 = t12152 * t12162
            t12170 = t12163 ** 2
            t12138 = t12152 * t12170
            t12168 = t12162 ** 2
            t12140 = t12152 * t12168
            t12161 = t12152 * t12160
            t12166 = t12161 ** 2
            t12142 = t12152 * t12166
            t12165 = t12152 * t12164
            t12182 = 70928 * t12136 + 1170312 * t12138 + 1737736 * t12140 - 4929496 * t12142 - 51832 * t12152 - 712008 * t12159 + 19096 * t12161 + 4645784 * t12163 - 1950520 * t12165
            t12181 = -319176 * t12136 - 2016612 * t12138 + 4061148 * t12140 + 2013804 * t12142 + 39036 * t12152 - 321948 * t12159 - 17388 * t12161 + 3776916 * t12163 - 7215780 * t12165
            t12135 = t12165 ** 2
            t12180 = -34782 * t12135 + 20826 * t12151 - 820560 * t12160 + 2738736 * t12162 - 983268 * t12164 - 5983692 * t12166 + 6761664 * t12168 - 522720 * t12170 - 1183146 * t12172 + 6942
            t12179 = -5797 * t12135 + 261547 * t12151 + 975260 * t12160 - 2606604 * t12162 - 3023306 * t12164 + 5754034 * t12166 + 1117116 * t12168 - 2093740 * t12170 - 382943 * t12172 + 4433
            t12178 = -26739856 * t12136 + 25524408 * t12138 + 157890616 * t12140 - 373613032 * t12142 - 630344 * t12152 + 5238792 * t12159 + 2258984 * t12161 - 105930968 * t12163 + 316001400 * t12165
            t12177 = -118272440 * t12136 + 628994340 * t12138 - 1366029340 * t12140 + 1534246740 * t12142 + 520260 * t12152 - 7457060 * t12159 - 8150740 * t12161 + 252672940 * t12163 - 916524700 * t12165
            t12176 = -4370938 * t12135 - 2706106 * t12151 + 28576600 * t12160 - 111371832 * t12162 + 169479596 * t12164 - 25163996 * t12166 - 197164968 * t12168 + 191289800 * t12170 - 48641294 * t12172 + 73138
            t12175 = -38665990 * t12135 + 10985490 * t12151 - 117125200 * t12160 + 519779760 * t12162 - 1175240660 * t12164 + 1432595940 * t12166 - 874250240 * t12168 + 141404000 * t12170 + 100696990 * t12172 - 180090
            t12158 = 4 * phi1
            t12157 = 8 * phi1
            t12156 = 12 * phi1
            t12155 = 16 * phi1
            t12154 = -13 * phi2
            t12153 = 13 * phi2
            tfunc[..., c] = (0.35e2 / 0.2097152e7*1j) * np.sqrt(0.2e1) * ((-t12175 + t12177) * np.exp((-1*1j) * (t12158 + t12154)) + (-t12176 + t12178) * np.exp((-1*1j) * (t12157 + t12154)) + (t12175 + t12177) * np.exp((1j) * (t12158 + t12153)) + (t12176 + t12178) * np.exp((1j) * (t12157 + t12153)) + (-t12180 + t12181) * np.exp((-1*1j) * (t12156 + t12154)) + (t12179 + t12182) * np.exp((-1*1j) * (t12155 + t12154)) + (t12180 + t12181) * np.exp((1j) * (t12156 + t12153)) + (-t12179 + t12182) * np.exp((1j) * (t12155 + t12153))) * ((1 + t12152) ** (-0.1e1 / 0.2e1)) * ((1 - t12152) ** (-0.1e1 / 0.2e1))

        if Bindx == 314:
            t12207 = np.cos(phi)
            t12206 = t12207 ** 2
            t12215 = t12206 ** 2
            t12214 = t12207 * t12206
            t12217 = t12214 ** 2
            t12219 = t12215 ** 2
            t12216 = t12207 * t12215
            t12221 = t12216 ** 2
            t12223 = t12217 ** 2
            t12218 = t12207 * t12217
            t12225 = t12218 ** 2
            t12227 = t12219 ** 2
            t12236 = -11242 * t12206 - 74690 * t12215 - 2002 * t12217 + 267410 * t12219 + 40898 * t12221 - 166166 * t12223 - 51590 * t12225 - 2464 * t12227 - 154
            t12235 = 6069 * t12206 - 44079 * t12215 + 9009 * t12217 + 224367 * t12219 - 242385 * t12221 - 62517 * t12223 + 98091 * t12225 + 11088 * t12227 + 357
            t12191 = t12207 * t12227
            t12193 = t12207 * t12225
            t12195 = t12207 * t12223
            t12197 = t12207 * t12221
            t12199 = t12207 * t12219
            t12234 = 1122 * t12191 + 46044 * t12193 + 88536 * t12195 - 254436 * t12197 + 12012 * t12199 + 2658 * t12207 - 4044 * t12214 - 72072 * t12216 + 180180 * t12218
            t12233 = -187 * t12191 - 14674 * t12193 - 116270 * t12195 - 122122 * t12197 + 220220 * t12199 - 1969 * t12207 - 37070 * t12214 - 82082 * t12216 + 154154 * t12218
            t12232 = -225446 * t12206 + 1062386 * t12215 - 306878 * t12217 - 6328322 * t12219 + 12449294 * t12221 - 7785050 * t12223 + 195286 * t12225 + 928928 * t12227 + 9802
            t12231 = 470235 * t12206 - 2317825 * t12215 + 777055 * t12217 + 15124225 * t12219 - 37808895 * t12221 + 40083365 * t12223 - 20426875 * t12225 + 4108720 * t12227 - 10005
            t12230 = 140998 * t12191 + 2016196 * t12193 - 5906836 * t12195 + 2323828 * t12197 + 6535672 * t12199 - 5278 * t12207 - 327236 * t12214 + 2902900 * t12216 - 7680244 * t12218
            t12229 = -1247290 * t12191 + 2174420 * t12193 + 9471400 * t12195 - 36458220 * t12197 + 51425700 * t12199 + 140070 * t12207 - 2334500 * t12214 + 13633480 * t12216 - 36805060 * t12218
            t12213 = 2 * phi1
            t12212 = 4 * phi1
            t12211 = 6 * phi1
            t12210 = 8 * phi1
            t12209 = -7 * phi2
            t12208 = 7 * phi2
            tfunc[..., c] = -(0.35e2 / 0.1048576e7) * np.sqrt(0.2e1) * np.sqrt(0.31e2) * ((t12229 + t12231) * np.exp((-2*1j) * (t12213 + t12209)) + (-t12230 + t12232) * np.exp((-2*1j) * (t12212 + t12209)) + (-t12234 + t12235) * np.exp((-2*1j) * (t12211 + t12209)) + (-t12233 + t12236) * np.exp((-2*1j) * (t12210 + t12209)) + (-t12229 + t12231) * np.exp((2*1j) * (t12213 + t12208)) + (t12230 + t12232) * np.exp((2*1j) * (t12212 + t12208)) + (t12234 + t12235) * np.exp((2*1j) * (t12211 + t12208)) + (t12233 + t12236) * np.exp((2*1j) * (t12210 + t12208)))

        if Bindx == 315:
            t12262 = np.cos(phi)
            t12261 = t12262 ** 2
            t12269 = t12261 ** 2
            t12273 = t12269 ** 2
            t12281 = t12273 ** 2
            t12246 = t12262 * t12281
            t12268 = t12262 * t12261
            t12271 = t12268 ** 2
            t12272 = t12262 * t12271
            t12279 = t12272 ** 2
            t12248 = t12262 * t12279
            t12277 = t12271 ** 2
            t12250 = t12262 * t12277
            t12270 = t12262 * t12269
            t12275 = t12270 ** 2
            t12252 = t12262 * t12275
            t12274 = t12262 * t12273
            t12291 = 2640 * t12246 + 65120 * t12248 + 268576 * t12250 + 41184 * t12252 + 2288 * t12262 + 53152 * t12268 + 184800 * t12270 - 114400 * t12272 - 503360 * t12274
            t12290 = -11880 * t12246 - 125040 * t12248 + 61936 * t12250 + 444496 * t12252 - 4920 * t12262 - 18320 * t12268 + 159376 * t12270 - 98384 * t12272 - 407264 * t12274
            t12245 = t12274 ** 2
            t12289 = 1122 * t12245 + 16802 * t12261 - 41368 * t12269 - 168168 * t12271 + 441012 * t12273 - 56628 * t12275 - 379288 * t12277 + 132632 * t12279 + 53342 * t12281 + 542
            t12288 = -187 * t12245 - 14355 * t12261 - 125620 * t12269 - 124124 * t12271 + 405834 * t12273 + 298870 * t12275 - 260260 * t12277 - 163020 * t12279 - 16973 * t12281 - 165
            t12287 = -995280 * t12246 - 422240 * t12248 + 11472864 * t12250 - 20738016 * t12252 - 90480 * t12262 + 1387360 * t12268 - 4813536 * t12270 + 2786784 * t12272 + 11412544 * t12274
            t12286 = -4402200 * t12246 + 24812400 * t12248 - 55974640 * t12250 + 61310640 * t12252 + 453560 * t12262 - 4322160 * t12268 + 12006000 * t12270 - 6670000 * t12272 - 27213600 * t12274
            t12285 = -140998 * t12245 + 251082 * t12261 + 805272 * t12269 - 8393528 * t12271 + 18561972 * t12273 - 13784628 * t12275 - 2512328 * t12277 + 7591272 * t12279 - 2350218 * t12281 - 27898
            t12284 = -1247290 * t12245 + 1100550 * t12261 - 11072200 * t12269 + 43941960 * t12271 - 88564260 * t12273 + 98382500 * t12275 - 58029000 * t12277 + 13206600 * t12279 + 2314490 * t12281 - 33350
            t12267 = 4 * phi1
            t12266 = 8 * phi1
            t12265 = 16 * phi1
            t12264 = -15 * phi2
            t12263 = 15 * phi2
            tfunc[..., c] = (0.35e2 / 0.4194304e7*1j) * np.sqrt(0.3e1) * np.sqrt(0.31e2) * ((t12289 + t12290) * np.exp((-3*1j) * (t12267 - 5 * phi2)) + (-t12289 + t12290) * np.exp((3*1j) * (t12267 + 5 * phi2)) + (-t12284 + t12286) * np.exp((-1*1j) * (t12267 + t12264)) + (-t12285 + t12287) * np.exp((-1*1j) * (t12266 + t12264)) + (t12284 + t12286) * np.exp((1j) * (t12267 + t12263)) + (t12285 + t12287) * np.exp((1j) * (t12266 + t12263)) + (t12288 + t12291) * np.exp((-1*1j) * (t12265 + t12264)) + (-t12288 + t12291) * np.exp((1j) * (t12265 + t12263))) * ((1 + t12262) ** (-0.1e1 / 0.2e1)) * ((1 - t12262) ** (-0.1e1 / 0.2e1))

        if Bindx == 316:
            t12316 = np.cos(phi)
            t12315 = t12316 ** 2
            t12321 = t12315 ** 2
            t12320 = t12316 * t12315
            t12323 = t12320 ** 2
            t12325 = t12321 ** 2
            t12322 = t12316 * t12321
            t12327 = t12322 ** 2
            t12329 = t12323 ** 2
            t12324 = t12316 * t12323
            t12331 = t12324 ** 2
            t12333 = t12325 ** 2
            t12342 = -16 - 1648 * t12315 - 19600 * t12321 - 53872 * t12323 - 11440 * t12325 + 66352 * t12327 + 45136 * t12329 + 7600 * t12331 + 256 * t12333
            t12341 = 72 + 3384 * t12315 + 6216 * t12321 - 37128 * t12323 - 3432 * t12325 + 58344 * t12327 - 10920 * t12329 - 15384 * t12331 - 1152 * t12333
            t12300 = t12316 * t12333
            t12302 = t12316 * t12331
            t12304 = t12316 * t12329
            t12306 = t12316 * t12327
            t12308 = t12316 * t12325
            t12340 = -17 * t12300 - 1784 * t12302 - 21980 * t12304 - 66248 * t12306 - 35750 * t12308 + 239 * t12316 + 6920 * t12320 + 38948 * t12322 + 46904 * t12324
            t12339 = -102 * t12300 - 5664 * t12302 - 23016 * t12304 + 26208 * t12306 + 46332 * t12308 + 762 * t12316 + 7584 * t12320 - 10920 * t12322 - 41184 * t12324
            t12338 = 42224 * t12315 - 524784 * t12321 + 1007344 * t12323 + 66352 * t12325 - 1658800 * t12327 + 1321008 * t12329 - 162864 * t12331 - 96512 * t12333 + 6032
            t12337 = -12818 * t12300 - 259376 * t12302 + 606216 * t12304 + 404144 * t12306 - 2007148 * t12308 + 35438 * t12316 - 162864 * t12320 - 262392 * t12322 + 1658800 * t12324
            t12336 = -453560 * t12315 + 1734200 * t12321 - 2374520 * t12323 - 133400 * t12325 + 3975320 * t12327 - 4615640 * t12329 + 2267800 * t12331 - 426880 * t12333 + 26680
            t12335 = -113390 * t12300 + 106720 * t12302 + 1734200 * t12304 - 6296480 * t12306 + 9671500 * t12308 - 6670 * t12316 - 533600 * t12320 + 3228280 * t12322 - 7790560 * t12324
            t12319 = 3 * phi1
            t12318 = -4 * phi2
            t12317 = 4 * phi2
            tfunc[..., c] = (0.35e2 / 0.4194304e7) * np.sqrt(0.2e1) * np.sqrt(0.11e2) * np.sqrt(0.31e2) * ((-t12337 + t12338) * np.exp((-8*1j) * (phi1 - 2 * phi2)) + (-t12335 + t12336) * np.exp((-4*1j) * (phi1 + t12318)) + (-t12339 + t12341) * np.exp((-4*1j) * (t12319 + t12318)) + (t12335 + t12336) * np.exp((4*1j) * (phi1 + t12317)) + (t12339 + t12341) * np.exp((4*1j) * (t12319 + t12317)) + (t12337 + t12338) * np.exp((8*1j) * (phi1 + 2 * phi2)) + (t12340 + t12342) * np.exp((-16*1j) * (phi1 - phi2)) + (-t12340 + t12342) * np.exp((16*1j) * (phi1 + phi2)))

        if Bindx == 317:
            t12367 = np.cos(phi)
            t12366 = t12367 ** 2
            t12375 = t12366 ** 2
            t12379 = t12375 ** 2
            t12387 = t12379 ** 2
            t12351 = t12367 * t12387
            t12395 = -1 - t12351
            t12394 = 6 + 6 * t12351
            t12393 = -754 - 754 * t12351
            t12392 = 6670 + 6670 * t12351
            t12374 = t12367 * t12366
            t12377 = t12374 ** 2
            t12378 = t12367 * t12377
            t12376 = t12367 * t12375
            t12381 = t12376 ** 2
            t12391 = 3432 * t12378 + 3432 * t12381
            t12357 = t12367 * t12381
            t12390 = -2184 * t12357 - 2184 * t12377 + t12391
            t12385 = t12378 ** 2
            t12353 = t12367 * t12385
            t12389 = -26680 * t12353 - 26680 * t12366 + 133400 * t12385 + 133400 * t12374
            t12383 = t12377 ** 2
            t12373 = 4 * phi1
            t12372 = 8 * phi1
            t12371 = 12 * phi1
            t12370 = 16 * phi1
            t12369 = -17 * phi2
            t12368 = 17 * phi2
            t12359 = t12367 * t12379
            t12355 = t12367 * t12383
            tfunc[..., c] = (-0.35e2 / 0.4194304e7*1j) * np.sqrt((1 - t12367)) * np.sqrt(0.11e2) * np.sqrt(0.31e2) * np.sqrt(0.17e2) * ((186760 * t12357 - 466900 * t12359 - 20010 * t12367 - 373520 * t12376 + 186760 * t12377 + 560280 * t12378 - 466900 * t12379 + 560280 * t12381 - 373520 * t12383 - 20010 * t12387 + t12389 + t12392) * np.exp((-1*1j) * (t12373 + t12369)) + (-5278 * t12387 + 12064 * t12353 - 45240 * t12355 + 63336 * t12383 + 24128 * t12357 + 82940 * t12359 + 82940 * t12379 + 24128 * t12377 + 63336 * t12376 - 45240 * t12375 + 12064 * t12366 - 5278 * t12367 - 132704 * t12381 - 132704 * t12378 - t12393) * np.exp((-1*1j) * (t12372 + t12369)) + (-6786 * t12387 - 24128 * t12353 - 36192 * t12385 + 9048 * t12355 + 9048 * t12375 - 36192 * t12374 - 24128 * t12366 - 6786 * t12367 - 215644 * t12359 - 215644 * t12379 + 156832 * t12357 + 156832 * t12377 + 117624 * t12383 + 117624 * t12376 + t12393) * np.exp((1j) * (t12372 + t12368)) + (1008 * t12375 - 792 * t12374 + 312 * t12366 - 66 * t12367 - 66 * t12387 + 312 * t12353 - 792 * t12385 + 1008 * t12355 - 1716 * t12359 - 1716 * t12379 + t12390 + t12394) * np.exp((-1*1j) * (t12371 + t12369)) + (-3640 * t12377 + 2548 * t12376 - 1260 * t12375 + 440 * t12374 - 104 * t12366 + 15 * t12367 + 15 * t12387 - 104 * t12353 + 440 * t12385 - 1260 * t12355 + 2548 * t12383 - 3640 * t12357 - 1430 * t12359 - 1430 * t12379 + t12391 + t12395) * np.exp((-1*1j) * (t12370 + t12369)) + (12376 * t12377 + 6188 * t12376 + 2380 * t12375 + 680 * t12374 + 136 * t12366 + 17 * t12367 + 17 * t12387 + 136 * t12353 + 680 * t12385 + 2380 * t12355 + 6188 * t12383 + 12376 * t12357 + 19448 * t12381 + 24310 * t12359 + 24310 * t12379 + 19448 * t12378 - t12395) * np.exp((1j) * (t12370 + t12368)) + (266800 * t12355 - 667000 * t12357 + 733700 * t12359 - 33350 * t12367 + 266800 * t12375 - 106720 * t12376 - 667000 * t12377 - 293480 * t12378 + 733700 * t12379 - 293480 * t12381 - 106720 * t12383 - 33350 * t12387 + t12389 - t12392) * np.exp((1j) * (t12373 + t12368)) + (-4368 * t12376 - 3360 * t12375 - 1560 * t12374 - 456 * t12366 - 78 * t12367 - 78 * t12387 - 456 * t12353 - 1560 * t12385 - 3360 * t12355 - 4368 * t12383 + 8580 * t12359 + 8580 * t12379 + t12390 - t12394) * np.exp((1j) * (t12371 + t12368))) * ((1 + t12367) ** (-0.1e1 / 0.2e1))

        if Bindx == 318:
            t12419 = np.cos(phi)
            t12418 = t12419 ** 2
            t12425 = t12418 ** 2
            t12429 = t12425 ** 2
            t12436 = t12429 ** 2
            t12437 = t12419 * t12436
            t12446 = t12419 - t12437
            t12403 = t12419 * t12437
            t12445 = -1 + t12403
            t12424 = t12419 * t12418
            t12427 = t12424 ** 2
            t12428 = t12419 * t12427
            t12434 = t12428 ** 2
            t12406 = t12419 * t12434
            t12432 = t12427 ** 2
            t12408 = t12419 * t12432
            t12426 = t12419 * t12425
            t12430 = t12426 ** 2
            t12410 = t12419 * t12430
            t12444 = 24 * t12406 - 56 * t12408 + 56 * t12410 - 24 * t12424 + 56 * t12426 - 56 * t12428 + 4 * t12446
            t12443 = -184 * t12406 - 168 * t12408 + 936 * t12410 + 12 * t12419 + 184 * t12424 + 168 * t12426 - 936 * t12428 - 12 * t12437
            t12442 = -96 * t12406 + 864 * t12408 - 1248 * t12410 + 96 * t12424 - 864 * t12426 + 1248 * t12428 + 48 * t12446
            t12441 = t12418 + 20 * t12425 - 84 * t12427 + 154 * t12429 - 154 * t12430 + 84 * t12432 - 20 * t12434 - t12436 + t12445
            t12440 = -63 * t12418 - 300 * t12425 + 364 * t12427 + 858 * t12429 - 858 * t12430 - 364 * t12432 + 300 * t12434 + 63 * t12436 + t12445
            t12439 = 6 - 6 * t12403 + 138 * t12418 - 360 * t12425 - 312 * t12427 + 1716 * t12429 - 1716 * t12430 + 312 * t12432 + 360 * t12434 - 138 * t12436
            t12423 = 2 * phi1
            t12422 = 4 * phi1
            t12421 = -9 * phi2
            t12420 = 9 * phi2
            tfunc[..., c] = -(0.37e2 / 0.148897792e9) * np.sqrt(0.2e1) * np.sqrt(0.17e2) * np.sqrt(0.71e2) * np.sqrt(0.23e2) * np.sqrt(0.19e2) * np.sqrt(0.7e1) * np.sqrt(0.11e2) * np.sqrt(0.29e2) * np.sqrt(0.93e2) * ((-20 * t12403 + 180 * t12436 - 720 * t12434 + 1680 * t12432 - 2520 * t12430 + 2520 * t12429 - 1680 * t12427 + 720 * t12425 - 180 * t12418 + 20) * np.exp((-18*1j) * phi2) + (t12440 - t12443) * np.exp((-6*1j) * (t12423 + 3 * phi2)) + (t12440 + t12443) * np.exp((6*1j) * (t12423 - 3 * phi2)) + (t12439 + t12442) * np.exp((-2*1j) * (t12422 + t12420)) + (t12439 - t12442) * np.exp((2*1j) * (t12422 + t12421)) + 15 * (t12441 - t12444) * np.exp((-2*1j) * (t12423 + t12420)) + 15 * (t12441 + t12444) * np.exp((2*1j) * (t12423 + t12421)))

        if Bindx == 319:
            t12472 = np.cos(phi)
            t12471 = t12472 ** 2
            t12479 = t12471 ** 2
            t12483 = t12479 ** 2
            t12490 = t12483 ** 2
            t12491 = t12472 * t12490
            t12456 = t12472 * t12491
            t12506 = t12456 - 1
            t12480 = t12472 * t12479
            t12484 = t12480 ** 2
            t12505 = t12484 - t12483
            t12478 = t12472 * t12471
            t12481 = t12478 ** 2
            t12486 = t12481 ** 2
            t12504 = t12486 - t12481
            t12482 = t12472 * t12481
            t12488 = t12482 ** 2
            t12503 = t12488 - t12479
            t12502 = t12490 - t12471
            t12501 = t12491 - t12472
            t12459 = t12472 * t12488
            t12461 = t12472 * t12486
            t12463 = t12472 * t12484
            t12500 = -2510560 * t12463 + 2510560 * t12482 - 1351840 * t12461 + 1351840 * t12480 - 193120 * t12459 + 193120 * t12478 - 5680 * t12501
            t12499 = 53856 * t12472 - 53856 * t12491 + 4200768 * t12463 - 4200768 * t12482 - 825792 * t12459 + 825792 * t12478 - 753984 * t12461 + 753984 * t12480
            t12498 = 355 * t12456 - 42245 * t12471 + 42245 * t12490 + 603500 * t12503 + 2196740 * t12504 + 1726010 * t12505 - 355
            t12497 = -49631296 * t12463 + 49631296 * t12482 + 34360128 * t12461 - 34360128 * t12480 - 3817792 * t12459 + 3817792 * t12478 - 1908896 * t12501
            t12496 = -10885440 * t12459 + 10885440 * t12478 + 25399360 * t12461 - 25399360 * t12463 + 25399360 * t12482 - 25399360 * t12480 + 1814240 * t12501
            t12495 = 4488 * t12456 + 282744 * t12502 + 1346400 * t12503 - 1633632 * t12504 - 3850704 * t12505 - 4488
            t12494 = -69848240 * t12484 + 69848240 * t12483 + 38099040 * t12486 - 38099040 * t12481 - 9071200 * t12488 + 9071200 * t12479 - 453560 * t12502 + 453560 * t12506
            t12493 = 5488076 * t12502 - 14316720 * t12503 - 12407824 * t12504 + 68243032 * t12505 + 238612 * t12506
            t12477 = 2 * phi1
            t12476 = 4 * phi1
            t12475 = 8 * phi1
            t12474 = -9 * phi2
            t12473 = 9 * phi2
            tfunc[..., c] = (0.111e3 / 0.4764729344e10) * np.sqrt(0.31e2) * np.sqrt(0.71e2) * np.sqrt(0.7e1) * np.sqrt(0.2e1) * ((-1394030 * t12456 + 1394030 - 175647780 * t12484 + 175647780 * t12483 + 117098520 * t12486 - 117098520 * t12481 - 50185080 * t12488 + 50185080 * t12479 + 12546270 * t12490 - 12546270 * t12471) * np.exp((-18*1j) * phi2) + (t12495 - t12499) * np.exp((-6*1j) * (t12477 + 3 * phi2)) + (t12494 + t12496) * np.exp((-2*1j) * (t12477 + t12473)) + (t12493 - t12497) * np.exp((-2*1j) * (t12476 + t12473)) + (t12498 - t12500) * np.exp((-2*1j) * (t12475 + t12473)) + (t12494 - t12496) * np.exp((2*1j) * (t12477 + t12474)) + (t12493 + t12497) * np.exp((2*1j) * (t12476 + t12474)) + (t12498 + t12500) * np.exp((2*1j) * (t12475 + t12474)) + (t12495 + t12499) * np.exp((6*1j) * (t12477 - 3 * phi2)))

        if Bindx == 320:
            t12529 = np.cos(phi)
            t12528 = t12529 ** 2
            t12536 = t12528 ** 2
            t12540 = t12536 ** 2
            t12514 = t12540 ** 2
            t12551 = 3 * t12514
            t12550 = -18 * t12514
            t12549 = 45 * t12514
            t12535 = t12529 * t12528
            t12538 = t12535 ** 2
            t12539 = t12529 * t12538
            t12546 = t12539 ** 2
            t12544 = t12538 ** 2
            t12537 = t12529 * t12536
            t12542 = t12537 ** 2
            t12534 = 4 * phi1
            t12533 = 8 * phi1
            t12532 = 12 * phi1
            t12531 = -17 * phi2
            t12530 = 17 * phi2
            t12521 = t12529 * t12540
            t12519 = t12529 * t12542
            t12517 = t12529 * t12544
            t12515 = t12529 * t12546
            tfunc[..., c] = (-0.37e2 / 0.74448896e8*1j) * np.sqrt(0.7e1) * np.sqrt(0.11e2) * np.sqrt(0.19e2) * np.sqrt(0.93e2) * np.sqrt(0.29e2) * np.sqrt(0.23e2) * np.sqrt(0.71e2) * np.sqrt(0.2e1) * np.sqrt(0.17e2) * ((1 + t12529) ** (0.5e1 / 0.2e1)) * ((1 - t12529) ** (-0.1e1 / 0.2e1)) * (60 * (-t12514 + 3 * t12515 + 3 * t12546 - 17 * t12517 + 3 * t12544 + 39 * t12519 - 25 * t12542 - 45 * t12521 + 45 * t12540 + 25 * t12539 - 39 * t12538 - 3 * t12537 + 17 * t12536 - 3 * t12535 - 3 * t12528 + t12529) * np.exp((-17*1j) * phi2) + (t12549 + 35 * t12515 - 325 * t12546 - 245 * t12517 + 1015 * t12544 + 735 * t12519 - 1785 * t12542 - 1225 * t12521 + 1925 * t12540 + 1225 * t12539 - 1295 * t12538 - 735 * t12537 + 525 * t12536 + 245 * t12535 - 115 * t12528 - 35 * t12529 + 10) * np.exp((-1*1j) * (t12534 + t12530)) + (t12550 - 82 * t12515 - 50 * t12546 + 310 * t12517 + 510 * t12544 - 298 * t12519 - 1162 * t12542 - 290 * t12521 + 1170 * t12540 + 810 * t12539 - 502 * t12538 - 638 * t12537 + 10 * t12536 + 210 * t12535 + 50 * t12528 - 22 * t12529 - 8) * np.exp((-1*1j) * (t12533 + t12530)) + (t12549 - 305 * t12515 + 695 * t12546 - 145 * t12517 - 2005 * t12544 + 3035 * t12519 + 275 * t12542 - 4565 * t12521 + 3465 * t12540 + 1485 * t12539 - 3355 * t12538 + 1165 * t12537 + 745 * t12536 - 695 * t12535 + 145 * t12528 + 25 * t12529 - 10) * np.exp((1j) * (t12534 + t12531)) + (t12550 + 190 * t12515 - 866 * t12546 + 2150 * t12517 - 2834 * t12544 + 806 * t12519 + 3718 * t12542 - 6578 * t12521 + 4290 * t12540 + 858 * t12539 - 3718 * t12538 + 2834 * t12537 - 806 * t12536 - 190 * t12535 + 226 * t12528 - 70 * t12529 + 8) * np.exp((1j) * (t12533 + t12531)) + (t12551 + 25 * t12515 + 81 * t12546 + 105 * t12517 - 51 * t12544 - 339 * t12519 - 363 * t12542 + 77 * t12521 + 495 * t12540 + 363 * t12539 - 77 * t12538 - 261 * t12537 - 129 * t12536 + 15 * t12535 + 39 * t12528 + 15 * t12529 + 2) * np.exp((-1*1j) * (t12532 + t12530)) + (t12551 - 43 * t12515 + 285 * t12546 - 1155 * t12517 + 3185 * t12544 - 6279 * t12519 + 9009 * t12542 - 9295 * t12521 + 6435 * t12540 - 2145 * t12539 - 1001 * t12538 + 1911 * t12537 - 1365 * t12536 + 595 * t12535 - 165 * t12528 + 27 * t12529 - 2) * np.exp((1j) * (t12532 + t12531)))

        if Bindx == 321:
            t12578 = np.cos(phi)
            t12577 = t12578 ** 2
            t12586 = t12577 ** 2
            t12590 = t12586 ** 2
            t12591 = t12578 * t12590
            t12561 = t12591 ** 2
            t12604 = 3195 * t12561 - 6904040 * t12590 - 8630050 * t12591
            t12603 = 40392 * t12561 + 15402816 * t12590 + 19253520 * t12591
            t12602 = 2147508 * t12561 - 272972128 * t12590 - 341215160 * t12591
            t12601 = 4082040 * t12561 + 279392960 * t12590 + 349241200 * t12591
            t12598 = t12590 ** 2
            t12585 = t12578 * t12577
            t12588 = t12585 ** 2
            t12589 = t12578 * t12588
            t12596 = t12589 ** 2
            t12594 = t12588 ** 2
            t12587 = t12578 * t12586
            t12592 = t12587 ** 2
            t12584 = 4 * phi1
            t12583 = 8 * phi1
            t12582 = 12 * phi1
            t12581 = 16 * phi1
            t12580 = -17 * phi2
            t12579 = 17 * phi2
            t12568 = t12578 * t12592
            t12566 = t12578 * t12594
            t12564 = t12578 * t12596
            t12562 = t12578 * t12598
            tfunc[..., c] = (0.37e2 / 0.2382364672e10*1j) * np.sqrt(0.2e1) * np.sqrt(0.7e1) * np.sqrt(0.71e2) * np.sqrt(0.31e2) * np.sqrt((1 + t12578)) * ((1 - t12578) ** (-0.1e1 / 0.2e1)) * (12546270 * (-70 * t12592 + 70 * t12591 + 56 * t12594 - 56 * t12568 + 56 * t12590 - 56 * t12589 - 28 * t12596 + 28 * t12566 - 28 * t12588 + 28 * t12587 + 8 * t12598 - 8 * t12564 + 8 * t12586 - 8 * t12585 - t12561 + t12562 - t12577 + t12578) * np.exp((-17*1j) * phi2) + (11339000 * t12562 - 78012320 * t12564 + 228594240 * t12566 - 368290720 * t12568 - 15874600 * t12577 - 1360680 * t12578 - 1814240 * t12585 + 81640800 * t12586 + 50798720 * t12587 - 203194880 * t12588 - 190495200 * t12589 - 209544720 * t12592 + 63498400 * t12594 + 18142400 * t12596 - 19049520 * t12598 + t12601 + 907120) * np.exp((-1*1j) * (t12584 + t12579)) + (14078108 * t12562 - 15271168 * t12564 - 123123792 * t12566 + 347419072 * t12568 + 238612 * t12577 + 4533628 * t12578 - 34360128 * t12585 - 57266880 * t12586 + 48676848 * t12587 + 210933008 * t12588 + 99262592 * t12589 + 68243032 * t12592 + 148893888 * t12594 - 128850480 * t12596 + 27678992 * t12598 + t12602 + 954448) * np.exp((-1*1j) * (t12583 + t12579)) + (-19503080 * t12562 + 85269280 * t12564 - 101597440 * t12566 - 88897760 * t12568 + 16781720 * t12577 + 453560 * t12578 - 34470560 * t12585 - 45356000 * t12586 + 177795520 * t12587 - 25399360 * t12588 - 368290720 * t12589 - 488937680 * t12592 + 393690080 * t12594 - 145139200 * t12596 + 11792560 * t12598 + t12601 - 907120) * np.exp((1j) * (t12584 + t12580)) + (-18373124 * t12562 - 72538048 * t12564 + 323557872 * t12566 - 198525184 * t12568 - 11214764 * t12577 + 6442524 * t12578 - 22906752 * t12585 + 114533760 * t12586 - 123123792 * t12587 - 136486064 * t12588 + 446681664 * t12589 + 614187288 * t12592 - 297787776 * t12594 - 71583600 * t12596 + 60130224 * t12598 + t12602 - 954448) * np.exp((1j) * (t12583 + t12580)) + (417384 * t12562 + 3931488 * t12564 - 4523904 * t12566 - 13302432 * t12568 + 955944 * t12577 + 255816 * t12578 + 1454112 * t12585 - 807840 * t12586 - 6785856 * t12587 - 9801792 * t12588 - 700128 * t12589 + 3850704 * t12592 - 14702688 * t12594 + 3231360 * t12596 + 1804176 * t12598 + t12603 + 26928) * np.exp((-1*1j) * (t12582 + t12579)) + (45085 * t12562 + 1110440 * t12564 + 4562460 * t12566 + 627640 * t12568 + 247435 * t12577 + 39405 * t12578 + 917320 * t12585 + 2172600 * t12586 + 3210620 * t12587 + 2196740 * t12588 - 1882920 * t12589 - 5178030 * t12592 + 4393480 * t12594 + 2776100 * t12596 + 289680 * t12598 + t12604 + 2840) * np.exp((-1*1j) * (t12581 + t12579)) + (-498168 * t12562 - 8455392 * t12564 - 14325696 * t12566 + 32906016 * t12568 - 1521432 * t12577 + 309672 * t12578 + 3931488 * t12585 - 4577760 * t12586 - 3015936 * t12587 + 19603584 * t12588 - 30105504 * t12589 - 42357744 * t12592 - 4900896 * t12594 + 15618240 * t12596 + 2719728 * t12598 + t12603 - 26928) * np.exp((1j) * (t12582 + t12580)) + (-51475 * t12562 - 1786360 * t12564 - 13011460 * t12566 - 26988520 * t12568 - 331925 * t12577 + 45085 * t12578 + 1496680 * t12585 - 4586600 * t12586 + 9969820 * t12587 - 15377180 * t12588 + 15691000 * t12589 + 22438130 * t12592 + 21967400 * t12594 + 5672900 * t12596 + 386240 * t12598 + t12604 - 2840) * np.exp((1j) * (t12581 + t12580)))

        if Bindx == 322:
            t12629 = np.cos(phi)
            t12628 = t12629 ** 2
            t12634 = t12628 ** 2
            t12638 = t12634 ** 2
            t12646 = t12638 ** 2
            t12613 = t12629 * t12646
            t12633 = t12629 * t12628
            t12636 = t12633 ** 2
            t12637 = t12629 * t12636
            t12644 = t12637 ** 2
            t12615 = t12629 * t12644
            t12642 = t12636 ** 2
            t12617 = t12629 * t12642
            t12635 = t12629 * t12634
            t12640 = t12635 ** 2
            t12619 = t12629 * t12640
            t12639 = t12629 * t12638
            t12654 = -224 * t12613 - 2432 * t12615 + 784 * t12617 + 8736 * t12619 - 80 * t12629 - 224 * t12633 + 2800 * t12635 - 2496 * t12637 - 6864 * t12639
            t12653 = -896 * t12613 - 512 * t12615 + 10560 * t12617 - 18304 * t12619 - 64 * t12629 + 1152 * t12633 - 4416 * t12635 + 3328 * t12637 + 9152 * t12639
            t12612 = t12639 ** 2
            t12652 = -9 - 21 * t12612 - 261 * t12628 + 868 * t12634 + 2548 * t12636 - 8294 * t12638 + 2002 * t12640 + 6916 * t12642 - 2732 * t12644 - 1017 * t12646
            t12651 = -1120 * t12613 + 6272 * t12615 - 14000 * t12617 + 15008 * t12619 + 112 * t12629 - 1120 * t12633 + 3248 * t12635 - 2240 * t12637 - 6160 * t12639
            t12650 = 22 + 126 * t12612 - 242 * t12628 - 456 * t12634 + 6968 * t12636 - 16588 * t12638 + 13156 * t12640 + 1560 * t12642 - 6696 * t12644 + 2150 * t12646
            t12649 = -7 - 315 * t12612 + 245 * t12628 - 2660 * t12634 + 10892 * t12636 - 22330 * t12638 + 25102 * t12640 - 14980 * t12642 + 3500 * t12644 + 553 * t12646
            t12632 = 3 * phi1
            t12631 = -4 * phi2
            t12630 = 4 * phi2
            tfunc[..., c] = (0.37e2 / 0.74448896e8) * np.sqrt(0.17e2) * np.sqrt(0.71e2) * np.sqrt(0.29e2) * np.sqrt(0.23e2) * np.sqrt(0.19e2) * np.sqrt(0.11e2) * np.sqrt(0.465e3) * ((420 * t12612 - 3372 * t12646 + 11856 * t12644 - 23856 * t12642 + 30072 * t12640 - 24360 * t12638 + 12432 * t12636 - 3696 * t12634 + 516 * t12628 - 12) * np.exp((-16*1j) * phi2) + (t12650 - t12653) * np.exp((-8*1j) * (phi1 + 2 * phi2)) + (t12649 + t12651) * np.exp((-4*1j) * (phi1 + t12630)) + (t12652 + t12654) * np.exp((-4*1j) * (t12632 + t12630)) + (t12649 - t12651) * np.exp((4*1j) * (phi1 + t12631)) + (t12652 - t12654) * np.exp((4*1j) * (t12632 + t12631)) + (t12650 + t12653) * np.exp((8*1j) * (phi1 - 2 * phi2)))

        if Bindx == 323:
            t12681 = np.cos(phi)
            t12680 = t12681 ** 2
            t12686 = t12680 ** 2
            t12690 = t12686 ** 2
            t12691 = t12681 * t12690
            t12664 = t12691 ** 2
            t12685 = t12681 * t12680
            t12688 = t12685 ** 2
            t12687 = t12681 * t12686
            t12692 = t12687 ** 2
            t12694 = t12688 ** 2
            t12689 = t12681 * t12688
            t12696 = t12689 ** 2
            t12698 = t12690 ** 2
            t12708 = 22365 * t12664 + 1490645 * t12680 + 12335540 * t12686 + 7468916 * t12688 - 50054290 * t12690 - 26580554 * t12692 + 37344580 * t12694 + 20543140 * t12696 + 2065177 * t12698 + 17537
            t12665 = t12681 * t12698
            t12667 = t12681 * t12696
            t12669 = t12681 * t12694
            t12671 = t12681 * t12692
            t12707 = 318080 * t12665 + 8033792 * t12667 + 35147840 * t12669 + 14059136 * t12671 + 240832 * t12681 + 5407360 * t12685 + 16762816 * t12687 - 20084480 * t12689 - 55232320 * t12691
            t12706 = -3015936 * t12665 - 32744448 * t12667 + 10555776 * t12669 + 117621504 * t12671 - 1077120 * t12681 - 3015936 * t12685 + 37699200 * t12687 - 33606144 * t12689 - 92416896 * t12691
            t12705 = -106898176 * t12665 - 61084672 * t12667 + 1259871360 * t12669 - 2183777024 * t12671 - 7635584 * t12681 + 137440512 * t12685 - 526855296 * t12687 + 397050368 * t12689 + 1091888512 * t12691
            t12704 = -101597440 * t12665 + 568945664 * t12667 - 1269968000 * t12669 + 1361405696 * t12671 + 10159744 * t12681 - 101597440 * t12685 + 294632576 * t12687 - 203194880 * t12689 - 558785920 * t12691
            t12703 = 282744 * t12664 + 3514104 * t12680 - 11686752 * t12686 - 34306272 * t12688 + 111670416 * t12690 - 26954928 * t12692 - 93117024 * t12694 + 36783648 * t12696 + 13692888 * t12698 + 121176
            t12702 = 28574280 * t12664 - 22224440 * t12680 + 241293920 * t12686 - 988035104 * t12688 + 2025598960 * t12690 - 2277052624 * t12692 + 1358865760 * t12694 - 317492000 * t12696 - 50163736 * t12698 + 634984
            t12701 = 15032556 * t12664 - 28872052 * t12680 - 54403536 * t12686 + 831324208 * t12688 - 1979047928 * t12690 + 1569589736 * t12692 + 186117360 * t12694 - 798872976 * t12696 + 256507900 * t12698 + 2624732
            t12684 = 3 * phi1
            t12683 = -4 * phi2
            t12682 = 4 * phi2
            tfunc[..., c] = (0.37e2 / 0.2382364672e10) * np.sqrt(0.5e1) * np.sqrt(0.31e2) * np.sqrt(0.71e2) * ((-87823890 * t12664 + 705100374 * t12698 - 2479142952 * t12696 + 4988396952 * t12694 - 6288190524 * t12692 + 5093785620 * t12690 - 2599587144 * t12688 + 772850232 * t12686 - 107897922 * t12680 + 2509254) * np.exp((-16*1j) * phi2) + (t12701 - t12705) * np.exp((-8*1j) * (phi1 + 2 * phi2)) + (t12702 - t12704) * np.exp((-4*1j) * (phi1 + t12682)) + (t12703 - t12706) * np.exp((-4*1j) * (t12684 + t12682)) + (t12702 + t12704) * np.exp((4*1j) * (phi1 + t12683)) + (t12703 + t12706) * np.exp((4*1j) * (t12684 + t12683)) + (t12701 + t12705) * np.exp((8*1j) * (phi1 - 2 * phi2)) + (t12707 + t12708) * np.exp((-16*1j) * (phi1 + phi2)) + (-t12707 + t12708) * np.exp((16*1j) * (phi1 - phi2)))

        if Bindx == 324:
            t12732 = np.cos(phi)
            t12731 = t12732 ** 2
            t12738 = t12731 ** 2
            t12742 = t12738 ** 2
            t12750 = t12742 ** 2
            t12716 = t12732 * t12750
            t12754 = 357 * t12716
            t12753 = -2142 * t12716
            t12752 = 5355 * t12716
            t12737 = t12732 * t12731
            t12740 = t12737 ** 2
            t12741 = t12732 * t12740
            t12748 = t12741 ** 2
            t12746 = t12740 ** 2
            t12739 = t12732 * t12738
            t12744 = t12739 ** 2
            t12736 = 4 * phi1
            t12735 = 8 * phi1
            t12734 = -15 * phi2
            t12733 = 15 * phi2
            t12724 = t12732 * t12742
            t12722 = t12732 * t12744
            t12720 = t12732 * t12746
            t12718 = t12732 * t12748
            tfunc[..., c] = (-0.37e2 / 0.74448896e8*1j) * np.sqrt(0.155e3) * np.sqrt(0.11e2) * np.sqrt(0.19e2) * np.sqrt(0.23e2) * np.sqrt(0.29e2) * np.sqrt(0.71e2) * np.sqrt(0.2e1) * ((1 + t12732) ** (0.3e1 / 0.2e1)) * ((-7140 * t12716 + 14280 * t12750 + 36312 * t12718 - 86904 * t12748 - 67320 * t12720 + 221544 * t12746 + 41208 * t12722 - 303960 * t12744 + 32640 * t12724 + 238680 * t12742 - 67320 * t12741 - 104040 * t12740 + 41208 * t12739 + 21624 * t12738 - 10200 * t12737 - 1224 * t12731 + 612 * t12732) * np.exp((-15*1j) * phi2) + (t12754 + 2856 * t12750 + 8670 * t12718 + 9494 * t12748 - 9406 * t12720 - 36682 * t12746 - 28474 * t12722 + 22286 * t12744 + 51788 * t12724 + 19998 * t12742 - 23430 * t12741 - 25086 * t12740 - 2578 * t12739 + 7394 * t12738 + 3554 * t12737 - 166 * t12731 - 481 * t12732 - 94) * np.exp((-3*1j) * (t12736 + 5 * phi2)) + (t12754 - 4284 * t12750 + 22950 * t12718 - 71306 * t12748 + 137914 * t12720 - 158522 * t12746 + 67886 * t12722 + 94094 * t12744 - 188188 * t12724 + 136422 * t12742 - 16302 * t12741 - 51870 * t12740 + 43862 * t12739 - 13006 * t12738 - 2086 * t12737 + 2842 * t12731 - 857 * t12732 + 94) * np.exp((3*1j) * (t12736 - 5 * phi2)) + (t12752 + 7140 * t12750 - 33558 * t12718 - 45654 * t12748 + 89334 * t12720 + 124026 * t12746 - 131166 * t12722 - 185262 * t12744 + 115500 * t12724 + 164010 * t12742 - 62370 * t12741 - 85890 * t12740 + 20538 * t12739 + 24654 * t12738 - 4074 * t12737 - 3066 * t12731 + 441 * t12732 + 42) * np.exp((-1*1j) * (t12736 + t12733)) + (t12753 - 9996 * t12750 - 7548 * t12718 + 33372 * t12748 + 60492 * t12720 - 24180 * t12746 - 123084 * t12722 - 39156 * t12744 + 112944 * t12724 + 80964 * t12742 - 46644 * t12741 - 56940 * t12740 + 4212 * t12739 + 18372 * t12738 + 2172 * t12737 - 2556 * t12731 - 402 * t12732 + 120) * np.exp((-1*1j) * (t12735 + t12733)) + (t12752 - 28560 * t12750 + 37842 * t12718 + 58506 * t12748 - 190386 * t12720 + 65226 * t12746 + 266154 * t12722 - 273966 * t12744 - 104412 * t12724 + 273042 * t12742 - 60522 * t12741 - 105378 * t12740 + 57666 * t12739 + 10206 * t12738 - 12306 * t12737 + 966 * t12731 + 609 * t12732 - 42) * np.exp((1j) * (t12736 + t12734)) + (t12753 + 18564 * t12750 - 64668 * t12718 + 102492 * t12748 - 20628 * t12720 - 191412 * t12746 + 292500 * t12722 - 84084 * t12744 - 212784 * t12724 + 241956 * t12742 - 42900 * t12741 - 86892 * t12740 + 60372 * t12739 - 3708 * t12738 - 9828 * t12737 + 3204 * t12731 + 78 * t12732 - 120) * np.exp((1j) * (t12735 + t12734))) * ((1 - t12732) ** (-0.1e1 / 0.2e1))

        if Bindx == 325:
            t12782 = np.cos(phi)
            t12781 = t12782 ** 2
            t12789 = t12781 ** 2
            t12788 = t12782 * t12781
            t12791 = t12788 ** 2
            t12793 = t12789 ** 2
            t12790 = t12782 * t12789
            t12795 = t12790 ** 2
            t12797 = t12791 ** 2
            t12792 = t12782 * t12791
            t12799 = t12792 ** 2
            t12801 = t12793 ** 2
            t12794 = t12782 * t12793
            t12803 = t12794 ** 2
            t12812 = -352728 * t12781 - 1749440 * t12789 + 3657920 * t12791 + 8196240 * t12793 - 10884016 * t12795 - 6616064 * t12797 + 5589120 * t12799 + 2064680 * t12801 + 99400 * t12803 - 5112
            t12764 = t12782 * t12803
            t12766 = t12782 * t12801
            t12768 = t12782 * t12799
            t12770 = t12782 * t12797
            t12772 = t12782 * t12795
            t12811 = 7455 * t12764 + 594057 * t12766 + 4457948 * t12768 + 1918420 * t12770 - 13374270 * t12772 - 64255 * t12782 - 1068905 * t12788 - 650076 * t12790 + 8687276 * t12792 - 507650 * t12794
            t12810 = -322608 * t12781 + 3784704 * t12789 - 6031872 * t12791 - 13714272 * t12793 + 38507040 * t12795 - 18834816 * t12797 - 12144000 * t12799 + 7838160 * t12801 + 942480 * t12803 - 24816
            t12809 = 94248 * t12764 + 3891096 * t12766 + 4818528 * t12768 - 29368416 * t12770 + 17921904 * t12772 - 176616 * t12782 + 723624 * t12788 + 4161696 * t12790 - 20111520 * t12792 + 18045456 * t12794
            t12808 = 3809904 * t12781 - 23905280 * t12789 + 35857920 * t12791 + 82921440 * t12793 - 373071776 * t12795 + 575519616 * t12797 - 457188480 * t12799 + 187880560 * t12801 - 31749200 * t12803 - 74704
            t12807 = 7579440 * t12781 - 47160960 * t12789 + 70516864 * t12791 + 162031584 * t12793 - 626230176 * t12795 + 724033024 * t12797 - 304525056 * t12799 - 19369680 * t12801 + 33405680 * t12803 - 280720
            t12806 = 5010852 * t12764 + 69436092 * t12766 - 279990128 * t12768 + 259553712 * t12770 + 206918712 * t12772 + 378972 * t12782 + 7818052 * t12788 - 100890768 * t12790 + 365665872 * t12792 - 533901368 * t12794
            t12805 = 9524760 * t12764 - 24764376 * t12766 - 63199584 * t12768 + 366796640 * t12770 - 686903280 * t12772 + 933800 * t12782 - 17368680 * t12788 + 116986464 * t12790 - 379944544 * t12792 + 677938800 * t12794
            t12787 = 4 * phi1
            t12786 = 8 * phi1
            t12785 = 16 * phi1
            t12784 = -15 * phi2
            t12783 = 15 * phi2
            tfunc[..., c] = (0.37e2 / 0.2382364672e10*1j) * np.sqrt(0.3e1) * np.sqrt(0.17e2) * np.sqrt(0.2e1) * np.sqrt(0.71e2) * np.sqrt(0.31e2) * np.sqrt(0.5e1) * ((1 + t12782) ** (-0.1e1 / 0.2e1)) * ((1 - t12782) ** (-0.1e1 / 0.2e1)) * ((-29274630 * t12764 + 236706294 * t12766 - 839763672 * t12768 + 1709638392 * t12770 - 2189742324 * t12772 + 1815027060 * t12794 - 960207864 * t12792 + 304456152 * t12790 - 49348662 * t12788 + 2509254 * t12782) * np.exp((-15*1j) * phi2) + (t12809 + t12810) * np.exp((-3*1j) * (t12787 + 5 * phi2)) + (t12809 - t12810) * np.exp((3*1j) * (t12787 - 5 * phi2)) + (t12805 - t12808) * np.exp((-1*1j) * (t12787 + t12783)) + (t12806 + t12807) * np.exp((-1*1j) * (t12786 + t12783)) + (t12805 + t12808) * np.exp((1j) * (t12787 + t12784)) + (t12806 - t12807) * np.exp((1j) * (t12786 + t12784)) + (t12811 + t12812) * np.exp((-1*1j) * (t12785 + t12783)) + (t12811 - t12812) * np.exp((1j) * (t12785 + t12784)))

        if Bindx == 326:
            t12837 = np.cos(phi)
            t12836 = t12837 ** 2
            t12844 = t12836 ** 2
            t12848 = t12844 ** 2
            t12856 = t12848 ** 2
            t12821 = t12837 * t12856
            t12843 = t12837 * t12836
            t12846 = t12843 ** 2
            t12847 = t12837 * t12846
            t12854 = t12847 ** 2
            t12823 = t12837 * t12854
            t12852 = t12846 ** 2
            t12825 = t12837 * t12852
            t12845 = t12837 * t12844
            t12850 = t12845 ** 2
            t12827 = t12837 * t12850
            t12849 = t12837 * t12848
            t12864 = -36652 * t12821 - 253176 * t12823 + 407512 * t12825 + 366184 * t12827 + 3052 * t12837 - 33544 * t12843 + 35112 * t12845 + 326040 * t12847 - 814528 * t12849
            t12863 = -146608 * t12821 + 101024 * t12823 + 952672 * t12825 - 2041312 * t12827 - 3152 * t12837 + 32096 * t12843 - 34144 * t12845 - 434720 * t12847 + 1574144 * t12849
            t12862 = -183260 * t12821 + 961576 * t12823 - 2048200 * t12825 + 2230536 * t12827 + 924 * t12837 - 15400 * t12843 + 17864 * t12845 + 292600 * t12847 - 1256640 * t12849
            t12820 = t12849 ** 2
            t12861 = 3927 * t12820 + 599 * t12836 + 68684 * t12844 - 300300 * t12846 + 230230 * t12848 + 538538 * t12850 - 794612 * t12852 + 113844 * t12854 + 139689 * t12856 - 599
            t12860 = -23562 * t12820 - 10906 * t12836 + 133672 * t12844 - 584584 * t12846 + 1009580 * t12848 - 350636 * t12850 - 919672 * t12852 + 1024472 * t12854 - 278630 * t12856 + 266
            t12859 = 58905 * t12820 - 15015 * t12836 + 167860 * t12844 - 774004 * t12846 + 1802570 * t12848 - 2255946 * t12850 + 1424500 * t12852 - 266420 * t12854 - 142681 * t12856 + 231
            t12842 = 2 * phi1
            t12841 = 4 * phi1
            t12840 = 6 * phi1
            t12839 = -7 * phi2
            t12838 = 7 * phi2
            tfunc[..., c] = -(0.37e2 / 0.148897792e9) * np.sqrt(0.2e1) * np.sqrt(0.71e2) * np.sqrt(0.23e2) * np.sqrt(0.19e2) * np.sqrt(0.465e3) * np.sqrt(0.29e2) * ((204 - 78540 * t12820 + 563244 * t12856 - 1743792 * t12854 + 3033072 * t12852 - 3224424 * t12850 + 2127720 * t12848 - 839664 * t12846 + 177072 * t12844 - 14892 * t12836) * np.exp((-14*1j) * phi2) + (t12859 - t12862) * np.exp((-2*1j) * (t12842 + t12838)) + (t12860 + t12863) * np.exp((-2*1j) * (t12841 + t12838)) + (t12861 - t12864) * np.exp((-2*1j) * (t12840 + t12838)) + (t12859 + t12862) * np.exp((2*1j) * (t12842 + t12839)) + (t12860 - t12863) * np.exp((2*1j) * (t12841 + t12839)) + (t12861 + t12864) * np.exp((2*1j) * (t12840 + t12839)))

        if Bindx == 327:
            t12891 = np.cos(phi)
            t12890 = t12891 ** 2
            t12899 = t12890 ** 2
            t12903 = t12899 ** 2
            t12904 = t12891 * t12903
            t12874 = t12904 ** 2
            t12898 = t12891 * t12890
            t12901 = t12898 ** 2
            t12900 = t12891 * t12899
            t12905 = t12900 ** 2
            t12907 = t12901 ** 2
            t12902 = t12891 * t12901
            t12909 = t12902 ** 2
            t12911 = t12903 ** 2
            t12921 = 22365 * t12874 - 730235 * t12890 - 1918420 * t12899 + 10053316 * t12901 + 4974970 * t12903 - 23169146 * t12905 - 129220 * t12907 + 9370580 * t12909 + 1539067 * t12911 - 13277
            t12920 = 282744 * t12874 + 43128 * t12890 + 4945248 * t12899 - 21621600 * t12901 + 16576560 * t12903 + 38774736 * t12905 - 57212064 * t12907 + 8196768 * t12909 + 10057608 * t12911 - 43128
            t12875 = t12891 * t12911
            t12877 = t12891 * t12909
            t12879 = t12891 * t12907
            t12881 = t12891 * t12905
            t12919 = -278320 * t12875 - 4882528 * t12877 - 9621920 * t12879 + 15919904 * t12881 + 151088 * t12891 + 1828960 * t12898 - 2083424 * t12900 - 14029600 * t12902 + 12995840 * t12904
            t12918 = -2638944 * t12875 - 18228672 * t12877 + 29340864 * t12879 + 26365248 * t12881 + 219744 * t12891 - 2415168 * t12898 + 2528064 * t12900 + 23474880 * t12902 - 58646016 * t12904
            t12917 = -88897760 * t12875 + 466451776 * t12877 - 993563200 * t12879 + 1082012736 * t12881 + 448224 * t12891 - 7470400 * t12898 + 8665664 * t12900 + 141937600 * t12902 - 609584640 * t12904
            t12916 = -93535904 * t12875 + 64453312 * t12877 + 607804736 * t12879 - 1302357056 * t12881 - 2010976 * t12891 + 20477248 * t12898 - 21783872 * t12900 - 277351360 * t12902 + 1004303872 * t12904
            t12915 = 28574280 * t12874 - 7283640 * t12890 + 81427360 * t12899 - 375462304 * t12901 + 874410320 * t12903 - 1094338896 * t12905 + 691012000 * t12907 - 129237920 * t12909 - 69213256 * t12911 + 112056
            t12914 = 15032556 * t12874 + 6958028 * t12890 - 85282736 * t12899 + 372964592 * t12901 - 644112040 * t12903 + 223705768 * t12905 + 586750736 * t12907 - 653613136 * t12909 + 177765940 * t12911 - 169708
            t12897 = 2 * phi1
            t12896 = 4 * phi1
            t12895 = 6 * phi1
            t12894 = 8 * phi1
            t12893 = -7 * phi2
            t12892 = 7 * phi2
            tfunc[..., c] = (0.37e2 / 0.4764729344e10) * np.sqrt(0.5e1) * np.sqrt(0.31e2) * np.sqrt(0.71e2) * np.sqrt(0.11e2) * np.sqrt(0.17e2) * np.sqrt(0.2e1) * ((-87823890 * t12874 + 629822754 * t12911 - 1949918472 * t12909 + 3391598952 * t12907 - 3605569884 * t12905 + 2379229020 * t12903 - 938917224 * t12901 + 198002952 * t12899 - 16652322 * t12890 + 228114) * np.exp((-14*1j) * phi2) + (t12915 - t12917) * np.exp((-2*1j) * (t12897 + t12892)) + (t12914 - t12916) * np.exp((-2*1j) * (t12896 + t12892)) + (-t12918 + t12920) * np.exp((-2*1j) * (t12895 + t12892)) + (-t12919 + t12921) * np.exp((-2*1j) * (t12894 + t12892)) + (t12915 + t12917) * np.exp((2*1j) * (t12897 + t12893)) + (t12914 + t12916) * np.exp((2*1j) * (t12896 + t12893)) + (t12918 + t12920) * np.exp((2*1j) * (t12895 + t12893)) + (t12919 + t12921) * np.exp((2*1j) * (t12894 + t12893)))

        if Bindx == 328:
            t12946 = np.cos(phi)
            t12945 = t12946 ** 2
            t12953 = t12945 ** 2
            t12957 = t12953 ** 2
            t12958 = t12946 * t12957
            t12929 = t12958 ** 2
            t12970 = 3927 * t12929
            t12969 = -23562 * t12929
            t12952 = t12946 * t12945
            t12968 = 58905 * t12929 - 1155 * t12945 + 1155 * t12946 - 29260 * t12952
            t12965 = t12957 ** 2
            t12955 = t12952 ** 2
            t12956 = t12946 * t12955
            t12963 = t12956 ** 2
            t12961 = t12955 ** 2
            t12954 = t12946 * t12953
            t12959 = t12954 ** 2
            t12951 = 4 * phi1
            t12950 = 8 * phi1
            t12949 = 12 * phi1
            t12948 = -13 * phi2
            t12947 = 13 * phi2
            t12936 = t12946 * t12959
            t12934 = t12946 * t12961
            t12932 = t12946 * t12963
            t12930 = t12946 * t12965
            tfunc[..., c] = (-0.37e2 / 0.18612224e8*1j) * np.sqrt(0.93e2) * np.sqrt(0.19e2) * np.sqrt(0.23e2) * np.sqrt(0.29e2) * np.sqrt(0.71e2) * np.sqrt((1 + t12946)) * (1020 * (-77 * t12929 + 77 * t12930 + 28 * t12953 - 28 * t12952 - t12945 + t12946 + 1876 * t12961 - 1876 * t12936 - 1610 * t12959 + 1610 * t12958 - 1288 * t12963 + 1288 * t12934 + 812 * t12957 - 812 * t12956 + 484 * t12965 - 484 * t12932 - 224 * t12955 + 224 * t12954) * np.exp((-13*1j) * phi2) + (111265 * t12930 - 301070 * t12965 - 649880 * t12932 + 608300 * t12963 + 1603910 * t12934 - 585970 * t12961 - 2166780 * t12936 + 219450 * t12959 + 1732500 * t12958 + 54670 * t12957 - 825440 * t12956 - 72380 * t12955 + 222530 * t12954 + 19250 * t12953 + t12968) * np.exp((-1*1j) * (t12951 + t12947)) + (-229075 * t12930 + 39270 * t12965 + 911680 * t12932 - 953260 * t12963 - 1258950 * t12934 + 2276890 * t12961 + 475860 * t12936 - 2423190 * t12959 + 471240 * t12958 + 1315930 * t12957 - 545160 * t12956 - 352660 * t12955 + 202510 * t12954 + 39270 * t12953 + t12968) * np.exp((1j) * (t12951 + t12948)) + (t12969 - 112574 * t12930 - 98736 * t12965 + 337832 * t12932 + 672640 * t12963 - 172296 * t12934 - 1261312 * t12961 - 490568 * t12936 + 1082796 * t12959 + 837980 * t12958 - 427856 * t12957 - 552552 * t12956 + 43472 * t12955 + 177496 * t12954 + 15840 * t12953 - 26872 * t12952 - 3314 * t12945 + 1554 * t12946 + 32) * np.exp((-1*1j) * (t12950 + t12947)) + (t12969 + 159698 * t12930 - 371008 * t12965 + 131912 * t12932 + 878560 * t12963 - 1378904 * t12934 - 54704 * t12961 + 1806584 * t12936 - 1214356 * t12959 - 706420 * t12958 + 1116544 * t12957 - 136136 * t12956 - 372944 * t12955 + 151976 * t12954 + 41360 * t12953 - 30328 * t12952 + 142 * t12945 + 1618 * t12946 - 32) * np.exp((1j) * (t12950 + t12948)) + (t12970 + 30107 * t12930 + 84898 * t12965 + 72688 * t12932 - 137860 * t12963 - 367346 * t12934 - 175266 * t12961 + 352716 * t12936 + 486486 * t12959 + 22880 * t12958 - 338338 * t12957 - 191048 * t12956 + 68068 * t12955 + 95018 * t12954 + 13090 * t12953 - 15540 * t12952 - 5325 * t12945 + 525 * t12946 + 320) * np.exp((-1*1j) * (t12949 + t12947)) + (t12970 - 37961 * t12930 + 152966 * t12965 - 310552 * t12932 + 245380 * t12963 + 259826 * t12934 - 802438 * t12961 + 624988 * t12936 + 214214 * t12959 - 723580 * t12958 + 408122 * t12957 + 121264 * t12956 - 244244 * t12955 + 81158 * t12954 + 26950 * t12953 - 24500 * t12952 + 3635 * t12945 + 1165 * t12946 - 320) * np.exp((1j) * (t12949 + t12948))) * ((1 - t12946) ** (-0.1e1 / 0.2e1))

        if Bindx == 329:
            t12998 = np.cos(phi)
            t12997 = t12998 ** 2
            t13006 = t12997 ** 2
            t13005 = t12998 * t12997
            t13008 = t13005 ** 2
            t13010 = t13006 ** 2
            t13007 = t12998 * t13006
            t13012 = t13007 ** 2
            t13014 = t13008 ** 2
            t13009 = t12998 * t13008
            t13016 = t13009 ** 2
            t13018 = t13010 ** 2
            t13011 = t12998 * t13010
            t13020 = t13011 ** 2
            t13029 = -4855760 * t13006 + 72836400 * t13008 - 373893520 * t13010 + 946873200 * t13012 - 1335334000 * t13014 + 1073122960 * t13016 - 461297200 * t13018 + 82547920 * t13020
            t13028 = 465760 * t12997 - 337960 * t13006 - 6858600 * t13008 + 10374520 * t13010 + 7716280 * t13012 - 16281720 * t13014 + 1144520 * t13016 + 3507400 * t13018 + 258440 * t13020 + 11360
            t13027 = -345600 * t12997 - 176400 * t13006 + 11742192 * t13008 - 38115792 * t13010 + 36674352 * t13012 + 12776400 * t13014 - 36374832 * t13016 + 11346192 * t13018 + 2450448 * t13020 + 23040
            t12980 = t12998 * t13020
            t12982 = t12998 * t13018
            t12984 = t12998 * t13016
            t12986 = t12998 * t13014
            t12988 = t12998 * t13012
            t13026 = 22365 * t12980 + 1291135 * t12982 + 4988460 * t12984 - 9015580 * t12986 - 9368450 * t12988 + 115375 * t12998 + 789165 * t13005 - 4005820 * t13007 - 1975220 * t13009 + 17158570 * t13011
            t13025 = 282744 * t12980 + 8280360 * t12982 - 4692384 * t12984 - 39068064 * t12986 + 60422544 * t12988 + 60840 * t12998 - 1502280 * t13005 + 7783776 * t13007 - 8854560 * t13009 - 22712976 * t13011
            t13024 = -1122880 * t12997 - 7038416 * t13006 + 140977584 * t13008 - 625500304 * t13010 + 1225455088 * t13012 - 1117699440 * t13014 + 319219472 * t13016 + 152543248 * t13018 - 86854768 * t13020 + 20416
            t13023 = 28574280 * t12980 - 92072680 * t12982 - 20170080 * t12984 + 493793440 * t12986 - 944632080 * t12988 + 560280 * t12998 - 14754040 * t13005 + 117285280 * t13007 - 435524320 * t13009 + 866939920 * t13011
            t13022 = 15032556 * t12980 + 134815780 * t12982 - 644681136 * t12984 + 914641904 * t12986 - 377841464 * t12988 - 1011868 * t12998 + 19258668 * t13005 - 123348368 * t13007 + 324793040 * t13009 - 261659112 * t13011
            t13004 = 4 * phi1
            t13003 = 8 * phi1
            t13002 = 12 * phi1
            t13001 = 16 * phi1
            t13000 = -13 * phi2
            t12999 = 13 * phi2
            tfunc[..., c] = (0.37e2 / 0.595591168e9*1j) * np.sqrt(0.31e2) * np.sqrt(0.71e2) * np.sqrt(0.17e2) * np.sqrt(0.11e2) * ((1 + t12998) ** (-0.1e1 / 0.2e1)) * ((1 - t12998) ** (-0.1e1 / 0.2e1)) * ((-87823890 * t12980 + 639859770 * t12982 - 2021090040 * t12984 + 3608763480 * t12986 - 3976027020 * t12988 + 2762460540 * t13011 - 1181630520 * t13009 + 287423640 * t13007 - 33076530 * t13005 + 1140570 * t12998) * np.exp((-13*1j) * phi2) + (t13023 + t13029) * np.exp((-1*1j) * (t13004 + t12999)) + (t13023 - t13029) * np.exp((1j) * (t13004 + t13000)) + (t13022 - t13024) * np.exp((-1*1j) * (t13003 + t12999)) + (t13022 + t13024) * np.exp((1j) * (t13003 + t13000)) + (t13025 + t13027) * np.exp((-1*1j) * (t13002 + t12999)) + (t13026 + t13028) * np.exp((-1*1j) * (t13001 + t12999)) + (t13025 - t13027) * np.exp((1j) * (t13002 + t13000)) + (t13026 - t13028) * np.exp((1j) * (t13001 + t13000)))

        if Bindx == 330:
            t13054 = np.cos(phi)
            t13053 = t13054 ** 2
            t13059 = t13053 ** 2
            t13063 = t13059 ** 2
            t13071 = t13063 ** 2
            t13038 = t13054 * t13071
            t13058 = t13054 * t13053
            t13061 = t13058 ** 2
            t13062 = t13054 * t13061
            t13069 = t13062 ** 2
            t13040 = t13054 * t13069
            t13067 = t13061 ** 2
            t13042 = t13054 * t13067
            t13060 = t13054 * t13059
            t13065 = t13060 ** 2
            t13044 = t13054 * t13065
            t13064 = t13054 * t13063
            t13079 = 973896 * t13038 + 3393632 * t13040 - 11481036 * t13042 + 6361992 * t13044 - 3300 * t13054 - 196280 * t13058 + 2118732 * t13060 - 6527664 * t13062 + 5368220 * t13064
            t13078 = 3895584 * t13038 - 6940032 * t13040 - 8039664 * t13042 + 29541408 * t13044 - 8784 * t13054 + 252192 * t13058 - 2796816 * t13060 + 13096512 * t13062 - 29000400 * t13064
            t13077 = -4869480 * t13038 + 24060960 * t13040 - 48838020 * t13042 + 52270680 * t13044 - 4620 * t13054 + 157080 * t13058 - 1871100 * t13060 + 10589040 * t13062 - 31494540 * t13064
            t13037 = t13064 ** 2
            t13076 = 121737 * t13037 - 126495 * t13053 + 697620 * t13059 - 44044 * t13061 - 6899178 * t13063 + 15069054 * t13065 - 9157148 * t13067 - 2631900 * t13069 + 2973861 * t13071 + 4685
            t13075 = 1826055 * t13037 - 105105 * t13053 + 1519980 * t13059 - 8274420 * t13061 + 21785610 * t13063 - 29357790 * t13065 + 17653020 * t13067 + 429660 * t13069 - 5478165 * t13071 + 1155
            t13074 = -730422 * t13037 - 123414 * t13053 + 1207800 * t13059 - 3874728 * t13061 + 1645644 * t13063 + 14913756 * t13065 - 31359432 * t13067 + 23640600 * t13069 - 5321646 * t13071 + 1842
            t13057 = 2 * phi1
            t13056 = -3 * phi2
            t13055 = 3 * phi2
            tfunc[..., c] = -(0.37e2 / 0.37224448e8) * np.sqrt(0.2e1) * np.sqrt(0.71e2) * np.sqrt(0.19e2) * np.sqrt(0.23e2) * np.sqrt(0.29e2) * ((-2434740 * t13037 + 15651900 * t13071 - 42876720 * t13069 + 64916880 * t13067 - 58819320 * t13065 + 32172840 * t13063 - 10138800 * t13061 + 1627920 * t13059 - 100980 * t13053 + 1020) * np.exp((-12*1j) * phi2) + (t13075 - t13077) * np.exp((-4*1j) * (phi1 + t13055)) + (t13074 - t13078) * np.exp((-4*1j) * (t13057 + t13055)) + (t13075 + t13077) * np.exp((4*1j) * (phi1 + t13056)) + (t13074 + t13078) * np.exp((4*1j) * (t13057 + t13056)) + (t13076 + t13079) * np.exp((-12*1j) * (phi1 + phi2)) + (t13076 - t13079) * np.exp((12*1j) * (phi1 - phi2)))

        if Bindx == 331:
            t13106 = np.cos(phi)
            t13105 = t13106 ** 2
            t13112 = t13105 ** 2
            t13116 = t13112 ** 2
            t13124 = t13116 ** 2
            t13090 = t13106 * t13124
            t13111 = t13106 * t13105
            t13114 = t13111 ** 2
            t13115 = t13106 * t13114
            t13122 = t13115 ** 2
            t13092 = t13106 * t13122
            t13120 = t13114 ** 2
            t13094 = t13106 * t13120
            t13113 = t13106 * t13112
            t13118 = t13113 ** 2
            t13096 = t13106 * t13118
            t13117 = t13106 * t13116
            t13134 = 23373504 * t13090 + 81447168 * t13092 - 275544864 * t13094 + 152687808 * t13096 - 79200 * t13106 - 4710720 * t13111 + 50849568 * t13113 - 156663936 * t13115 + 128837280 * t13117
            t13133 = -2465120 * t13090 - 26764160 * t13092 + 8627920 * t13094 + 96139680 * t13096 - 880400 * t13106 - 2465120 * t13111 + 30814000 * t13113 - 27468480 * t13115 - 75538320 * t13117
            t13089 = t13117 ** 2
            t13132 = 231105 * t13089 + 2872305 * t13105 - 9552340 * t13112 - 28040740 * t13114 + 91275470 * t13116 - 22032010 * t13118 - 76110580 * t13120 + 30065660 * t13122 + 11192085 * t13124 + 99045
            t13131 = 787380160 * t13090 - 3890584320 * t13092 + 7896959840 * t13094 - 8452010560 * t13096 + 747040 * t13106 - 25399360 * t13111 + 302551200 * t13113 - 1712215680 * t13115 + 5092571680 * t13117
            t13130 = -828460864 * t13090 + 1475913472 * t13092 + 1709768544 * t13094 - 6282472768 * t13096 + 1868064 * t13106 - 53632832 * t13111 + 594789536 * t13113 - 2785191552 * t13115 + 6167418400 * t13117
            t13129 = 2921688 * t13089 - 3035880 * t13105 + 16742880 * t13112 - 1057056 * t13114 - 165580272 * t13116 + 361657296 * t13118 - 219771552 * t13120 - 63165600 * t13122 + 71372664 * t13124 + 112440
            t13128 = 295267560 * t13089 - 16995160 * t13105 + 245776160 * t13112 - 1337948640 * t13114 + 3522667120 * t13116 - 4747065680 * t13118 + 2854439840 * t13120 + 69474720 * t13122 - 885802680 * t13124 + 186760
            t13127 = 155336412 * t13089 + 26246044 * t13105 - 256858800 * t13112 + 824025488 * t13114 - 349973624 * t13116 - 3171658776 * t13118 + 6669105872 * t13120 - 5027567600 * t13122 + 1131736716 * t13124 - 391732
            t13110 = 2 * phi1
            t13109 = 4 * phi1
            t13108 = -3 * phi2
            t13107 = 3 * phi2
            tfunc[..., c] = (0.37e2 / 0.1191182336e10) * np.sqrt(0.71e2) * np.sqrt(0.3e1) * np.sqrt(0.2e1) * np.sqrt(0.11e2) * np.sqrt(0.17e2) * ((-907513530 * t13089 + 5834015550 * t13124 - 15981666840 * t13122 + 24196812360 * t13120 - 21924036540 * t13118 + 11991952980 * t13116 - 3779088600 * t13114 + 606783240 * t13112 - 37638810 * t13105 + 380190) * np.exp((-12*1j) * phi2) + (t13128 + t13131) * np.exp((-4*1j) * (phi1 + t13107)) + (t13127 - t13130) * np.exp((-4*1j) * (t13110 + t13107)) + (t13132 - t13133) * np.exp((-4*1j) * (t13109 + t13107)) + (t13128 - t13131) * np.exp((4*1j) * (phi1 + t13108)) + (t13127 + t13130) * np.exp((4*1j) * (t13110 + t13108)) + (t13132 + t13133) * np.exp((4*1j) * (t13109 + t13108)) + (t13129 + t13134) * np.exp((-12*1j) * (phi1 + phi2)) + (t13129 - t13134) * np.exp((12*1j) * (phi1 - phi2)))

        if Bindx == 332:
            t13160 = np.cos(phi)
            t13159 = t13160 ** 2
            t13167 = t13159 ** 2
            t13171 = t13167 ** 2
            t13172 = t13160 * t13171
            t13181 = t13172 ** 2
            t13142 = t13160 * t13181
            t13179 = t13171 ** 2
            t13144 = t13160 * t13179
            t13166 = t13160 * t13159
            t13169 = t13166 ** 2
            t13170 = t13160 * t13169
            t13177 = t13170 ** 2
            t13146 = t13160 * t13177
            t13175 = t13169 ** 2
            t13148 = t13160 * t13175
            t13168 = t13160 * t13167
            t13173 = t13168 ** 2
            t13150 = t13160 * t13173
            t13188 = 17391 * t13142 + 330429 * t13144 - 746356 * t13146 - 215012 * t13148 + 1738386 * t13150 + 1661 * t13160 - 10505 * t13166 - 66660 * t13168 + 632060 * t13170 - 1681394 * t13172
            t13187 = -4532 * t13159 + 84722 * t13167 - 662046 * t13169 + 2722786 * t13171 - 6446638 * t13173 + 9084438 * t13175 - 7524506 * t13177 + 3383402 * t13179 - 637670 * t13181 + 44
            t13186 = -104346 * t13142 - 498542 * t13144 + 3068008 * t13146 - 5466248 * t13148 + 4479748 * t13150 + 946 * t13160 - 21626 * t13166 + 96184 * t13168 + 104104 * t13170 - 1658228 * t13172
            t13185 = -9828 * t13159 + 104330 * t13167 - 391622 * t13169 + 426426 * t13171 + 657514 * t13173 - 1930786 * t13175 + 1458798 * t13177 - 187550 * t13179 - 127534 * t13181 + 252
            t13184 = 8848 * t13159 - 130616 * t13167 + 810568 * t13169 - 2490488 * t13171 + 3879304 * t13173 - 2538536 * t13175 - 439208 * t13177 + 1410376 * t13179 - 510136 * t13181 - 112
            t13183 = 260865 * t13142 - 979693 * t13144 + 928884 * t13146 + 1058596 * t13148 - 3088690 * t13150 + 979 * t13160 - 32967 * t13166 + 316580 * t13168 - 1337468 * t13170 + 2872914 * t13172
            t13165 = 4 * phi1
            t13164 = 8 * phi1
            t13163 = 12 * phi1
            t13162 = -11 * phi2
            t13161 = 11 * phi2
            tfunc[..., c] = (-0.37e2 / 0.18612224e8*1j) * np.sqrt(0.15e2) * np.sqrt(0.29e2) * np.sqrt(0.7e1) * np.sqrt(0.19e2) * np.sqrt(0.23e2) * np.sqrt(0.71e2) * ((-347820 * t13142 + 2295612 * t13144 - 6501072 * t13146 + 10277520 * t13148 - 9871560 * t13150 + 5865000 * t13172 - 2094672 * t13170 + 413712 * t13168 - 37740 * t13166 + 1020 * t13160) * np.exp((-11*1j) * phi2) + (t13183 - t13187) * np.exp((-1*1j) * (t13165 + t13161)) + (t13184 + t13186) * np.exp((-1*1j) * (t13164 + t13161)) + (t13183 + t13187) * np.exp((1j) * (t13165 + t13162)) + (-t13184 + t13186) * np.exp((1j) * (t13164 + t13162)) + (-t13185 + t13188) * np.exp((-1*1j) * (t13163 + t13161)) + (t13185 + t13188) * np.exp((1j) * (t13163 + t13162))) * ((1 + t13160) ** (-0.1e1 / 0.2e1)) * ((1 - t13160) ** (-0.1e1 / 0.2e1))

        if Bindx == 333:
            t13216 = np.cos(phi)
            t13215 = t13216 ** 2
            t13224 = t13215 ** 2
            t13223 = t13216 * t13215
            t13226 = t13223 ** 2
            t13228 = t13224 ** 2
            t13225 = t13216 * t13224
            t13230 = t13225 ** 2
            t13232 = t13226 ** 2
            t13227 = t13216 * t13226
            t13234 = t13227 ** 2
            t13236 = t13228 ** 2
            t13229 = t13216 * t13228
            t13238 = t13229 ** 2
            t13247 = 598672 * t13215 - 4912632 * t13224 + 3820936 * t13226 + 23119304 * t13228 - 42805048 * t13230 + 12589720 * t13232 + 15688728 * t13234 - 7166456 * t13236 - 968440 * t13238 + 35216
            t13246 = 707616 * t13215 - 7511760 * t13224 + 28196784 * t13226 - 30702672 * t13228 - 47341008 * t13230 + 139016592 * t13232 - 105033456 * t13234 + 13503600 * t13236 + 9182448 * t13238 - 18144
            t13198 = t13216 * t13238
            t13200 = t13216 * t13236
            t13202 = t13216 * t13234
            t13204 = t13216 * t13232
            t13206 = t13216 * t13230
            t13245 = 99045 * t13198 + 3853951 * t13200 + 2491532 * t13202 - 30136092 * t13204 + 28097966 * t13206 - 266321 * t13216 + 556853 * t13223 + 7263300 * t13225 - 23920468 * t13227 + 11960234 * t13229
            t13244 = 5645024 * t13215 - 83333008 * t13224 + 517142384 * t13226 - 1588931344 * t13228 + 2474995952 * t13230 - 1619585968 * t13232 - 280214704 * t13234 + 899819888 * t13236 - 325466768 * t13238 - 71456
            t13243 = -2198432 * t13215 + 41097872 * t13224 - 321152496 * t13226 + 1320798736 * t13228 - 3127205488 * t13230 + 4406778288 * t13232 - 3650069456 * t13234 + 1641257552 * t13236 - 309327920 * t13238 + 21344
            t13242 = 1252152 * t13198 + 23790888 * t13200 - 53737632 * t13202 - 15480864 * t13204 + 125163792 * t13206 + 119592 * t13216 - 756360 * t13223 - 4799520 * t13225 + 45508320 * t13227 - 121060368 * t13229
            t13241 = 66572748 * t13198 + 318069796 * t13200 - 1957389104 * t13202 + 3487466224 * t13204 - 2858079224 * t13206 - 603548 * t13216 + 13797388 * t13223 - 61365392 * t13225 - 66418352 * t13227 + 1057949464 * t13229
            t13240 = 126543240 * t13198 - 475240168 * t13200 + 450593184 * t13202 + 513515296 * t13204 - 1498295440 * t13206 + 474904 * t13216 - 15991992 * t13223 + 153570080 * t13225 - 648793568 * t13227 + 1393624464 * t13229
            t13222 = 4 * phi1
            t13221 = 8 * phi1
            t13220 = 12 * phi1
            t13219 = 16 * phi1
            t13218 = -11 * phi2
            t13217 = 11 * phi2
            tfunc[..., c] = (0.37e2 / 0.595591168e9*1j) * np.sqrt(0.5e1) * np.sqrt(0.71e2) * np.sqrt(0.7e1) * np.sqrt(0.17e2) * np.sqrt(0.11e2) * ((1 + t13216) ** (-0.1e1 / 0.2e1)) * ((1 - t13216) ** (-0.1e1 / 0.2e1)) * ((-388934370 * t13198 + 2566966842 * t13200 - 7269536952 * t13202 + 11492383320 * t13204 - 11038436460 * t13206 + 6558277500 * t13229 - 2342274552 * t13227 + 462615192 * t13225 - 42201090 * t13223 + 1140570 * t13216) * np.exp((-11*1j) * phi2) + (t13240 - t13243) * np.exp((-1*1j) * (t13222 + t13217)) + (t13241 - t13244) * np.exp((-1*1j) * (t13221 + t13217)) + (t13240 + t13243) * np.exp((1j) * (t13222 + t13218)) + (t13241 + t13244) * np.exp((1j) * (t13221 + t13218)) + (t13242 + t13246) * np.exp((-1*1j) * (t13220 + t13217)) + (t13245 - t13247) * np.exp((-1*1j) * (t13219 + t13217)) + (t13242 - t13246) * np.exp((1j) * (t13220 + t13218)) + (t13245 + t13247) * np.exp((1j) * (t13219 + t13218)))

        if Bindx == 334:
            t13272 = np.cos(phi)
            t13271 = t13272 ** 2
            t13279 = t13271 ** 2
            t13283 = t13279 ** 2
            t13291 = t13283 ** 2
            t13256 = t13272 * t13291
            t13278 = t13272 * t13271
            t13281 = t13278 ** 2
            t13282 = t13272 * t13281
            t13289 = t13282 ** 2
            t13258 = t13272 * t13289
            t13287 = t13281 ** 2
            t13260 = t13272 * t13287
            t13280 = t13272 * t13279
            t13285 = t13280 ** 2
            t13262 = t13272 * t13285
            t13284 = t13272 * t13283
            t13299 = -3362260 * t13256 - 1977800 * t13258 + 27077880 * t13260 - 38402728 * t13262 - 42108 * t13272 + 619208 * t13278 - 2391224 * t13280 - 298584 * t13282 + 18777616 * t13284
            t13298 = -13449040 * t13256 + 36391520 * t13258 - 21259552 * t13260 - 27228448 * t13262 + 26384 * t13272 - 775264 * t13278 + 6686240 * t13280 - 25373920 * t13282 + 44982080 * t13284
            t13297 = 16811300 * t13256 - 78716440 * t13258 + 152290600 * t13260 - 157144504 * t13262 + 13420 * t13272 - 511720 * t13278 + 5912984 * t13280 - 31811912 * t13282 + 93156272 * t13284
            t13255 = t13284 ** 2
            t13296 = 3026034 * t13255 + 4450 * t13271 + 287320 * t13279 - 5483192 * t13281 + 31134532 * t13283 - 80683460 * t13285 + 104760760 * t13287 - 63469400 * t13289 + 10423006 * t13291 - 50
            t13295 = -504339 * t13255 - 66787 * t13271 + 1381908 * t13279 - 8741876 * t13281 + 22252802 * t13283 - 20925762 * t13285 - 4793932 * t13287 + 18961708 * t13289 - 7565085 * t13291 + 1363
            t13294 = -7565085 * t13255 + 90739 * t13271 - 1581844 * t13279 + 9880948 * t13281 - 27821090 * t13283 + 34953314 * t13285 - 7333172 * t13287 - 27016748 * t13289 + 26393741 * t13291 - 803
            t13277 = 2 * phi1
            t13276 = 4 * phi1
            t13275 = 6 * phi1
            t13274 = -5 * phi2
            t13273 = 5 * phi2
            tfunc[..., c] = (0.37e2 / 0.74448896e8) * np.sqrt(0.2e1) * np.sqrt(0.71e2) * np.sqrt(0.23e2) * np.sqrt(0.19e2) * np.sqrt(0.7e1) * np.sqrt(0.15e2) * ((10086780 * t13255 - 58503324 * t13291 + 143048880 * t13289 - 190850160 * t13287 + 150060360 * t13285 - 69961800 * t13283 + 18432624 * t13281 - 2435760 * t13279 + 123420 * t13271 - 1020) * np.exp((-10*1j) * phi2) + (t13294 - t13297) * np.exp((-2*1j) * (t13277 + t13273)) + (t13296 - t13298) * np.exp((-2*1j) * (t13276 + t13273)) + (t13295 + t13299) * np.exp((-2*1j) * (t13275 + t13273)) + (t13294 + t13297) * np.exp((2*1j) * (t13277 + t13274)) + (t13296 + t13298) * np.exp((2*1j) * (t13276 + t13274)) + (t13295 - t13299) * np.exp((2*1j) * (t13275 + t13274)))

        if Bindx == 335:
            t13326 = np.cos(phi)
            t13325 = t13326 ** 2
            t13334 = t13325 ** 2
            t13338 = t13334 ** 2
            t13339 = t13326 * t13338
            t13309 = t13339 ** 2
            t13333 = t13326 * t13325
            t13336 = t13333 ** 2
            t13335 = t13326 * t13334
            t13340 = t13335 ** 2
            t13342 = t13336 ** 2
            t13337 = t13326 * t13336
            t13344 = t13337 ** 2
            t13346 = t13338 ** 2
            t13356 = -99045 * t13309 + 200291 * t13325 - 3512796 * t13334 + 8126092 * t13336 + 3147430 * t13338 - 23290982 * t13340 + 17511156 * t13342 + 977244 * t13344 - 3088003 * t13346 + 28613
            t13310 = t13326 * t13346
            t13312 = t13326 * t13344
            t13314 = t13326 * t13342
            t13316 = t13326 * t13340
            t13355 = -880400 * t13310 - 4578080 * t13312 + 13734240 * t13314 - 915616 * t13316 + 176080 * t13326 - 1056480 * t13333 - 1901664 * t13335 + 15565472 * t13337 - 20143552 * t13339
            t13354 = -8347680 * t13310 - 4910400 * t13312 + 67227840 * t13314 - 95344704 * t13316 - 104544 * t13326 + 1537344 * t13333 - 5936832 * t13335 - 741312 * t13337 + 46620288 * t13339
            t13353 = -66572748 * t13309 - 97900 * t13325 - 6321040 * t13334 + 120630224 * t13336 - 684959704 * t13338 + 1775036120 * t13340 - 2304736720 * t13342 + 1396326800 * t13344 - 229306132 * t13346 + 1100
            t13352 = -1252152 * t13309 - 165816 * t13325 + 3430944 * t13334 - 21703968 * t13336 + 55248336 * t13338 - 51953616 * t13340 - 11902176 * t13342 + 47077344 * t13344 - 18782280 * t13346 + 3384
            t13351 = -295878880 * t13310 + 800613440 * t13312 - 467710144 * t13314 - 599025856 * t13316 + 580448 * t13326 - 17055808 * t13333 + 147097280 * t13335 - 558226240 * t13337 + 989605760 * t13339
            t13350 = -281207200 * t13310 + 1316711360 * t13312 - 2547406400 * t13314 + 2628598976 * t13316 - 224480 * t13326 + 8559680 * t13333 - 98908096 * t13335 + 532126528 * t13337 - 1558250368 * t13339
            t13349 = -126543240 * t13309 + 1517816 * t13325 - 26459936 * t13334 + 165281312 * t13336 - 465370960 * t13338 + 584673616 * t13340 - 122663968 * t13342 - 451916512 * t13344 + 441495304 * t13346 - 13432
            t13332 = 2 * phi1
            t13331 = 4 * phi1
            t13330 = 6 * phi1
            t13329 = 8 * phi1
            t13328 = -5 * phi2
            t13327 = 5 * phi2
            tfunc[..., c] = -(0.37e2 / 0.2382364672e10) * np.sqrt(0.5e1) * np.sqrt(0.71e2) * np.sqrt(0.11e2) * np.sqrt(0.7e1) * np.sqrt(0.29e2) * np.sqrt(0.17e2) * np.sqrt(0.2e1) * ((388934370 * t13309 - 2255819346 * t13346 + 5515796520 * t13344 - 7358957640 * t13342 + 5786150940 * t13340 - 2697644700 * t13338 + 710740296 * t13336 - 93920040 * t13334 + 4758930 * t13325 - 39330) * np.exp((-10*1j) * phi2) + (t13349 + t13350) * np.exp((-2*1j) * (t13332 + t13327)) + (t13351 + t13353) * np.exp((-2*1j) * (t13331 + t13327)) + (t13352 + t13354) * np.exp((-2*1j) * (t13330 + t13327)) + (t13355 + t13356) * np.exp((-2*1j) * (t13329 + t13327)) + (t13349 - t13350) * np.exp((2*1j) * (t13332 + t13328)) + (-t13351 + t13353) * np.exp((2*1j) * (t13331 + t13328)) + (t13352 - t13354) * np.exp((2*1j) * (t13330 + t13328)) + (-t13355 + t13356) * np.exp((2*1j) * (t13329 + t13328)))

        if Bindx == 336:
            t13382 = np.cos(phi)
            t13381 = t13382 ** 2
            t13388 = t13381 ** 2
            t13387 = t13382 * t13381
            t13390 = t13387 ** 2
            t13392 = t13388 ** 2
            t13389 = t13382 * t13388
            t13394 = t13389 ** 2
            t13396 = t13390 ** 2
            t13391 = t13382 * t13390
            t13398 = t13391 ** 2
            t13400 = t13392 ** 2
            t13393 = t13382 * t13392
            t13402 = t13393 ** 2
            t13409 = 126614 * t13381 - 285244 * t13388 - 5927020 * t13390 + 36759008 * t13392 - 85859488 * t13394 + 91745212 * t13396 - 35409812 * t13398 - 8207870 * t13400 + 7060746 * t13402 - 2146
            t13408 = 220968 * t13381 - 3434256 * t13388 + 19503792 * t13390 - 48926592 * t13392 + 42392064 * t13394 + 45221904 * t13396 - 128549808 * t13398 + 101817144 * t13400 - 28242984 * t13402 - 2232
            t13407 = 170478 * t13381 - 3545388 * t13388 + 29241828 * t13390 - 124207776 * t13392 + 303197664 * t13394 - 442428756 * t13396 + 381280284 * t13398 - 179010678 * t13400 + 35303730 * t13402 - 1386
            t13364 = t13382 * t13402
            t13366 = t13382 * t13400
            t13368 = t13382 * t13398
            t13370 = t13382 * t13396
            t13372 = t13382 * t13394
            t13406 = -1176791 * t13364 - 12272249 * t13366 + 49987996 * t13368 - 57988748 * t13370 + 8320390 * t13372 + 54375 * t13382 - 1146631 * t13387 + 8374388 * t13389 - 26192452 * t13391 + 32039722 * t13393
            t13405 = -17651865 * t13364 + 74137833 * t13366 - 115463964 * t13368 + 68838924 * t13370 + 13207194 * t13372 - 11319 * t13382 + 447447 * t13387 - 4814964 * t13389 + 21118020 * t13391 - 39807306 * t13393
            t13404 = 7060746 * t13364 + 9078102 * t13366 - 116575128 * t13368 + 251935992 * t13370 - 257385492 * t13372 + 16806 * t13382 - 608166 * t13387 + 7534296 * t13389 - 44983224 * t13391 + 143926068 * t13393
            t13386 = 4 * phi1
            t13385 = 8 * phi1
            t13384 = -9 * phi2
            t13383 = 9 * phi2
            tfunc[..., c] = (0.37e2 / 0.37224448e8*1j) * np.sqrt(0.2e1) * np.sqrt(0.71e2) * np.sqrt(0.23e2) * np.sqrt(0.19e2) * np.sqrt(0.15e2) * ((23535820 * t13364 - 141887372 * t13366 + 364102192 * t13368 - 516782320 * t13370 + 440950760 * t13372 - 229993000 * t13393 + 71218032 * t13391 - 12058032 * t13389 + 935340 * t13387 - 21420 * t13382) * np.exp((-9*1j) * phi2) + (t13406 - t13409) * np.exp((-3*1j) * (t13386 + 3 * phi2)) + (t13405 - t13407) * np.exp((-1*1j) * (t13386 + t13383)) + (t13404 - t13408) * np.exp((-1*1j) * (t13385 + t13383)) + (t13405 + t13407) * np.exp((1j) * (t13386 + t13384)) + (t13404 + t13408) * np.exp((1j) * (t13385 + t13384)) + (t13406 + t13409) * np.exp((3*1j) * (t13386 - 3 * phi2))) * ((1 + t13382) ** (-0.1e1 / 0.2e1)) * ((1 - t13382) ** (-0.1e1 / 0.2e1))

        if Bindx == 337:
            t13437 = np.cos(phi)
            t13436 = t13437 ** 2
            t13444 = t13436 ** 2
            t13443 = t13437 * t13436
            t13446 = t13443 ** 2
            t13448 = t13444 ** 2
            t13452 = t13446 ** 2
            t13447 = t13437 * t13446
            t13454 = t13447 ** 2
            t13456 = t13448 ** 2
            t13449 = t13437 * t13448
            t13458 = t13449 ** 2
            t13467 = 52824 * t13436 + 1443856 * t13444 - 7430576 * t13446 + 10987392 * t13448 - 13276432 * t13452 + 10247856 * t13454 - 1391032 * t13456 - 616280 * t13458 - 17608
            t13419 = t13437 * t13458
            t13421 = t13437 * t13456
            t13423 = t13437 * t13454
            t13425 = t13437 * t13452
            t13445 = t13437 * t13444
            t13450 = t13445 ** 2
            t13427 = t13437 * t13450
            t13466 = 77035 * t13419 + 1789413 * t13421 - 4058644 * t13423 - 4217116 * t13425 + 18369546 * t13427 + 81437 * t13437 - 926621 * t13443 + 1875252 * t13445 + 4005820 * t13447 - 16996122 * t13449
            t13465 = 104784 * t13436 - 236064 * t13444 - 4905120 * t13446 + 30421248 * t13448 - 71056128 * t13450 + 75927072 * t13452 - 29304672 * t13454 - 6792720 * t13456 + 5843376 * t13458 - 1776
            t13464 = 973896 * t13419 + 10156344 * t13421 - 41369376 * t13423 + 47990688 * t13425 - 6885840 * t13427 - 45000 * t13437 + 948936 * t13443 - 6930528 * t13445 + 21676512 * t13447 - 26515632 * t13449
            t13463 = 1620432 * t13436 - 25184544 * t13444 + 143027808 * t13446 - 358795008 * t13448 + 310875136 * t13450 + 331627296 * t13452 - 942698592 * t13454 + 746659056 * t13456 - 207115216 * t13458 - 16368
            t13462 = 950544 * t13436 - 19768224 * t13444 + 163045344 * t13446 - 692552448 * t13448 + 1690556672 * t13450 - 2466875488 * t13452 + 2125926432 * t13454 - 998120144 * t13456 + 196845040 * t13458 - 7728
            t13461 = 98422520 * t13419 - 413374584 * t13421 + 643799072 * t13423 - 383829152 * t13425 - 73640112 * t13427 + 63112 * t13437 - 2494856 * t13443 + 26847072 * t13445 - 117748960 * t13447 + 221955888 * t13449
            t13460 = 51778804 * t13419 + 66572748 * t13421 - 854884272 * t13423 + 1847530608 * t13425 - 1887493608 * t13427 + 123244 * t13437 - 4459884 * t13443 + 55251504 * t13445 - 329876976 * t13447 + 1055457832 * t13449
            t13442 = 4 * phi1
            t13441 = 8 * phi1
            t13440 = -9 * phi2
            t13439 = 9 * phi2
            t13438 = 16 * phi1
            tfunc[..., c] = (0.111e3 / 0.1191182336e10*1j) * np.sqrt(0.5e1) * np.sqrt(0.71e2) * np.sqrt(0.11e2) * np.sqrt(0.2e1) * np.sqrt(0.29e2) * np.sqrt(0.17e2) * ((1 + t13437) ** (-0.1e1 / 0.2e1)) * ((1 - t13437) ** (-0.1e1 / 0.2e1)) * ((-302504510 * t13419 + 1823670046 * t13421 - 4679784056 * t13423 + 6642172760 * t13425 - 5667514180 * t13427 + 2956086500 * t13449 - 915361176 * t13447 + 154981176 * t13445 - 12021870 * t13443 + 275310 * t13437) * np.exp((-9*1j) * phi2) + (t13466 - t13467) * np.exp((-1*1j) * (t13438 + t13439)) + (t13466 + t13467) * np.exp((1j) * (t13438 + t13440)) + (t13464 + t13465) * np.exp((-3*1j) * (t13442 + 3 * phi2)) + (t13461 + t13462) * np.exp((-1*1j) * (t13442 + t13439)) + (t13460 - t13463) * np.exp((-1*1j) * (t13441 + t13439)) + (t13461 - t13462) * np.exp((1j) * (t13442 + t13440)) + (t13460 + t13463) * np.exp((1j) * (t13441 + t13440)) + (t13464 - t13465) * np.exp((3*1j) * (t13442 - 3 * phi2)))

        if Bindx == 338:
            t13492 = np.cos(phi)
            t13491 = t13492 ** 2
            t13497 = t13491 ** 2
            t13501 = t13497 ** 2
            t13509 = t13501 ** 2
            t13476 = t13492 * t13509
            t13496 = t13492 * t13491
            t13499 = t13496 ** 2
            t13500 = t13492 * t13499
            t13507 = t13500 ** 2
            t13478 = t13492 * t13507
            t13505 = t13499 ** 2
            t13480 = t13492 * t13505
            t13498 = t13492 * t13497
            t13503 = t13498 ** 2
            t13482 = t13492 * t13503
            t13502 = t13492 * t13501
            t13517 = -225943872 * t13476 + 782259456 * t13478 - 1014330912 * t13480 + 558876864 * t13482 + 108448 * t13492 - 3585344 * t13496 + 29067808 * t13498 - 72465536 * t13500 - 54019680 * t13502
            t13516 = 56485968 * t13476 - 100630464 * t13478 - 116575128 * t13480 + 428350416 * t13482 - 127368 * t13492 + 3656784 * t13496 - 40553832 * t13498 + 189899424 * t13500 - 420505800 * t13502
            t13515 = -282429840 * t13476 + 1262627520 * t13478 - 2334199560 * t13480 + 2302848240 * t13482 - 132440 * t13492 + 5759600 * t13496 - 73325560 * t13498 + 422514400 * t13500 - 1303662360 * t13502
            t13475 = t13502 ** 2
            t13514 = 158866785 * t13475 - 252175 * t13491 + 4686220 * t13497 - 26464900 * t13499 + 32936750 * t13501 + 163199190 * t13503 - 641362260 * t13505 + 926203740 * t13507 - 617815275 * t13509 + 1925
            t13513 = 10591119 * t13475 + 1789503 * t13491 - 17513100 * t13497 + 56183556 * t13499 - 23861838 * t13501 - 216249462 * t13503 + 454711764 * t13505 - 342788700 * t13507 + 77163867 * t13509 - 26709
            t13512 = -63546714 * t13475 + 1236278 * t13491 - 22708840 * t13497 + 166910744 * t13499 - 620254492 * t13501 + 1252118868 * t13503 - 1349120136 * t13505 + 654507960 * t13507 - 19164882 * t13509 - 11554
            t13495 = 3 * phi1
            t13494 = -2 * phi2
            t13493 = 2 * phi2
            tfunc[..., c] = -(0.37e2 / 0.37224448e8) * np.sqrt(0.71e2) * np.sqrt(0.19e2) * np.sqrt(0.23e2) * ((7140 - 211822380 * t13475 + 1119632580 * t13509 - 2475846000 * t13507 + 2962141200 * t13505 - 2069937000 * t13503 + 850176120 * t13501 - 195893040 * t13499 + 22533840 * t13497 - 992460 * t13491) * np.exp((-8*1j) * phi2) + (t13512 + t13517) * np.exp((-8*1j) * (phi1 + phi2)) + (t13514 - t13515) * np.exp((-4*1j) * (phi1 + t13493)) + (t13513 + t13516) * np.exp((-4*1j) * (t13495 + t13493)) + (t13514 + t13515) * np.exp((4*1j) * (phi1 + t13494)) + (t13513 - t13516) * np.exp((4*1j) * (t13495 + t13494)) + (t13512 - t13517) * np.exp((8*1j) * (phi1 - phi2)))

        if Bindx == 339:
            t13544 = np.cos(phi)
            t13543 = t13544 ** 2
            t13550 = t13543 ** 2
            t13554 = t13550 ** 2
            t13562 = t13554 ** 2
            t13528 = t13544 * t13562
            t13549 = t13544 * t13543
            t13552 = t13549 ** 2
            t13553 = t13544 * t13552
            t13560 = t13553 ** 2
            t13530 = t13544 * t13560
            t13558 = t13552 ** 2
            t13532 = t13544 * t13558
            t13551 = t13544 * t13550
            t13556 = t13551 ** 2
            t13534 = t13544 * t13556
            t13555 = t13544 * t13554
            t13572 = -14790720 * t13528 - 8451840 * t13530 + 174319200 * t13532 - 302153280 * t13534 - 1056480 * t13544 + 19016640 * t13549 - 72897120 * t13551 + 54936960 * t13553 + 151076640 * t13555
            t13571 = 140241024 * t13528 - 249841152 * t13530 - 289427904 * t13532 + 1063490688 * t13534 - 316224 * t13544 + 9078912 * t13549 - 100685376 * t13551 + 471474432 * t13553 - 1044014400 * t13555
            t13527 = t13555 ** 2
            t13570 = 26295192 * t13527 + 4442904 * t13543 - 43480800 * t13550 + 139490208 * t13552 - 59243184 * t13554 - 536895216 * t13556 + 1128939552 * t13558 - 851061600 * t13560 + 191579256 * t13562 - 66312
            t13569 = -4970765184 * t13528 + 17209708032 * t13530 - 22315280064 * t13532 + 12295291008 * t13534 + 2385856 * t13544 - 78877568 * t13549 + 639491776 * t13551 - 1594241792 * t13553 - 1188432960 * t13555
            t13568 = -4724280960 * t13528 + 21120314880 * t13530 - 39044792640 * t13532 + 38520370560 * t13534 - 2215360 * t13544 + 96342400 * t13549 - 1226536640 * t13551 + 7067513600 * t13553 - 21806715840 * t13555
            t13567 = 2079945 * t13527 - 3994815 * t13543 - 7527420 * t13550 + 115024260 * t13552 - 273826410 * t13554 + 217172670 * t13556 + 25751700 * t13558 - 110534220 * t13560 + 35491125 * t13562 + 363165
            t13566 = 2657408040 * t13527 - 4218200 * t13543 + 78387680 * t13550 - 442685600 * t13552 + 550942000 * t13554 + 2729877360 * t13556 - 10728241440 * t13558 + 15492862560 * t13560 - 10334364600 * t13562 + 32200
            t13565 = 1398027708 * t13527 - 27198116 * t13543 + 499594480 * t13550 - 3672036368 * t13552 + 13645598824 * t13554 - 27546615096 * t13556 + 29680642992 * t13558 - 14399175120 * t13560 + 421627404 * t13562 + 254188
            t13548 = 2 * phi1
            t13547 = 3 * phi1
            t13546 = -2 * phi2
            t13545 = 2 * phi2
            tfunc[..., c] = (0.37e2 / 0.3573547008e10) * np.sqrt(0.71e2) * np.sqrt(0.3e1) * np.sqrt(0.11e2) * np.sqrt(0.17e2) * np.sqrt(0.29e2) * ((275310 - 8167621770 * t13527 + 43171715070 * t13562 - 95465709000 * t13560 + 114216679800 * t13558 - 79814335500 * t13556 + 32781790980 * t13554 - 7553405160 * t13552 + 868878360 * t13550 - 38268090 * t13543) * np.exp((-8*1j) * phi2) + (t13565 - t13569) * np.exp((-8*1j) * (phi1 + phi2)) + (t13567 - t13572) * np.exp((-8*1j) * (t13548 + phi2)) + (t13566 - t13568) * np.exp((-4*1j) * (phi1 + t13545)) + (t13570 + t13571) * np.exp((-4*1j) * (t13547 + t13545)) + (t13566 + t13568) * np.exp((4*1j) * (phi1 + t13546)) + (t13570 - t13571) * np.exp((4*1j) * (t13547 + t13546)) + (t13565 + t13569) * np.exp((8*1j) * (phi1 - phi2)) + (t13567 + t13572) * np.exp((8*1j) * (t13548 - phi2)))

        if Bindx == 340:
            t13598 = np.cos(phi)
            t13597 = t13598 ** 2
            t13605 = t13597 ** 2
            t13604 = t13598 * t13597
            t13607 = t13604 ** 2
            t13609 = t13605 ** 2
            t13606 = t13598 * t13605
            t13611 = t13606 ** 2
            t13613 = t13607 ** 2
            t13608 = t13598 * t13607
            t13615 = t13608 ** 2
            t13617 = t13609 ** 2
            t13610 = t13598 * t13609
            t13619 = t13610 ** 2
            t13626 = 6440 * t13597 - 10864 * t13605 - 1573936 * t13607 + 15249056 * t13609 - 59730528 * t13611 + 120971760 * t13613 - 133814352 * t13615 + 76875288 * t13617 - 17972808 * t13619 - 56
            t13580 = t13598 * t13619
            t13582 = t13598 * t13617
            t13584 = t13598 * t13615
            t13586 = t13598 * t13613
            t13588 = t13598 * t13611
            t13625 = 14442435 * t13580 - 65793315 * t13582 + 123468660 * t13584 - 122835300 * t13586 + 69389250 * t13588 - 35 * t13598 + 6195 * t13604 - 273700 * t13606 + 3692500 * t13608 - 22096690 * t13610
            t13624 = 68110 * t13597 - 1568980 * t13605 + 14044380 * t13607 - 63644840 * t13609 + 163779000 * t13611 - 250116300 * t13613 + 224660100 * t13615 - 109686990 * t13617 + 22466010 * t13619 - 490
            t13623 = 117450 * t13597 - 1584444 * t13605 + 8848596 * t13607 - 24193656 * t13609 + 32396712 * t13611 - 14676900 * t13613 - 11100852 * t13615 + 14687862 * t13617 - 4493202 * t13619 - 1566
            t13622 = 962829 * t13580 + 3438675 * t13582 - 26462964 * t13584 + 53469156 * t13586 - 50661666 * t13588 - 7917 * t13598 + 154077 * t13604 - 211932 * t13606 - 4550100 * t13608 + 23869842 * t13610
            t13621 = -5776974 * t13580 + 8711310 * t13582 + 29537544 * t13584 - 98010024 * t13586 + 119778204 * t13588 - 12002 * t13598 + 461122 * t13604 - 5267528 * t13606 + 27547240 * t13608 - 76968892 * t13610
            t13603 = 4 * phi1
            t13602 = 8 * phi1
            t13601 = -7 * phi2
            t13600 = 7 * phi2
            t13599 = 12 * phi1
            tfunc[..., c] = (-0.37e2 / 0.37224448e8*1j) * np.sqrt(0.2e1) * np.sqrt(0.71e2) * np.sqrt(0.11e2) * np.sqrt(0.19e2) * np.sqrt(0.23e2) * np.sqrt(0.13e2) * ((-33370320 * t13608 + 5055120 * t13606 - 349860 * t13604 + 7140 * t13598 - 19256580 * t13580 + 107286660 * t13582 - 253086480 * t13584 + 328338000 * t13586 - 254561400 * t13588 + 119937720 * t13610) * np.exp((-7*1j) * phi2) + (t13624 + t13625) * np.exp((-1*1j) * (t13603 + t13600)) + (t13621 + t13626) * np.exp((-1*1j) * (t13602 + t13600)) + (-t13624 + t13625) * np.exp((1j) * (t13603 + t13601)) + (t13621 - t13626) * np.exp((1j) * (t13602 + t13601)) + (t13622 - t13623) * np.exp((-1*1j) * (t13599 + t13600)) + (t13622 + t13623) * np.exp((1j) * (t13599 + t13601))) * ((1 + t13598) ** (-0.1e1 / 0.2e1)) * ((1 - t13598) ** (-0.1e1 / 0.2e1))

        if Bindx == 341:
            t13654 = np.cos(phi)
            t13653 = t13654 ** 2
            t13662 = t13653 ** 2
            t13661 = t13654 * t13653
            t13664 = t13661 ** 2
            t13666 = t13662 ** 2
            t13663 = t13654 * t13662
            t13668 = t13663 ** 2
            t13670 = t13664 ** 2
            t13665 = t13654 * t13664
            t13672 = t13665 ** 2
            t13674 = t13666 ** 2
            t13667 = t13654 * t13666
            t13676 = t13667 ** 2
            t13685 = -3207600 * t13653 + 43271712 * t13662 - 241658208 * t13664 + 660737088 * t13666 - 884765376 * t13668 + 400831200 * t13670 + 303168096 * t13672 - 401130576 * t13674 + 122710896 * t13676 + 42768
            t13684 = 5018280 * t13653 - 17431920 * t13662 - 19544880 * t13664 + 189109920 * t13666 - 360259680 * t13668 + 292116720 * t13670 - 77651280 * t13672 - 24034920 * t13674 + 12941880 * t13676 - 264120
            t13683 = 1558480 * t13653 - 2629088 * t13662 - 380892512 * t13664 + 3690271552 * t13666 - 14454787776 * t13668 + 29275165920 * t13670 - 32383073184 * t13672 + 18603819696 * t13674 - 4349419536 * t13676 - 13552
            t13682 = 12532240 * t13653 - 288692320 * t13662 + 2584165920 * t13664 - 11710650560 * t13666 + 30135336000 * t13668 - 46021399200 * t13670 + 41337458400 * t13672 - 20182406160 * t13674 + 4133745840 * t13676 - 90160
            t13636 = t13654 * t13676
            t13638 = t13654 * t13674
            t13640 = t13654 * t13672
            t13642 = t13654 * t13670
            t13644 = t13654 * t13668
            t13681 = 2657408040 * t13636 - 12105969960 * t13638 + 22718233440 * t13640 - 22601695200 * t13642 + 12767622000 * t13644 - 6440 * t13654 + 1139880 * t13661 - 50360800 * t13663 + 679420000 * t13665 - 4065790960 * t13667
            t13680 = 2079945 * t13636 + 22219095 * t13638 - 120570780 * t13640 + 186600780 * t13642 - 47475570 * t13644 - 231105 * t13654 + 11324145 * t13661 - 74878020 * t13663 + 179997780 * t13665 - 159066270 * t13667
            t13679 = 26295192 * t13636 + 93911400 * t13638 - 722712672 * t13640 + 1460261088 * t13642 - 1383587568 * t13644 - 216216 * t13654 + 4207896 * t13661 - 5787936 * t13663 - 124264800 * t13665 + 651893616 * t13667
            t13678 = 1398027708 * t13636 - 2108137020 * t13638 - 7148085648 * t13640 + 23718425808 * t13642 - 28986325368 * t13644 + 2904484 * t13654 - 111591524 * t13661 + 1274741776 * t13663 - 6666432080 * t13665 + 18626471864 * t13667
            t13660 = 4 * phi1
            t13659 = 8 * phi1
            t13658 = -7 * phi2
            t13657 = 7 * phi2
            t13656 = 12 * phi1
            t13655 = 16 * phi1
            tfunc[..., c] = (0.37e2 / 0.3573547008e10*1j) * np.sqrt(0.71e2) * np.sqrt(0.2e1) * np.sqrt(0.29e2) * np.sqrt(0.3e1) * np.sqrt(0.17e2) * np.sqrt(0.13e2) * ((1 + t13654) ** (-0.1e1 / 0.2e1)) * ((1 - t13654) ** (-0.1e1 / 0.2e1)) * ((-8167621770 * t13636 + 45505321290 * t13638 - 107345886120 * t13640 + 139263597000 * t13642 - 107971469100 * t13644 + 50871231180 * t13667 - 14153923080 * t13665 + 2144114280 * t13663 - 148392090 * t13661 + 3028410 * t13654) * np.exp((-7*1j) * phi2) + (t13681 + t13682) * np.exp((-1*1j) * (t13660 + t13657)) + (t13678 - t13683) * np.exp((-1*1j) * (t13659 + t13657)) + (t13681 - t13682) * np.exp((1j) * (t13660 + t13658)) + (t13678 + t13683) * np.exp((1j) * (t13659 + t13658)) + (t13679 + t13685) * np.exp((-1*1j) * (t13656 + t13657)) + (t13680 + t13684) * np.exp((-1*1j) * (t13655 + t13657)) + (t13679 - t13685) * np.exp((1j) * (t13656 + t13658)) + (t13680 - t13684) * np.exp((1j) * (t13655 + t13658)))

        if Bindx == 342:
            t13710 = np.cos(phi)
            t13709 = t13710 ** 2
            t13716 = t13709 ** 2
            t13720 = t13716 ** 2
            t13728 = t13720 ** 2
            t13694 = t13710 * t13728
            t13715 = t13710 * t13709
            t13718 = t13715 ** 2
            t13719 = t13710 * t13718
            t13726 = t13719 ** 2
            t13696 = t13710 * t13726
            t13724 = t13718 ** 2
            t13698 = t13710 * t13724
            t13717 = t13710 * t13716
            t13722 = t13717 ** 2
            t13700 = t13710 * t13722
            t13721 = t13710 * t13720
            t13736 = -6418860 * t13694 + 23266120 * t13696 - 28372440 * t13698 + 7151400 * t13700 + 22620 * t13710 - 585800 * t13715 + 4179480 * t13717 - 12162600 * t13719 + 12920080 * t13721
            t13735 = -25675440 * t13694 + 103996320 * t13696 - 172176480 * t13698 + 150155040 * t13700 - 5520 * t13710 + 234080 * t13715 - 3197600 * t13717 + 20886240 * t13719 - 74216640 * t13721
            t13734 = -32094300 * t13694 + 138194280 * t13696 - 245427000 * t13698 + 231639240 * t13700 - 9268 * t13710 + 443800 * t13715 - 6146952 * t13717 + 38047800 * t13719 - 124647600 * t13721
            t13693 = t13721 ** 2
            t13733 = -1604715 * t13693 + 58725 * t13709 - 1045740 * t13716 + 8001100 * t13718 - 29619150 * t13720 + 57319950 * t13722 - 58178060 * t13724 + 27131820 * t13726 - 2063205 * t13728 - 725
            t13732 = -24070725 * t13693 - 19285 * t13709 + 494060 * t13716 - 5174988 * t13718 + 28255150 * t13720 - 88401390 * t13722 + 163394700 * t13724 - 175574700 * t13726 + 101097045 * t13728 + 133
            t13731 = 9628290 * t13693 - 100430 * t13709 + 1937880 * t13716 - 13940920 * t13718 + 47981860 * t13720 - 84968100 * t13722 + 71204280 * t13724 - 11111640 * t13726 - 20632050 * t13728 + 830
            t13714 = 2 * phi1
            t13713 = 4 * phi1
            t13712 = -3 * phi2
            t13711 = 3 * phi2
            tfunc[..., c] = (0.37e2 / 0.74448896e8) * np.sqrt(0.2e1) * np.sqrt(0.71e2) * np.sqrt(0.23e2) * np.sqrt(0.19e2) * np.sqrt(0.11e2) * np.sqrt(0.39e2) * ((32094300 * t13693 + 72828 * t13709 - 1822128 * t13716 + 17457776 * t13718 - 83425800 * t13720 + 223190280 * t13722 - 349872240 * t13724 + 319109040 * t13726 - 156803580 * t13728 - 476) * np.exp((-6*1j) * phi2) + (t13733 + t13736) * np.exp((-6*1j) * (t13714 + phi2)) + (t13732 + t13734) * np.exp((-2*1j) * (t13714 + t13711)) + (t13731 - t13735) * np.exp((-2*1j) * (t13713 + t13711)) + (t13732 - t13734) * np.exp((2*1j) * (t13714 + t13712)) + (t13731 + t13735) * np.exp((2*1j) * (t13713 + t13712)) + (t13733 - t13736) * np.exp((6*1j) * (t13714 - phi2)))

        if Bindx == 343:
            t13763 = np.cos(phi)
            t13762 = t13763 ** 2
            t13770 = t13762 ** 2
            t13774 = t13770 ** 2
            t13782 = t13774 ** 2
            t13747 = t13763 * t13782
            t13769 = t13763 * t13762
            t13772 = t13769 ** 2
            t13773 = t13763 * t13772
            t13780 = t13773 ** 2
            t13749 = t13763 * t13780
            t13778 = t13772 ** 2
            t13751 = t13763 * t13778
            t13771 = t13763 * t13770
            t13776 = t13771 ** 2
            t13753 = t13763 * t13776
            t13775 = t13763 * t13774
            t13792 = -18488400 * t13747 + 55993440 * t13749 + 5282400 * t13751 - 218691360 * t13753 - 528240 * t13763 - 5282400 * t13769 + 70784160 * t13771 - 237708000 * t13773 + 348638400 * t13775
            t13791 = -175301280 * t13747 + 635405760 * t13749 - 774861120 * t13751 + 195307200 * t13753 + 617760 * t13763 - 15998400 * t13769 + 114143040 * t13771 - 332164800 * t13773 + 352851840 * t13775
            t13746 = t13775 ** 2
            t13790 = -43825320 * t13746 + 1603800 * t13762 - 28559520 * t13770 + 218512800 * t13772 - 808909200 * t13774 + 1565427600 * t13776 - 1588862880 * t13778 + 740979360 * t13780 - 56346840 * t13782 - 19800
            t13789 = -6213456480 * t13747 + 25167109440 * t13749 - 41666708160 * t13751 + 36337519680 * t13753 - 1335840 * t13763 + 56647360 * t13769 - 773819200 * t13771 + 5054470080 * t13773 - 17960426880 * t13775
            t13788 = -5905351200 * t13747 + 25427747520 * t13749 - 45158568000 * t13751 + 42621620160 * t13753 - 1705312 * t13763 + 81659200 * t13769 - 1131039168 * t13771 + 7000795200 * t13773 - 22935158400 * t13775
            t13787 = -3466575 * t13746 - 7428375 * t13762 + 42919500 * t13770 - 75142140 * t13772 - 25421550 * t13774 + 234604590 * t13776 - 292512900 * t13778 + 147246900 * t13780 - 21096585 * t13782 + 297135
            t13786 = -4429013400 * t13746 - 3548440 * t13762 + 90907040 * t13770 - 952197792 * t13772 + 5198947600 * t13774 - 16265855760 * t13776 + 30064624800 * t13778 - 32305744800 * t13780 + 18601856280 * t13782 + 24472
            t13785 = -2330046180 * t13746 + 24304060 * t13762 - 468966960 * t13770 + 3373702640 * t13772 - 11611610120 * t13774 + 20562280200 * t13776 - 17231435760 * t13778 + 2689016880 * t13780 + 4992956100 * t13782 - 200860
            t13768 = 2 * phi1
            t13767 = 4 * phi1
            t13766 = 8 * phi1
            t13765 = -3 * phi2
            t13764 = 3 * phi2
            tfunc[..., c] = -(0.37e2 / 0.2382364672e10) * np.sqrt(0.71e2) * np.sqrt(0.2e1) * np.sqrt(0.29e2) * np.sqrt(0.17e2) * np.sqrt(0.13e2) * ((-35384807700 * t13774 + 7404664344 * t13772 - 772850232 * t13770 + 30889782 * t13762 + 13612702950 * t13746 - 66507777270 * t13782 + 135349160760 * t13780 - 148397281560 * t13778 + 94665500820 * t13776 - 201894) * np.exp((-6*1j) * phi2) + (t13790 + t13791) * np.exp((-6*1j) * (t13768 + phi2)) + (t13786 + t13788) * np.exp((-2*1j) * (t13768 + t13764)) + (t13785 + t13789) * np.exp((-2*1j) * (t13767 + t13764)) + (t13787 + t13792) * np.exp((-2*1j) * (t13766 + t13764)) + (t13786 - t13788) * np.exp((2*1j) * (t13768 + t13765)) + (t13785 - t13789) * np.exp((2*1j) * (t13767 + t13765)) + (t13787 - t13792) * np.exp((2*1j) * (t13766 + t13765)) + (t13790 - t13791) * np.exp((6*1j) * (t13768 - phi2)))

        if Bindx == 344:
            t13818 = np.cos(phi)
            t13817 = t13818 ** 2
            t13825 = t13817 ** 2
            t13824 = t13818 * t13817
            t13827 = t13824 ** 2
            t13829 = t13825 ** 2
            t13826 = t13818 * t13825
            t13831 = t13826 ** 2
            t13833 = t13827 ** 2
            t13828 = t13818 * t13827
            t13835 = t13828 ** 2
            t13837 = t13829 ** 2
            t13830 = t13818 * t13829
            t13839 = t13830 ** 2
            t13846 = 151380 * t13817 - 1702590 * t13825 + 4387410 * t13827 + 10129410 * t13829 - 71587950 * t13831 + 148569030 * t13833 - 151706250 * t13835 + 77808450 * t13837 - 16047150 * t13839 - 1740
            t13845 = 164892 * t13817 - 4094090 * t13825 + 39156390 * t13827 - 187928650 * t13829 + 508017510 * t13831 - 809354910 * t13833 + 754216050 * t13835 - 380411850 * t13837 + 80235750 * t13839 - 1092
            t13844 = 193040 * t13817 - 4199720 * t13825 + 36613080 * t13827 - 165415720 * t13829 + 430587480 * t13831 - 670070520 * t13833 + 615023880 * t13835 - 306918600 * t13837 + 64188600 * t13839 - 1520
            t13800 = t13818 * t13839
            t13802 = t13818 * t13837
            t13804 = t13818 * t13835
            t13806 = t13818 * t13833
            t13808 = t13818 * t13831
            t13843 = 28884870 * t13800 - 104077230 * t13802 + 117481320 * t13804 + 7478520 * t13806 - 126587580 * t13808 + 20210 * t13818 - 835290 * t13824 + 9680440 * t13826 - 48007000 * t13828 + 115961740 * t13830
            t13842 = -4814145 * t13800 + 7565085 * t13802 + 37056780 * t13804 - 135822660 * t13806 + 191179890 * t13808 - 49155 * t13818 + 1460295 * t13824 - 13577220 * t13826 + 59864700 * t13828 - 142863570 * t13830
            t13841 = -72212175 * t13800 + 348223155 * t13802 - 710227980 * t13804 + 797607300 * t13806 - 537714450 * t13808 + 9555 * t13818 - 488215 * t13824 + 7572292 * t13826 - 55041532 * t13828 + 222272050 * t13830
            t13823 = 4 * phi1
            t13822 = 8 * phi1
            t13821 = -5 * phi2
            t13820 = 5 * phi2
            t13819 = 12 * phi1
            tfunc[..., c] = (0.37e2 / 0.18612224e8*1j) * np.sqrt(0.71e2) * np.sqrt(0.11e2) * np.sqrt(0.23e2) * np.sqrt(0.19e2) * ((96282900 * t13800 - 503422020 * t13802 + 1111379760 * t13804 - 1345653360 * t13806 + 971188920 * t13808 - 424983000 * t13830 + 109612464 * t13828 - 15370992 * t13826 + 983892 * t13824 - 18564 * t13818) * np.exp((-5*1j) * phi2) + (t13841 - t13845) * np.exp((-1*1j) * (t13823 + t13820)) + (t13843 + t13844) * np.exp((-1*1j) * (t13822 + t13820)) + (t13841 + t13845) * np.exp((1j) * (t13823 + t13821)) + (t13843 - t13844) * np.exp((1j) * (t13822 + t13821)) + (t13842 + t13846) * np.exp((-1*1j) * (t13819 + t13820)) + (t13842 - t13846) * np.exp((1j) * (t13819 + t13821))) * ((1 + t13818) ** (-0.1e1 / 0.2e1)) * ((1 - t13818) ** (-0.1e1 / 0.2e1))

        if Bindx == 345:
            t13874 = np.cos(phi)
            t13873 = t13874 ** 2
            t13882 = t13873 ** 2
            t13881 = t13874 * t13873
            t13884 = t13881 ** 2
            t13886 = t13882 ** 2
            t13883 = t13874 * t13882
            t13888 = t13883 ** 2
            t13890 = t13884 ** 2
            t13885 = t13874 * t13884
            t13892 = t13885 ** 2
            t13894 = t13886 ** 2
            t13887 = t13874 * t13886
            t13896 = t13887 ** 2
            t13905 = -4134240 * t13873 + 46498320 * t13882 - 119821680 * t13884 - 276637680 * t13886 + 1955091600 * t13888 - 4057471440 * t13890 + 4143150000 * t13892 - 2124975600 * t13894 + 438253200 * t13896 + 47520
            t13904 = 16375440 * t13873 - 136021800 * t13882 + 455607000 * t13884 - 727650600 * t13886 + 485188440 * t13888 + 111722760 * t13890 - 386935800 * t13892 + 228463800 * t13894 - 46221000 * t13896 - 528240
            t13856 = t13874 * t13896
            t13858 = t13874 * t13894
            t13860 = t13874 * t13892
            t13862 = t13874 * t13890
            t13864 = t13874 * t13888
            t13903 = 10399725 * t13856 + 13239015 * t13858 - 298323540 * t13860 + 926400900 * t13862 - 1345361250 * t13864 - 3136425 * t13874 + 18323325 * t13881 + 31562340 * t13883 - 388124340 * t13885 + 1035020250 * t13887
            t13902 = 30340128 * t13873 - 753312560 * t13882 + 7204775760 * t13884 - 34578871600 * t13886 + 93475221840 * t13888 - 148921303440 * t13890 + 138775753200 * t13892 - 69995780400 * t13894 + 14763378000 * t13896 - 200928
            t13901 = 46715680 * t13873 - 1016332240 * t13882 + 8860365360 * t13884 - 40030604240 * t13886 + 104202170160 * t13888 - 162157065840 * t13890 + 148835778960 * t13892 - 74274301200 * t13894 + 15533641200 * t13896 - 367840
            t13900 = 131475960 * t13856 - 206605080 * t13858 - 1012033440 * t13860 + 3709363680 * t13862 - 5221188720 * t13864 + 1342440 * t13874 - 39881160 * t13881 + 370798560 * t13883 - 1634925600 * t13885 + 3901653360 * t13887
            t13899 = 6990138540 * t13856 - 25186689660 * t13858 + 28430479440 * t13860 + 1809801840 * t13862 - 30634194360 * t13864 + 4890820 * t13874 - 202140180 * t13881 + 2342666480 * t13883 - 11617694000 * t13885 + 28062741080 * t13887
            t13898 = 13287040200 * t13856 - 64073060520 * t13858 + 130681948320 * t13860 - 146759743200 * t13862 + 98939458800 * t13864 - 1758120 * t13874 + 89831560 * t13881 - 1393301728 * t13883 + 10127641888 * t13885 - 40898057200 * t13887
            t13880 = 4 * phi1
            t13879 = 8 * phi1
            t13878 = -5 * phi2
            t13877 = 5 * phi2
            t13876 = 12 * phi1
            t13875 = 16 * phi1
            tfunc[..., c] = (0.37e2 / 0.1786773504e10*1j) * np.sqrt(0.71e2) * np.sqrt(0.3e1) * np.sqrt(0.17e2) * np.sqrt(0.29e2) * ((1 + t13874) ** (-0.1e1 / 0.2e1)) * ((1 - t13874) ** (-0.1e1 / 0.2e1)) * ((-40838108850 * t13856 + 213524969130 * t13858 - 471388456440 * t13860 + 570754914840 * t13862 - 411926923980 * t13864 + 180255289500 * t13887 - 46491804216 * t13885 + 6519561048 * t13883 - 417314898 * t13881 + 7873866 * t13874) * np.exp((-5*1j) * phi2) + (t13898 + t13902) * np.exp((-1*1j) * (t13880 + t13877)) + (t13899 + t13901) * np.exp((-1*1j) * (t13879 + t13877)) + (t13898 - t13902) * np.exp((1j) * (t13880 + t13878)) + (t13899 - t13901) * np.exp((1j) * (t13879 + t13878)) + (t13900 + t13905) * np.exp((-1*1j) * (t13876 + t13877)) + (t13903 - t13904) * np.exp((-1*1j) * (t13875 + t13877)) + (t13900 - t13905) * np.exp((1j) * (t13876 + t13878)) + (t13903 + t13904) * np.exp((1j) * (t13875 + t13878)))

        if Bindx == 346:
            t13930 = np.cos(phi)
            t13929 = t13930 ** 2
            t13934 = t13929 ** 2
            t13938 = t13934 ** 2
            t13946 = t13938 ** 2
            t13914 = t13930 * t13946
            t13933 = t13930 * t13929
            t13936 = t13933 ** 2
            t13937 = t13930 * t13936
            t13944 = t13937 ** 2
            t13916 = t13930 * t13944
            t13942 = t13936 ** 2
            t13918 = t13930 * t13942
            t13935 = t13930 * t13934
            t13940 = t13935 ** 2
            t13920 = t13930 * t13940
            t13939 = t13930 * t13938
            t13954 = -42181080 * t13914 + 208424160 * t13916 - 423051420 * t13918 + 452786280 * t13920 - 40020 * t13930 + 1360680 * t13933 - 16208100 * t13935 + 91725840 * t13937 - 272816340 * t13939
            t13953 = -210905400 * t13914 + 883321440 * t13916 - 1519759500 * t13918 + 1382851080 * t13920 - 42276 * t13930 + 2159560 * t13933 - 31754996 * t13935 + 207506000 * t13937 - 713384100 * t13939
            t13952 = -168724320 * t13914 + 754296960 * t13916 - 1394456880 * t13918 + 1375727520 * t13920 - 79120 * t13930 + 3440800 * t13933 - 43804880 * t13935 + 252411200 * t13937 - 778811280 * t13939
            t13913 = t13939 ** 2
            t13951 = 94907430 * t13913 - 150650 * t13929 + 2799560 * t13934 - 15810200 * t13936 + 19676500 * t13938 + 97495620 * t13940 - 383151480 * t13942 + 553316520 * t13944 - 369084450 * t13946 + 1150
            t13950 = -15817905 * t13913 + 910455 * t13929 - 13166580 * t13934 + 71675820 * t13936 - 188714310 * t13938 + 254307090 * t13940 - 152916420 * t13942 - 3721860 * t13944 + 47453715 * t13946 - 10005
            t13949 = -237268575 * t13913 - 308295 * t13929 + 7928180 * t13934 - 79224236 * t13936 + 400435750 * t13938 - 1147630770 * t13940 + 1948373700 * t13942 - 1941570300 * t13944 + 1049254365 * t13946 + 1989
            t13932 = 2 * phi1
            t13931 = 3 * phi1
            tfunc[..., c] = (0.37e2 / 0.37224448e8) * np.sqrt(0.2e1) * np.sqrt(0.71e2) * np.sqrt(0.7e1) * np.sqrt(0.11e2) * np.sqrt(0.19e2) * ((316358100 * t13913 - 1455247260 * t13946 + 2783951280 * t13944 - 2865592080 * t13942 + 1714597560 * t13940 - 600810600 * t13938 + 117844272 * t13936 - 11530896 * t13934 + 432276 * t13929 - 2652) * np.exp((-4*1j) * phi2) + (t13949 + t13953) * np.exp((-4*1j) * (phi1 + phi2)) + (t13951 - t13952) * np.exp((-4*1j) * (t13932 + phi2)) + (t13950 + t13954) * np.exp((-4*1j) * (t13931 + phi2)) + (t13949 - t13953) * np.exp((4*1j) * (phi1 - phi2)) + (t13951 + t13952) * np.exp((4*1j) * (t13932 - phi2)) + (t13950 - t13954) * np.exp((4*1j) * (t13931 - phi2)))

        if Bindx == 347:
            t13981 = np.cos(phi)
            t13980 = t13981 ** 2
            t13986 = t13980 ** 2
            t13990 = t13986 ** 2
            t13998 = t13990 ** 2
            t13965 = t13981 * t13998
            t13985 = t13981 * t13980
            t13988 = t13985 ** 2
            t13989 = t13981 * t13988
            t13996 = t13989 ** 2
            t13967 = t13981 * t13996
            t13994 = t13988 ** 2
            t13969 = t13981 * t13994
            t13987 = t13981 * t13986
            t13992 = t13987 ** 2
            t13971 = t13981 * t13992
            t13991 = t13981 * t13990
            t14008 = -50086080 * t13965 + 247484160 * t13967 - 502333920 * t13969 + 537641280 * t13971 - 47520 * t13981 + 1615680 * t13985 - 19245600 * t13987 + 108915840 * t13989 - 323943840 * t13991
            t14007 = -5282400 * t13965 + 29581440 * t13967 - 66030000 * t13969 + 70784160 * t13971 + 528240 * t13981 - 5282400 * t13985 + 15318960 * t13987 - 10564800 * t13989 - 29053200 * t13991
            t13964 = t13991 ** 2
            t14006 = 1485675 * t13964 - 1155525 * t13980 + 12545700 * t13986 - 51371340 * t13988 + 105317850 * t13990 - 118391790 * t13992 + 70652100 * t13994 - 16507500 * t13996 - 2608185 * t13998 + 33015
            t14005 = 18782280 * t13964 - 1081080 * t13980 + 15634080 * t13986 - 85108320 * t13988 + 224080560 * t13990 - 301965840 * t13992 + 181573920 * t13994 + 4419360 * t13996 - 56346840 * t13998 + 11880
            t14004 = 1687243200 * t13965 - 7066571520 * t13967 + 12158076000 * t13969 - 11062808640 * t13971 + 338208 * t13981 - 17276480 * t13985 + 254039968 * t13987 - 1660048000 * t13989 + 5707072800 * t13991
            t14003 = 1775273280 * t13965 - 7936515840 * t13967 + 14672111520 * t13969 - 14475046080 * t13971 + 832480 * t13981 - 36203200 * t13985 + 460903520 * t13987 - 2655804800 * t13989 + 8194449120 * t13991
            t14002 = 998591220 * t13964 - 1585100 * t13980 + 29456240 * t13986 - 166350800 * t13988 + 207031000 * t13990 + 1025823480 * t13992 - 4031419920 * t13994 + 5821852080 * t13996 - 3883410300 * t13998 + 12100
            t14001 = 1898148600 * t13964 + 2466360 * t13980 - 63425440 * t13986 + 633793888 * t13988 - 3203486000 * t13990 + 9181046160 * t13992 - 15586989600 * t13994 + 15532562400 * t13996 - 8394034920 * t13998 - 15912
            t13984 = 2 * phi1
            t13983 = 3 * phi1
            t13982 = 4 * phi1
            tfunc[..., c] = (0.37e2 / 0.3573547008e10) * np.sqrt(0.71e2) * np.sqrt(0.3e1) * np.sqrt(0.7e1) * np.sqrt(0.2e1) * np.sqrt(0.17e2) * np.sqrt(0.23e2) * np.sqrt(0.29e2) * ((48906 - 5834015550 * t13964 + 26836471530 * t13998 - 51339336840 * t13996 + 52844889240 * t13994 - 31619196180 * t13992 + 11079654300 * t13990 - 2173187016 * t13988 + 212643288 * t13986 - 7971678 * t13980) * np.exp((-4*1j) * phi2) + (t14001 + t14004) * np.exp((-4*1j) * (phi1 + phi2)) + (t14002 + t14003) * np.exp((-4*1j) * (t13984 + phi2)) + (t14005 - t14008) * np.exp((-4*1j) * (t13983 + phi2)) + (t14006 - t14007) * np.exp((-4*1j) * (t13982 + phi2)) + (t14001 - t14004) * np.exp((4*1j) * (phi1 - phi2)) + (t14002 - t14003) * np.exp((4*1j) * (t13984 - phi2)) + (t14005 + t14008) * np.exp((4*1j) * (t13983 - phi2)) + (t14006 + t14007) * np.exp((4*1j) * (t13982 - phi2)))

        if Bindx == 348:
            t14034 = np.cos(phi)
            t14033 = t14034 ** 2
            t14040 = t14033 ** 2
            t14039 = t14034 * t14033
            t14042 = t14039 ** 2
            t14044 = t14040 ** 2
            t14041 = t14034 * t14040
            t14046 = t14041 ** 2
            t14048 = t14042 ** 2
            t14043 = t14034 * t14042
            t14050 = t14043 ** 2
            t14052 = t14044 ** 2
            t14045 = t14034 * t14044
            t14054 = t14045 ** 2
            t14061 = 506920 * t14033 - 8285474 * t14040 + 54935454 * t14042 - 190963434 * t14044 + 385964886 * t14046 - 470881990 * t14048 + 342452474 * t14050 - 136923094 * t14052 + 23199594 * t14054 - 5336
            t14060 = 397440 * t14033 - 8850216 * t14040 + 76253464 * t14042 - 331441224 * t14044 + 815919480 * t14046 - 1189954680 * t14048 + 1019789640 * t14050 - 474909336 * t14052 + 92798376 * t14054 - 2944
            t14059 = 181896 * t14033 - 4739306 * t14040 + 47381334 * t14042 - 236709330 * t14044 + 663161070 * t14046 - 1090204830 * t14048 + 1043981730 * t14050 - 539049390 * t14052 + 115997970 * t14054 - 1144
            t14016 = t14034 * t14054
            t14018 = t14034 * t14052
            t14020 = t14034 * t14050
            t14022 = t14034 * t14048
            t14024 = t14034 * t14046
            t14058 = 11599797 * t14016 - 57998985 * t14018 + 110911428 * t14020 - 89402012 * t14022 + 1271302 * t14024 + 46023 * t14034 - 1393363 * t14039 + 11363012 * t14041 - 37525420 * t14043 + 51128218 * t14045
            t14057 = -69598782 * t14016 + 347993910 * t14018 - 729980808 * t14020 + 834417000 * t14022 - 565619220 * t14024 + 10902 * t14034 - 514142 * t14039 + 7772712 * t14041 - 56792520 * t14043 + 232310948 * t14045
            t14056 = 173996955 * t14016 - 869984775 * t14018 + 1842320700 * t14020 - 2147833380 * t14022 + 1499290650 * t14024 - 26455 * t14034 + 1406691 * t14039 - 22193028 * t14041 + 160858412 * t14043 - 637835770 * t14045
            t14038 = 4 * phi1
            t14037 = 8 * phi1
            t14036 = -3 * phi2
            t14035 = 3 * phi2
            tfunc[..., c] = (-0.37e2 / 0.18612224e8*1j) * np.sqrt(0.71e2) * np.sqrt(0.7e1) * np.sqrt(0.19e2) * np.sqrt(0.15e2) * ((1 + t14034) ** (-0.1e1 / 0.2e1)) * ((1 - t14034) ** (-0.1e1 / 0.2e1)) * ((-231995940 * t14016 + 1159979700 * t14018 - 2446502640 * t14020 + 2827493040 * t14022 - 1946382360 * t14024 + 811856760 * t14045 - 199497584 * t14043 + 26643760 * t14041 - 1623908 * t14039 + 29172 * t14034) * np.exp((-3*1j) * phi2) + (t14058 + t14061) * np.exp((-3*1j) * (t14038 + phi2)) + (t14056 + t14059) * np.exp((-1*1j) * (t14038 + t14035)) + (t14057 - t14060) * np.exp((-1*1j) * (t14037 + t14035)) + (t14056 - t14059) * np.exp((1j) * (t14038 + t14036)) + (t14057 + t14060) * np.exp((1j) * (t14037 + t14036)) + (t14058 - t14061) * np.exp((3*1j) * (t14038 - phi2)))

        if Bindx == 349:
            t14089 = np.cos(phi)
            t14088 = t14089 ** 2
            t14096 = t14088 ** 2
            t14095 = t14089 * t14088
            t14098 = t14095 ** 2
            t14100 = t14096 ** 2
            t14097 = t14089 * t14096
            t14102 = t14097 ** 2
            t14104 = t14098 ** 2
            t14099 = t14089 * t14098
            t14106 = t14099 ** 2
            t14108 = t14100 ** 2
            t14101 = t14089 * t14100
            t14110 = t14101 ** 2
            t14119 = -9244200 * t14104 + 9244200 * t14102 + 5546520 * t14106 - 5546520 * t14100 - 1848840 * t14108 + 1848840 * t14098 + 264120 * t14110 - 264120 * t14096
            t14071 = t14089 * t14110
            t14073 = t14089 * t14108
            t14075 = t14089 * t14106
            t14077 = t14089 * t14104
            t14079 = t14089 * t14102
            t14118 = 99045 * t14071 - 495225 * t14073 + 660300 * t14075 + 924420 * t14077 - 4159890 * t14079 + 33015 * t14089 - 429195 * t14095 + 1980900 * t14097 - 4622100 * t14099 + 6008730 * t14101
            t14117 = 54720 * t14088 - 894384 * t14096 + 5930064 * t14098 - 20613744 * t14100 + 41663376 * t14102 - 50829840 * t14104 + 36966384 * t14106 - 14780304 * t14108 + 2504304 * t14110 - 576
            t14116 = 1252152 * t14071 - 6260760 * t14073 + 11972448 * t14075 - 9650592 * t14077 + 137232 * t14079 + 4968 * t14089 - 150408 * t14095 + 1226592 * t14097 - 4050720 * t14099 + 5519088 * t14101
            t14115 = 132288 * t14088 - 3446768 * t14096 + 34459152 * t14098 - 172152240 * t14100 + 482298960 * t14102 - 792876240 * t14104 + 759259440 * t14106 - 392035920 * t14108 + 84362160 * t14110 - 832
            t14114 = 380160 * t14088 - 8465424 * t14096 + 72938096 * t14098 - 317030736 * t14100 + 780444720 * t14102 - 1138217520 * t14104 + 975450960 * t14106 - 454261104 * t14108 + 88763664 * t14110 - 2816
            t14113 = 66572748 * t14071 - 332863740 * t14073 + 698242512 * t14075 - 798138000 * t14077 + 541027080 * t14079 - 10428 * t14089 + 491788 * t14095 - 7434768 * t14097 + 54323280 * t14099 - 222210472 * t14101
            t14112 = 126543240 * t14071 - 632716200 * t14073 + 1339869600 * t14075 - 1562060640 * t14077 + 1090393200 * t14079 - 19240 * t14089 + 1023048 * t14095 - 16140384 * t14097 + 116987936 * t14099 - 463880560 * t14101
            t14094 = 4 * phi1
            t14093 = 8 * phi1
            t14092 = -3 * phi2
            t14091 = 3 * phi2
            t14090 = 16 * phi1
            tfunc[..., c] = (0.37e2 / 0.595591168e9*1j) * np.sqrt(0.5e1) * np.sqrt(0.71e2) * np.sqrt(0.11e2) * np.sqrt(0.17e2) * np.sqrt(0.7e1) * np.sqrt(0.23e2) * np.sqrt(0.29e2) * ((1 + t14089) ** (-0.1e1 / 0.2e1)) * ((1 - t14089) ** (-0.1e1 / 0.2e1)) * ((-388934370 * t14071 + 1944671850 * t14073 - 4101489720 * t14075 + 4740208920 * t14077 - 3263052780 * t14079 + 1361053980 * t14101 - 334451832 * t14099 + 44667480 * t14097 - 2722434 * t14095 + 48906 * t14089) * np.exp((-3*1j) * phi2) + (t14118 + t14119) * np.exp((-1*1j) * (t14090 + t14091)) + (t14118 - t14119) * np.exp((1j) * (t14090 + t14092)) + (t14116 + t14117) * np.exp((-3*1j) * (t14094 + phi2)) + (t14112 + t14115) * np.exp((-1*1j) * (t14094 + t14091)) + (t14113 + t14114) * np.exp((-1*1j) * (t14093 + t14091)) + (t14112 - t14115) * np.exp((1j) * (t14094 + t14092)) + (t14113 - t14114) * np.exp((1j) * (t14093 + t14092)) + (t14116 - t14117) * np.exp((3*1j) * (t14094 - phi2)))

        if Bindx == 350:
            t14144 = np.cos(phi)
            t14143 = t14144 ** 2
            t14149 = t14143 ** 2
            t14153 = t14149 ** 2
            t14161 = t14153 ** 2
            t14128 = t14144 * t14161
            t14148 = t14144 * t14143
            t14151 = t14148 ** 2
            t14152 = t14144 * t14151
            t14159 = t14152 ** 2
            t14130 = t14144 * t14159
            t14157 = t14151 ** 2
            t14132 = t14144 * t14157
            t14150 = t14144 * t14149
            t14155 = t14150 ** 2
            t14134 = t14144 * t14155
            t14154 = t14144 * t14153
            t14169 = 324794316 * t14128 - 1861426248 * t14130 + 4477645704 * t14132 - 5836212648 * t14134 + 1576788 * t14144 - 50313144 * t14148 + 465368568 * t14150 - 1952127576 * t14152 + 4430694240 * t14154
            t14168 = 1623971580 * t14128 - 6686941800 * t14130 + 11272273320 * t14132 - 10015005000 * t14134 + 260260 * t14144 - 13797784 * t14148 + 210153944 * t14150 - 1419137720 * t14152 + 5028223200 * t14154
            t14167 = -1299177264 * t14128 + 6135610272 * t14130 - 11939726880 * t14132 + 12321357600 * t14134 - 713552 * t14144 + 32163936 * t14148 - 416276448 * t14150 + 2390940896 * t14152 - 7224178560 * t14154
            t14127 = t14154 ** 2
            t14166 = -243595737 * t14127 - 1746873 * t14143 + 33896940 * t14149 - 283109484 * t14151 + 1210568982 * t14153 - 2872583574 * t14155 + 3956753388 * t14157 - 3157377900 * t14159 + 1357176249 * t14161 + 18009
            t14165 = 1461574422 * t14127 + 4720198 * t14143 - 107515800 * t14149 + 954468536 * t14151 - 4298992468 * t14153 + 11005595220 * t14155 - 16714513080 * t14157 + 14909771160 * t14159 - 7215073734 * t14161 - 34454
            t14164 = -3653936055 * t14127 - 4995991 * t14143 + 131959828 * t14149 - 1338925588 * t14151 + 6796159370 * t14153 - 19364875530 * t14155 + 32408556180 * t14157 - 31619681940 * t14159 + 16645708695 * t14161 + 31031
            t14147 = 2 * phi1
            t14146 = 4 * phi1
            t14145 = 6 * phi1
            tfunc[..., c] = (0.37e2 / 0.74448896e8) * np.sqrt(0.71e2) * np.sqrt(0.19e2) * np.sqrt(0.5e1) * ((4871914740 * t14127 - 21575622420 * t14161 + 39734577360 * t14159 - 39375357840 * t14157 + 22685022360 * t14155 - 7655607960 * t14153 + 1446581136 * t14151 - 136408272 * t14149 + 4930068 * t14143 - 29172) * np.exp((-2*1j) * phi2) + (t14164 - t14168) * np.exp((-2*1j) * (t14147 + phi2)) + (t14165 - t14167) * np.exp((-2*1j) * (t14146 + phi2)) + (t14166 - t14169) * np.exp((-2*1j) * (t14145 + phi2)) + (t14164 + t14168) * np.exp((2*1j) * (t14147 - phi2)) + (t14165 + t14167) * np.exp((2*1j) * (t14146 - phi2)) + (t14166 + t14169) * np.exp((2*1j) * (t14145 - phi2)))

        if Bindx == 351:
            t14196 = np.cos(phi)
            t14195 = t14196 ** 2
            t14202 = t14195 ** 2
            t14206 = t14202 ** 2
            t14214 = t14206 ** 2
            t14180 = t14196 * t14214
            t14201 = t14196 * t14195
            t14204 = t14201 ** 2
            t14205 = t14196 * t14204
            t14212 = t14205 ** 2
            t14182 = t14196 * t14212
            t14210 = t14204 ** 2
            t14184 = t14196 * t14210
            t14203 = t14196 * t14202
            t14208 = t14203 ** 2
            t14186 = t14196 * t14208
            t14207 = t14196 * t14206
            t14224 = -3697680 * t14180 + 26412000 * t14182 - 81348960 * t14184 + 140511840 * t14186 - 528240 * t14196 + 7395360 * t14201 - 36976800 * t14203 + 96139680 * t14205 - 147907200 * t14207
            t14223 = -35060256 * t14180 + 200933568 * t14182 - 483344064 * t14184 + 629995968 * t14186 - 170208 * t14196 + 5431104 * t14201 - 50234688 * t14203 + 210724416 * t14205 - 478275840 * t14207
            t14179 = t14207 ** 2
            t14222 = -2079945 * t14179 + 1353615 * t14195 - 6470940 * t14202 + 10168620 * t14204 + 3235470 * t14206 - 32816910 * t14208 + 48994260 * t14210 - 35788260 * t14212 + 13437105 * t14214 - 33015
            t14221 = -26295192 * t14179 - 188568 * t14195 + 3659040 * t14202 - 30560544 * t14204 + 130676112 * t14206 - 310083984 * t14208 + 427115808 * t14210 - 340826400 * t14212 + 146501784 * t14214 + 1944
            t14220 = -1181070240 * t14180 + 4863230400 * t14182 - 8198016960 * t14184 + 7283640000 * t14186 - 189280 * t14196 + 10034752 * t14201 - 152839232 * t14203 + 1032100160 * t14205 - 3656889600 * t14207
            t14219 = -1242691296 * t14180 + 5868844608 * t14182 - 11420608320 * t14184 + 11785646400 * t14186 - 682528 * t14196 + 30765504 * t14201 - 398177472 * t14203 + 2286986944 * t14205 - 6910083840 * t14207
            t14218 = -2657408040 * t14179 - 3633448 * t14195 + 95970784 * t14202 - 973764064 * t14204 + 4942661360 * t14206 - 14083545840 * t14208 + 23569859040 * t14210 - 22996132320 * t14212 + 12105969960 * t14214 + 22568
            t14217 = -1398027708 * t14179 - 4514972 * t14195 + 102841200 * t14202 - 912969904 * t14204 + 4112079752 * t14206 - 10527091080 * t14208 + 15987795120 * t14210 - 14261520240 * t14212 + 6901374876 * t14214 + 32956
            t14200 = 2 * phi1
            t14199 = 4 * phi1
            t14198 = 6 * phi1
            t14197 = 8 * phi1
            tfunc[..., c] = -(0.37e2 / 0.7147094016e10) * np.sqrt(0.5e1) * np.sqrt(0.71e2) * np.sqrt(0.11e2) * np.sqrt(0.3e1) * np.sqrt(0.17e2) * np.sqrt(0.29e2) * np.sqrt(0.23e2) * ((-48906 + 8167621770 * t14179 - 36170896410 * t14214 + 66613850280 * t14212 - 66011629320 * t14210 + 38030772780 * t14208 - 12834401580 * t14206 + 2425150728 * t14204 - 228684456 * t14202 + 8265114 * t14195) * np.exp((-2*1j) * phi2) + (t14218 + t14220) * np.exp((-2*1j) * (t14200 + phi2)) + (t14217 + t14219) * np.exp((-2*1j) * (t14199 + phi2)) + (t14221 + t14223) * np.exp((-2*1j) * (t14198 + phi2)) + (t14222 + t14224) * np.exp((-2*1j) * (t14197 + phi2)) + (t14218 - t14220) * np.exp((2*1j) * (t14200 - phi2)) + (t14217 - t14219) * np.exp((2*1j) * (t14199 - phi2)) + (t14221 - t14223) * np.exp((2*1j) * (t14198 - phi2)) + (t14222 - t14224) * np.exp((2*1j) * (t14197 - phi2)))

        if Bindx == 352:
            t14250 = np.cos(phi)
            t14249 = t14250 ** 2
            t14255 = t14249 ** 2
            t14254 = t14250 * t14249
            t14257 = t14254 ** 2
            t14259 = t14255 ** 2
            t14256 = t14250 * t14255
            t14261 = t14256 ** 2
            t14263 = t14257 ** 2
            t14258 = t14250 * t14257
            t14265 = t14258 ** 2
            t14267 = t14259 ** 2
            t14260 = t14250 * t14259
            t14269 = t14260 ** 2
            t14276 = 326326 * t14249 - 8704696 * t14255 + 88960872 * t14257 - 453553100 * t14259 + 1294353060 * t14261 - 2163241080 * t14263 + 2101610280 * t14265 - 1098569010 * t14267 + 238819350 * t14269 - 2002
            t14275 = 1980990 * t14249 - 31935960 * t14255 + 198899400 * t14257 - 631155420 * t14259 + 1153896660 * t14261 - 1273516440 * t14263 + 841140360 * t14265 - 307053450 * t14267 + 47763870 * t14269 - 20010
            t14274 = 895160 * t14249 - 20324640 * t14255 + 176687840 * t14257 - 766825520 * t14259 + 1867002000 * t14261 - 2671735200 * t14263 + 2233116000 * t14265 - 1009864680 * t14267 + 191055480 * t14269 - 6440
            t14232 = t14250 * t14269
            t14234 = t14250 * t14267
            t14236 = t14250 * t14265
            t14238 = t14250 * t14263
            t14240 = t14250 * t14261
            t14273 = -71645805 * t14232 + 481050405 * t14234 - 1390735020 * t14236 + 2254846860 * t14238 - 2235096990 * t14240 + 330165 * t14250 - 10975485 * t14254 + 110095020 * t14256 - 520219980 * t14258 + 1382350830 * t14260
            t14272 = 429874830 * t14232 - 2449604190 * t14234 + 5927682360 * t14236 - 7915555800 * t14238 + 6341355300 * t14240 - 223790 * t14250 + 10386110 * t14254 - 142678200 * t14256 + 899341400 * t14258 - 3100578020 * t14260
            t14271 = -1074687075 * t14232 + 5468963115 * t14234 - 11749912020 * t14236 + 13845359220 * t14238 - 9725605890 * t14240 + 163163 * t14250 - 8867859 * t14254 + 142146004 * t14256 - 1040547508 * t14258 + 4142988850 * t14260
            t14253 = 4 * phi1
            t14252 = 8 * phi1
            t14251 = 12 * phi1
            tfunc[..., c] = (0.37e2 / 0.37224448e8*1j) * np.sqrt(0.17e2) * np.sqrt(0.71e2) * np.sqrt(0.19e2) * ((1432916100 * t14232 - 7000818660 * t14234 + 14425929360 * t14236 - 16287339600 * t14238 + 10951831800 * t14240 - 4461857400 * t14260 + 1070845776 * t14258 - 139675536 * t14256 + 8314020 * t14254 - 145860 * t14250) * np.exp((-1*1j) * phi2) + (t14271 - t14276) * np.exp((-1*1j) * (t14253 + phi2)) + (t14272 + t14274) * np.exp((-1*1j) * (t14252 + phi2)) + (t14271 + t14276) * np.exp((1j) * (t14253 - phi2)) + (t14272 - t14274) * np.exp((1j) * (t14252 - phi2)) + (t14273 - t14275) * np.exp((-1*1j) * (t14251 + phi2)) + (t14273 + t14275) * np.exp((1j) * (t14251 - phi2))) * ((1 + t14250) ** (-0.1e1 / 0.2e1)) * ((1 - t14250) ** (-0.1e1 / 0.2e1))

        if Bindx == 353:
            t14304 = np.cos(phi)
            t14303 = t14304 ** 2
            t14310 = t14303 ** 2
            t14309 = t14304 * t14303
            t14312 = t14309 ** 2
            t14314 = t14310 ** 2
            t14311 = t14304 * t14310
            t14316 = t14311 ** 2
            t14318 = t14312 ** 2
            t14313 = t14304 * t14312
            t14320 = t14313 ** 2
            t14322 = t14314 ** 2
            t14315 = t14304 * t14314
            t14324 = t14315 ** 2
            t14333 = -3635280 * t14303 + 58605120 * t14310 - 364996800 * t14312 + 1158222240 * t14314 - 2117495520 * t14316 + 2337007680 * t14318 - 1543561920 * t14320 + 563468400 * t14322 - 87650640 * t14324 + 36720
            t14332 = 11357160 * t14303 - 81348960 * t14310 + 273628320 * t14312 - 536163600 * t14314 + 661884720 * t14316 - 525070560 * t14318 + 260950560 * t14320 - 74217720 * t14322 + 9244200 * t14324 - 264120
            t14331 = -4034576 * t14303 + 107621696 * t14310 - 1099879872 * t14312 + 5607565600 * t14314 - 16002910560 * t14316 + 26745526080 * t14318 - 25983545280 * t14320 + 13582307760 * t14322 - 2952675600 * t14324 + 24752
            t14330 = 14556080 * t14303 - 330496320 * t14310 + 2873097920 * t14312 - 12469249760 * t14314 + 30359076000 * t14316 - 43444737600 * t14318 + 36312408000 * t14320 - 16421277840 * t14322 + 3106728240 * t14324 - 104720
            t14286 = t14304 * t14324
            t14288 = t14304 * t14322
            t14290 = t14304 * t14320
            t14292 = t14304 * t14318
            t14294 = t14304 * t14316
            t14329 = -10399725 * t14286 + 84617445 * t14288 - 302549460 * t14290 + 622134660 * t14292 - 807480870 * t14294 + 1419645 * t14304 - 21756885 * t14309 + 122947860 * t14311 - 370692420 * t14313 + 681759750 * t14315
            t14328 = -131475960 * t14286 + 882767160 * t14288 - 2552113440 * t14290 + 4137829920 * t14292 - 4101587280 * t14294 + 605880 * t14304 - 20140920 * t14309 + 202033440 * t14311 - 954646560 * t14313 + 2536727760 * t14315
            t14327 = -6990138540 * t14286 + 39832694220 * t14288 - 96389269680 * t14290 + 128713820400 * t14292 - 103115951400 * t14294 + 3639020 * t14304 - 168887180 * t14309 + 2320071600 * t14311 - 14624073200 * t14313 + 50418094760 * t14315
            t14326 = -13287040200 * t14286 + 67616271240 * t14288 - 145271639520 * t14290 + 171178986720 * t14292 - 120243854640 * t14294 + 2017288 * t14304 - 109638984 * t14309 + 1757441504 * t14311 - 12864951008 * t14313 + 51222407600 * t14315
            t14308 = 4 * phi1
            t14307 = 8 * phi1
            t14306 = 12 * phi1
            t14305 = 16 * phi1
            tfunc[..., c] = (-0.37e2 / 0.3573547008e10*1j) * np.sqrt(0.71e2) * np.sqrt(0.11e2) * np.sqrt(0.3e1) * np.sqrt(0.23e2) * np.sqrt(0.29e2) * ((-127162935900 * t14315 + 30519104616 * t14313 - 3980752776 * t14311 + 236949570 * t14309 - 4157010 * t14304 + 40838108850 * t14286 - 199523331810 * t14288 + 411138986760 * t14290 - 464189178600 * t14292 + 312127206300 * t14294) * np.exp((-1*1j) * phi2) + (t14326 + t14331) * np.exp((-1*1j) * (t14308 + phi2)) + (t14327 - t14330) * np.exp((-1*1j) * (t14307 + phi2)) + (t14326 - t14331) * np.exp((1j) * (t14308 - phi2)) + (t14327 + t14330) * np.exp((1j) * (t14307 - phi2)) + (t14328 + t14333) * np.exp((-1*1j) * (t14306 + phi2)) + (t14329 - t14332) * np.exp((-1*1j) * (t14305 + phi2)) + (t14328 - t14333) * np.exp((1j) * (t14306 - phi2)) + (t14329 + t14332) * np.exp((1j) * (t14305 - phi2))) * ((1 + t14304) ** (-0.1e1 / 0.2e1)) * ((1 - t14304) ** (-0.1e1 / 0.2e1))

        if Bindx == 354:
            t14346 = np.cos(phi)
            t14345 = t14346 ** 2
            t14347 = t14345 ** 2
            t14349 = t14347 ** 2
            t14353 = t14349 ** 2
            t14348 = t14345 * t14347
            t14351 = t14348 ** 2
            t14341 = t14345 * t14349
            t14339 = t14345 * t14351
            t14337 = t14345 * t14353
            tfunc[..., c] = -0.37e2 / 0.37224448e8 * np.sqrt(0.2e1) * np.sqrt(0.17e2) * np.sqrt(0.71e2) * (-(4537567650 * t14337) + (19835652870 * t14353) - (36064823400 * t14339) + (35289235800 * t14351) - (20078358300 * t14341) + (6692786100 * t14349) - (1249320072 * t14348) + (116396280 * t14347) - (4157010 * t14345) + 0.24310e5 + (6806351475 * t14337 - 31309216785 * t14353 + 59895892980 * t14339 - 61652370780 * t14351 + 36889062210 * t14341 - 12926263350 * t14349 + 2535384852 * t14348 - 248083836 * t14347 + 9300291 * t14345 - 57057) * np.cos((4 * phi1)) + (-2722540590 * t14337 + 14390571690 * t14353 - 31821903000 * t14339 + 38072226600 * t14351 - 26604778500 * t14341 + 10927263660 * t14349 - 2517801720 * t14348 + 289626120 * t14347 - 12756030 * t14345 + 91770) * np.cos((8 * phi1)) + (453756765 * t14337 - 2917007775 * t14353 + 7990833420 * t14339 - 12098406180 * t14351 + 10962018270 * t14341 - 5995976490 * t14349 + 1889544300 * t14348 - 303391620 * t14347 + 18819405 * t14345 - 190095) * np.cos((12 * phi1)))

        if Bindx == 355:
            t14368 = np.cos(phi)
            t14367 = t14368 ** 2
            t14369 = t14367 ** 2
            t14371 = t14369 ** 2
            t14375 = t14371 ** 2
            t14370 = t14367 * t14369
            t14373 = t14370 ** 2
            t14363 = t14367 * t14371
            t14361 = t14367 * t14373
            t14359 = t14367 * t14375
            tfunc[..., c] = 0.37e2 / 0.1191182336e10 * np.sqrt(0.71e2) * np.sqrt(0.3e1) * np.sqrt(0.2e1) * np.sqrt(0.11e2) * np.sqrt(0.19e2) * np.sqrt(0.23e2) * np.sqrt(0.29e2) * (-(2268783825 * t14359) + (9917826435 * t14375) - (18032411700 * t14361) + (17644617900 * t14373) - (10039179150 * t14363) + (3346393050 * t14371) - (624660036 * t14370) + (58198140 * t14369) - (2078505 * t14367) + 0.12155e5 + (1476337800 * t14359 - 6791153880 * t14375 + 12991772640 * t14361 - 13372763040 * t14373 + 8001455280 * t14363 - 2803782800 * t14371 + 549939936 * t14370 - 53810848 * t14369 + 2017288 * t14367 - 12376) * np.cos((4 * phi1)) + (776682060 * t14359 - 4105319460 * t14375 + 9078102000 * t14361 - 10861184400 * t14373 + 7589769000 * t14363 - 3117312440 * t14371 + 718274480 * t14370 - 82624080 * t14369 + 3639020 * t14367 - 26180) * np.cos((8 * phi1)) + (14608440 * t14359 - 93911400 * t14375 + 257260320 * t14361 - 389501280 * t14373 + 352915920 * t14363 - 193037040 * t14371 + 60832800 * t14370 - 9767520 * t14369 + 605880 * t14367 - 6120) * np.cos((12 * phi1)) + (1155525 * t14359 - 9277215 * t14375 + 32618820 * t14361 - 65633820 * t14373 + 82735590 * t14363 - 67020450 * t14371 + 34203540 * t14370 - 10168620 * t14369 + 1419645 * t14367 - 33015) * np.cos((16 * phi1)))

        if Bindx == 356:
            t14402 = np.cos(phi)
            t14401 = t14402 ** 2
            t14407 = t14401 ** 2
            t14406 = t14402 * t14401
            t14409 = t14406 ** 2
            t14411 = t14407 ** 2
            t14408 = t14402 * t14407
            t14413 = t14408 ** 2
            t14415 = t14409 ** 2
            t14410 = t14402 * t14409
            t14417 = t14410 ** 2
            t14419 = t14411 ** 2
            t14412 = t14402 * t14411
            t14421 = t14412 ** 2
            t14428 = 326326 * t14401 - 8704696 * t14407 + 88960872 * t14409 - 453553100 * t14411 + 1294353060 * t14413 - 2163241080 * t14415 + 2101610280 * t14417 - 1098569010 * t14419 + 238819350 * t14421 - 2002
            t14427 = 1980990 * t14401 - 31935960 * t14407 + 198899400 * t14409 - 631155420 * t14411 + 1153896660 * t14413 - 1273516440 * t14415 + 841140360 * t14417 - 307053450 * t14419 + 47763870 * t14421 - 20010
            t14426 = 895160 * t14401 - 20324640 * t14407 + 176687840 * t14409 - 766825520 * t14411 + 1867002000 * t14413 - 2671735200 * t14415 + 2233116000 * t14417 - 1009864680 * t14419 + 191055480 * t14421 - 6440
            t14384 = t14402 * t14421
            t14386 = t14402 * t14419
            t14388 = t14402 * t14417
            t14390 = t14402 * t14415
            t14392 = t14402 * t14413
            t14425 = -71645805 * t14384 + 481050405 * t14386 - 1390735020 * t14388 + 2254846860 * t14390 - 2235096990 * t14392 + 330165 * t14402 - 10975485 * t14406 + 110095020 * t14408 - 520219980 * t14410 + 1382350830 * t14412
            t14424 = 429874830 * t14384 - 2449604190 * t14386 + 5927682360 * t14388 - 7915555800 * t14390 + 6341355300 * t14392 - 223790 * t14402 + 10386110 * t14406 - 142678200 * t14408 + 899341400 * t14410 - 3100578020 * t14412
            t14423 = -1074687075 * t14384 + 5468963115 * t14386 - 11749912020 * t14388 + 13845359220 * t14390 - 9725605890 * t14392 + 163163 * t14402 - 8867859 * t14406 + 142146004 * t14408 - 1040547508 * t14410 + 4142988850 * t14412
            t14405 = 4 * phi1
            t14404 = 8 * phi1
            t14403 = 12 * phi1
            tfunc[..., c] = (0.37e2 / 0.37224448e8*1j) * np.sqrt(0.17e2) * np.sqrt(0.71e2) * np.sqrt(0.19e2) * ((1432916100 * t14384 - 7000818660 * t14386 + 14425929360 * t14388 - 16287339600 * t14390 + 10951831800 * t14392 - 4461857400 * t14412 + 1070845776 * t14410 - 139675536 * t14408 + 8314020 * t14406 - 145860 * t14402) * np.exp((1j) * phi2) + (t14423 + t14428) * np.exp((-1*1j) * (t14405 - phi2)) + (t14424 - t14426) * np.exp((-1*1j) * (t14404 - phi2)) + (t14423 - t14428) * np.exp((1j) * (t14405 + phi2)) + (t14424 + t14426) * np.exp((1j) * (t14404 + phi2)) + (t14425 + t14427) * np.exp((-1*1j) * (t14403 - phi2)) + (t14425 - t14427) * np.exp((1j) * (t14403 + phi2))) * ((1 + t14402) ** (-0.1e1 / 0.2e1)) * ((1 - t14402) ** (-0.1e1 / 0.2e1))

        if Bindx == 357:
            t14456 = np.cos(phi)
            t14455 = t14456 ** 2
            t14462 = t14455 ** 2
            t14461 = t14456 * t14455
            t14464 = t14461 ** 2
            t14466 = t14462 ** 2
            t14463 = t14456 * t14462
            t14468 = t14463 ** 2
            t14470 = t14464 ** 2
            t14465 = t14456 * t14464
            t14472 = t14465 ** 2
            t14474 = t14466 ** 2
            t14467 = t14456 * t14466
            t14476 = t14467 ** 2
            t14485 = 3635280 * t14455 - 58605120 * t14462 + 364996800 * t14464 - 1158222240 * t14466 + 2117495520 * t14468 - 2337007680 * t14470 + 1543561920 * t14472 - 563468400 * t14474 + 87650640 * t14476 - 36720
            t14484 = 11357160 * t14455 - 81348960 * t14462 + 273628320 * t14464 - 536163600 * t14466 + 661884720 * t14468 - 525070560 * t14470 + 260950560 * t14472 - 74217720 * t14474 + 9244200 * t14476 - 264120
            t14483 = 4034576 * t14455 - 107621696 * t14462 + 1099879872 * t14464 - 5607565600 * t14466 + 16002910560 * t14468 - 26745526080 * t14470 + 25983545280 * t14472 - 13582307760 * t14474 + 2952675600 * t14476 - 24752
            t14482 = -14556080 * t14455 + 330496320 * t14462 - 2873097920 * t14464 + 12469249760 * t14466 - 30359076000 * t14468 + 43444737600 * t14470 - 36312408000 * t14472 + 16421277840 * t14474 - 3106728240 * t14476 + 104720
            t14438 = t14456 * t14476
            t14440 = t14456 * t14474
            t14442 = t14456 * t14472
            t14444 = t14456 * t14470
            t14446 = t14456 * t14468
            t14481 = 10399725 * t14438 - 84617445 * t14440 + 302549460 * t14442 - 622134660 * t14444 + 807480870 * t14446 - 1419645 * t14456 + 21756885 * t14461 - 122947860 * t14463 + 370692420 * t14465 - 681759750 * t14467
            t14480 = 131475960 * t14438 - 882767160 * t14440 + 2552113440 * t14442 - 4137829920 * t14444 + 4101587280 * t14446 - 605880 * t14456 + 20140920 * t14461 - 202033440 * t14463 + 954646560 * t14465 - 2536727760 * t14467
            t14479 = 6990138540 * t14438 - 39832694220 * t14440 + 96389269680 * t14442 - 128713820400 * t14444 + 103115951400 * t14446 - 3639020 * t14456 + 168887180 * t14461 - 2320071600 * t14463 + 14624073200 * t14465 - 50418094760 * t14467
            t14478 = 13287040200 * t14438 - 67616271240 * t14440 + 145271639520 * t14442 - 171178986720 * t14444 + 120243854640 * t14446 - 2017288 * t14456 + 109638984 * t14461 - 1757441504 * t14463 + 12864951008 * t14465 - 51222407600 * t14467
            t14460 = 4 * phi1
            t14459 = 8 * phi1
            t14458 = 12 * phi1
            t14457 = 16 * phi1
            tfunc[..., c] = (0.37e2 / 0.3573547008e10*1j) * np.sqrt(0.71e2) * np.sqrt(0.11e2) * np.sqrt(0.3e1) * np.sqrt(0.23e2) * np.sqrt(0.29e2) * ((1 + t14456) ** (-0.1e1 / 0.2e1)) * ((1 - t14456) ** (-0.1e1 / 0.2e1)) * ((-40838108850 * t14438 + 199523331810 * t14440 - 411138986760 * t14442 + 464189178600 * t14444 - 312127206300 * t14446 + 127162935900 * t14467 - 30519104616 * t14465 + 3980752776 * t14463 - 236949570 * t14461 + 4157010 * t14456) * np.exp((1j) * phi2) + (t14478 - t14483) * np.exp((-1*1j) * (t14460 - phi2)) + (t14479 + t14482) * np.exp((-1*1j) * (t14459 - phi2)) + (t14478 + t14483) * np.exp((1j) * (t14460 + phi2)) + (t14479 - t14482) * np.exp((1j) * (t14459 + phi2)) + (t14480 - t14485) * np.exp((-1*1j) * (t14458 - phi2)) + (t14481 - t14484) * np.exp((-1*1j) * (t14457 - phi2)) + (t14480 + t14485) * np.exp((1j) * (t14458 + phi2)) + (t14481 + t14484) * np.exp((1j) * (t14457 + phi2)))

        if Bindx == 358:
            t14510 = np.cos(phi)
            t14509 = t14510 ** 2
            t14515 = t14509 ** 2
            t14519 = t14515 ** 2
            t14527 = t14519 ** 2
            t14494 = t14510 * t14527
            t14514 = t14510 * t14509
            t14517 = t14514 ** 2
            t14518 = t14510 * t14517
            t14525 = t14518 ** 2
            t14496 = t14510 * t14525
            t14523 = t14517 ** 2
            t14498 = t14510 * t14523
            t14516 = t14510 * t14515
            t14521 = t14516 ** 2
            t14500 = t14510 * t14521
            t14520 = t14510 * t14519
            t14535 = -324794316 * t14494 + 1861426248 * t14496 - 4477645704 * t14498 + 5836212648 * t14500 - 1576788 * t14510 + 50313144 * t14514 - 465368568 * t14516 + 1952127576 * t14518 - 4430694240 * t14520
            t14534 = -1623971580 * t14494 + 6686941800 * t14496 - 11272273320 * t14498 + 10015005000 * t14500 - 260260 * t14510 + 13797784 * t14514 - 210153944 * t14516 + 1419137720 * t14518 - 5028223200 * t14520
            t14533 = 1299177264 * t14494 - 6135610272 * t14496 + 11939726880 * t14498 - 12321357600 * t14500 + 713552 * t14510 - 32163936 * t14514 + 416276448 * t14516 - 2390940896 * t14518 + 7224178560 * t14520
            t14493 = t14520 ** 2
            t14532 = -243595737 * t14493 - 1746873 * t14509 + 33896940 * t14515 - 283109484 * t14517 + 1210568982 * t14519 - 2872583574 * t14521 + 3956753388 * t14523 - 3157377900 * t14525 + 1357176249 * t14527 + 18009
            t14531 = 1461574422 * t14493 + 4720198 * t14509 - 107515800 * t14515 + 954468536 * t14517 - 4298992468 * t14519 + 11005595220 * t14521 - 16714513080 * t14523 + 14909771160 * t14525 - 7215073734 * t14527 - 34454
            t14530 = -3653936055 * t14493 - 4995991 * t14509 + 131959828 * t14515 - 1338925588 * t14517 + 6796159370 * t14519 - 19364875530 * t14521 + 32408556180 * t14523 - 31619681940 * t14525 + 16645708695 * t14527 + 31031
            t14513 = 2 * phi1
            t14512 = 4 * phi1
            t14511 = 6 * phi1
            tfunc[..., c] = (0.37e2 / 0.74448896e8) * np.sqrt(0.71e2) * np.sqrt(0.19e2) * np.sqrt(0.5e1) * ((-29172 + 4871914740 * t14493 - 21575622420 * t14527 + 39734577360 * t14525 - 39375357840 * t14523 + 22685022360 * t14521 - 7655607960 * t14519 + 1446581136 * t14517 - 136408272 * t14515 + 4930068 * t14509) * np.exp((2*1j) * phi2) + (t14530 - t14534) * np.exp((-2*1j) * (t14513 - phi2)) + (t14531 - t14533) * np.exp((-2*1j) * (t14512 - phi2)) + (t14532 - t14535) * np.exp((-2*1j) * (t14511 - phi2)) + (t14530 + t14534) * np.exp((2*1j) * (t14513 + phi2)) + (t14531 + t14533) * np.exp((2*1j) * (t14512 + phi2)) + (t14532 + t14535) * np.exp((2*1j) * (t14511 + phi2)))

        if Bindx == 359:
            t14562 = np.cos(phi)
            t14561 = t14562 ** 2
            t14568 = t14561 ** 2
            t14572 = t14568 ** 2
            t14580 = t14572 ** 2
            t14546 = t14562 * t14580
            t14567 = t14562 * t14561
            t14570 = t14567 ** 2
            t14571 = t14562 * t14570
            t14578 = t14571 ** 2
            t14548 = t14562 * t14578
            t14576 = t14570 ** 2
            t14550 = t14562 * t14576
            t14569 = t14562 * t14568
            t14574 = t14569 ** 2
            t14552 = t14562 * t14574
            t14573 = t14562 * t14572
            t14590 = -3697680 * t14546 + 26412000 * t14548 - 81348960 * t14550 + 140511840 * t14552 - 528240 * t14562 + 7395360 * t14567 - 36976800 * t14569 + 96139680 * t14571 - 147907200 * t14573
            t14589 = -35060256 * t14546 + 200933568 * t14548 - 483344064 * t14550 + 629995968 * t14552 - 170208 * t14562 + 5431104 * t14567 - 50234688 * t14569 + 210724416 * t14571 - 478275840 * t14573
            t14545 = t14573 ** 2
            t14588 = 2079945 * t14545 - 1353615 * t14561 + 6470940 * t14568 - 10168620 * t14570 - 3235470 * t14572 + 32816910 * t14574 - 48994260 * t14576 + 35788260 * t14578 - 13437105 * t14580 + 33015
            t14587 = 26295192 * t14545 + 188568 * t14561 - 3659040 * t14568 + 30560544 * t14570 - 130676112 * t14572 + 310083984 * t14574 - 427115808 * t14576 + 340826400 * t14578 - 146501784 * t14580 - 1944
            t14586 = -1181070240 * t14546 + 4863230400 * t14548 - 8198016960 * t14550 + 7283640000 * t14552 - 189280 * t14562 + 10034752 * t14567 - 152839232 * t14569 + 1032100160 * t14571 - 3656889600 * t14573
            t14585 = -1242691296 * t14546 + 5868844608 * t14548 - 11420608320 * t14550 + 11785646400 * t14552 - 682528 * t14562 + 30765504 * t14567 - 398177472 * t14569 + 2286986944 * t14571 - 6910083840 * t14573
            t14584 = 2657408040 * t14545 + 3633448 * t14561 - 95970784 * t14568 + 973764064 * t14570 - 4942661360 * t14572 + 14083545840 * t14574 - 23569859040 * t14576 + 22996132320 * t14578 - 12105969960 * t14580 - 22568
            t14583 = 1398027708 * t14545 + 4514972 * t14561 - 102841200 * t14568 + 912969904 * t14570 - 4112079752 * t14572 + 10527091080 * t14574 - 15987795120 * t14576 + 14261520240 * t14578 - 6901374876 * t14580 - 32956
            t14566 = 2 * phi1
            t14565 = 4 * phi1
            t14564 = 6 * phi1
            t14563 = 8 * phi1
            tfunc[..., c] = (0.37e2 / 0.7147094016e10) * np.sqrt(0.5e1) * np.sqrt(0.71e2) * np.sqrt(0.17e2) * np.sqrt(0.11e2) * np.sqrt(0.3e1) * np.sqrt(0.29e2) * np.sqrt(0.23e2) * ((48906 - 8167621770 * t14545 + 36170896410 * t14580 - 66613850280 * t14578 + 66011629320 * t14576 - 38030772780 * t14574 + 12834401580 * t14572 - 2425150728 * t14570 + 228684456 * t14568 - 8265114 * t14561) * np.exp((2*1j) * phi2) + (t14584 + t14586) * np.exp((-2*1j) * (t14566 - phi2)) + (t14583 + t14585) * np.exp((-2*1j) * (t14565 - phi2)) + (t14587 + t14589) * np.exp((-2*1j) * (t14564 - phi2)) + (t14588 + t14590) * np.exp((-2*1j) * (t14563 - phi2)) + (t14584 - t14586) * np.exp((2*1j) * (t14566 + phi2)) + (t14583 - t14585) * np.exp((2*1j) * (t14565 + phi2)) + (t14587 - t14589) * np.exp((2*1j) * (t14564 + phi2)) + (t14588 - t14590) * np.exp((2*1j) * (t14563 + phi2)))

        if Bindx == 360:
            t14616 = np.cos(phi)
            t14615 = t14616 ** 2
            t14622 = t14615 ** 2
            t14621 = t14616 * t14615
            t14624 = t14621 ** 2
            t14626 = t14622 ** 2
            t14623 = t14616 * t14622
            t14628 = t14623 ** 2
            t14630 = t14624 ** 2
            t14625 = t14616 * t14624
            t14632 = t14625 ** 2
            t14634 = t14626 ** 2
            t14627 = t14616 * t14626
            t14636 = t14627 ** 2
            t14643 = 506920 * t14615 - 8285474 * t14622 + 54935454 * t14624 - 190963434 * t14626 + 385964886 * t14628 - 470881990 * t14630 + 342452474 * t14632 - 136923094 * t14634 + 23199594 * t14636 - 5336
            t14642 = 397440 * t14615 - 8850216 * t14622 + 76253464 * t14624 - 331441224 * t14626 + 815919480 * t14628 - 1189954680 * t14630 + 1019789640 * t14632 - 474909336 * t14634 + 92798376 * t14636 - 2944
            t14641 = 181896 * t14615 - 4739306 * t14622 + 47381334 * t14624 - 236709330 * t14626 + 663161070 * t14628 - 1090204830 * t14630 + 1043981730 * t14632 - 539049390 * t14634 + 115997970 * t14636 - 1144
            t14598 = t14616 * t14636
            t14600 = t14616 * t14634
            t14602 = t14616 * t14632
            t14604 = t14616 * t14630
            t14606 = t14616 * t14628
            t14640 = -11599797 * t14598 + 57998985 * t14600 - 110911428 * t14602 + 89402012 * t14604 - 1271302 * t14606 - 46023 * t14616 + 1393363 * t14621 - 11363012 * t14623 + 37525420 * t14625 - 51128218 * t14627
            t14639 = 69598782 * t14598 - 347993910 * t14600 + 729980808 * t14602 - 834417000 * t14604 + 565619220 * t14606 - 10902 * t14616 + 514142 * t14621 - 7772712 * t14623 + 56792520 * t14625 - 232310948 * t14627
            t14638 = -173996955 * t14598 + 869984775 * t14600 - 1842320700 * t14602 + 2147833380 * t14604 - 1499290650 * t14606 + 26455 * t14616 - 1406691 * t14621 + 22193028 * t14623 - 160858412 * t14625 + 637835770 * t14627
            t14620 = 4 * phi1
            t14619 = 8 * phi1
            t14618 = -3 * phi2
            t14617 = 3 * phi2
            tfunc[..., c] = (0.37e2 / 0.18612224e8*1j) * np.sqrt(0.71e2) * np.sqrt(0.7e1) * np.sqrt(0.19e2) * np.sqrt(0.15e2) * ((231995940 * t14598 - 1159979700 * t14600 + 2446502640 * t14602 - 2827493040 * t14604 + 1946382360 * t14606 - 811856760 * t14627 + 199497584 * t14625 - 26643760 * t14623 + 1623908 * t14621 - 29172 * t14616) * np.exp((3*1j) * phi2) + (t14640 + t14643) * np.exp((-3*1j) * (t14620 - phi2)) + (t14638 + t14641) * np.exp((-1*1j) * (t14620 + t14618)) + (t14639 - t14642) * np.exp((-1*1j) * (t14619 + t14618)) + (t14638 - t14641) * np.exp((1j) * (t14620 + t14617)) + (t14639 + t14642) * np.exp((1j) * (t14619 + t14617)) + (t14640 - t14643) * np.exp((3*1j) * (t14620 + phi2))) * ((1 + t14616) ** (-0.1e1 / 0.2e1)) * ((1 - t14616) ** (-0.1e1 / 0.2e1))

        if Bindx == 361:
            t14671 = np.cos(phi)
            t14670 = t14671 ** 2
            t14678 = t14670 ** 2
            t14677 = t14671 * t14670
            t14680 = t14677 ** 2
            t14682 = t14678 ** 2
            t14679 = t14671 * t14678
            t14684 = t14679 ** 2
            t14686 = t14680 ** 2
            t14681 = t14671 * t14680
            t14688 = t14681 ** 2
            t14690 = t14682 ** 2
            t14683 = t14671 * t14682
            t14692 = t14683 ** 2
            t14701 = -9244200 * t14686 + 9244200 * t14684 + 5546520 * t14688 - 5546520 * t14682 - 1848840 * t14690 + 1848840 * t14680 + 264120 * t14692 - 264120 * t14678
            t14653 = t14671 * t14692
            t14655 = t14671 * t14690
            t14657 = t14671 * t14688
            t14659 = t14671 * t14686
            t14661 = t14671 * t14684
            t14700 = 99045 * t14653 - 495225 * t14655 + 660300 * t14657 + 924420 * t14659 - 4159890 * t14661 + 33015 * t14671 - 429195 * t14677 + 1980900 * t14679 - 4622100 * t14681 + 6008730 * t14683
            t14699 = 54720 * t14670 - 894384 * t14678 + 5930064 * t14680 - 20613744 * t14682 + 41663376 * t14684 - 50829840 * t14686 + 36966384 * t14688 - 14780304 * t14690 + 2504304 * t14692 - 576
            t14698 = 1252152 * t14653 - 6260760 * t14655 + 11972448 * t14657 - 9650592 * t14659 + 137232 * t14661 + 4968 * t14671 - 150408 * t14677 + 1226592 * t14679 - 4050720 * t14681 + 5519088 * t14683
            t14697 = 132288 * t14670 - 3446768 * t14678 + 34459152 * t14680 - 172152240 * t14682 + 482298960 * t14684 - 792876240 * t14686 + 759259440 * t14688 - 392035920 * t14690 + 84362160 * t14692 - 832
            t14696 = 380160 * t14670 - 8465424 * t14678 + 72938096 * t14680 - 317030736 * t14682 + 780444720 * t14684 - 1138217520 * t14686 + 975450960 * t14688 - 454261104 * t14690 + 88763664 * t14692 - 2816
            t14695 = 66572748 * t14653 - 332863740 * t14655 + 698242512 * t14657 - 798138000 * t14659 + 541027080 * t14661 - 10428 * t14671 + 491788 * t14677 - 7434768 * t14679 + 54323280 * t14681 - 222210472 * t14683
            t14694 = 126543240 * t14653 - 632716200 * t14655 + 1339869600 * t14657 - 1562060640 * t14659 + 1090393200 * t14661 - 19240 * t14671 + 1023048 * t14677 - 16140384 * t14679 + 116987936 * t14681 - 463880560 * t14683
            t14676 = 4 * phi1
            t14675 = 8 * phi1
            t14674 = -3 * phi2
            t14673 = 3 * phi2
            t14672 = 16 * phi1
            tfunc[..., c] = (0.37e2 / 0.595591168e9*1j) * np.sqrt(0.5e1) * np.sqrt(0.71e2) * np.sqrt(0.7e1) * np.sqrt(0.11e2) * np.sqrt(0.17e2) * np.sqrt(0.23e2) * np.sqrt(0.29e2) * ((1 + t14671) ** (-0.1e1 / 0.2e1)) * ((1 - t14671) ** (-0.1e1 / 0.2e1)) * ((-388934370 * t14653 + 1944671850 * t14655 - 4101489720 * t14657 + 4740208920 * t14659 - 3263052780 * t14661 + 1361053980 * t14683 - 334451832 * t14681 + 44667480 * t14679 - 2722434 * t14677 + 48906 * t14671) * np.exp((3*1j) * phi2) + (t14700 - t14701) * np.exp((-1*1j) * (t14672 + t14674)) + (t14700 + t14701) * np.exp((1j) * (t14672 + t14673)) + (t14698 - t14699) * np.exp((-3*1j) * (t14676 - phi2)) + (t14694 - t14697) * np.exp((-1*1j) * (t14676 + t14674)) + (t14695 - t14696) * np.exp((-1*1j) * (t14675 + t14674)) + (t14694 + t14697) * np.exp((1j) * (t14676 + t14673)) + (t14695 + t14696) * np.exp((1j) * (t14675 + t14673)) + (t14698 + t14699) * np.exp((3*1j) * (t14676 + phi2)))

        if Bindx == 362:
            t14726 = np.cos(phi)
            t14725 = t14726 ** 2
            t14730 = t14725 ** 2
            t14734 = t14730 ** 2
            t14742 = t14734 ** 2
            t14710 = t14726 * t14742
            t14729 = t14726 * t14725
            t14732 = t14729 ** 2
            t14733 = t14726 * t14732
            t14740 = t14733 ** 2
            t14712 = t14726 * t14740
            t14738 = t14732 ** 2
            t14714 = t14726 * t14738
            t14731 = t14726 * t14730
            t14736 = t14731 ** 2
            t14716 = t14726 * t14736
            t14735 = t14726 * t14734
            t14750 = 42181080 * t14710 - 208424160 * t14712 + 423051420 * t14714 - 452786280 * t14716 + 40020 * t14726 - 1360680 * t14729 + 16208100 * t14731 - 91725840 * t14733 + 272816340 * t14735
            t14749 = 210905400 * t14710 - 883321440 * t14712 + 1519759500 * t14714 - 1382851080 * t14716 + 42276 * t14726 - 2159560 * t14729 + 31754996 * t14731 - 207506000 * t14733 + 713384100 * t14735
            t14748 = 168724320 * t14710 - 754296960 * t14712 + 1394456880 * t14714 - 1375727520 * t14716 + 79120 * t14726 - 3440800 * t14729 + 43804880 * t14731 - 252411200 * t14733 + 778811280 * t14735
            t14709 = t14735 ** 2
            t14747 = -94907430 * t14709 + 150650 * t14725 - 2799560 * t14730 + 15810200 * t14732 - 19676500 * t14734 - 97495620 * t14736 + 383151480 * t14738 - 553316520 * t14740 + 369084450 * t14742 - 1150
            t14746 = 15817905 * t14709 - 910455 * t14725 + 13166580 * t14730 - 71675820 * t14732 + 188714310 * t14734 - 254307090 * t14736 + 152916420 * t14738 + 3721860 * t14740 - 47453715 * t14742 + 10005
            t14745 = 237268575 * t14709 + 308295 * t14725 - 7928180 * t14730 + 79224236 * t14732 - 400435750 * t14734 + 1147630770 * t14736 - 1948373700 * t14738 + 1941570300 * t14740 - 1049254365 * t14742 - 1989
            t14728 = 2 * phi1
            t14727 = 3 * phi1
            tfunc[..., c] = -(0.37e2 / 0.37224448e8) * np.sqrt(0.2e1) * np.sqrt(0.71e2) * np.sqrt(0.7e1) * np.sqrt(0.11e2) * np.sqrt(0.19e2) * ((2652 - 316358100 * t14709 + 1455247260 * t14742 - 2783951280 * t14740 + 2865592080 * t14738 - 1714597560 * t14736 + 600810600 * t14734 - 117844272 * t14732 + 11530896 * t14730 - 432276 * t14725) * np.exp((4*1j) * phi2) + (t14745 - t14749) * np.exp((-4*1j) * (phi1 - phi2)) + (t14747 + t14748) * np.exp((-4*1j) * (t14728 - phi2)) + (t14746 - t14750) * np.exp((-4*1j) * (t14727 - phi2)) + (t14745 + t14749) * np.exp((4*1j) * (phi1 + phi2)) + (t14747 - t14748) * np.exp((4*1j) * (t14728 + phi2)) + (t14746 + t14750) * np.exp((4*1j) * (t14727 + phi2)))

        if Bindx == 363:
            t14777 = np.cos(phi)
            t14776 = t14777 ** 2
            t14782 = t14776 ** 2
            t14786 = t14782 ** 2
            t14794 = t14786 ** 2
            t14761 = t14777 * t14794
            t14781 = t14777 * t14776
            t14784 = t14781 ** 2
            t14785 = t14777 * t14784
            t14792 = t14785 ** 2
            t14763 = t14777 * t14792
            t14790 = t14784 ** 2
            t14765 = t14777 * t14790
            t14783 = t14777 * t14782
            t14788 = t14783 ** 2
            t14767 = t14777 * t14788
            t14787 = t14777 * t14786
            t14804 = -50086080 * t14761 + 247484160 * t14763 - 502333920 * t14765 + 537641280 * t14767 - 47520 * t14777 + 1615680 * t14781 - 19245600 * t14783 + 108915840 * t14785 - 323943840 * t14787
            t14803 = -5282400 * t14761 + 29581440 * t14763 - 66030000 * t14765 + 70784160 * t14767 + 528240 * t14777 - 5282400 * t14781 + 15318960 * t14783 - 10564800 * t14785 - 29053200 * t14787
            t14760 = t14787 ** 2
            t14802 = 1485675 * t14760 - 1155525 * t14776 + 12545700 * t14782 - 51371340 * t14784 + 105317850 * t14786 - 118391790 * t14788 + 70652100 * t14790 - 16507500 * t14792 - 2608185 * t14794 + 33015
            t14801 = 18782280 * t14760 - 1081080 * t14776 + 15634080 * t14782 - 85108320 * t14784 + 224080560 * t14786 - 301965840 * t14788 + 181573920 * t14790 + 4419360 * t14792 - 56346840 * t14794 + 11880
            t14800 = 1687243200 * t14761 - 7066571520 * t14763 + 12158076000 * t14765 - 11062808640 * t14767 + 338208 * t14777 - 17276480 * t14781 + 254039968 * t14783 - 1660048000 * t14785 + 5707072800 * t14787
            t14799 = 1775273280 * t14761 - 7936515840 * t14763 + 14672111520 * t14765 - 14475046080 * t14767 + 832480 * t14777 - 36203200 * t14781 + 460903520 * t14783 - 2655804800 * t14785 + 8194449120 * t14787
            t14798 = 998591220 * t14760 - 1585100 * t14776 + 29456240 * t14782 - 166350800 * t14784 + 207031000 * t14786 + 1025823480 * t14788 - 4031419920 * t14790 + 5821852080 * t14792 - 3883410300 * t14794 + 12100
            t14797 = 1898148600 * t14760 + 2466360 * t14776 - 63425440 * t14782 + 633793888 * t14784 - 3203486000 * t14786 + 9181046160 * t14788 - 15586989600 * t14790 + 15532562400 * t14792 - 8394034920 * t14794 - 15912
            t14780 = 2 * phi1
            t14779 = 3 * phi1
            t14778 = 4 * phi1
            tfunc[..., c] = (0.37e2 / 0.3573547008e10) * np.sqrt(0.71e2) * np.sqrt(0.3e1) * np.sqrt(0.7e1) * np.sqrt(0.2e1) * np.sqrt(0.17e2) * np.sqrt(0.23e2) * np.sqrt(0.29e2) * ((-5834015550 * t14760 + 26836471530 * t14794 - 51339336840 * t14792 + 52844889240 * t14790 - 31619196180 * t14788 + 11079654300 * t14786 - 2173187016 * t14784 + 212643288 * t14782 - 7971678 * t14776 + 48906) * np.exp((4*1j) * phi2) + (t14797 - t14800) * np.exp((-4*1j) * (phi1 - phi2)) + (t14798 - t14799) * np.exp((-4*1j) * (t14780 - phi2)) + (t14801 + t14804) * np.exp((-4*1j) * (t14779 - phi2)) + (t14802 + t14803) * np.exp((-4*1j) * (t14778 - phi2)) + (t14797 + t14800) * np.exp((4*1j) * (phi1 + phi2)) + (t14798 + t14799) * np.exp((4*1j) * (t14780 + phi2)) + (t14801 - t14804) * np.exp((4*1j) * (t14779 + phi2)) + (t14802 - t14803) * np.exp((4*1j) * (t14778 + phi2)))

        if Bindx == 364:
            t14830 = np.cos(phi)
            t14829 = t14830 ** 2
            t14837 = t14829 ** 2
            t14836 = t14830 * t14829
            t14839 = t14836 ** 2
            t14841 = t14837 ** 2
            t14838 = t14830 * t14837
            t14843 = t14838 ** 2
            t14845 = t14839 ** 2
            t14840 = t14830 * t14839
            t14847 = t14840 ** 2
            t14849 = t14841 ** 2
            t14842 = t14830 * t14841
            t14851 = t14842 ** 2
            t14858 = 151380 * t14829 - 1702590 * t14837 + 4387410 * t14839 + 10129410 * t14841 - 71587950 * t14843 + 148569030 * t14845 - 151706250 * t14847 + 77808450 * t14849 - 16047150 * t14851 - 1740
            t14857 = 164892 * t14829 - 4094090 * t14837 + 39156390 * t14839 - 187928650 * t14841 + 508017510 * t14843 - 809354910 * t14845 + 754216050 * t14847 - 380411850 * t14849 + 80235750 * t14851 - 1092
            t14856 = 193040 * t14829 - 4199720 * t14837 + 36613080 * t14839 - 165415720 * t14841 + 430587480 * t14843 - 670070520 * t14845 + 615023880 * t14847 - 306918600 * t14849 + 64188600 * t14851 - 1520
            t14812 = t14830 * t14851
            t14814 = t14830 * t14849
            t14816 = t14830 * t14847
            t14818 = t14830 * t14845
            t14820 = t14830 * t14843
            t14855 = 28884870 * t14812 - 104077230 * t14814 + 117481320 * t14816 + 7478520 * t14818 - 126587580 * t14820 + 20210 * t14830 - 835290 * t14836 + 9680440 * t14838 - 48007000 * t14840 + 115961740 * t14842
            t14854 = -4814145 * t14812 + 7565085 * t14814 + 37056780 * t14816 - 135822660 * t14818 + 191179890 * t14820 - 49155 * t14830 + 1460295 * t14836 - 13577220 * t14838 + 59864700 * t14840 - 142863570 * t14842
            t14853 = -72212175 * t14812 + 348223155 * t14814 - 710227980 * t14816 + 797607300 * t14818 - 537714450 * t14820 + 9555 * t14830 - 488215 * t14836 + 7572292 * t14838 - 55041532 * t14840 + 222272050 * t14842
            t14835 = 4 * phi1
            t14834 = 8 * phi1
            t14833 = -5 * phi2
            t14832 = 5 * phi2
            t14831 = 12 * phi1
            tfunc[..., c] = (0.37e2 / 0.18612224e8*1j) * np.sqrt(0.71e2) * np.sqrt(0.23e2) * np.sqrt(0.19e2) * np.sqrt(0.11e2) * ((-424983000 * t14842 + 109612464 * t14840 - 15370992 * t14838 + 983892 * t14836 - 18564 * t14830 + 96282900 * t14812 - 503422020 * t14814 + 1111379760 * t14816 - 1345653360 * t14818 + 971188920 * t14820) * np.exp((5*1j) * phi2) + (t14853 + t14857) * np.exp((-1*1j) * (t14835 + t14833)) + (t14855 - t14856) * np.exp((-1*1j) * (t14834 + t14833)) + (t14853 - t14857) * np.exp((1j) * (t14835 + t14832)) + (t14855 + t14856) * np.exp((1j) * (t14834 + t14832)) + (t14854 - t14858) * np.exp((-1*1j) * (t14831 + t14833)) + (t14854 + t14858) * np.exp((1j) * (t14831 + t14832))) * ((1 + t14830) ** (-0.1e1 / 0.2e1)) * ((1 - t14830) ** (-0.1e1 / 0.2e1))

        if Bindx == 365:
            t14886 = np.cos(phi)
            t14885 = t14886 ** 2
            t14894 = t14885 ** 2
            t14893 = t14886 * t14885
            t14896 = t14893 ** 2
            t14898 = t14894 ** 2
            t14895 = t14886 * t14894
            t14900 = t14895 ** 2
            t14902 = t14896 ** 2
            t14897 = t14886 * t14896
            t14904 = t14897 ** 2
            t14906 = t14898 ** 2
            t14899 = t14886 * t14898
            t14908 = t14899 ** 2
            t14917 = -4134240 * t14885 + 46498320 * t14894 - 119821680 * t14896 - 276637680 * t14898 + 1955091600 * t14900 - 4057471440 * t14902 + 4143150000 * t14904 - 2124975600 * t14906 + 438253200 * t14908 + 47520
            t14916 = -16375440 * t14885 + 136021800 * t14894 - 455607000 * t14896 + 727650600 * t14898 - 485188440 * t14900 - 111722760 * t14902 + 386935800 * t14904 - 228463800 * t14906 + 46221000 * t14908 + 528240
            t14868 = t14886 * t14908
            t14870 = t14886 * t14906
            t14872 = t14886 * t14904
            t14874 = t14886 * t14902
            t14876 = t14886 * t14900
            t14915 = 10399725 * t14868 + 13239015 * t14870 - 298323540 * t14872 + 926400900 * t14874 - 1345361250 * t14876 - 3136425 * t14886 + 18323325 * t14893 + 31562340 * t14895 - 388124340 * t14897 + 1035020250 * t14899
            t14914 = -30340128 * t14885 + 753312560 * t14894 - 7204775760 * t14896 + 34578871600 * t14898 - 93475221840 * t14900 + 148921303440 * t14902 - 138775753200 * t14904 + 69995780400 * t14906 - 14763378000 * t14908 + 200928
            t14913 = -46715680 * t14885 + 1016332240 * t14894 - 8860365360 * t14896 + 40030604240 * t14898 - 104202170160 * t14900 + 162157065840 * t14902 - 148835778960 * t14904 + 74274301200 * t14906 - 15533641200 * t14908 + 367840
            t14912 = 131475960 * t14868 - 206605080 * t14870 - 1012033440 * t14872 + 3709363680 * t14874 - 5221188720 * t14876 + 1342440 * t14886 - 39881160 * t14893 + 370798560 * t14895 - 1634925600 * t14897 + 3901653360 * t14899
            t14911 = 6990138540 * t14868 - 25186689660 * t14870 + 28430479440 * t14872 + 1809801840 * t14874 - 30634194360 * t14876 + 4890820 * t14886 - 202140180 * t14893 + 2342666480 * t14895 - 11617694000 * t14897 + 28062741080 * t14899
            t14910 = 13287040200 * t14868 - 64073060520 * t14870 + 130681948320 * t14872 - 146759743200 * t14874 + 98939458800 * t14876 - 1758120 * t14886 + 89831560 * t14893 - 1393301728 * t14895 + 10127641888 * t14897 - 40898057200 * t14899
            t14892 = 4 * phi1
            t14891 = 8 * phi1
            t14890 = -5 * phi2
            t14889 = 5 * phi2
            t14888 = 12 * phi1
            t14887 = 16 * phi1
            tfunc[..., c] = (0.37e2 / 0.1786773504e10*1j) * np.sqrt(0.71e2) * np.sqrt(0.17e2) * np.sqrt(0.3e1) * np.sqrt(0.29e2) * ((1 + t14886) ** (-0.1e1 / 0.2e1)) * ((1 - t14886) ** (-0.1e1 / 0.2e1)) * ((-40838108850 * t14868 + 213524969130 * t14870 - 471388456440 * t14872 + 570754914840 * t14874 - 411926923980 * t14876 + 180255289500 * t14899 - 46491804216 * t14897 + 6519561048 * t14895 - 417314898 * t14893 + 7873866 * t14886) * np.exp((5*1j) * phi2) + (t14910 + t14914) * np.exp((-1*1j) * (t14892 + t14890)) + (t14911 + t14913) * np.exp((-1*1j) * (t14891 + t14890)) + (t14910 - t14914) * np.exp((1j) * (t14892 + t14889)) + (t14911 - t14913) * np.exp((1j) * (t14891 + t14889)) + (t14912 - t14917) * np.exp((-1*1j) * (t14888 + t14890)) + (t14915 - t14916) * np.exp((-1*1j) * (t14887 + t14890)) + (t14912 + t14917) * np.exp((1j) * (t14888 + t14889)) + (t14915 + t14916) * np.exp((1j) * (t14887 + t14889)))

        if Bindx == 366:
            t14942 = np.cos(phi)
            t14941 = t14942 ** 2
            t14948 = t14941 ** 2
            t14952 = t14948 ** 2
            t14960 = t14952 ** 2
            t14926 = t14942 * t14960
            t14947 = t14942 * t14941
            t14950 = t14947 ** 2
            t14951 = t14942 * t14950
            t14958 = t14951 ** 2
            t14928 = t14942 * t14958
            t14956 = t14950 ** 2
            t14930 = t14942 * t14956
            t14949 = t14942 * t14948
            t14954 = t14949 ** 2
            t14932 = t14942 * t14954
            t14953 = t14942 * t14952
            t14968 = -6418860 * t14926 + 23266120 * t14928 - 28372440 * t14930 + 7151400 * t14932 + 22620 * t14942 - 585800 * t14947 + 4179480 * t14949 - 12162600 * t14951 + 12920080 * t14953
            t14967 = 25675440 * t14926 - 103996320 * t14928 + 172176480 * t14930 - 150155040 * t14932 + 5520 * t14942 - 234080 * t14947 + 3197600 * t14949 - 20886240 * t14951 + 74216640 * t14953
            t14966 = 32094300 * t14926 - 138194280 * t14928 + 245427000 * t14930 - 231639240 * t14932 + 9268 * t14942 - 443800 * t14947 + 6146952 * t14949 - 38047800 * t14951 + 124647600 * t14953
            t14925 = t14953 ** 2
            t14965 = 1604715 * t14925 - 58725 * t14941 + 1045740 * t14948 - 8001100 * t14950 + 29619150 * t14952 - 57319950 * t14954 + 58178060 * t14956 - 27131820 * t14958 + 2063205 * t14960 + 725
            t14964 = 24070725 * t14925 + 19285 * t14941 - 494060 * t14948 + 5174988 * t14950 - 28255150 * t14952 + 88401390 * t14954 - 163394700 * t14956 + 175574700 * t14958 - 101097045 * t14960 - 133
            t14963 = -9628290 * t14925 + 100430 * t14941 - 1937880 * t14948 + 13940920 * t14950 - 47981860 * t14952 + 84968100 * t14954 - 71204280 * t14956 + 11111640 * t14958 + 20632050 * t14960 - 830
            t14946 = 2 * phi1
            t14945 = 4 * phi1
            t14944 = -3 * phi2
            t14943 = 3 * phi2
            tfunc[..., c] = -(0.37e2 / 0.74448896e8) * np.sqrt(0.2e1) * np.sqrt(0.71e2) * np.sqrt(0.11e2) * np.sqrt(0.19e2) * np.sqrt(0.23e2) * np.sqrt(0.39e2) * ((-32094300 * t14925 - 72828 * t14941 + 1822128 * t14948 - 17457776 * t14950 + 83425800 * t14952 - 223190280 * t14954 + 349872240 * t14956 - 319109040 * t14958 + 156803580 * t14960 + 476) * np.exp((6*1j) * phi2) + (t14965 + t14968) * np.exp((-6*1j) * (t14946 - phi2)) + (t14964 - t14966) * np.exp((-2*1j) * (t14946 + t14944)) + (t14963 + t14967) * np.exp((-2*1j) * (t14945 + t14944)) + (t14964 + t14966) * np.exp((2*1j) * (t14946 + t14943)) + (t14963 - t14967) * np.exp((2*1j) * (t14945 + t14943)) + (t14965 - t14968) * np.exp((6*1j) * (t14946 + phi2)))

        if Bindx == 367:
            t14995 = np.cos(phi)
            t14994 = t14995 ** 2
            t15002 = t14994 ** 2
            t15006 = t15002 ** 2
            t15014 = t15006 ** 2
            t14979 = t14995 * t15014
            t15001 = t14995 * t14994
            t15004 = t15001 ** 2
            t15005 = t14995 * t15004
            t15012 = t15005 ** 2
            t14981 = t14995 * t15012
            t15010 = t15004 ** 2
            t14983 = t14995 * t15010
            t15003 = t14995 * t15002
            t15008 = t15003 ** 2
            t14985 = t14995 * t15008
            t15007 = t14995 * t15006
            t15024 = -18488400 * t14979 + 55993440 * t14981 + 5282400 * t14983 - 218691360 * t14985 - 528240 * t14995 - 5282400 * t15001 + 70784160 * t15003 - 237708000 * t15005 + 348638400 * t15007
            t15023 = 175301280 * t14979 - 635405760 * t14981 + 774861120 * t14983 - 195307200 * t14985 - 617760 * t14995 + 15998400 * t15001 - 114143040 * t15003 + 332164800 * t15005 - 352851840 * t15007
            t14978 = t15007 ** 2
            t15022 = 43825320 * t14978 - 1603800 * t14994 + 28559520 * t15002 - 218512800 * t15004 + 808909200 * t15006 - 1565427600 * t15008 + 1588862880 * t15010 - 740979360 * t15012 + 56346840 * t15014 + 19800
            t15021 = 6213456480 * t14979 - 25167109440 * t14981 + 41666708160 * t14983 - 36337519680 * t14985 + 1335840 * t14995 - 56647360 * t15001 + 773819200 * t15003 - 5054470080 * t15005 + 17960426880 * t15007
            t15020 = 5905351200 * t14979 - 25427747520 * t14981 + 45158568000 * t14983 - 42621620160 * t14985 + 1705312 * t14995 - 81659200 * t15001 + 1131039168 * t15003 - 7000795200 * t15005 + 22935158400 * t15007
            t15019 = 3466575 * t14978 + 7428375 * t14994 - 42919500 * t15002 + 75142140 * t15004 + 25421550 * t15006 - 234604590 * t15008 + 292512900 * t15010 - 147246900 * t15012 + 21096585 * t15014 - 297135
            t15018 = 4429013400 * t14978 + 3548440 * t14994 - 90907040 * t15002 + 952197792 * t15004 - 5198947600 * t15006 + 16265855760 * t15008 - 30064624800 * t15010 + 32305744800 * t15012 - 18601856280 * t15014 - 24472
            t15017 = 2330046180 * t14978 - 24304060 * t14994 + 468966960 * t15002 - 3373702640 * t15004 + 11611610120 * t15006 - 20562280200 * t15008 + 17231435760 * t15010 - 2689016880 * t15012 - 4992956100 * t15014 + 200860
            t15000 = 2 * phi1
            t14999 = 4 * phi1
            t14998 = 8 * phi1
            t14997 = -3 * phi2
            t14996 = 3 * phi2
            tfunc[..., c] = (0.37e2 / 0.2382364672e10) * np.sqrt(0.71e2) * np.sqrt(0.17e2) * np.sqrt(0.2e1) * np.sqrt(0.29e2) * np.sqrt(0.13e2) * ((201894 - 13612702950 * t14978 + 66507777270 * t15014 - 135349160760 * t15012 + 148397281560 * t15010 - 94665500820 * t15008 + 35384807700 * t15006 - 7404664344 * t15004 + 772850232 * t15002 - 30889782 * t14994) * np.exp((6*1j) * phi2) + (t15022 - t15023) * np.exp((-6*1j) * (t15000 - phi2)) + (t15018 - t15020) * np.exp((-2*1j) * (t15000 + t14997)) + (t15017 - t15021) * np.exp((-2*1j) * (t14999 + t14997)) + (t15019 + t15024) * np.exp((-2*1j) * (t14998 + t14997)) + (t15018 + t15020) * np.exp((2*1j) * (t15000 + t14996)) + (t15017 + t15021) * np.exp((2*1j) * (t14999 + t14996)) + (t15019 - t15024) * np.exp((2*1j) * (t14998 + t14996)) + (t15022 + t15023) * np.exp((6*1j) * (t15000 + phi2)))

        if Bindx == 368:
            t15050 = np.cos(phi)
            t15049 = t15050 ** 2
            t15057 = t15049 ** 2
            t15056 = t15050 * t15049
            t15059 = t15056 ** 2
            t15061 = t15057 ** 2
            t15058 = t15050 * t15057
            t15063 = t15058 ** 2
            t15065 = t15059 ** 2
            t15060 = t15050 * t15059
            t15067 = t15060 ** 2
            t15069 = t15061 ** 2
            t15062 = t15050 * t15061
            t15071 = t15062 ** 2
            t15078 = 6440 * t15049 - 10864 * t15057 - 1573936 * t15059 + 15249056 * t15061 - 59730528 * t15063 + 120971760 * t15065 - 133814352 * t15067 + 76875288 * t15069 - 17972808 * t15071 - 56
            t15032 = t15050 * t15071
            t15034 = t15050 * t15069
            t15036 = t15050 * t15067
            t15038 = t15050 * t15065
            t15040 = t15050 * t15063
            t15077 = 14442435 * t15032 - 65793315 * t15034 + 123468660 * t15036 - 122835300 * t15038 + 69389250 * t15040 - 35 * t15050 + 6195 * t15056 - 273700 * t15058 + 3692500 * t15060 - 22096690 * t15062
            t15076 = -68110 * t15049 + 1568980 * t15057 - 14044380 * t15059 + 63644840 * t15061 - 163779000 * t15063 + 250116300 * t15065 - 224660100 * t15067 + 109686990 * t15069 - 22466010 * t15071 + 490
            t15075 = -117450 * t15049 + 1584444 * t15057 - 8848596 * t15059 + 24193656 * t15061 - 32396712 * t15063 + 14676900 * t15065 + 11100852 * t15067 - 14687862 * t15069 + 4493202 * t15071 + 1566
            t15074 = 962829 * t15032 + 3438675 * t15034 - 26462964 * t15036 + 53469156 * t15038 - 50661666 * t15040 - 7917 * t15050 + 154077 * t15056 - 211932 * t15058 - 4550100 * t15060 + 23869842 * t15062
            t15073 = -5776974 * t15032 + 8711310 * t15034 + 29537544 * t15036 - 98010024 * t15038 + 119778204 * t15040 - 12002 * t15050 + 461122 * t15056 - 5267528 * t15058 + 27547240 * t15060 - 76968892 * t15062
            t15055 = 4 * phi1
            t15054 = 8 * phi1
            t15053 = -7 * phi2
            t15052 = 7 * phi2
            t15051 = 12 * phi1
            tfunc[..., c] = (-0.37e2 / 0.37224448e8*1j) * np.sqrt(0.2e1) * np.sqrt(0.71e2) * np.sqrt(0.11e2) * np.sqrt(0.19e2) * np.sqrt(0.23e2) * np.sqrt(0.13e2) * ((-19256580 * t15032 + 107286660 * t15034 - 253086480 * t15036 + 328338000 * t15038 - 254561400 * t15040 + 119937720 * t15062 - 33370320 * t15060 + 5055120 * t15058 - 349860 * t15056 + 7140 * t15050) * np.exp((7*1j) * phi2) + (t15076 + t15077) * np.exp((-1*1j) * (t15055 + t15053)) + (t15073 - t15078) * np.exp((-1*1j) * (t15054 + t15053)) + (-t15076 + t15077) * np.exp((1j) * (t15055 + t15052)) + (t15073 + t15078) * np.exp((1j) * (t15054 + t15052)) + (t15074 - t15075) * np.exp((-1*1j) * (t15051 + t15053)) + (t15074 + t15075) * np.exp((1j) * (t15051 + t15052))) * ((1 + t15050) ** (-0.1e1 / 0.2e1)) * ((1 - t15050) ** (-0.1e1 / 0.2e1))

        if Bindx == 369:
            t15106 = np.cos(phi)
            t15105 = t15106 ** 2
            t15114 = t15105 ** 2
            t15113 = t15106 * t15105
            t15116 = t15113 ** 2
            t15118 = t15114 ** 2
            t15115 = t15106 * t15114
            t15120 = t15115 ** 2
            t15122 = t15116 ** 2
            t15117 = t15106 * t15116
            t15124 = t15117 ** 2
            t15126 = t15118 ** 2
            t15119 = t15106 * t15118
            t15128 = t15119 ** 2
            t15137 = 3207600 * t15105 - 43271712 * t15114 + 241658208 * t15116 - 660737088 * t15118 + 884765376 * t15120 - 400831200 * t15122 - 303168096 * t15124 + 401130576 * t15126 - 122710896 * t15128 - 42768
            t15136 = 5018280 * t15105 - 17431920 * t15114 - 19544880 * t15116 + 189109920 * t15118 - 360259680 * t15120 + 292116720 * t15122 - 77651280 * t15124 - 24034920 * t15126 + 12941880 * t15128 - 264120
            t15135 = 1558480 * t15105 - 2629088 * t15114 - 380892512 * t15116 + 3690271552 * t15118 - 14454787776 * t15120 + 29275165920 * t15122 - 32383073184 * t15124 + 18603819696 * t15126 - 4349419536 * t15128 - 13552
            t15134 = 12532240 * t15105 - 288692320 * t15114 + 2584165920 * t15116 - 11710650560 * t15118 + 30135336000 * t15120 - 46021399200 * t15122 + 41337458400 * t15124 - 20182406160 * t15126 + 4133745840 * t15128 - 90160
            t15088 = t15106 * t15128
            t15090 = t15106 * t15126
            t15092 = t15106 * t15124
            t15094 = t15106 * t15122
            t15096 = t15106 * t15120
            t15133 = 2657408040 * t15088 - 12105969960 * t15090 + 22718233440 * t15092 - 22601695200 * t15094 + 12767622000 * t15096 - 6440 * t15106 + 1139880 * t15113 - 50360800 * t15115 + 679420000 * t15117 - 4065790960 * t15119
            t15132 = 2079945 * t15088 + 22219095 * t15090 - 120570780 * t15092 + 186600780 * t15094 - 47475570 * t15096 - 231105 * t15106 + 11324145 * t15113 - 74878020 * t15115 + 179997780 * t15117 - 159066270 * t15119
            t15131 = 26295192 * t15088 + 93911400 * t15090 - 722712672 * t15092 + 1460261088 * t15094 - 1383587568 * t15096 - 216216 * t15106 + 4207896 * t15113 - 5787936 * t15115 - 124264800 * t15117 + 651893616 * t15119
            t15130 = 1398027708 * t15088 - 2108137020 * t15090 - 7148085648 * t15092 + 23718425808 * t15094 - 28986325368 * t15096 + 2904484 * t15106 - 111591524 * t15113 + 1274741776 * t15115 - 6666432080 * t15117 + 18626471864 * t15119
            t15112 = 4 * phi1
            t15111 = 8 * phi1
            t15110 = -7 * phi2
            t15109 = 7 * phi2
            t15108 = 12 * phi1
            t15107 = 16 * phi1
            tfunc[..., c] = (0.37e2 / 0.3573547008e10*1j) * np.sqrt(0.71e2) * np.sqrt(0.17e2) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.29e2) * np.sqrt(0.13e2) * ((-8167621770 * t15088 + 45505321290 * t15090 - 107345886120 * t15092 + 139263597000 * t15094 - 107971469100 * t15096 + 50871231180 * t15119 - 14153923080 * t15117 + 2144114280 * t15115 - 148392090 * t15113 + 3028410 * t15106) * np.exp((7*1j) * phi2) + (t15133 - t15134) * np.exp((-1*1j) * (t15112 + t15110)) + (t15130 + t15135) * np.exp((-1*1j) * (t15111 + t15110)) + (t15133 + t15134) * np.exp((1j) * (t15112 + t15109)) + (t15130 - t15135) * np.exp((1j) * (t15111 + t15109)) + (t15131 + t15137) * np.exp((-1*1j) * (t15108 + t15110)) + (t15132 - t15136) * np.exp((-1*1j) * (t15107 + t15110)) + (t15131 - t15137) * np.exp((1j) * (t15108 + t15109)) + (t15132 + t15136) * np.exp((1j) * (t15107 + t15109))) * ((1 + t15106) ** (-0.1e1 / 0.2e1)) * ((1 - t15106) ** (-0.1e1 / 0.2e1))

        if Bindx == 370:
            t15162 = np.cos(phi)
            t15161 = t15162 ** 2
            t15167 = t15161 ** 2
            t15171 = t15167 ** 2
            t15179 = t15171 ** 2
            t15146 = t15162 * t15179
            t15166 = t15162 * t15161
            t15169 = t15166 ** 2
            t15170 = t15162 * t15169
            t15177 = t15170 ** 2
            t15148 = t15162 * t15177
            t15175 = t15169 ** 2
            t15150 = t15162 * t15175
            t15168 = t15162 * t15167
            t15173 = t15168 ** 2
            t15152 = t15162 * t15173
            t15172 = t15162 * t15171
            t15187 = -225943872 * t15146 + 782259456 * t15148 - 1014330912 * t15150 + 558876864 * t15152 + 108448 * t15162 - 3585344 * t15166 + 29067808 * t15168 - 72465536 * t15170 - 54019680 * t15172
            t15186 = -56485968 * t15146 + 100630464 * t15148 + 116575128 * t15150 - 428350416 * t15152 + 127368 * t15162 - 3656784 * t15166 + 40553832 * t15168 - 189899424 * t15170 + 420505800 * t15172
            t15185 = 282429840 * t15146 - 1262627520 * t15148 + 2334199560 * t15150 - 2302848240 * t15152 + 132440 * t15162 - 5759600 * t15166 + 73325560 * t15168 - 422514400 * t15170 + 1303662360 * t15172
            t15145 = t15172 ** 2
            t15184 = 158866785 * t15145 - 252175 * t15161 + 4686220 * t15167 - 26464900 * t15169 + 32936750 * t15171 + 163199190 * t15173 - 641362260 * t15175 + 926203740 * t15177 - 617815275 * t15179 + 1925
            t15183 = 10591119 * t15145 + 1789503 * t15161 - 17513100 * t15167 + 56183556 * t15169 - 23861838 * t15171 - 216249462 * t15173 + 454711764 * t15175 - 342788700 * t15177 + 77163867 * t15179 - 26709
            t15182 = -63546714 * t15145 + 1236278 * t15161 - 22708840 * t15167 + 166910744 * t15169 - 620254492 * t15171 + 1252118868 * t15173 - 1349120136 * t15175 + 654507960 * t15177 - 19164882 * t15179 - 11554
            t15165 = 3 * phi1
            t15164 = -2 * phi2
            t15163 = 2 * phi2
            tfunc[..., c] = -(0.37e2 / 0.37224448e8) * np.sqrt(0.71e2) * np.sqrt(0.19e2) * np.sqrt(0.23e2) * ((7140 - 2069937000 * t15173 + 850176120 * t15171 - 195893040 * t15169 + 22533840 * t15167 - 992460 * t15161 - 211822380 * t15145 + 1119632580 * t15179 - 2475846000 * t15177 + 2962141200 * t15175) * np.exp((8*1j) * phi2) + (t15182 - t15187) * np.exp((-8*1j) * (phi1 - phi2)) + (t15184 - t15185) * np.exp((-4*1j) * (phi1 + t15164)) + (t15183 + t15186) * np.exp((-4*1j) * (t15165 + t15164)) + (t15184 + t15185) * np.exp((4*1j) * (phi1 + t15163)) + (t15183 - t15186) * np.exp((4*1j) * (t15165 + t15163)) + (t15182 + t15187) * np.exp((8*1j) * (phi1 + phi2)))

        if Bindx == 371:
            t15214 = np.cos(phi)
            t15213 = t15214 ** 2
            t15220 = t15213 ** 2
            t15224 = t15220 ** 2
            t15232 = t15224 ** 2
            t15198 = t15214 * t15232
            t15219 = t15214 * t15213
            t15222 = t15219 ** 2
            t15223 = t15214 * t15222
            t15230 = t15223 ** 2
            t15200 = t15214 * t15230
            t15228 = t15222 ** 2
            t15202 = t15214 * t15228
            t15221 = t15214 * t15220
            t15226 = t15221 ** 2
            t15204 = t15214 * t15226
            t15225 = t15214 * t15224
            t15242 = 14790720 * t15198 + 8451840 * t15200 - 174319200 * t15202 + 302153280 * t15204 + 1056480 * t15214 - 19016640 * t15219 + 72897120 * t15221 - 54936960 * t15223 - 151076640 * t15225
            t15241 = 140241024 * t15198 - 249841152 * t15200 - 289427904 * t15202 + 1063490688 * t15204 - 316224 * t15214 + 9078912 * t15219 - 100685376 * t15221 + 471474432 * t15223 - 1044014400 * t15225
            t15197 = t15225 ** 2
            t15240 = 26295192 * t15197 + 4442904 * t15213 - 43480800 * t15220 + 139490208 * t15222 - 59243184 * t15224 - 536895216 * t15226 + 1128939552 * t15228 - 851061600 * t15230 + 191579256 * t15232 - 66312
            t15239 = 4970765184 * t15198 - 17209708032 * t15200 + 22315280064 * t15202 - 12295291008 * t15204 - 2385856 * t15214 + 78877568 * t15219 - 639491776 * t15221 + 1594241792 * t15223 + 1188432960 * t15225
            t15238 = -4724280960 * t15198 + 21120314880 * t15200 - 39044792640 * t15202 + 38520370560 * t15204 - 2215360 * t15214 + 96342400 * t15219 - 1226536640 * t15221 + 7067513600 * t15223 - 21806715840 * t15225
            t15237 = 2079945 * t15197 - 3994815 * t15213 - 7527420 * t15220 + 115024260 * t15222 - 273826410 * t15224 + 217172670 * t15226 + 25751700 * t15228 - 110534220 * t15230 + 35491125 * t15232 + 363165
            t15236 = 2657408040 * t15197 - 4218200 * t15213 + 78387680 * t15220 - 442685600 * t15222 + 550942000 * t15224 + 2729877360 * t15226 - 10728241440 * t15228 + 15492862560 * t15230 - 10334364600 * t15232 + 32200
            t15235 = 1398027708 * t15197 - 27198116 * t15213 + 499594480 * t15220 - 3672036368 * t15222 + 13645598824 * t15224 - 27546615096 * t15226 + 29680642992 * t15228 - 14399175120 * t15230 + 421627404 * t15232 + 254188
            t15218 = 2 * phi1
            t15217 = 3 * phi1
            t15216 = -2 * phi2
            t15215 = 2 * phi2
            tfunc[..., c] = (0.37e2 / 0.3573547008e10) * np.sqrt(0.71e2) * np.sqrt(0.3e1) * np.sqrt(0.11e2) * np.sqrt(0.17e2) * np.sqrt(0.29e2) * ((-8167621770 * t15197 + 43171715070 * t15232 - 95465709000 * t15230 + 114216679800 * t15228 - 79814335500 * t15226 + 32781790980 * t15224 - 7553405160 * t15222 + 868878360 * t15220 - 38268090 * t15213 + 275310) * np.exp((8*1j) * phi2) + (t15235 - t15239) * np.exp((-8*1j) * (phi1 - phi2)) + (t15237 - t15242) * np.exp((-8*1j) * (t15218 - phi2)) + (t15236 + t15238) * np.exp((-4*1j) * (phi1 + t15216)) + (t15240 - t15241) * np.exp((-4*1j) * (t15217 + t15216)) + (t15236 - t15238) * np.exp((4*1j) * (phi1 + t15215)) + (t15240 + t15241) * np.exp((4*1j) * (t15217 + t15215)) + (t15235 + t15239) * np.exp((8*1j) * (phi1 + phi2)) + (t15237 + t15242) * np.exp((8*1j) * (t15218 + phi2)))

        if Bindx == 372:
            t15268 = np.cos(phi)
            t15267 = t15268 ** 2
            t15274 = t15267 ** 2
            t15273 = t15268 * t15267
            t15276 = t15273 ** 2
            t15278 = t15274 ** 2
            t15275 = t15268 * t15274
            t15280 = t15275 ** 2
            t15282 = t15276 ** 2
            t15277 = t15268 * t15276
            t15284 = t15277 ** 2
            t15286 = t15278 ** 2
            t15279 = t15268 * t15278
            t15288 = t15279 ** 2
            t15295 = 126614 * t15267 - 285244 * t15274 - 5927020 * t15276 + 36759008 * t15278 - 85859488 * t15280 + 91745212 * t15282 - 35409812 * t15284 - 8207870 * t15286 + 7060746 * t15288 - 2146
            t15294 = 220968 * t15267 - 3434256 * t15274 + 19503792 * t15276 - 48926592 * t15278 + 42392064 * t15280 + 45221904 * t15282 - 128549808 * t15284 + 101817144 * t15286 - 28242984 * t15288 - 2232
            t15293 = 170478 * t15267 - 3545388 * t15274 + 29241828 * t15276 - 124207776 * t15278 + 303197664 * t15280 - 442428756 * t15282 + 381280284 * t15284 - 179010678 * t15286 + 35303730 * t15288 - 1386
            t15250 = t15268 * t15288
            t15252 = t15268 * t15286
            t15254 = t15268 * t15284
            t15256 = t15268 * t15282
            t15258 = t15268 * t15280
            t15292 = -1176791 * t15250 - 12272249 * t15252 + 49987996 * t15254 - 57988748 * t15256 + 8320390 * t15258 + 54375 * t15268 - 1146631 * t15273 + 8374388 * t15275 - 26192452 * t15277 + 32039722 * t15279
            t15291 = -17651865 * t15250 + 74137833 * t15252 - 115463964 * t15254 + 68838924 * t15256 + 13207194 * t15258 - 11319 * t15268 + 447447 * t15273 - 4814964 * t15275 + 21118020 * t15277 - 39807306 * t15279
            t15290 = 7060746 * t15250 + 9078102 * t15252 - 116575128 * t15254 + 251935992 * t15256 - 257385492 * t15258 + 16806 * t15268 - 608166 * t15273 + 7534296 * t15275 - 44983224 * t15277 + 143926068 * t15279
            t15272 = 4 * phi1
            t15271 = 8 * phi1
            t15270 = -9 * phi2
            t15269 = 9 * phi2
            tfunc[..., c] = (0.37e2 / 0.37224448e8*1j) * np.sqrt(0.2e1) * np.sqrt(0.71e2) * np.sqrt(0.23e2) * np.sqrt(0.19e2) * np.sqrt(0.15e2) * ((-229993000 * t15279 + 71218032 * t15277 - 12058032 * t15275 + 935340 * t15273 - 21420 * t15268 + 23535820 * t15250 - 141887372 * t15252 + 364102192 * t15254 - 516782320 * t15256 + 440950760 * t15258) * np.exp((9*1j) * phi2) + (t15292 + t15295) * np.exp((-3*1j) * (t15272 - 3 * phi2)) + (t15291 + t15293) * np.exp((-1*1j) * (t15272 + t15270)) + (t15290 + t15294) * np.exp((-1*1j) * (t15271 + t15270)) + (t15291 - t15293) * np.exp((1j) * (t15272 + t15269)) + (t15290 - t15294) * np.exp((1j) * (t15271 + t15269)) + (t15292 - t15295) * np.exp((3*1j) * (t15272 + 3 * phi2))) * ((1 + t15268) ** (-0.1e1 / 0.2e1)) * ((1 - t15268) ** (-0.1e1 / 0.2e1))

        if Bindx == 373:
            t15323 = np.cos(phi)
            t15322 = t15323 ** 2
            t15330 = t15322 ** 2
            t15329 = t15323 * t15322
            t15332 = t15329 ** 2
            t15334 = t15330 ** 2
            t15338 = t15332 ** 2
            t15333 = t15323 * t15332
            t15340 = t15333 ** 2
            t15342 = t15334 ** 2
            t15335 = t15323 * t15334
            t15344 = t15335 ** 2
            t15353 = -52824 * t15322 - 1443856 * t15330 + 7430576 * t15332 - 10987392 * t15334 + 13276432 * t15338 - 10247856 * t15340 + 1391032 * t15342 + 616280 * t15344 + 17608
            t15305 = t15323 * t15344
            t15307 = t15323 * t15342
            t15309 = t15323 * t15340
            t15311 = t15323 * t15338
            t15331 = t15323 * t15330
            t15336 = t15331 ** 2
            t15313 = t15323 * t15336
            t15352 = 77035 * t15305 + 1789413 * t15307 - 4058644 * t15309 - 4217116 * t15311 + 18369546 * t15313 + 81437 * t15323 - 926621 * t15329 + 1875252 * t15331 + 4005820 * t15333 - 16996122 * t15335
            t15351 = -104784 * t15322 + 236064 * t15330 + 4905120 * t15332 - 30421248 * t15334 + 71056128 * t15336 - 75927072 * t15338 + 29304672 * t15340 + 6792720 * t15342 - 5843376 * t15344 + 1776
            t15350 = 973896 * t15305 + 10156344 * t15307 - 41369376 * t15309 + 47990688 * t15311 - 6885840 * t15313 - 45000 * t15323 + 948936 * t15329 - 6930528 * t15331 + 21676512 * t15333 - 26515632 * t15335
            t15349 = 1620432 * t15322 - 25184544 * t15330 + 143027808 * t15332 - 358795008 * t15334 + 310875136 * t15336 + 331627296 * t15338 - 942698592 * t15340 + 746659056 * t15342 - 207115216 * t15344 - 16368
            t15348 = -950544 * t15322 + 19768224 * t15330 - 163045344 * t15332 + 692552448 * t15334 - 1690556672 * t15336 + 2466875488 * t15338 - 2125926432 * t15340 + 998120144 * t15342 - 196845040 * t15344 + 7728
            t15347 = 98422520 * t15305 - 413374584 * t15307 + 643799072 * t15309 - 383829152 * t15311 - 73640112 * t15313 + 63112 * t15323 - 2494856 * t15329 + 26847072 * t15331 - 117748960 * t15333 + 221955888 * t15335
            t15346 = 51778804 * t15305 + 66572748 * t15307 - 854884272 * t15309 + 1847530608 * t15311 - 1887493608 * t15313 + 123244 * t15323 - 4459884 * t15329 + 55251504 * t15331 - 329876976 * t15333 + 1055457832 * t15335
            t15328 = 4 * phi1
            t15327 = 8 * phi1
            t15326 = -9 * phi2
            t15325 = 9 * phi2
            t15324 = 16 * phi1
            tfunc[..., c] = (0.111e3 / 0.1191182336e10*1j) * np.sqrt(0.5e1) * np.sqrt(0.71e2) * np.sqrt(0.2e1) * np.sqrt(0.11e2) * np.sqrt(0.17e2) * np.sqrt(0.29e2) * ((-302504510 * t15305 + 1823670046 * t15307 - 4679784056 * t15309 + 6642172760 * t15311 - 5667514180 * t15313 + 2956086500 * t15335 - 915361176 * t15333 + 154981176 * t15331 - 12021870 * t15329 + 275310 * t15323) * np.exp((9*1j) * phi2) + (t15352 - t15353) * np.exp((-1*1j) * (t15324 + t15326)) + (t15352 + t15353) * np.exp((1j) * (t15324 + t15325)) + (t15350 + t15351) * np.exp((-3*1j) * (t15328 - 3 * phi2)) + (t15347 + t15348) * np.exp((-1*1j) * (t15328 + t15326)) + (t15346 + t15349) * np.exp((-1*1j) * (t15327 + t15326)) + (t15347 - t15348) * np.exp((1j) * (t15328 + t15325)) + (t15346 - t15349) * np.exp((1j) * (t15327 + t15325)) + (t15350 - t15351) * np.exp((3*1j) * (t15328 + 3 * phi2))) * ((1 + t15323) ** (-0.1e1 / 0.2e1)) * ((1 - t15323) ** (-0.1e1 / 0.2e1))

        if Bindx == 374:
            t15378 = np.cos(phi)
            t15377 = t15378 ** 2
            t15385 = t15377 ** 2
            t15389 = t15385 ** 2
            t15397 = t15389 ** 2
            t15362 = t15378 * t15397
            t15384 = t15378 * t15377
            t15387 = t15384 ** 2
            t15388 = t15378 * t15387
            t15395 = t15388 ** 2
            t15364 = t15378 * t15395
            t15393 = t15387 ** 2
            t15366 = t15378 * t15393
            t15386 = t15378 * t15385
            t15391 = t15386 ** 2
            t15368 = t15378 * t15391
            t15390 = t15378 * t15389
            t15405 = -3362260 * t15362 - 1977800 * t15364 + 27077880 * t15366 - 38402728 * t15368 - 42108 * t15378 + 619208 * t15384 - 2391224 * t15386 - 298584 * t15388 + 18777616 * t15390
            t15404 = -13449040 * t15362 + 36391520 * t15364 - 21259552 * t15366 - 27228448 * t15368 + 26384 * t15378 - 775264 * t15384 + 6686240 * t15386 - 25373920 * t15388 + 44982080 * t15390
            t15403 = -16811300 * t15362 + 78716440 * t15364 - 152290600 * t15366 + 157144504 * t15368 - 13420 * t15378 + 511720 * t15384 - 5912984 * t15386 + 31811912 * t15388 - 93156272 * t15390
            t15361 = t15390 ** 2
            t15402 = -3026034 * t15361 - 4450 * t15377 - 287320 * t15385 + 5483192 * t15387 - 31134532 * t15389 + 80683460 * t15391 - 104760760 * t15393 + 63469400 * t15395 - 10423006 * t15397 + 50
            t15401 = 504339 * t15361 + 66787 * t15377 - 1381908 * t15385 + 8741876 * t15387 - 22252802 * t15389 + 20925762 * t15391 + 4793932 * t15393 - 18961708 * t15395 + 7565085 * t15397 - 1363
            t15400 = 7565085 * t15361 - 90739 * t15377 + 1581844 * t15385 - 9880948 * t15387 + 27821090 * t15389 - 34953314 * t15391 + 7333172 * t15393 + 27016748 * t15395 - 26393741 * t15397 + 803
            t15383 = 2 * phi1
            t15382 = 4 * phi1
            t15381 = 6 * phi1
            t15380 = -5 * phi2
            t15379 = 5 * phi2
            tfunc[..., c] = -(0.37e2 / 0.74448896e8) * np.sqrt(0.2e1) * np.sqrt(0.71e2) * np.sqrt(0.23e2) * np.sqrt(0.19e2) * np.sqrt(0.7e1) * np.sqrt(0.15e2) * ((1020 - 10086780 * t15361 + 58503324 * t15397 - 143048880 * t15395 + 190850160 * t15393 - 150060360 * t15391 + 69961800 * t15389 - 18432624 * t15387 + 2435760 * t15385 - 123420 * t15377) * np.exp((10*1j) * phi2) + (t15400 + t15403) * np.exp((-2*1j) * (t15383 + t15380)) + (t15402 - t15404) * np.exp((-2*1j) * (t15382 + t15380)) + (t15401 + t15405) * np.exp((-2*1j) * (t15381 + t15380)) + (t15400 - t15403) * np.exp((2*1j) * (t15383 + t15379)) + (t15402 + t15404) * np.exp((2*1j) * (t15382 + t15379)) + (t15401 - t15405) * np.exp((2*1j) * (t15381 + t15379)))

        if Bindx == 375:
            t15432 = np.cos(phi)
            t15431 = t15432 ** 2
            t15440 = t15431 ** 2
            t15444 = t15440 ** 2
            t15445 = t15432 * t15444
            t15415 = t15445 ** 2
            t15439 = t15432 * t15431
            t15442 = t15439 ** 2
            t15441 = t15432 * t15440
            t15446 = t15441 ** 2
            t15448 = t15442 ** 2
            t15443 = t15432 * t15442
            t15450 = t15443 ** 2
            t15452 = t15444 ** 2
            t15462 = 99045 * t15415 - 200291 * t15431 + 3512796 * t15440 - 8126092 * t15442 - 3147430 * t15444 + 23290982 * t15446 - 17511156 * t15448 - 977244 * t15450 + 3088003 * t15452 - 28613
            t15416 = t15432 * t15452
            t15418 = t15432 * t15450
            t15420 = t15432 * t15448
            t15422 = t15432 * t15446
            t15461 = -880400 * t15416 - 4578080 * t15418 + 13734240 * t15420 - 915616 * t15422 + 176080 * t15432 - 1056480 * t15439 - 1901664 * t15441 + 15565472 * t15443 - 20143552 * t15445
            t15460 = 8347680 * t15416 + 4910400 * t15418 - 67227840 * t15420 + 95344704 * t15422 + 104544 * t15432 - 1537344 * t15439 + 5936832 * t15441 + 741312 * t15443 - 46620288 * t15445
            t15459 = 66572748 * t15415 + 97900 * t15431 + 6321040 * t15440 - 120630224 * t15442 + 684959704 * t15444 - 1775036120 * t15446 + 2304736720 * t15448 - 1396326800 * t15450 + 229306132 * t15452 - 1100
            t15458 = 1252152 * t15415 + 165816 * t15431 - 3430944 * t15440 + 21703968 * t15442 - 55248336 * t15444 + 51953616 * t15446 + 11902176 * t15448 - 47077344 * t15450 + 18782280 * t15452 - 3384
            t15457 = -295878880 * t15416 + 800613440 * t15418 - 467710144 * t15420 - 599025856 * t15422 + 580448 * t15432 - 17055808 * t15439 + 147097280 * t15441 - 558226240 * t15443 + 989605760 * t15445
            t15456 = 281207200 * t15416 - 1316711360 * t15418 + 2547406400 * t15420 - 2628598976 * t15422 + 224480 * t15432 - 8559680 * t15439 + 98908096 * t15441 - 532126528 * t15443 + 1558250368 * t15445
            t15455 = 126543240 * t15415 - 1517816 * t15431 + 26459936 * t15440 - 165281312 * t15442 + 465370960 * t15444 - 584673616 * t15446 + 122663968 * t15448 + 451916512 * t15450 - 441495304 * t15452 + 13432
            t15438 = 2 * phi1
            t15437 = 4 * phi1
            t15436 = 6 * phi1
            t15435 = 8 * phi1
            t15434 = -5 * phi2
            t15433 = 5 * phi2
            tfunc[..., c] = (0.37e2 / 0.2382364672e10) * np.sqrt(0.5e1) * np.sqrt(0.71e2) * np.sqrt(0.7e1) * np.sqrt(0.2e1) * np.sqrt(0.11e2) * np.sqrt(0.17e2) * np.sqrt(0.29e2) * ((39330 - 388934370 * t15415 + 2255819346 * t15452 - 5515796520 * t15450 + 7358957640 * t15448 - 5786150940 * t15446 + 2697644700 * t15444 - 710740296 * t15442 + 93920040 * t15440 - 4758930 * t15431) * np.exp((10*1j) * phi2) + (t15455 - t15456) * np.exp((-2*1j) * (t15438 + t15434)) + (t15457 + t15459) * np.exp((-2*1j) * (t15437 + t15434)) + (t15458 - t15460) * np.exp((-2*1j) * (t15436 + t15434)) + (t15461 + t15462) * np.exp((-2*1j) * (t15435 + t15434)) + (t15455 + t15456) * np.exp((2*1j) * (t15438 + t15433)) + (-t15457 + t15459) * np.exp((2*1j) * (t15437 + t15433)) + (t15458 + t15460) * np.exp((2*1j) * (t15436 + t15433)) + (-t15461 + t15462) * np.exp((2*1j) * (t15435 + t15433)))

        if Bindx == 376:
            t15488 = np.cos(phi)
            t15487 = t15488 ** 2
            t15495 = t15487 ** 2
            t15499 = t15495 ** 2
            t15500 = t15488 * t15499
            t15509 = t15500 ** 2
            t15470 = t15488 * t15509
            t15507 = t15499 ** 2
            t15472 = t15488 * t15507
            t15494 = t15488 * t15487
            t15497 = t15494 ** 2
            t15498 = t15488 * t15497
            t15505 = t15498 ** 2
            t15474 = t15488 * t15505
            t15503 = t15497 ** 2
            t15476 = t15488 * t15503
            t15496 = t15488 * t15495
            t15501 = t15496 ** 2
            t15478 = t15488 * t15501
            t15516 = -17391 * t15470 - 330429 * t15472 + 746356 * t15474 + 215012 * t15476 - 1738386 * t15478 - 1661 * t15488 + 10505 * t15494 + 66660 * t15496 - 632060 * t15498 + 1681394 * t15500
            t15515 = -4532 * t15487 + 84722 * t15495 - 662046 * t15497 + 2722786 * t15499 - 6446638 * t15501 + 9084438 * t15503 - 7524506 * t15505 + 3383402 * t15507 - 637670 * t15509 + 44
            t15514 = 104346 * t15470 + 498542 * t15472 - 3068008 * t15474 + 5466248 * t15476 - 4479748 * t15478 - 946 * t15488 + 21626 * t15494 - 96184 * t15496 - 104104 * t15498 + 1658228 * t15500
            t15513 = -9828 * t15487 + 104330 * t15495 - 391622 * t15497 + 426426 * t15499 + 657514 * t15501 - 1930786 * t15503 + 1458798 * t15505 - 187550 * t15507 - 127534 * t15509 + 252
            t15512 = 8848 * t15487 - 130616 * t15495 + 810568 * t15497 - 2490488 * t15499 + 3879304 * t15501 - 2538536 * t15503 - 439208 * t15505 + 1410376 * t15507 - 510136 * t15509 - 112
            t15511 = -260865 * t15470 + 979693 * t15472 - 928884 * t15474 - 1058596 * t15476 + 3088690 * t15478 - 979 * t15488 + 32967 * t15494 - 316580 * t15496 + 1337468 * t15498 - 2872914 * t15500
            t15493 = 4 * phi1
            t15492 = 8 * phi1
            t15491 = 12 * phi1
            t15490 = -11 * phi2
            t15489 = 11 * phi2
            tfunc[..., c] = (0.37e2 / 0.18612224e8*1j) * np.sqrt(0.15e2) * np.sqrt(0.29e2) * np.sqrt(0.7e1) * np.sqrt(0.19e2) * np.sqrt(0.23e2) * np.sqrt(0.71e2) * ((347820 * t15470 - 2295612 * t15472 + 6501072 * t15474 - 10277520 * t15476 + 9871560 * t15478 - 5865000 * t15500 + 2094672 * t15498 - 413712 * t15496 + 37740 * t15494 - 1020 * t15488) * np.exp((11*1j) * phi2) + (t15511 - t15515) * np.exp((-1*1j) * (t15493 + t15490)) + (t15512 + t15514) * np.exp((-1*1j) * (t15492 + t15490)) + (t15511 + t15515) * np.exp((1j) * (t15493 + t15489)) + (-t15512 + t15514) * np.exp((1j) * (t15492 + t15489)) + (-t15513 + t15516) * np.exp((-1*1j) * (t15491 + t15490)) + (t15513 + t15516) * np.exp((1j) * (t15491 + t15489))) * ((1 + t15488) ** (-0.1e1 / 0.2e1)) * ((1 - t15488) ** (-0.1e1 / 0.2e1))

        if Bindx == 377:
            t15544 = np.cos(phi)
            t15543 = t15544 ** 2
            t15552 = t15543 ** 2
            t15551 = t15544 * t15543
            t15554 = t15551 ** 2
            t15556 = t15552 ** 2
            t15553 = t15544 * t15552
            t15558 = t15553 ** 2
            t15560 = t15554 ** 2
            t15555 = t15544 * t15554
            t15562 = t15555 ** 2
            t15564 = t15556 ** 2
            t15557 = t15544 * t15556
            t15566 = t15557 ** 2
            t15575 = -598672 * t15543 + 4912632 * t15552 - 3820936 * t15554 - 23119304 * t15556 + 42805048 * t15558 - 12589720 * t15560 - 15688728 * t15562 + 7166456 * t15564 + 968440 * t15566 - 35216
            t15574 = 707616 * t15543 - 7511760 * t15552 + 28196784 * t15554 - 30702672 * t15556 - 47341008 * t15558 + 139016592 * t15560 - 105033456 * t15562 + 13503600 * t15564 + 9182448 * t15566 - 18144
            t15526 = t15544 * t15566
            t15528 = t15544 * t15564
            t15530 = t15544 * t15562
            t15532 = t15544 * t15560
            t15534 = t15544 * t15558
            t15573 = 99045 * t15526 + 3853951 * t15528 + 2491532 * t15530 - 30136092 * t15532 + 28097966 * t15534 - 266321 * t15544 + 556853 * t15551 + 7263300 * t15553 - 23920468 * t15555 + 11960234 * t15557
            t15572 = 5645024 * t15543 - 83333008 * t15552 + 517142384 * t15554 - 1588931344 * t15556 + 2474995952 * t15558 - 1619585968 * t15560 - 280214704 * t15562 + 899819888 * t15564 - 325466768 * t15566 - 71456
            t15571 = 2198432 * t15543 - 41097872 * t15552 + 321152496 * t15554 - 1320798736 * t15556 + 3127205488 * t15558 - 4406778288 * t15560 + 3650069456 * t15562 - 1641257552 * t15564 + 309327920 * t15566 - 21344
            t15570 = 1252152 * t15526 + 23790888 * t15528 - 53737632 * t15530 - 15480864 * t15532 + 125163792 * t15534 + 119592 * t15544 - 756360 * t15551 - 4799520 * t15553 + 45508320 * t15555 - 121060368 * t15557
            t15569 = 66572748 * t15526 + 318069796 * t15528 - 1957389104 * t15530 + 3487466224 * t15532 - 2858079224 * t15534 - 603548 * t15544 + 13797388 * t15551 - 61365392 * t15553 - 66418352 * t15555 + 1057949464 * t15557
            t15568 = 126543240 * t15526 - 475240168 * t15528 + 450593184 * t15530 + 513515296 * t15532 - 1498295440 * t15534 + 474904 * t15544 - 15991992 * t15551 + 153570080 * t15553 - 648793568 * t15555 + 1393624464 * t15557
            t15550 = 4 * phi1
            t15549 = 8 * phi1
            t15548 = 12 * phi1
            t15547 = 16 * phi1
            t15546 = -11 * phi2
            t15545 = 11 * phi2
            tfunc[..., c] = (0.37e2 / 0.595591168e9*1j) * np.sqrt(0.5e1) * np.sqrt(0.71e2) * np.sqrt(0.17e2) * np.sqrt(0.11e2) * np.sqrt(0.7e1) * ((-388934370 * t15526 + 2566966842 * t15528 - 7269536952 * t15530 + 11492383320 * t15532 - 11038436460 * t15534 + 6558277500 * t15557 - 2342274552 * t15555 + 462615192 * t15553 - 42201090 * t15551 + 1140570 * t15544) * np.exp((11*1j) * phi2) + (t15568 - t15571) * np.exp((-1*1j) * (t15550 + t15546)) + (t15569 + t15572) * np.exp((-1*1j) * (t15549 + t15546)) + (t15568 + t15571) * np.exp((1j) * (t15550 + t15545)) + (t15569 - t15572) * np.exp((1j) * (t15549 + t15545)) + (t15570 - t15574) * np.exp((-1*1j) * (t15548 + t15546)) + (t15573 - t15575) * np.exp((-1*1j) * (t15547 + t15546)) + (t15570 + t15574) * np.exp((1j) * (t15548 + t15545)) + (t15573 + t15575) * np.exp((1j) * (t15547 + t15545))) * ((1 + t15544) ** (-0.1e1 / 0.2e1)) * ((1 - t15544) ** (-0.1e1 / 0.2e1))

        if Bindx == 378:
            t15600 = np.cos(phi)
            t15599 = t15600 ** 2
            t15605 = t15599 ** 2
            t15609 = t15605 ** 2
            t15617 = t15609 ** 2
            t15584 = t15600 * t15617
            t15604 = t15600 * t15599
            t15607 = t15604 ** 2
            t15608 = t15600 * t15607
            t15615 = t15608 ** 2
            t15586 = t15600 * t15615
            t15613 = t15607 ** 2
            t15588 = t15600 * t15613
            t15606 = t15600 * t15605
            t15611 = t15606 ** 2
            t15590 = t15600 * t15611
            t15610 = t15600 * t15609
            t15625 = -973896 * t15584 - 3393632 * t15586 + 11481036 * t15588 - 6361992 * t15590 + 3300 * t15600 + 196280 * t15604 - 2118732 * t15606 + 6527664 * t15608 - 5368220 * t15610
            t15624 = -3895584 * t15584 + 6940032 * t15586 + 8039664 * t15588 - 29541408 * t15590 + 8784 * t15600 - 252192 * t15604 + 2796816 * t15606 - 13096512 * t15608 + 29000400 * t15610
            t15623 = 4869480 * t15584 - 24060960 * t15586 + 48838020 * t15588 - 52270680 * t15590 + 4620 * t15600 - 157080 * t15604 + 1871100 * t15606 - 10589040 * t15608 + 31494540 * t15610
            t15583 = t15610 ** 2
            t15622 = -121737 * t15583 + 126495 * t15599 - 697620 * t15605 + 44044 * t15607 + 6899178 * t15609 - 15069054 * t15611 + 9157148 * t15613 + 2631900 * t15615 - 2973861 * t15617 - 4685
            t15621 = -1826055 * t15583 + 105105 * t15599 - 1519980 * t15605 + 8274420 * t15607 - 21785610 * t15609 + 29357790 * t15611 - 17653020 * t15613 - 429660 * t15615 + 5478165 * t15617 - 1155
            t15620 = 730422 * t15583 + 123414 * t15599 - 1207800 * t15605 + 3874728 * t15607 - 1645644 * t15609 - 14913756 * t15611 + 31359432 * t15613 - 23640600 * t15615 + 5321646 * t15617 - 1842
            t15603 = 2 * phi1
            t15602 = -3 * phi2
            t15601 = 3 * phi2
            tfunc[..., c] = (0.37e2 / 0.37224448e8) * np.sqrt(0.2e1) * np.sqrt(0.71e2) * np.sqrt(0.19e2) * np.sqrt(0.23e2) * np.sqrt(0.29e2) * ((-1020 + 2434740 * t15583 - 15651900 * t15617 + 42876720 * t15615 - 64916880 * t15613 + 58819320 * t15611 - 32172840 * t15609 + 10138800 * t15607 - 1627920 * t15605 + 100980 * t15599) * np.exp((12*1j) * phi2) + (t15621 + t15623) * np.exp((-4*1j) * (phi1 + t15602)) + (t15620 + t15624) * np.exp((-4*1j) * (t15603 + t15602)) + (t15621 - t15623) * np.exp((4*1j) * (phi1 + t15601)) + (t15620 - t15624) * np.exp((4*1j) * (t15603 + t15601)) + (t15622 - t15625) * np.exp((-12*1j) * (phi1 - phi2)) + (t15622 + t15625) * np.exp((12*1j) * (phi1 + phi2)))

        if Bindx == 379:
            t15652 = np.cos(phi)
            t15651 = t15652 ** 2
            t15658 = t15651 ** 2
            t15662 = t15658 ** 2
            t15670 = t15662 ** 2
            t15636 = t15652 * t15670
            t15657 = t15652 * t15651
            t15660 = t15657 ** 2
            t15661 = t15652 * t15660
            t15668 = t15661 ** 2
            t15638 = t15652 * t15668
            t15666 = t15660 ** 2
            t15640 = t15652 * t15666
            t15659 = t15652 * t15658
            t15664 = t15659 ** 2
            t15642 = t15652 * t15664
            t15663 = t15652 * t15662
            t15680 = -23373504 * t15636 - 81447168 * t15638 + 275544864 * t15640 - 152687808 * t15642 + 79200 * t15652 + 4710720 * t15657 - 50849568 * t15659 + 156663936 * t15661 - 128837280 * t15663
            t15679 = -2465120 * t15636 - 26764160 * t15638 + 8627920 * t15640 + 96139680 * t15642 - 880400 * t15652 - 2465120 * t15657 + 30814000 * t15659 - 27468480 * t15661 - 75538320 * t15663
            t15635 = t15663 ** 2
            t15678 = -231105 * t15635 - 2872305 * t15651 + 9552340 * t15658 + 28040740 * t15660 - 91275470 * t15662 + 22032010 * t15664 + 76110580 * t15666 - 30065660 * t15668 - 11192085 * t15670 - 99045
            t15677 = -787380160 * t15636 + 3890584320 * t15638 - 7896959840 * t15640 + 8452010560 * t15642 - 747040 * t15652 + 25399360 * t15657 - 302551200 * t15659 + 1712215680 * t15661 - 5092571680 * t15663
            t15676 = -828460864 * t15636 + 1475913472 * t15638 + 1709768544 * t15640 - 6282472768 * t15642 + 1868064 * t15652 - 53632832 * t15657 + 594789536 * t15659 - 2785191552 * t15661 + 6167418400 * t15663
            t15675 = -2921688 * t15635 + 3035880 * t15651 - 16742880 * t15658 + 1057056 * t15660 + 165580272 * t15662 - 361657296 * t15664 + 219771552 * t15666 + 63165600 * t15668 - 71372664 * t15670 - 112440
            t15674 = -295267560 * t15635 + 16995160 * t15651 - 245776160 * t15658 + 1337948640 * t15660 - 3522667120 * t15662 + 4747065680 * t15664 - 2854439840 * t15666 - 69474720 * t15668 + 885802680 * t15670 - 186760
            t15673 = -155336412 * t15635 - 26246044 * t15651 + 256858800 * t15658 - 824025488 * t15660 + 349973624 * t15662 + 3171658776 * t15664 - 6669105872 * t15666 + 5027567600 * t15668 - 1131736716 * t15670 + 391732
            t15656 = 2 * phi1
            t15655 = 4 * phi1
            t15654 = -3 * phi2
            t15653 = 3 * phi2
            tfunc[..., c] = -(0.37e2 / 0.1191182336e10) * np.sqrt(0.71e2) * np.sqrt(0.3e1) * np.sqrt(0.2e1) * np.sqrt(0.11e2) * np.sqrt(0.17e2) * ((-5834015550 * t15670 + 15981666840 * t15668 - 24196812360 * t15666 + 21924036540 * t15664 - 11991952980 * t15662 + 3779088600 * t15660 - 606783240 * t15658 + 37638810 * t15651 - 380190 + 907513530 * t15635) * np.exp((12*1j) * phi2) + (t15674 - t15677) * np.exp((-4*1j) * (phi1 + t15654)) + (t15673 - t15676) * np.exp((-4*1j) * (t15656 + t15654)) + (t15678 - t15679) * np.exp((-4*1j) * (t15655 + t15654)) + (t15674 + t15677) * np.exp((4*1j) * (phi1 + t15653)) + (t15673 + t15676) * np.exp((4*1j) * (t15656 + t15653)) + (t15678 + t15679) * np.exp((4*1j) * (t15655 + t15653)) + (t15675 - t15680) * np.exp((-12*1j) * (phi1 - phi2)) + (t15675 + t15680) * np.exp((12*1j) * (phi1 + phi2)))

        if Bindx == 380:
            t15705 = np.cos(phi)
            t15704 = t15705 ** 2
            t15712 = t15704 ** 2
            t15716 = t15712 ** 2
            t15717 = t15705 * t15716
            t15688 = t15717 ** 2
            t15729 = -3927 * t15688
            t15728 = 23562 * t15688
            t15711 = t15705 * t15704
            t15727 = -58905 * t15688 + 1155 * t15704 + 1155 * t15705 - 29260 * t15711
            t15724 = t15716 ** 2
            t15714 = t15711 ** 2
            t15715 = t15705 * t15714
            t15722 = t15715 ** 2
            t15720 = t15714 ** 2
            t15713 = t15705 * t15712
            t15718 = t15713 ** 2
            t15710 = 4 * phi1
            t15709 = 8 * phi1
            t15708 = 12 * phi1
            t15707 = -13 * phi2
            t15706 = 13 * phi2
            t15695 = t15705 * t15718
            t15693 = t15705 * t15720
            t15691 = t15705 * t15722
            t15689 = t15705 * t15724
            tfunc[..., c] = (-0.37e2 / 0.18612224e8*1j) * np.sqrt(0.93e2) * np.sqrt(0.19e2) * np.sqrt(0.23e2) * np.sqrt(0.29e2) * np.sqrt(0.71e2) * np.sqrt((1 - t15705)) * (1020 * (77 * t15688 + 77 * t15689 - 28 * t15712 - 28 * t15711 + t15704 + t15705 - 1876 * t15720 - 1876 * t15695 + 1610 * t15718 + 1610 * t15717 + 1288 * t15722 + 1288 * t15693 - 812 * t15716 - 812 * t15715 - 484 * t15724 - 484 * t15691 + 224 * t15714 + 224 * t15713) * np.exp((13*1j) * phi2) + (111265 * t15689 + 301070 * t15724 - 649880 * t15691 - 608300 * t15722 + 1603910 * t15693 + 585970 * t15720 - 2166780 * t15695 - 219450 * t15718 + 1732500 * t15717 - 54670 * t15716 - 825440 * t15715 + 72380 * t15714 + 222530 * t15713 - 19250 * t15712 + t15727) * np.exp((-1*1j) * (t15710 + t15707)) + (-229075 * t15689 - 39270 * t15724 + 911680 * t15691 + 953260 * t15722 - 1258950 * t15693 - 2276890 * t15720 + 475860 * t15695 + 2423190 * t15718 + 471240 * t15717 - 1315930 * t15716 - 545160 * t15715 + 352660 * t15714 + 202510 * t15713 - 39270 * t15712 + t15727) * np.exp((1j) * (t15710 + t15706)) + (t15728 - 112574 * t15689 + 98736 * t15724 + 337832 * t15691 - 672640 * t15722 - 172296 * t15693 + 1261312 * t15720 - 490568 * t15695 - 1082796 * t15718 + 837980 * t15717 + 427856 * t15716 - 552552 * t15715 - 43472 * t15714 + 177496 * t15713 - 15840 * t15712 - 26872 * t15711 + 3314 * t15704 + 1554 * t15705 - 32) * np.exp((-1*1j) * (t15709 + t15707)) + (t15728 + 159698 * t15689 + 371008 * t15724 + 131912 * t15691 - 878560 * t15722 - 1378904 * t15693 + 54704 * t15720 + 1806584 * t15695 + 1214356 * t15718 - 706420 * t15717 - 1116544 * t15716 - 136136 * t15715 + 372944 * t15714 + 151976 * t15713 - 41360 * t15712 - 30328 * t15711 - 142 * t15704 + 1618 * t15705 + 32) * np.exp((1j) * (t15709 + t15706)) + (t15729 + 30107 * t15689 - 84898 * t15724 + 72688 * t15691 + 137860 * t15722 - 367346 * t15693 + 175266 * t15720 + 352716 * t15695 - 486486 * t15718 + 22880 * t15717 + 338338 * t15716 - 191048 * t15715 - 68068 * t15714 + 95018 * t15713 - 13090 * t15712 - 15540 * t15711 + 5325 * t15704 + 525 * t15705 - 320) * np.exp((-1*1j) * (t15708 + t15707)) + (t15729 - 37961 * t15689 - 152966 * t15724 - 310552 * t15691 - 245380 * t15722 + 259826 * t15693 + 802438 * t15720 + 624988 * t15695 - 214214 * t15718 - 723580 * t15717 - 408122 * t15716 + 121264 * t15715 + 244244 * t15714 + 81158 * t15713 - 26950 * t15712 - 24500 * t15711 - 3635 * t15704 + 1165 * t15705 + 320) * np.exp((1j) * (t15708 + t15706))) * ((1 + t15705) ** (-0.1e1 / 0.2e1))

        if Bindx == 381:
            t15757 = np.cos(phi)
            t15756 = t15757 ** 2
            t15765 = t15756 ** 2
            t15764 = t15757 * t15756
            t15767 = t15764 ** 2
            t15769 = t15765 ** 2
            t15766 = t15757 * t15765
            t15771 = t15766 ** 2
            t15773 = t15767 ** 2
            t15768 = t15757 * t15767
            t15775 = t15768 ** 2
            t15777 = t15769 ** 2
            t15770 = t15757 * t15769
            t15779 = t15770 ** 2
            t15788 = -4855760 * t15765 + 72836400 * t15767 - 373893520 * t15769 + 946873200 * t15771 - 1335334000 * t15773 + 1073122960 * t15775 - 461297200 * t15777 + 82547920 * t15779
            t15787 = 465760 * t15756 - 337960 * t15765 - 6858600 * t15767 + 10374520 * t15769 + 7716280 * t15771 - 16281720 * t15773 + 1144520 * t15775 + 3507400 * t15777 + 258440 * t15779 + 11360
            t15786 = 345600 * t15756 + 176400 * t15765 - 11742192 * t15767 + 38115792 * t15769 - 36674352 * t15771 - 12776400 * t15773 + 36374832 * t15775 - 11346192 * t15777 - 2450448 * t15779 - 23040
            t15739 = t15757 * t15779
            t15741 = t15757 * t15777
            t15743 = t15757 * t15775
            t15745 = t15757 * t15773
            t15747 = t15757 * t15771
            t15785 = 22365 * t15739 + 1291135 * t15741 + 4988460 * t15743 - 9015580 * t15745 - 9368450 * t15747 + 115375 * t15757 + 789165 * t15764 - 4005820 * t15766 - 1975220 * t15768 + 17158570 * t15770
            t15784 = 282744 * t15739 + 8280360 * t15741 - 4692384 * t15743 - 39068064 * t15745 + 60422544 * t15747 + 60840 * t15757 - 1502280 * t15764 + 7783776 * t15766 - 8854560 * t15768 - 22712976 * t15770
            t15783 = -1122880 * t15756 - 7038416 * t15765 + 140977584 * t15767 - 625500304 * t15769 + 1225455088 * t15771 - 1117699440 * t15773 + 319219472 * t15775 + 152543248 * t15777 - 86854768 * t15779 + 20416
            t15782 = 28574280 * t15739 - 92072680 * t15741 - 20170080 * t15743 + 493793440 * t15745 - 944632080 * t15747 + 560280 * t15757 - 14754040 * t15764 + 117285280 * t15766 - 435524320 * t15768 + 866939920 * t15770
            t15781 = 15032556 * t15739 + 134815780 * t15741 - 644681136 * t15743 + 914641904 * t15745 - 377841464 * t15747 - 1011868 * t15757 + 19258668 * t15764 - 123348368 * t15766 + 324793040 * t15768 - 261659112 * t15770
            t15763 = 4 * phi1
            t15762 = 8 * phi1
            t15761 = 12 * phi1
            t15760 = 16 * phi1
            t15759 = -13 * phi2
            t15758 = 13 * phi2
            tfunc[..., c] = (0.37e2 / 0.595591168e9*1j) * np.sqrt(0.31e2) * np.sqrt(0.71e2) * np.sqrt(0.11e2) * np.sqrt(0.17e2) * ((1 + t15757) ** (-0.1e1 / 0.2e1)) * ((1 - t15757) ** (-0.1e1 / 0.2e1)) * ((-87823890 * t15739 + 639859770 * t15741 - 2021090040 * t15743 + 3608763480 * t15745 - 3976027020 * t15747 + 2762460540 * t15770 - 1181630520 * t15768 + 287423640 * t15766 - 33076530 * t15764 + 1140570 * t15757) * np.exp((13*1j) * phi2) + (t15782 - t15788) * np.exp((-1*1j) * (t15763 + t15759)) + (t15782 + t15788) * np.exp((1j) * (t15763 + t15758)) + (t15781 + t15783) * np.exp((-1*1j) * (t15762 + t15759)) + (t15781 - t15783) * np.exp((1j) * (t15762 + t15758)) + (t15784 + t15786) * np.exp((-1*1j) * (t15761 + t15759)) + (t15785 - t15787) * np.exp((-1*1j) * (t15760 + t15759)) + (t15784 - t15786) * np.exp((1j) * (t15761 + t15758)) + (t15785 + t15787) * np.exp((1j) * (t15760 + t15758)))

        if Bindx == 382:
            t15813 = np.cos(phi)
            t15812 = t15813 ** 2
            t15820 = t15812 ** 2
            t15824 = t15820 ** 2
            t15832 = t15824 ** 2
            t15797 = t15813 * t15832
            t15819 = t15813 * t15812
            t15822 = t15819 ** 2
            t15823 = t15813 * t15822
            t15830 = t15823 ** 2
            t15799 = t15813 * t15830
            t15828 = t15822 ** 2
            t15801 = t15813 * t15828
            t15821 = t15813 * t15820
            t15826 = t15821 ** 2
            t15803 = t15813 * t15826
            t15825 = t15813 * t15824
            t15840 = -36652 * t15797 - 253176 * t15799 + 407512 * t15801 + 366184 * t15803 + 3052 * t15813 - 33544 * t15819 + 35112 * t15821 + 326040 * t15823 - 814528 * t15825
            t15839 = -146608 * t15797 + 101024 * t15799 + 952672 * t15801 - 2041312 * t15803 - 3152 * t15813 + 32096 * t15819 - 34144 * t15821 - 434720 * t15823 + 1574144 * t15825
            t15838 = -183260 * t15797 + 961576 * t15799 - 2048200 * t15801 + 2230536 * t15803 + 924 * t15813 - 15400 * t15819 + 17864 * t15821 + 292600 * t15823 - 1256640 * t15825
            t15796 = t15825 ** 2
            t15837 = -3927 * t15796 - 599 * t15812 - 68684 * t15820 + 300300 * t15822 - 230230 * t15824 - 538538 * t15826 + 794612 * t15828 - 113844 * t15830 - 139689 * t15832 + 599
            t15836 = 23562 * t15796 + 10906 * t15812 - 133672 * t15820 + 584584 * t15822 - 1009580 * t15824 + 350636 * t15826 + 919672 * t15828 - 1024472 * t15830 + 278630 * t15832 - 266
            t15835 = -58905 * t15796 + 15015 * t15812 - 167860 * t15820 + 774004 * t15822 - 1802570 * t15824 + 2255946 * t15826 - 1424500 * t15828 + 266420 * t15830 + 142681 * t15832 - 231
            t15818 = 2 * phi1
            t15817 = 4 * phi1
            t15816 = 6 * phi1
            t15815 = -7 * phi2
            t15814 = 7 * phi2
            tfunc[..., c] = (0.37e2 / 0.148897792e9) * np.sqrt(0.2e1) * np.sqrt(0.71e2) * np.sqrt(0.465e3) * np.sqrt(0.29e2) * np.sqrt(0.23e2) * np.sqrt(0.19e2) * ((-204 + 78540 * t15796 - 563244 * t15832 + 1743792 * t15830 - 3033072 * t15828 + 3224424 * t15826 - 2127720 * t15824 + 839664 * t15822 - 177072 * t15820 + 14892 * t15812) * np.exp((14*1j) * phi2) + (t15835 - t15838) * np.exp((-2*1j) * (t15818 + t15815)) + (t15836 + t15839) * np.exp((-2*1j) * (t15817 + t15815)) + (t15837 - t15840) * np.exp((-2*1j) * (t15816 + t15815)) + (t15835 + t15838) * np.exp((2*1j) * (t15818 + t15814)) + (t15836 - t15839) * np.exp((2*1j) * (t15817 + t15814)) + (t15837 + t15840) * np.exp((2*1j) * (t15816 + t15814)))

        if Bindx == 383:
            t15867 = np.cos(phi)
            t15866 = t15867 ** 2
            t15875 = t15866 ** 2
            t15879 = t15875 ** 2
            t15880 = t15867 * t15879
            t15850 = t15880 ** 2
            t15874 = t15867 * t15866
            t15877 = t15874 ** 2
            t15876 = t15867 * t15875
            t15881 = t15876 ** 2
            t15883 = t15877 ** 2
            t15878 = t15867 * t15877
            t15885 = t15878 ** 2
            t15887 = t15879 ** 2
            t15897 = -22365 * t15850 + 730235 * t15866 + 1918420 * t15875 - 10053316 * t15877 - 4974970 * t15879 + 23169146 * t15881 + 129220 * t15883 - 9370580 * t15885 - 1539067 * t15887 + 13277
            t15896 = -282744 * t15850 - 43128 * t15866 - 4945248 * t15875 + 21621600 * t15877 - 16576560 * t15879 - 38774736 * t15881 + 57212064 * t15883 - 8196768 * t15885 - 10057608 * t15887 + 43128
            t15851 = t15867 * t15887
            t15853 = t15867 * t15885
            t15855 = t15867 * t15883
            t15857 = t15867 * t15881
            t15895 = 278320 * t15851 + 4882528 * t15853 + 9621920 * t15855 - 15919904 * t15857 - 151088 * t15867 - 1828960 * t15874 + 2083424 * t15876 + 14029600 * t15878 - 12995840 * t15880
            t15894 = -2638944 * t15851 - 18228672 * t15853 + 29340864 * t15855 + 26365248 * t15857 + 219744 * t15867 - 2415168 * t15874 + 2528064 * t15876 + 23474880 * t15878 - 58646016 * t15880
            t15893 = -88897760 * t15851 + 466451776 * t15853 - 993563200 * t15855 + 1082012736 * t15857 + 448224 * t15867 - 7470400 * t15874 + 8665664 * t15876 + 141937600 * t15878 - 609584640 * t15880
            t15892 = -93535904 * t15851 + 64453312 * t15853 + 607804736 * t15855 - 1302357056 * t15857 - 2010976 * t15867 + 20477248 * t15874 - 21783872 * t15876 - 277351360 * t15878 + 1004303872 * t15880
            t15891 = -28574280 * t15850 + 7283640 * t15866 - 81427360 * t15875 + 375462304 * t15877 - 874410320 * t15879 + 1094338896 * t15881 - 691012000 * t15883 + 129237920 * t15885 + 69213256 * t15887 - 112056
            t15890 = -15032556 * t15850 - 6958028 * t15866 + 85282736 * t15875 - 372964592 * t15877 + 644112040 * t15879 - 223705768 * t15881 - 586750736 * t15883 + 653613136 * t15885 - 177765940 * t15887 + 169708
            t15873 = 2 * phi1
            t15872 = 4 * phi1
            t15871 = 6 * phi1
            t15870 = 8 * phi1
            t15869 = -7 * phi2
            t15868 = 7 * phi2
            tfunc[..., c] = -(0.37e2 / 0.4764729344e10) * np.sqrt(0.5e1) * np.sqrt(0.31e2) * np.sqrt(0.71e2) * np.sqrt(0.11e2) * np.sqrt(0.17e2) * np.sqrt(0.2e1) * ((-228114 + 87823890 * t15850 - 629822754 * t15887 + 1949918472 * t15885 - 3391598952 * t15883 + 3605569884 * t15881 - 2379229020 * t15879 + 938917224 * t15877 - 198002952 * t15875 + 16652322 * t15866) * np.exp((14*1j) * phi2) + (t15891 - t15893) * np.exp((-2*1j) * (t15873 + t15869)) + (t15890 - t15892) * np.exp((-2*1j) * (t15872 + t15869)) + (-t15894 + t15896) * np.exp((-2*1j) * (t15871 + t15869)) + (t15895 + t15897) * np.exp((-2*1j) * (t15870 + t15869)) + (t15891 + t15893) * np.exp((2*1j) * (t15873 + t15868)) + (t15890 + t15892) * np.exp((2*1j) * (t15872 + t15868)) + (t15894 + t15896) * np.exp((2*1j) * (t15871 + t15868)) + (-t15895 + t15897) * np.exp((2*1j) * (t15870 + t15868)))

        if Bindx == 384:
            t15921 = np.cos(phi)
            t15920 = t15921 ** 2
            t15927 = t15920 ** 2
            t15931 = t15927 ** 2
            t15939 = t15931 ** 2
            t15905 = t15921 * t15939
            t15943 = -357 * t15905
            t15942 = -5355 * t15905
            t15941 = 2142 * t15905
            t15926 = t15921 * t15920
            t15929 = t15926 ** 2
            t15930 = t15921 * t15929
            t15937 = t15930 ** 2
            t15935 = t15929 ** 2
            t15928 = t15921 * t15927
            t15933 = t15928 ** 2
            t15925 = 4 * phi1
            t15924 = 8 * phi1
            t15923 = -15 * phi2
            t15922 = 15 * phi2
            t15913 = t15921 * t15931
            t15911 = t15921 * t15933
            t15909 = t15921 * t15935
            t15907 = t15921 * t15937
            tfunc[..., c] = (0.37e2 / 0.74448896e8*1j) * np.sqrt(0.155e3) * np.sqrt(0.11e2) * np.sqrt(0.19e2) * np.sqrt(0.23e2) * np.sqrt(0.29e2) * np.sqrt(0.71e2) * np.sqrt(0.2e1) * ((1 - t15921) ** (0.3e1 / 0.2e1)) * ((7140 * t15905 + 14280 * t15939 - 36312 * t15907 - 86904 * t15937 + 67320 * t15909 + 221544 * t15935 - 41208 * t15911 - 303960 * t15933 - 32640 * t15913 + 238680 * t15931 + 67320 * t15930 - 104040 * t15929 - 41208 * t15928 + 21624 * t15927 + 10200 * t15926 - 1224 * t15920 - 612 * t15921) * np.exp((15*1j) * phi2) + (t15943 + 2856 * t15939 - 8670 * t15907 + 9494 * t15937 + 9406 * t15909 - 36682 * t15935 + 28474 * t15911 + 22286 * t15933 - 51788 * t15913 + 19998 * t15931 + 23430 * t15930 - 25086 * t15929 + 2578 * t15928 + 7394 * t15927 - 3554 * t15926 - 166 * t15920 + 481 * t15921 - 94) * np.exp((-3*1j) * (t15925 - 5 * phi2)) + (t15943 - 4284 * t15939 - 22950 * t15907 - 71306 * t15937 - 137914 * t15909 - 158522 * t15935 - 67886 * t15911 + 94094 * t15933 + 188188 * t15913 + 136422 * t15931 + 16302 * t15930 - 51870 * t15929 - 43862 * t15928 - 13006 * t15927 + 2086 * t15926 + 2842 * t15920 + 857 * t15921 + 94) * np.exp((3*1j) * (t15925 + 5 * phi2)) + (t15942 + 7140 * t15939 + 33558 * t15907 - 45654 * t15937 - 89334 * t15909 + 124026 * t15935 + 131166 * t15911 - 185262 * t15933 - 115500 * t15913 + 164010 * t15931 + 62370 * t15930 - 85890 * t15929 - 20538 * t15928 + 24654 * t15927 + 4074 * t15926 - 3066 * t15920 - 441 * t15921 + 42) * np.exp((-1*1j) * (t15925 + t15923)) + (t15941 - 9996 * t15939 + 7548 * t15907 + 33372 * t15937 - 60492 * t15909 - 24180 * t15935 + 123084 * t15911 - 39156 * t15933 - 112944 * t15913 + 80964 * t15931 + 46644 * t15930 - 56940 * t15929 - 4212 * t15928 + 18372 * t15927 - 2172 * t15926 - 2556 * t15920 + 402 * t15921 + 120) * np.exp((-1*1j) * (t15924 + t15923)) + (t15942 - 28560 * t15939 - 37842 * t15907 + 58506 * t15937 + 190386 * t15909 + 65226 * t15935 - 266154 * t15911 - 273966 * t15933 + 104412 * t15913 + 273042 * t15931 + 60522 * t15930 - 105378 * t15929 - 57666 * t15928 + 10206 * t15927 + 12306 * t15926 + 966 * t15920 - 609 * t15921 - 42) * np.exp((1j) * (t15925 + t15922)) + (t15941 + 18564 * t15939 + 64668 * t15907 + 102492 * t15937 + 20628 * t15909 - 191412 * t15935 - 292500 * t15911 - 84084 * t15933 + 212784 * t15913 + 241956 * t15931 + 42900 * t15930 - 86892 * t15929 - 60372 * t15928 - 3708 * t15927 + 9828 * t15926 + 3204 * t15920 - 78 * t15921 - 120) * np.exp((1j) * (t15924 + t15922))) * ((1 + t15921) ** (-0.1e1 / 0.2e1))

        if Bindx == 385:
            t15971 = np.cos(phi)
            t15970 = t15971 ** 2
            t15978 = t15970 ** 2
            t15977 = t15971 * t15970
            t15980 = t15977 ** 2
            t15982 = t15978 ** 2
            t15979 = t15971 * t15978
            t15984 = t15979 ** 2
            t15986 = t15980 ** 2
            t15981 = t15971 * t15980
            t15988 = t15981 ** 2
            t15990 = t15982 ** 2
            t15983 = t15971 * t15982
            t15992 = t15983 ** 2
            t16001 = -352728 * t15970 - 1749440 * t15978 + 3657920 * t15980 + 8196240 * t15982 - 10884016 * t15984 - 6616064 * t15986 + 5589120 * t15988 + 2064680 * t15990 + 99400 * t15992 - 5112
            t15953 = t15971 * t15992
            t15955 = t15971 * t15990
            t15957 = t15971 * t15988
            t15959 = t15971 * t15986
            t15961 = t15971 * t15984
            t16000 = 7455 * t15953 + 594057 * t15955 + 4457948 * t15957 + 1918420 * t15959 - 13374270 * t15961 - 64255 * t15971 - 1068905 * t15977 - 650076 * t15979 + 8687276 * t15981 - 507650 * t15983
            t15999 = -322608 * t15970 + 3784704 * t15978 - 6031872 * t15980 - 13714272 * t15982 + 38507040 * t15984 - 18834816 * t15986 - 12144000 * t15988 + 7838160 * t15990 + 942480 * t15992 - 24816
            t15998 = 94248 * t15953 + 3891096 * t15955 + 4818528 * t15957 - 29368416 * t15959 + 17921904 * t15961 - 176616 * t15971 + 723624 * t15977 + 4161696 * t15979 - 20111520 * t15981 + 18045456 * t15983
            t15997 = 3809904 * t15970 - 23905280 * t15978 + 35857920 * t15980 + 82921440 * t15982 - 373071776 * t15984 + 575519616 * t15986 - 457188480 * t15988 + 187880560 * t15990 - 31749200 * t15992 - 74704
            t15996 = 7579440 * t15970 - 47160960 * t15978 + 70516864 * t15980 + 162031584 * t15982 - 626230176 * t15984 + 724033024 * t15986 - 304525056 * t15988 - 19369680 * t15990 + 33405680 * t15992 - 280720
            t15995 = 5010852 * t15953 + 69436092 * t15955 - 279990128 * t15957 + 259553712 * t15959 + 206918712 * t15961 + 378972 * t15971 + 7818052 * t15977 - 100890768 * t15979 + 365665872 * t15981 - 533901368 * t15983
            t15994 = 9524760 * t15953 - 24764376 * t15955 - 63199584 * t15957 + 366796640 * t15959 - 686903280 * t15961 + 933800 * t15971 - 17368680 * t15977 + 116986464 * t15979 - 379944544 * t15981 + 677938800 * t15983
            t15976 = 4 * phi1
            t15975 = 8 * phi1
            t15974 = 16 * phi1
            t15973 = -15 * phi2
            t15972 = 15 * phi2
            tfunc[..., c] = (0.37e2 / 0.2382364672e10*1j) * np.sqrt(0.3e1) * np.sqrt(0.17e2) * np.sqrt(0.2e1) * np.sqrt(0.71e2) * np.sqrt(0.31e2) * np.sqrt(0.5e1) * ((1 + t15971) ** (-0.1e1 / 0.2e1)) * ((1 - t15971) ** (-0.1e1 / 0.2e1)) * ((-29274630 * t15953 + 236706294 * t15955 - 839763672 * t15957 + 1709638392 * t15959 - 2189742324 * t15961 + 1815027060 * t15983 - 960207864 * t15981 + 304456152 * t15979 - 49348662 * t15977 + 2509254 * t15971) * np.exp((15*1j) * phi2) + (t15998 - t15999) * np.exp((-3*1j) * (t15976 - 5 * phi2)) + (t15998 + t15999) * np.exp((3*1j) * (t15976 + 5 * phi2)) + (t15994 + t15997) * np.exp((-1*1j) * (t15976 + t15973)) + (t15995 - t15996) * np.exp((-1*1j) * (t15975 + t15973)) + (t15994 - t15997) * np.exp((1j) * (t15976 + t15972)) + (t15995 + t15996) * np.exp((1j) * (t15975 + t15972)) + (t16000 - t16001) * np.exp((-1*1j) * (t15974 + t15973)) + (t16000 + t16001) * np.exp((1j) * (t15974 + t15972)))

        if Bindx == 386:
            t16026 = np.cos(phi)
            t16025 = t16026 ** 2
            t16031 = t16025 ** 2
            t16035 = t16031 ** 2
            t16043 = t16035 ** 2
            t16010 = t16026 * t16043
            t16030 = t16026 * t16025
            t16033 = t16030 ** 2
            t16034 = t16026 * t16033
            t16041 = t16034 ** 2
            t16012 = t16026 * t16041
            t16039 = t16033 ** 2
            t16014 = t16026 * t16039
            t16032 = t16026 * t16031
            t16037 = t16032 ** 2
            t16016 = t16026 * t16037
            t16036 = t16026 * t16035
            t16051 = -224 * t16010 - 2432 * t16012 + 784 * t16014 + 8736 * t16016 - 80 * t16026 - 224 * t16030 + 2800 * t16032 - 2496 * t16034 - 6864 * t16036
            t16050 = -896 * t16010 - 512 * t16012 + 10560 * t16014 - 18304 * t16016 - 64 * t16026 + 1152 * t16030 - 4416 * t16032 + 3328 * t16034 + 9152 * t16036
            t16009 = t16036 ** 2
            t16049 = 9 + 21 * t16009 + 261 * t16025 - 868 * t16031 - 2548 * t16033 + 8294 * t16035 - 2002 * t16037 - 6916 * t16039 + 2732 * t16041 + 1017 * t16043
            t16048 = -1120 * t16010 + 6272 * t16012 - 14000 * t16014 + 15008 * t16016 + 112 * t16026 - 1120 * t16030 + 3248 * t16032 - 2240 * t16034 - 6160 * t16036
            t16047 = -22 - 126 * t16009 + 242 * t16025 + 456 * t16031 - 6968 * t16033 + 16588 * t16035 - 13156 * t16037 - 1560 * t16039 + 6696 * t16041 - 2150 * t16043
            t16046 = 7 + 315 * t16009 - 245 * t16025 + 2660 * t16031 - 10892 * t16033 + 22330 * t16035 - 25102 * t16037 + 14980 * t16039 - 3500 * t16041 - 553 * t16043
            t16029 = 3 * phi1
            t16028 = -4 * phi2
            t16027 = 4 * phi2
            tfunc[..., c] = -(0.37e2 / 0.74448896e8) * np.sqrt(0.17e2) * np.sqrt(0.71e2) * np.sqrt(0.11e2) * np.sqrt(0.19e2) * np.sqrt(0.23e2) * np.sqrt(0.29e2) * np.sqrt(0.465e3) * ((-420 * t16009 + 3372 * t16043 - 11856 * t16041 + 23856 * t16039 - 30072 * t16037 + 24360 * t16035 - 12432 * t16033 + 3696 * t16031 - 516 * t16025 + 12) * np.exp((16*1j) * phi2) + (t16047 - t16050) * np.exp((-8*1j) * (phi1 - 2 * phi2)) + (t16046 + t16048) * np.exp((-4*1j) * (phi1 + t16028)) + (t16049 + t16051) * np.exp((-4*1j) * (t16029 + t16028)) + (t16046 - t16048) * np.exp((4*1j) * (phi1 + t16027)) + (t16049 - t16051) * np.exp((4*1j) * (t16029 + t16027)) + (t16047 + t16050) * np.exp((8*1j) * (phi1 + 2 * phi2)))

        if Bindx == 387:
            t16078 = np.cos(phi)
            t16077 = t16078 ** 2
            t16083 = t16077 ** 2
            t16087 = t16083 ** 2
            t16088 = t16078 * t16087
            t16061 = t16088 ** 2
            t16082 = t16078 * t16077
            t16085 = t16082 ** 2
            t16084 = t16078 * t16083
            t16089 = t16084 ** 2
            t16091 = t16085 ** 2
            t16086 = t16078 * t16085
            t16093 = t16086 ** 2
            t16095 = t16087 ** 2
            t16105 = 22365 * t16061 + 1490645 * t16077 + 12335540 * t16083 + 7468916 * t16085 - 50054290 * t16087 - 26580554 * t16089 + 37344580 * t16091 + 20543140 * t16093 + 2065177 * t16095 + 17537
            t16062 = t16078 * t16095
            t16064 = t16078 * t16093
            t16066 = t16078 * t16091
            t16068 = t16078 * t16089
            t16104 = -318080 * t16062 - 8033792 * t16064 - 35147840 * t16066 - 14059136 * t16068 - 240832 * t16078 - 5407360 * t16082 - 16762816 * t16084 + 20084480 * t16086 + 55232320 * t16088
            t16103 = -3015936 * t16062 - 32744448 * t16064 + 10555776 * t16066 + 117621504 * t16068 - 1077120 * t16078 - 3015936 * t16082 + 37699200 * t16084 - 33606144 * t16086 - 92416896 * t16088
            t16102 = -106898176 * t16062 - 61084672 * t16064 + 1259871360 * t16066 - 2183777024 * t16068 - 7635584 * t16078 + 137440512 * t16082 - 526855296 * t16084 + 397050368 * t16086 + 1091888512 * t16088
            t16101 = -101597440 * t16062 + 568945664 * t16064 - 1269968000 * t16066 + 1361405696 * t16068 + 10159744 * t16078 - 101597440 * t16082 + 294632576 * t16084 - 203194880 * t16086 - 558785920 * t16088
            t16100 = 282744 * t16061 + 3514104 * t16077 - 11686752 * t16083 - 34306272 * t16085 + 111670416 * t16087 - 26954928 * t16089 - 93117024 * t16091 + 36783648 * t16093 + 13692888 * t16095 + 121176
            t16099 = 28574280 * t16061 - 22224440 * t16077 + 241293920 * t16083 - 988035104 * t16085 + 2025598960 * t16087 - 2277052624 * t16089 + 1358865760 * t16091 - 317492000 * t16093 - 50163736 * t16095 + 634984
            t16098 = 15032556 * t16061 - 28872052 * t16077 - 54403536 * t16083 + 831324208 * t16085 - 1979047928 * t16087 + 1569589736 * t16089 + 186117360 * t16091 - 798872976 * t16093 + 256507900 * t16095 + 2624732
            t16081 = 3 * phi1
            t16080 = -4 * phi2
            t16079 = 4 * phi2
            tfunc[..., c] = (0.37e2 / 0.2382364672e10) * np.sqrt(0.5e1) * np.sqrt(0.31e2) * np.sqrt(0.71e2) * ((-87823890 * t16061 + 705100374 * t16095 - 2479142952 * t16093 + 4988396952 * t16091 - 6288190524 * t16089 + 5093785620 * t16087 - 2599587144 * t16085 + 772850232 * t16083 - 107897922 * t16077 + 2509254) * np.exp((16*1j) * phi2) + (t16098 + t16102) * np.exp((-8*1j) * (phi1 - 2 * phi2)) + (t16099 + t16101) * np.exp((-4*1j) * (phi1 + t16080)) + (t16100 + t16103) * np.exp((-4*1j) * (t16081 + t16080)) + (t16099 - t16101) * np.exp((4*1j) * (phi1 + t16079)) + (t16100 - t16103) * np.exp((4*1j) * (t16081 + t16079)) + (t16098 - t16102) * np.exp((8*1j) * (phi1 + 2 * phi2)) + (t16104 + t16105) * np.exp((-16*1j) * (phi1 - phi2)) + (-t16104 + t16105) * np.exp((16*1j) * (phi1 + phi2)))

        if Bindx == 388:
            t16128 = np.cos(phi)
            t16127 = t16128 ** 2
            t16135 = t16127 ** 2
            t16139 = t16135 ** 2
            t16113 = t16139 ** 2
            t16150 = 3 * t16113
            t16149 = -18 * t16113
            t16148 = 45 * t16113
            t16134 = t16128 * t16127
            t16137 = t16134 ** 2
            t16138 = t16128 * t16137
            t16145 = t16138 ** 2
            t16143 = t16137 ** 2
            t16136 = t16128 * t16135
            t16141 = t16136 ** 2
            t16133 = 4 * phi1
            t16132 = 8 * phi1
            t16131 = 12 * phi1
            t16130 = -17 * phi2
            t16129 = 17 * phi2
            t16120 = t16128 * t16139
            t16118 = t16128 * t16141
            t16116 = t16128 * t16143
            t16114 = t16128 * t16145
            tfunc[..., c] = (0.37e2 / 0.74448896e8*1j) * np.sqrt(0.93e2) * np.sqrt(0.29e2) * np.sqrt(0.11e2) * np.sqrt(0.7e1) * np.sqrt(0.19e2) * np.sqrt(0.23e2) * np.sqrt(0.71e2) * np.sqrt(0.17e2) * np.sqrt(0.2e1) * ((1 - t16128) ** (0.5e1 / 0.2e1)) * (60 * (-t16113 - 3 * t16114 + 3 * t16145 + 17 * t16116 + 3 * t16143 - 39 * t16118 - 25 * t16141 + 45 * t16120 + 45 * t16139 - 25 * t16138 - 39 * t16137 + 3 * t16136 + 17 * t16135 + 3 * t16134 - 3 * t16127 - t16128) * np.exp((17*1j) * phi2) + (t16148 - 35 * t16114 - 325 * t16145 + 245 * t16116 + 1015 * t16143 - 735 * t16118 - 1785 * t16141 + 1225 * t16120 + 1925 * t16139 - 1225 * t16138 - 1295 * t16137 + 735 * t16136 + 525 * t16135 - 245 * t16134 - 115 * t16127 + 35 * t16128 + 10) * np.exp((-1*1j) * (t16133 + t16130)) + (t16149 + 82 * t16114 - 50 * t16145 - 310 * t16116 + 510 * t16143 + 298 * t16118 - 1162 * t16141 + 290 * t16120 + 1170 * t16139 - 810 * t16138 - 502 * t16137 + 638 * t16136 + 10 * t16135 - 210 * t16134 + 50 * t16127 + 22 * t16128 - 8) * np.exp((-1*1j) * (t16132 + t16130)) + (t16148 + 305 * t16114 + 695 * t16145 + 145 * t16116 - 2005 * t16143 - 3035 * t16118 + 275 * t16141 + 4565 * t16120 + 3465 * t16139 - 1485 * t16138 - 3355 * t16137 - 1165 * t16136 + 745 * t16135 + 695 * t16134 + 145 * t16127 - 25 * t16128 - 10) * np.exp((1j) * (t16133 + t16129)) + (t16149 - 190 * t16114 - 866 * t16145 - 2150 * t16116 - 2834 * t16143 - 806 * t16118 + 3718 * t16141 + 6578 * t16120 + 4290 * t16139 - 858 * t16138 - 3718 * t16137 - 2834 * t16136 - 806 * t16135 + 190 * t16134 + 226 * t16127 + 70 * t16128 + 8) * np.exp((1j) * (t16132 + t16129)) + (t16150 - 25 * t16114 + 81 * t16145 - 105 * t16116 - 51 * t16143 + 339 * t16118 - 363 * t16141 - 77 * t16120 + 495 * t16139 - 363 * t16138 - 77 * t16137 + 261 * t16136 - 129 * t16135 - 15 * t16134 + 39 * t16127 - 15 * t16128 + 2) * np.exp((-1*1j) * (t16131 + t16130)) + (t16150 + 43 * t16114 + 285 * t16145 + 1155 * t16116 + 3185 * t16143 + 6279 * t16118 + 9009 * t16141 + 9295 * t16120 + 6435 * t16139 + 2145 * t16138 - 1001 * t16137 - 1911 * t16136 - 1365 * t16135 - 595 * t16134 - 165 * t16127 - 27 * t16128 - 2) * np.exp((1j) * (t16131 + t16129))) * ((1 + t16128) ** (-0.1e1 / 0.2e1))

        if Bindx == 389:
            t16177 = np.cos(phi)
            t16176 = t16177 ** 2
            t16185 = t16176 ** 2
            t16189 = t16185 ** 2
            t16190 = t16177 * t16189
            t16160 = t16190 ** 2
            t16203 = 3195 * t16160 - 6904040 * t16189 + 8630050 * t16190
            t16202 = 40392 * t16160 + 15402816 * t16189 - 19253520 * t16190
            t16201 = 2147508 * t16160 - 272972128 * t16189 + 341215160 * t16190
            t16200 = 4082040 * t16160 + 279392960 * t16189 - 349241200 * t16190
            t16197 = t16189 ** 2
            t16184 = t16177 * t16176
            t16187 = t16184 ** 2
            t16188 = t16177 * t16187
            t16195 = t16188 ** 2
            t16193 = t16187 ** 2
            t16186 = t16177 * t16185
            t16191 = t16186 ** 2
            t16183 = 4 * phi1
            t16182 = 8 * phi1
            t16181 = 12 * phi1
            t16180 = 16 * phi1
            t16179 = -17 * phi2
            t16178 = 17 * phi2
            t16167 = t16177 * t16191
            t16165 = t16177 * t16193
            t16163 = t16177 * t16195
            t16161 = t16177 * t16197
            tfunc[..., c] = (-0.37e2 / 0.2382364672e10*1j) * np.sqrt(0.7e1) * np.sqrt(0.2e1) * np.sqrt(0.71e2) * np.sqrt(0.31e2) * np.sqrt((1 - t16177)) * (12546270 * (-70 * t16191 - 70 * t16190 + 56 * t16193 + 56 * t16167 + 56 * t16189 + 56 * t16188 - 28 * t16195 - 28 * t16165 - 28 * t16187 - 28 * t16186 + 8 * t16197 + 8 * t16163 + 8 * t16185 + 8 * t16184 - t16160 - t16161 - t16176 - t16177) * np.exp((17*1j) * phi2) + (-11339000 * t16161 + 78012320 * t16163 - 228594240 * t16165 + 368290720 * t16167 - 15874600 * t16176 + 1360680 * t16177 + 1814240 * t16184 + 81640800 * t16185 - 50798720 * t16186 - 203194880 * t16187 + 190495200 * t16188 - 209544720 * t16191 + 63498400 * t16193 + 18142400 * t16195 - 19049520 * t16197 + t16200 + 907120) * np.exp((-1*1j) * (t16183 + t16179)) + (-14078108 * t16161 + 15271168 * t16163 + 123123792 * t16165 - 347419072 * t16167 + 238612 * t16176 - 4533628 * t16177 + 34360128 * t16184 - 57266880 * t16185 - 48676848 * t16186 + 210933008 * t16187 - 99262592 * t16188 + 68243032 * t16191 + 148893888 * t16193 - 128850480 * t16195 + 27678992 * t16197 + t16201 + 954448) * np.exp((-1*1j) * (t16182 + t16179)) + (19503080 * t16161 - 85269280 * t16163 + 101597440 * t16165 + 88897760 * t16167 + 16781720 * t16176 - 453560 * t16177 + 34470560 * t16184 - 45356000 * t16185 - 177795520 * t16186 - 25399360 * t16187 + 368290720 * t16188 - 488937680 * t16191 + 393690080 * t16193 - 145139200 * t16195 + 11792560 * t16197 + t16200 - 907120) * np.exp((1j) * (t16183 + t16178)) + (18373124 * t16161 + 72538048 * t16163 - 323557872 * t16165 + 198525184 * t16167 - 11214764 * t16176 - 6442524 * t16177 + 22906752 * t16184 + 114533760 * t16185 + 123123792 * t16186 - 136486064 * t16187 - 446681664 * t16188 + 614187288 * t16191 - 297787776 * t16193 - 71583600 * t16195 + 60130224 * t16197 + t16201 - 954448) * np.exp((1j) * (t16182 + t16178)) + (-417384 * t16161 - 3931488 * t16163 + 4523904 * t16165 + 13302432 * t16167 + 955944 * t16176 - 255816 * t16177 - 1454112 * t16184 - 807840 * t16185 + 6785856 * t16186 - 9801792 * t16187 + 700128 * t16188 + 3850704 * t16191 - 14702688 * t16193 + 3231360 * t16195 + 1804176 * t16197 + t16202 + 26928) * np.exp((-1*1j) * (t16181 + t16179)) + (-45085 * t16161 - 1110440 * t16163 - 4562460 * t16165 - 627640 * t16167 + 247435 * t16176 - 39405 * t16177 - 917320 * t16184 + 2172600 * t16185 - 3210620 * t16186 + 2196740 * t16187 + 1882920 * t16188 - 5178030 * t16191 + 4393480 * t16193 + 2776100 * t16195 + 289680 * t16197 + t16203 + 2840) * np.exp((-1*1j) * (t16180 + t16179)) + (498168 * t16161 + 8455392 * t16163 + 14325696 * t16165 - 32906016 * t16167 - 1521432 * t16176 - 309672 * t16177 - 3931488 * t16184 - 4577760 * t16185 + 3015936 * t16186 + 19603584 * t16187 + 30105504 * t16188 - 42357744 * t16191 - 4900896 * t16193 + 15618240 * t16195 + 2719728 * t16197 + t16202 - 26928) * np.exp((1j) * (t16181 + t16178)) + (51475 * t16161 + 1786360 * t16163 + 13011460 * t16165 + 26988520 * t16167 - 331925 * t16176 - 45085 * t16177 - 1496680 * t16184 - 4586600 * t16185 - 9969820 * t16186 - 15377180 * t16187 - 15691000 * t16188 + 22438130 * t16191 + 21967400 * t16193 + 5672900 * t16195 + 386240 * t16197 + t16203 - 2840) * np.exp((1j) * (t16180 + t16178))) * ((1 + t16177) ** (-0.1e1 / 0.2e1))

        if Bindx == 390:
            t16227 = np.cos(phi)
            t16226 = t16227 ** 2
            t16233 = t16226 ** 2
            t16237 = t16233 ** 2
            t16244 = t16237 ** 2
            t16245 = t16227 * t16244
            t16254 = t16227 - t16245
            t16211 = t16227 * t16245
            t16253 = 1 - t16211
            t16232 = t16227 * t16226
            t16235 = t16232 ** 2
            t16236 = t16227 * t16235
            t16242 = t16236 ** 2
            t16214 = t16227 * t16242
            t16240 = t16235 ** 2
            t16216 = t16227 * t16240
            t16234 = t16227 * t16233
            t16238 = t16234 ** 2
            t16218 = t16227 * t16238
            t16252 = 24 * t16214 - 56 * t16216 + 56 * t16218 - 24 * t16232 + 56 * t16234 - 56 * t16236 + 4 * t16254
            t16251 = -184 * t16214 - 168 * t16216 + 936 * t16218 + 12 * t16227 + 184 * t16232 + 168 * t16234 - 936 * t16236 - 12 * t16245
            t16250 = -96 * t16214 + 864 * t16216 - 1248 * t16218 + 96 * t16232 - 864 * t16234 + 1248 * t16236 + 48 * t16254
            t16249 = t16244 - t16226 - 20 * t16233 + 84 * t16235 - 154 * t16237 + 154 * t16238 - 84 * t16240 + 20 * t16242 + t16253
            t16248 = 63 * t16226 + 300 * t16233 - 364 * t16235 - 858 * t16237 + 858 * t16238 + 364 * t16240 - 300 * t16242 - 63 * t16244 + t16253
            t16247 = -6 + 6 * t16211 - 138 * t16226 + 360 * t16233 + 312 * t16235 - 1716 * t16237 + 1716 * t16238 - 312 * t16240 - 360 * t16242 + 138 * t16244
            t16231 = 2 * phi1
            t16230 = 4 * phi1
            t16229 = -9 * phi2
            t16228 = 9 * phi2
            tfunc[..., c] = (0.37e2 / 0.148897792e9) * np.sqrt(0.2e1) * np.sqrt(0.17e2) * np.sqrt(0.71e2) * np.sqrt(0.11e2) * np.sqrt(0.7e1) * np.sqrt(0.19e2) * np.sqrt(0.23e2) * np.sqrt(0.29e2) * np.sqrt(0.93e2) * ((20 * t16211 - 180 * t16244 + 720 * t16242 - 1680 * t16240 + 2520 * t16238 - 2520 * t16237 + 1680 * t16235 - 720 * t16233 + 180 * t16226 - 20) * np.exp((18*1j) * phi2) + (t16248 - t16251) * np.exp((-6*1j) * (t16231 - 3 * phi2)) + (t16248 + t16251) * np.exp((6*1j) * (t16231 + 3 * phi2)) + (t16247 + t16250) * np.exp((-2*1j) * (t16230 + t16229)) + (t16247 - t16250) * np.exp((2*1j) * (t16230 + t16228)) + 15 * (t16249 - t16252) * np.exp((-2*1j) * (t16231 + t16229)) + 15 * (t16249 + t16252) * np.exp((2*1j) * (t16231 + t16228)))

        if Bindx == 391:
            t16280 = np.cos(phi)
            t16279 = t16280 ** 2
            t16287 = t16279 ** 2
            t16291 = t16287 ** 2
            t16298 = t16291 ** 2
            t16299 = t16280 * t16298
            t16264 = t16280 * t16299
            t16314 = -t16264 + 1
            t16288 = t16280 * t16287
            t16292 = t16288 ** 2
            t16313 = t16292 - t16291
            t16286 = t16280 * t16279
            t16289 = t16286 ** 2
            t16294 = t16289 ** 2
            t16312 = t16294 - t16289
            t16290 = t16280 * t16289
            t16296 = t16290 ** 2
            t16311 = t16296 - t16287
            t16310 = -t16298 + t16279
            t16309 = t16299 - t16280
            t16267 = t16280 * t16296
            t16269 = t16280 * t16294
            t16271 = t16280 * t16292
            t16308 = -2510560 * t16271 + 2510560 * t16290 - 1351840 * t16269 + 1351840 * t16288 - 193120 * t16267 + 193120 * t16286 - 5680 * t16309
            t16307 = 53856 * t16280 - 53856 * t16299 + 4200768 * t16271 - 4200768 * t16290 - 825792 * t16267 + 825792 * t16286 - 753984 * t16269 + 753984 * t16288
            t16306 = -355 * t16264 + 42245 * t16279 - 42245 * t16298 - 603500 * t16311 - 2196740 * t16312 - 1726010 * t16313 + 355
            t16305 = -49631296 * t16271 + 49631296 * t16290 + 34360128 * t16269 - 34360128 * t16288 - 3817792 * t16267 + 3817792 * t16286 - 1908896 * t16309
            t16304 = -10885440 * t16267 + 10885440 * t16286 + 25399360 * t16269 - 25399360 * t16271 + 25399360 * t16290 - 25399360 * t16288 + 1814240 * t16309
            t16303 = -4488 * t16264 + 282744 * t16310 - 1346400 * t16311 + 1633632 * t16312 + 3850704 * t16313 + 4488
            t16302 = 69848240 * t16292 - 69848240 * t16291 - 38099040 * t16294 + 38099040 * t16289 + 9071200 * t16296 - 9071200 * t16287 - 453560 * t16310 + 453560 * t16314
            t16301 = 5488076 * t16310 + 14316720 * t16311 + 12407824 * t16312 - 68243032 * t16313 + 238612 * t16314
            t16285 = 2 * phi1
            t16284 = 4 * phi1
            t16283 = 8 * phi1
            t16282 = -9 * phi2
            t16281 = 9 * phi2
            tfunc[..., c] = -(0.111e3 / 0.4764729344e10) * np.sqrt(0.31e2) * np.sqrt(0.71e2) * np.sqrt(0.2e1) * np.sqrt(0.7e1) * ((1394030 * t16264 - 1394030 + 175647780 * t16292 - 175647780 * t16291 - 117098520 * t16294 + 117098520 * t16289 + 50185080 * t16296 - 50185080 * t16287 - 12546270 * t16298 + 12546270 * t16279) * np.exp((18*1j) * phi2) + (t16303 - t16307) * np.exp((-6*1j) * (t16285 - 3 * phi2)) + (t16302 + t16304) * np.exp((-2*1j) * (t16285 + t16282)) + (t16301 - t16305) * np.exp((-2*1j) * (t16284 + t16282)) + (t16306 - t16308) * np.exp((-2*1j) * (t16283 + t16282)) + (t16302 - t16304) * np.exp((2*1j) * (t16285 + t16281)) + (t16301 + t16305) * np.exp((2*1j) * (t16284 + t16281)) + (t16306 + t16308) * np.exp((2*1j) * (t16283 + t16281)) + (t16303 + t16307) * np.exp((6*1j) * (t16285 + 3 * phi2)))

        if Bindx == 392:
            t16339 = np.cos(phi)
            t16338 = t16339 ** 2
            t16347 = t16338 ** 2
            t16351 = t16347 ** 2
            t16358 = t16351 ** 2
            t16359 = t16339 * t16358
            t16323 = t16339 * t16359
            t16370 = 1 - t16323
            t16369 = t16359 - t16339
            t16346 = t16339 * t16338
            t16349 = t16346 ** 2
            t16350 = t16339 * t16349
            t16356 = t16350 ** 2
            t16326 = t16339 * t16356
            t16354 = t16349 ** 2
            t16328 = t16339 * t16354
            t16348 = t16339 * t16347
            t16352 = t16348 ** 2
            t16330 = t16339 * t16352
            t16368 = 544 * t16326 + 3808 * t16328 + 7072 * t16330 - 544 * t16346 - 3808 * t16348 - 7072 * t16350 + 16 * t16369
            t16367 = -4048 * t16326 - 3696 * t16328 + 20592 * t16330 + 264 * t16339 + 4048 * t16346 + 3696 * t16348 - 20592 * t16350 - 264 * t16359
            t16366 = -6944 * t16326 + 62496 * t16328 - 90272 * t16330 + 6944 * t16346 - 62496 * t16348 + 90272 * t16350 - 3472 * t16369
            t16365 = -22320 * t16326 + 52080 * t16328 - 52080 * t16330 + 22320 * t16346 - 52080 * t16348 + 52080 * t16350 + 3720 * t16369
            t16364 = 119 * t16338 + 1700 * t16347 + 6188 * t16349 + 4862 * t16351 - 4862 * t16352 - 6188 * t16354 - 1700 * t16356 - 119 * t16358 + t16370
            t16363 = 22 - 22 * t16323 + 1386 * t16338 + 6600 * t16347 - 8008 * t16349 - 18876 * t16351 + 18876 * t16352 + 8008 * t16354 - 6600 * t16356 - 1386 * t16358
            t16362 = -930 * t16338 - 18600 * t16347 + 78120 * t16349 - 78120 * t16354 + 18600 * t16356 + 930 * t16358 + 143220 * t16352 - 143220 * t16351 + 930 * t16370
            t16361 = 434 * t16323 - 9982 * t16338 + 26040 * t16347 + 22568 * t16349 - 22568 * t16354 - 26040 * t16356 + 9982 * t16358 - 434 + 124124 * t16352 - 124124 * t16351
            t16345 = 4 * phi1
            t16344 = 8 * phi1
            t16343 = 12 * phi1
            t16342 = 16 * phi1
            t16341 = -19 * phi2
            t16340 = 19 * phi2
            tfunc[..., c] = (-0.39e2 / 0.8388608e7*1j) * np.sqrt((1 - t16339)) * np.sqrt((1 + t16339)) * np.sqrt(0.29e2) * np.sqrt(0.703e3) * np.sqrt(0.17e2) * ((-t16364 + t16368) * np.exp((-1*1j) * (t16342 + t16340)) + (t16364 + t16368) * np.exp((1j) * (t16342 + t16341)) + (-t16362 + t16365) * np.exp((-1*1j) * (t16345 + t16340)) + (-t16361 + t16366) * np.exp((-1*1j) * (t16344 + t16340)) + (t16362 + t16365) * np.exp((1j) * (t16345 + t16341)) + (t16361 + t16366) * np.exp((1j) * (t16344 + t16341)) + (t16363 + t16367) * np.exp((-1*1j) * (t16343 + t16340)) + (-t16363 + t16367) * np.exp((1j) * (t16343 + t16341)))

        if Bindx == 393:
            t16397 = np.cos(phi)
            t16396 = t16397 ** 2
            t16404 = t16396 ** 2
            t16403 = t16397 * t16396
            t16406 = t16403 ** 2
            t16408 = t16404 ** 2
            t16405 = t16397 * t16404
            t16410 = t16405 ** 2
            t16412 = t16406 ** 2
            t16407 = t16397 * t16406
            t16414 = t16407 ** 2
            t16416 = t16408 ** 2
            t16409 = t16397 * t16408
            t16418 = t16409 ** 2
            t16427 = -16 - 1600 * t16396 - 16864 * t16404 - 26656 * t16406 + 56576 * t16408 + 77792 * t16410 - 35360 * t16412 - 45152 * t16414 - 8432 * t16416 - 288 * t16418
            t16379 = t16397 * t16418
            t16381 = t16397 * t16416
            t16383 = t16397 * t16414
            t16385 = t16397 * t16412
            t16387 = t16397 * t16410
            t16426 = 19 * t16379 + 2005 * t16381 + 23596 * t16383 + 56644 * t16385 - 20774 * t16387 + 237 * t16397 + 6443 * t16403 + 28628 * t16405 - 4420 * t16407 - 92378 * t16409
            t16425 = 418 * t16379 + 23166 * t16381 + 76824 * t16383 - 196504 * t16385 - 111540 * t16387 + 2750 * t16397 + 22242 * t16403 - 81048 * t16405 - 94952 * t16407 + 358644 * t16409
            t16424 = 11616 * t16396 + 2288 * t16404 - 166320 * t16406 + 164736 * t16408 + 226512 * t16410 - 295152 * t16412 - 8976 * t16414 + 60280 * t16416 + 4752 * t16418 + 264
            t16423 = 13888 * t16396 - 340256 * t16404 + 1006880 * t16406 - 722176 * t16408 - 992992 * t16410 + 1895712 * t16412 - 979104 * t16414 + 52080 * t16416 + 62496 * t16418 + 3472
            t16422 = -8246 * t16379 - 161882 * t16381 + 550312 * t16383 - 71176 * t16385 - 1636180 * t16387 - 19530 * t16397 + 134106 * t16403 + 5208 * t16405 - 1150968 * t16407 + 2358356 * t16409
            t16421 = 17670 * t16379 - 32550 * t16381 - 264120 * t16383 + 1275960 * t16385 - 2512860 * t16387 - 2790 * t16397 - 71610 * t16403 + 561720 * t16405 - 1692600 * t16407 + 2721180 * t16409
            t16420 = 74400 * t16396 - 349680 * t16404 + 677040 * t16406 - 416640 * t16408 - 572880 * t16410 + 1302000 * t16412 - 1063920 * t16414 + 420360 * t16416 - 66960 * t16418 - 3720
            t16402 = 2 * phi1
            t16401 = 4 * phi1
            t16400 = 8 * phi1
            t16399 = -9 * phi2
            t16398 = 9 * phi2
            tfunc[..., c] = -(0.39e2 / 0.8388608e7) * np.sqrt(0.2e1) * np.sqrt(0.29e2) * np.sqrt(0.17e2) * np.sqrt(0.37e2) * ((t16424 + t16425) * np.exp((-6*1j) * (t16402 + 3 * phi2)) + (t16420 - t16421) * np.exp((-2*1j) * (t16402 + t16398)) + (-t16422 + t16423) * np.exp((-2*1j) * (t16401 + t16398)) + (-t16426 + t16427) * np.exp((-2*1j) * (t16400 + t16398)) + (t16420 + t16421) * np.exp((2*1j) * (t16402 + t16399)) + (t16422 + t16423) * np.exp((2*1j) * (t16401 + t16399)) + (t16426 + t16427) * np.exp((2*1j) * (t16400 + t16399)) + (t16424 - t16425) * np.exp((6*1j) * (t16402 - 3 * phi2)))

        if Bindx == 394:
            t16454 = np.cos(phi)
            t16453 = t16454 ** 2
            t16462 = t16453 ** 2
            t16466 = t16462 ** 2
            t16467 = t16454 * t16466
            t16476 = t16467 ** 2
            t16436 = t16454 * t16476
            t16481 = 493 - 703 * t16436
            t16480 = 5918 - 15466 * t16436
            t16479 = -305102 * t16436 + 47306
            t16478 = -653790 * t16436 + 12090
            t16474 = t16466 ** 2
            t16461 = t16454 * t16453
            t16464 = t16461 ** 2
            t16465 = t16454 * t16464
            t16472 = t16465 ** 2
            t16470 = t16464 ** 2
            t16463 = t16454 * t16462
            t16468 = t16463 ** 2
            t16460 = 4 * phi1
            t16459 = 8 * phi1
            t16458 = 12 * phi1
            t16457 = 16 * phi1
            t16456 = -17 * phi2
            t16455 = 17 * phi2
            t16444 = t16454 * t16468
            t16442 = t16454 * t16470
            t16440 = t16454 * t16472
            t16438 = t16454 * t16474
            tfunc[..., c] = (-0.39e2 / 0.8388608e7*1j) * np.sqrt(0.17e2) * np.sqrt(0.29e2) * np.sqrt((1 + t16454)) * ((3428910 * t16438 - 5457240 * t16440 - 2890440 * t16442 + 22303260 * t16444 - 220410 * t16453 - 239010 * t16454 + 2820690 * t16461 + 2890440 * t16462 - 12398760 * t16463 - 15077160 * t16464 + 27888840 * t16465 + 40583340 * t16466 - 34802460 * t16467 - 64019340 * t16468 + 61949160 * t16470 - 36370440 * t16472 + 11938410 * t16474 - 1686090 * t16476 + t16478) * np.exp((-1*1j) * (t16460 + t16455)) + (3130442 * t16438 - 17549224 * t16440 + 28506856 * t16442 - 10144316 * t16444 + 736498 * t16453 - 74214 * t16454 + 1975134 * t16461 - 2043272 * t16462 - 11441976 * t16463 - 4789624 * t16464 + 25524408 * t16465 + 30252404 * t16466 - 20232212 * t16467 - 53497444 * t16468 + 41502552 * t16470 - 10212888 * t16472 - 3779706 * t16474 + 1878786 * t16476 - t16479) * np.exp((-1*1j) * (t16459 + t16455)) + (1250850 * t16438 - 20597640 * t16440 + 60490920 * t16442 - 82820220 * t16444 + 674250 * t16453 - 214830 * t16454 + 1926030 * t16461 - 7637160 * t16462 - 1871160 * t16463 + 29347080 * t16464 - 16535400 * t16465 - 51936780 * t16466 + 57717660 * t16467 + 41104140 * t16468 - 1432200 * t16470 - 21230040 * t16472 + 14116470 * t16474 - 2993670 * t16476 - t16478) * np.exp((1j) * (t16460 + t16456)) + (-7498218 * t16438 + 14479976 * t16440 + 23948120 * t16442 - 77419524 * t16444 - 493458 * t16453 - 168826 * t16454 + 3205090 * t16461 - 3136952 * t16462 - 10348296 * t16463 + 26579896 * t16464 - 5845112 * t16465 - 49931700 * t16466 + 59951892 * t16467 + 13777764 * t16468 + 46061288 * t16470 - 42242088 * t16472 + 6848954 * t16474 + 2488990 * t16476 + t16479) * np.exp((1j) * (t16459 + t16456)) + (150590 * t16476 + 595254 * t16438 + 1090738 * t16474 + 327272 * t16440 - 2500872 * t16472 - 4635400 * t16442 - 1735448 * t16470 + 4597164 * t16444 + 6625476 * t16468 + 1566708 * t16467 - 3852420 * t16466 - 3726008 * t16465 - 444136 * t16464 + 1240536 * t16463 + 780296 * t16462 + 64570 * t16461 - 108306 * t16453 - 45562 * t16454 - t16480) * np.exp((-1*1j) * (t16458 + t16455)) + (-9361 * t16476 - 55845 * t16438 - 193579 * t16474 - 416092 * t16440 - 516324 * t16472 - 163268 * t16442 + 640900 * t16470 + 1263678 * t16444 + 1006434 * t16468 + 14586 * t16467 - 799578 * t16466 - 826540 * t16465 - 336532 * t16464 + 73644 * t16463 + 173332 * t16462 + 104329 * t16461 + 34215 * t16453 + 6211 * t16454 + t16481) * np.exp((-1*1j) * (t16457 + t16455)) + (181522 * t16476 - 927366 * t16438 + 2613358 * t16474 - 4031368 * t16440 + 1857768 * t16472 + 5278504 * t16442 - 11649352 * t16470 + 8787636 * t16444 + 2435004 * t16468 - 10627188 * t16467 + 8341476 * t16466 - 763048 * t16465 - 3407096 * t16464 + 2610696 * t16463 - 589864 * t16462 - 255002 * t16461 + 211266 * t16453 - 57398 * t16454 + t16480) * np.exp((1j) * (t16458 + t16456)) + (-10767 * t16476 + 75973 * t16438 - 325397 * t16474 + 935068 * t16440 - 1867484 * t16472 + 2547076 * t16442 - 2069444 * t16470 + 164866 * t16444 + 2105246 * t16468 - 3126266 * t16467 + 2341274 * t16466 - 715156 * t16465 - 447916 * t16464 + 710804 * t16463 - 463828 * t16462 + 186167 * t16461 - 47623 * t16453 + 7197 * t16454 - t16481) * np.exp((1j) * (t16457 + t16456))) * ((1 - t16454) ** (-0.1e1 / 0.2e1))

        if Bindx == 395:
            t16508 = np.cos(phi)
            t16507 = t16508 ** 2
            t16513 = t16507 ** 2
            t16512 = t16508 * t16507
            t16515 = t16512 ** 2
            t16517 = t16513 ** 2
            t16514 = t16508 * t16513
            t16519 = t16514 ** 2
            t16521 = t16515 ** 2
            t16516 = t16508 * t16515
            t16523 = t16516 ** 2
            t16525 = t16517 ** 2
            t16518 = t16508 * t16517
            t16527 = t16518 ** 2
            t16536 = 80256 * t16507 + 334016 * t16513 - 1127168 * t16515 - 1654848 * t16517 + 3422848 * t16519 + 1371968 * t16521 - 1853952 * t16523 - 611456 * t16525 - 28416 * t16527 + 1216
            t16490 = t16508 * t16527
            t16492 = t16508 * t16525
            t16494 = t16508 * t16523
            t16496 = t16508 * t16521
            t16498 = t16508 * t16519
            t16535 = 2109 * t16490 + 172269 * t16492 + 1367684 * t16494 + 1010548 * t16496 - 3589482 * t16498 - 15019 * t16508 - 231659 * t16512 + 33252 * t16514 + 2186132 * t16516 - 870298 * t16518
            t16534 = -46398 * t16490 - 1967790 * t16492 - 2944392 * t16494 + 14613368 * t16496 - 6760468 * t16498 + 69234 * t16508 - 399454 * t16512 - 1410376 * t16514 + 9272120 * t16516 - 10425844 * t16518
            t16533 = -102080 * t16507 + 1654048 * t16513 - 3518592 * t16515 - 4818528 * t16517 + 18422976 * t16519 - 10868000 * t16521 - 5325056 * t16523 + 4096576 * t16525 + 468864 * t16527 - 10208
            t16532 = 803520 * t16507 - 5371680 * t16513 + 9582720 * t16515 + 12186720 * t16517 - 71037120 * t16519 + 114888480 * t16521 - 93208320 * t16523 + 38777280 * t16525 - 6606720 * t16527 - 14880
            t16531 = 1249920 * t16507 - 8707776 * t16513 + 16165632 * t16515 + 21123648 * t16517 - 107243136 * t16519 + 132699840 * t16521 - 58996224 * t16523 - 2416512 * t16525 + 6166272 * t16527 - 41664
            t16530 = -915306 * t16490 - 13143690 * t16492 + 50814456 * t16494 - 41867112 * t16496 - 47020428 * t16498 - 92442 * t16508 - 884058 * t16512 + 16108344 * t16514 - 64657320 * t16516 + 101657556 * t16518
            t16529 = -1961370 * t16490 + 4846230 * t16492 + 14392680 * t16494 - 78458520 * t16496 + 144248580 * t16498 - 168330 * t16508 + 3291270 * t16512 - 23134680 * t16514 + 77156520 * t16516 - 140212380 * t16518
            t16511 = 3 * phi1
            t16510 = -4 * phi2
            t16509 = 4 * phi2
            tfunc[..., c] = -(0.13e2 / 0.4194304e7) * np.sqrt(0.3e1) * np.sqrt(0.29e2) * np.sqrt(0.17e2) * ((-t16530 + t16531) * np.exp((-8*1j) * (phi1 + 2 * phi2)) + (t16529 + t16532) * np.exp((-4*1j) * (phi1 + t16509)) + (t16533 - t16534) * np.exp((-4*1j) * (t16511 + t16509)) + (-t16529 + t16532) * np.exp((4*1j) * (phi1 + t16510)) + (t16533 + t16534) * np.exp((4*1j) * (t16511 + t16510)) + (t16530 + t16531) * np.exp((8*1j) * (phi1 - 2 * phi2)) + (-t16535 + t16536) * np.exp((-16*1j) * (phi1 + phi2)) + (t16535 + t16536) * np.exp((16*1j) * (phi1 - phi2)))

        if Bindx == 396:
            t16564 = np.cos(phi)
            t16563 = t16564 ** 2
            t16571 = t16563 ** 2
            t16572 = t16564 * t16571
            t16577 = t16572 ** 2
            t16545 = t16577 ** 2
            t16570 = t16564 * t16563
            t16573 = t16570 ** 2
            t16575 = t16571 ** 2
            t16579 = t16573 ** 2
            t16574 = t16564 * t16573
            t16581 = t16574 ** 2
            t16583 = t16575 ** 2
            t16576 = t16564 * t16575
            t16585 = t16576 ** 2
            t16595 = 2109 * t16545 + 49250 * t16563 + 22185 * t16571 - 932552 * t16573 + 903890 * t16575 + 2071212 * t16577 - 2517190 * t16579 - 596360 * t16581 + 848181 * t16583 + 148290 * t16585 + 985
            t16546 = t16564 * t16585
            t16548 = t16564 * t16583
            t16550 = t16564 * t16581
            t16552 = t16564 * t16579
            t16554 = t16564 * t16577
            t16594 = -26640 * t16546 - 465680 * t16548 - 684352 * t16550 + 2301120 * t16552 + 431392 * t16554 - 10896 * t16564 - 102800 * t16570 + 399296 * t16572 + 669120 * t16574 - 2510560 * t16576
            t16593 = 46398 * t16545 - 32868 * t16563 - 551738 * t16571 + 3907024 * t16573 - 7121972 * t16575 - 994136 * t16577 + 14369212 * t16579 - 11544368 * t16581 + 247566 * t16583 + 1669404 * t16585 + 5478
            t16592 = 439560 * t16546 + 2829640 * t16548 - 7446560 * t16550 - 1554080 * t16552 + 15093936 * t16554 + 24904 * t16564 - 378488 * t16570 + 1064800 * t16572 + 2068704 * t16574 - 12142416 * t16576
            t16591 = -6193800 * t16546 + 38297400 * t16548 - 99264480 * t16550 + 138160800 * t16552 - 108646320 * t16554 - 33480 * t16564 + 651000 * t16570 - 2068320 * t16572 - 5580000 * t16574 + 44677200 * t16576
            t16590 = 5780880 * t16546 - 8384880 * t16548 - 37848768 * t16550 + 120188736 * t16552 - 135910944 * t16554 - 111600 * t16564 + 1435920 * t16570 - 4065216 * t16572 - 9445824 * t16574 + 68361696 * t16576
            t16589 = 915306 * t16545 - 316572 * t16563 + 4771458 * t16571 - 26291472 * t16573 + 63801348 * t16575 - 62877672 * t16577 - 9609132 * t16579 + 69952368 * t16581 - 50838822 * t16583 + 10486308 * t16585 + 6882
            t16588 = 1961370 * t16545 + 455700 * t16563 - 5705550 * t16571 + 30407280 * t16573 - 85364700 * t16575 + 137368440 * t16577 - 127289100 * t16579 + 60524400 * t16581 - 5962230 * t16583 - 6389100 * t16585 - 6510
            t16569 = 4 * phi1
            t16568 = 8 * phi1
            t16567 = 16 * phi1
            t16566 = -15 * phi2
            t16565 = 15 * phi2
            tfunc[..., c] = (-0.13e2 / 0.8388608e7*1j) * np.sqrt(0.17e2) * np.sqrt(0.7e1) * np.sqrt(0.5e1) * np.sqrt(0.29e2) * np.sqrt(0.3e1) * ((t16592 + t16593) * np.exp((-3*1j) * (t16569 + 5 * phi2)) + (t16592 - t16593) * np.exp((3*1j) * (t16569 - 5 * phi2)) + (-t16588 + t16591) * np.exp((-1*1j) * (t16569 + t16565)) + (t16589 + t16590) * np.exp((-1*1j) * (t16568 + t16565)) + (t16588 + t16591) * np.exp((1j) * (t16569 + t16566)) + (-t16589 + t16590) * np.exp((1j) * (t16568 + t16566)) + (t16594 - t16595) * np.exp((-1*1j) * (t16567 + t16565)) + (t16594 + t16595) * np.exp((1j) * (t16567 + t16566))) * ((1 - t16564) ** (-0.1e1 / 0.2e1)) * ((1 + t16564) ** (-0.1e1 / 0.2e1))

        if Bindx == 397:
            t16622 = np.cos(phi)
            t16621 = t16622 ** 2
            t16630 = t16621 ** 2
            t16629 = t16622 * t16621
            t16632 = t16629 ** 2
            t16634 = t16630 ** 2
            t16631 = t16622 * t16630
            t16636 = t16631 ** 2
            t16638 = t16632 ** 2
            t16633 = t16622 * t16632
            t16640 = t16633 ** 2
            t16642 = t16634 ** 2
            t16635 = t16622 * t16634
            t16644 = t16635 ** 2
            t16653 = 479808 * t16621 - 1214752 * t16630 - 7223776 * t16632 + 18330624 * t16634 + 3656224 * t16636 - 26046176 * t16638 + 5380704 * t16640 + 6201328 * t16642 + 422688 * t16644 + 13328
            t16652 = 906400 * t16621 - 1662320 * t16630 - 22229328 * t16632 + 96864768 * t16634 - 119824848 * t16636 - 7264400 * t16638 + 96870928 * t16640 - 36641528 * t16642 - 6974352 * t16644 - 45320
            t16604 = t16622 * t16644
            t16606 = t16622 * t16642
            t16608 = t16622 * t16640
            t16610 = t16622 * t16638
            t16612 = t16622 * t16636
            t16651 = -35853 * t16604 - 2174283 * t16606 - 9836948 * t16608 + 10772356 * t16610 + 20912346 * t16612 - 129523 * t16622 - 602293 * t16629 + 5589396 * t16631 - 1998724 * t16633 - 22496474 * t16635
            t16650 = -788766 * t16604 - 24397890 * t16606 + 3891096 * t16608 + 122813416 * t16610 - 154121396 * t16612 - 78210 * t16622 + 3033250 * t16629 - 20042264 * t16631 + 35103640 * t16633 + 34587124 * t16635
            t16649 = -312480 * t16621 - 1019280 * t16630 + 59676240 * t16632 - 370690560 * t16634 + 1015388880 * t16636 - 1495313520 * t16638 + 1235389680 * t16640 - 541397640 * t16642 + 98274960 * t16644 + 3720
            t16648 = -1696320 * t16621 + 1586208 * t16630 + 101192928 * t16632 - 560821248 * t16634 + 1224359136 * t16636 - 1217317920 * t16638 + 409286304 * t16640 + 135105936 * t16642 - 91723296 * t16644 + 28272
            t16647 = 15560202 * t16604 + 151064550 * t16606 - 672355032 * t16608 + 865083768 * t16610 - 230256468 * t16612 - 811146 * t16622 + 17008026 * t16629 - 121070376 * t16631 + 359266440 * t16633 - 383489964 * t16635
            t16646 = -33343290 * t16604 + 100883610 * t16606 + 56220360 * t16608 - 640290120 * t16610 + 1161817380 * t16612 - 568230 * t16622 + 15790470 * t16629 - 130917960 * t16631 + 503453640 * t16633 - 1033045860 * t16635
            t16628 = 2 * phi1
            t16627 = 4 * phi1
            t16626 = 6 * phi1
            t16625 = 8 * phi1
            t16624 = -7 * phi2
            t16623 = 7 * phi2
            tfunc[..., c] = (0.13e2 / 0.8388608e7) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.29e2) * np.sqrt(0.7e1) * ((-t16646 + t16649) * np.exp((-2*1j) * (t16628 + t16623)) + (-t16647 + t16648) * np.exp((-2*1j) * (t16627 + t16623)) + (t16650 + t16652) * np.exp((-2*1j) * (t16626 + t16623)) + (-t16651 + t16653) * np.exp((-2*1j) * (t16625 + t16623)) + (t16646 + t16649) * np.exp((2*1j) * (t16628 + t16624)) + (t16647 + t16648) * np.exp((2*1j) * (t16627 + t16624)) + (-t16650 + t16652) * np.exp((2*1j) * (t16626 + t16624)) + (t16651 + t16653) * np.exp((2*1j) * (t16625 + t16624)))

        if Bindx == 398:
            t16681 = np.cos(phi)
            t16680 = t16681 ** 2
            t16689 = t16680 ** 2
            t16693 = t16689 ** 2
            t16694 = t16681 * t16693
            t16703 = t16694 ** 2
            t16663 = t16681 * t16703
            t16701 = t16693 ** 2
            t16665 = t16681 * t16701
            t16688 = t16681 * t16680
            t16691 = t16688 ** 2
            t16692 = t16681 * t16691
            t16699 = t16692 ** 2
            t16667 = t16681 * t16699
            t16697 = t16691 ** 2
            t16669 = t16681 * t16697
            t16690 = t16681 * t16689
            t16695 = t16690 ** 2
            t16671 = t16681 * t16695
            t16713 = 392496 * t16663 + 4352816 * t16665 - 3210688 * t16667 - 17580992 * t16669 + 22269728 * t16671 - 86224 * t16681 + 87856 * t16688 + 3360832 * t16690 - 9790912 * t16692 + 205088 * t16694
            t16712 = -6476184 * t16663 - 20634328 * t16665 + 98544160 * t16667 - 91479648 * t16669 - 28459600 * t16671 - 45720 * t16681 - 462040 * t16688 + 10423072 * t16690 - 49719648 * t16692 + 88309936 * t16694
            t16662 = t16695 ** 2
            t16711 = 35853 * t16662 - 228514 * t16680 + 1746121 * t16689 - 139672 * t16691 - 13751062 * t16693 + 20877428 * t16695 + 1029418 * t16697 - 15893912 * t16699 + 4517801 * t16701 + 1816926 * t16703 - 10387
            t16710 = -85171632 * t16663 + 209476176 * t16665 + 118772160 * t16667 - 923018304 * t16669 + 1277284320 * t16671 - 81840 * t16681 + 3108432 * t16688 - 46883904 * t16690 + 284380608 * t16692 - 837866016 * t16694
            t16709 = 91255320 * t16663 - 533555880 * t16665 + 1317519840 * t16667 - 1779841440 * t16669 + 1423041360 * t16671 - 48360 * t16681 + 1886040 * t16688 - 27275040 * t16690 + 187056480 * t16692 - 680038320 * t16694
            t16708 = 788766 * t16662 + 640900 * t16680 - 5203770 * t16689 + 10902320 * t16691 + 22317724 * t16693 - 119052648 * t16695 + 162498076 * t16697 - 63489232 * t16699 - 29312250 * t16701 + 19928964 * t16703 - 18850
            t16707 = 33343290 * t16662 + 1731660 * t16680 - 27846990 * t16689 + 174936720 * t16691 - 557187180 * t16693 + 984196680 * t16695 - 951150060 * t16697 + 399684240 * t16699 + 68188530 * t16701 - 125879220 * t16703 - 17670
            t16706 = -15560202 * t16662 + 2326116 * t16680 - 27490242 * t16689 + 121383600 * t16691 - 197255604 * t16693 - 106285608 * t16695 + 810334668 * t16697 - 1112632656 * t16699 + 635925630 * t16701 - 110714268 * t16703 - 31434
            t16687 = 4 * phi1
            t16686 = 8 * phi1
            t16685 = 12 * phi1
            t16684 = 16 * phi1
            t16683 = -13 * phi2
            t16682 = 13 * phi2
            tfunc[..., c] = (0.13e2 / 0.8388608e7*1j) * np.sqrt(0.3e1) * np.sqrt(0.11e2) * np.sqrt(0.29e2) * np.sqrt(0.7e1) * ((1 + t16681) ** (-0.1e1 / 0.2e1)) * ((1 - t16681) ** (-0.1e1 / 0.2e1)) * ((t16707 + t16709) * np.exp((-1*1j) * (t16687 + t16682)) + (t16706 + t16710) * np.exp((-1*1j) * (t16686 + t16682)) + (-t16707 + t16709) * np.exp((1j) * (t16687 + t16683)) + (-t16706 + t16710) * np.exp((1j) * (t16686 + t16683)) + (-t16708 + t16712) * np.exp((-1*1j) * (t16685 + t16682)) + (t16711 + t16713) * np.exp((-1*1j) * (t16684 + t16682)) + (t16708 + t16712) * np.exp((1j) * (t16685 + t16683)) + (-t16711 + t16713) * np.exp((1j) * (t16684 + t16683)))

        if Bindx == 399:
            t16740 = np.cos(phi)
            t16739 = t16740 ** 2
            t16746 = t16739 ** 2
            t16745 = t16740 * t16739
            t16748 = t16745 ** 2
            t16750 = t16746 ** 2
            t16747 = t16740 * t16746
            t16752 = t16747 ** 2
            t16754 = t16748 ** 2
            t16749 = t16740 * t16748
            t16756 = t16749 ** 2
            t16758 = t16750 ** 2
            t16751 = t16740 * t16750
            t16760 = t16751 ** 2
            t16769 = -78880 * t16739 + 1278128 * t16746 - 2718912 * t16748 - 3723408 * t16750 + 14235936 * t16752 - 8398000 * t16754 - 4114816 * t16756 + 3165536 * t16758 + 362304 * t16760 - 7888
            t16722 = t16740 * t16760
            t16724 = t16740 * t16758
            t16726 = t16740 * t16756
            t16728 = t16740 * t16754
            t16730 = t16740 * t16752
            t16768 = -35853 * t16722 - 1520565 * t16724 - 2275212 * t16726 + 11292148 * t16728 - 5223998 * t16730 + 53499 * t16740 - 308669 * t16745 - 1089836 * t16747 + 7164820 * t16749 - 8056334 * t16751
            t16767 = -788766 * t16722 - 16550622 * t16724 + 28045512 * t16726 + 28020328 * t16728 - 87324900 * t16730 - 64270 * t16740 + 693330 * t16745 - 44088 * t16747 - 18135832 * t16749 + 66132924 * t16751
            t16766 = -259440 * t16739 + 3537160 * t16746 - 16964640 * t16748 + 29024424 * t16750 + 5932784 * t16752 - 71712264 * t16754 + 69757248 * t16756 - 13359280 * t16758 - 5978016 * t16760 + 5640
            t16765 = 409200 * t16739 - 8217480 * t16746 + 69058080 * t16748 - 302915880 * t16750 + 755554320 * t16752 - 1109211000 * t16754 + 948838080 * t16756 - 437747280 * t16758 + 84235680 * t16760 - 3720
            t16764 = 895776 * t16739 - 14759472 * t16746 + 102701760 * t16748 - 351112944 * t16750 + 611231712 * t16752 - 479208912 * t16754 + 19415424 * t16756 + 189467040 * t16758 - 78619968 * t16760 - 10416
            t16763 = -15560202 * t16722 - 88336794 * t16724 + 478005864 * t16726 - 773664024 * t16728 + 551618340 * t16730 + 136710 * t16740 - 3540138 * t16745 + 21243432 * t16747 - 25253592 * t16749 - 144649596 * t16751
            t16762 = -33343290 * t16722 + 116914950 * t16724 - 80251560 * t16726 - 206210760 * t16728 + 459533460 * t16730 - 108810 * t16740 + 3893910 * t16745 - 39420840 * t16747 + 174895800 * t16749 - 395902860 * t16751
            t16744 = 2 * phi1
            t16743 = 4 * phi1
            t16742 = -3 * phi2
            t16741 = 3 * phi2
            tfunc[..., c] = (0.13e2 / 0.2097152e7) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.11e2) * np.sqrt(0.29e2) * ((-t16762 + t16765) * np.exp((-4*1j) * (phi1 + t16741)) + (t16763 + t16764) * np.exp((-4*1j) * (t16744 + t16741)) + (-t16768 + t16769) * np.exp((-4*1j) * (t16743 + t16741)) + (t16762 + t16765) * np.exp((4*1j) * (phi1 + t16742)) + (-t16763 + t16764) * np.exp((4*1j) * (t16744 + t16742)) + (t16768 + t16769) * np.exp((4*1j) * (t16743 + t16742)) + (t16766 + t16767) * np.exp((-12*1j) * (phi1 + phi2)) + (t16766 - t16767) * np.exp((12*1j) * (phi1 - phi2)))

        if Bindx == 400:
            t16797 = np.cos(phi)
            t16796 = t16797 ** 2
            t16805 = t16796 ** 2
            t16806 = t16797 * t16805
            t16811 = t16806 ** 2
            t16778 = t16811 ** 2
            t16804 = t16797 * t16796
            t16807 = t16804 ** 2
            t16809 = t16805 ** 2
            t16813 = t16807 ** 2
            t16808 = t16797 * t16807
            t16815 = t16808 ** 2
            t16817 = t16809 ** 2
            t16810 = t16797 * t16809
            t16819 = t16810 ** 2
            t16829 = -35853 * t16778 + 11594 * t16796 + 686103 * t16805 - 3618824 * t16807 + 4808518 * t16809 + 3743740 * t16811 - 12945738 * t16813 + 8083704 * t16815 + 486047 * t16817 - 1213494 * t16819 - 5797
            t16779 = t16797 * t16819
            t16781 = t16797 * t16817
            t16783 = t16797 * t16815
            t16785 = t16797 * t16813
            t16787 = t16797 * t16811
            t16828 = 332112 * t16779 + 1864016 * t16781 - 6259264 * t16783 + 1184832 * t16785 + 10657504 * t16787 + 29648 * t16797 - 359856 * t16804 + 623424 * t16806 + 3080128 * t16808 - 11152544 * t16810
            t16827 = -5479848 * t16779 - 2188648 * t16781 + 54544864 * t16783 - 97869024 * t16785 + 65773136 * t16787 + 43800 * t16797 - 841960 * t16804 + 5126176 * t16806 - 10320288 * t16808 - 8788208 * t16810
            t16826 = 788766 * t16778 - 6380 * t16796 + 1026630 * t16805 - 10637968 * t16807 + 41550652 * t16809 - 73489416 * t16811 + 48780316 * t16813 + 17976176 * t16815 - 38674218 * t16817 + 12685332 * t16819 + 110
            t16825 = -72068304 * t16779 + 239578416 * t16781 - 204861888 * t16783 - 180113472 * t16785 + 476924448 * t16787 - 97104 * t16797 + 3222576 * t16804 - 32977728 * t16806 + 156760128 * t16808 - 386367072 * t16810
            t16824 = 77216040 * t16779 - 429209880 * t16781 + 1011378720 * t16783 - 1313859360 * t16785 + 1024866480 * t16787 - 41880 * t16797 + 1747560 * t16804 - 22693920 * t16806 + 140837280 * t16808 - 490241040 * t16810
            t16823 = 15560202 * t16778 - 168756 * t16796 + 1330434 * t16805 + 9151632 * t16807 - 117126828 * t16809 + 451461192 * t16811 - 857371788 * t16813 + 860226192 * t16815 - 415875726 * t16817 + 52811724 * t16819 + 1722
            t16822 = -33343290 * t16778 - 369660 * t16796 + 7182030 * t16805 - 52199760 * t16807 + 183047820 * t16809 - 333761640 * t16811 + 284295660 * t16813 - 5036880 * t16815 - 190494690 * t16817 + 140677380 * t16819 + 3030
            t16803 = 4 * phi1
            t16802 = 8 * phi1
            t16801 = 12 * phi1
            t16800 = 16 * phi1
            t16799 = -11 * phi2
            t16798 = 11 * phi2
            tfunc[..., c] = (0.13e2 / 0.4194304e7*1j) * np.sqrt(0.3e1) * np.sqrt(0.11e2) * np.sqrt(0.29e2) * np.sqrt(0.31e2) * ((1 + t16797) ** (-0.1e1 / 0.2e1)) * ((1 - t16797) ** (-0.1e1 / 0.2e1)) * ((-t16822 + t16824) * np.exp((-1*1j) * (t16803 + t16798)) + (-t16823 + t16825) * np.exp((-1*1j) * (t16802 + t16798)) + (t16822 + t16824) * np.exp((1j) * (t16803 + t16799)) + (t16823 + t16825) * np.exp((1j) * (t16802 + t16799)) + (-t16826 + t16827) * np.exp((-1*1j) * (t16801 + t16798)) + (t16828 - t16829) * np.exp((-1*1j) * (t16800 + t16798)) + (t16826 + t16827) * np.exp((1j) * (t16801 + t16799)) + (t16828 + t16829) * np.exp((1j) * (t16800 + t16799)))

        if Bindx == 401:
            t16856 = np.cos(phi)
            t16855 = t16856 ** 2
            t16864 = t16855 ** 2
            t16863 = t16856 * t16855
            t16866 = t16863 ** 2
            t16868 = t16864 ** 2
            t16865 = t16856 * t16864
            t16870 = t16865 ** 2
            t16872 = t16866 ** 2
            t16867 = t16856 * t16866
            t16874 = t16867 ** 2
            t16876 = t16868 ** 2
            t16869 = t16856 * t16868
            t16878 = t16869 ** 2
            t16887 = 16320 * t16855 + 51680 * t16864 - 727328 * t16866 + 1824576 * t16868 - 1166880 * t16870 - 1152736 * t16872 + 1630368 * t16874 - 374000 * t16876 - 100640 * t16878 - 1360
            t16886 = 32096 * t16855 - 237424 * t16864 + 1232 * t16866 + 4470752 * t16868 - 15222064 * t16870 + 20765680 * t16872 - 10939280 * t16874 - 531080 * t16876 + 1660560 * t16878 - 472
            t16838 = t16856 * t16878
            t16840 = t16856 * t16876
            t16842 = t16856 * t16874
            t16844 = t16856 * t16872
            t16846 = t16856 * t16870
            t16885 = -11951 * t16838 - 322473 * t16840 + 392020 * t16842 + 1348508 * t16844 - 2862834 * t16846 - 4369 * t16856 + 88553 * t16863 - 370260 * t16865 + 152932 * t16867 + 1589874 * t16869
            t16884 = -79200 * t16855 + 1753200 * t16864 - 15303120 * t16866 + 68459040 * t16868 - 175131600 * t16870 + 266418960 * t16872 - 238132080 * t16874 + 115413000 * t16876 - 23398800 * t16878 + 600
            t16883 = 262922 * t16838 + 3303542 * t16840 - 10697896 * t16842 + 8243816 * t16844 + 4322396 * t16846 - 5994 * t16856 + 152746 * t16863 - 1399640 * t16865 + 5560984 * t16867 - 9742876 * t16869
            t16882 = -133056 * t16855 + 2282784 * t16864 - 14592480 * t16866 + 43243200 * t16868 - 56484064 * t16870 + 4603872 * t16872 + 69183072 * t16874 - 69943440 * t16876 + 21838880 * t16878 + 1232
            t16881 = -11114430 * t16838 + 43493310 * t16840 - 58749960 * t16842 + 18722760 * t16844 + 30607020 * t16846 - 6690 * t16856 + 284130 * t16863 - 3304440 * t16865 + 15987000 * t16867 - 35918700 * t16869
            t16880 = -5186734 * t16838 - 11753154 * t16840 + 97655208 * t16842 - 187461960 * t16844 + 171940860 * t16846 - 4690 * t16856 + 200130 * t16863 - 3134376 * t16865 + 22838088 * t16867 - 85093372 * t16869
            t16862 = 2 * phi1
            t16861 = 4 * phi1
            t16860 = 6 * phi1
            t16859 = 8 * phi1
            t16858 = -5 * phi2
            t16857 = 5 * phi2
            tfunc[..., c] = -(0.39e2 / 0.4194304e7) * np.sqrt(0.2e1) * np.sqrt(0.11e2) * np.sqrt(0.29e2) * np.sqrt(0.31e2) * np.sqrt(0.5e1) * ((t16881 + t16884) * np.exp((-2*1j) * (t16862 + t16857)) + (-t16880 + t16882) * np.exp((-2*1j) * (t16861 + t16857)) + (t16883 + t16886) * np.exp((-2*1j) * (t16860 + t16857)) + (t16885 + t16887) * np.exp((-2*1j) * (t16859 + t16857)) + (-t16881 + t16884) * np.exp((2*1j) * (t16862 + t16858)) + (t16880 + t16882) * np.exp((2*1j) * (t16861 + t16858)) + (-t16883 + t16886) * np.exp((2*1j) * (t16860 + t16858)) + (-t16885 + t16887) * np.exp((2*1j) * (t16859 + t16858)))

        if Bindx == 402:
            t16915 = np.cos(phi)
            t16914 = t16915 ** 2
            t16922 = t16914 ** 2
            t16926 = t16922 ** 2
            t16927 = t16915 * t16926
            t16936 = t16927 ** 2
            t16897 = t16915 * t16936
            t16934 = t16926 ** 2
            t16899 = t16915 * t16934
            t16921 = t16915 * t16914
            t16924 = t16921 ** 2
            t16925 = t16915 * t16924
            t16932 = t16925 ** 2
            t16901 = t16915 * t16932
            t16930 = t16924 ** 2
            t16903 = t16915 * t16930
            t16923 = t16915 * t16922
            t16928 = t16923 ** 2
            t16905 = t16915 * t16928
            t16946 = -2626704 * t16897 - 2752912 * t16899 + 38840512 * t16901 - 69761472 * t16903 + 36300576 * t16905 + 23664 * t16915 - 1427728 * t16921 + 11011648 * t16923 - 28680768 * t16925 + 19073184 * t16927
            t16945 = 43340616 * t16897 - 83340664 * t16899 - 125670688 * t16901 + 511069088 * t16903 - 605498192 * t16905 + 3016 * t16915 - 498104 * t16921 + 13464352 * t16923 - 102478112 * t16925 + 349608688 * t16927
            t16896 = t16928 ** 2
            t16944 = 346579 * t16896 + 574838 * t16914 - 2175609 * t16922 - 5012824 * t16924 + 40902238 * t16926 - 80368860 * t16928 + 59206342 * t16930 + 950504 * t16932 - 21266541 * t16934 + 6869462 * t16936 - 26129
            t16943 = 569994768 * t16897 - 2305654512 * t16899 + 3560730432 * t16901 - 2366973504 * t16903 + 190599136 * t16905 + 240912 * t16915 - 9126768 * t16921 + 94438848 * t16923 - 396720576 * t16925 + 662471264 * t16927
            t16942 = -7624738 * t16896 + 909324 * t16914 - 11832986 * t16922 + 59936272 * t16924 - 128573588 * t16926 + 49996232 * t16928 + 265587452 * t16930 - 481347568 * t16932 + 317234654 * t16934 - 64273396 * t16936 - 11658
            t16941 = -610708680 * t16897 + 3247943160 * t16899 - 7326778080 * t16901 + 9120175200 * t16903 - 6822087600 * t16905 + 191160 * t16915 - 9099720 * t16921 + 129581280 * t16923 - 856470240 * t16925 + 3127253520 * t16927
            t16940 = 322318470 * t16896 + 609180 * t16914 - 13203090 * t16922 + 100263120 * t16924 - 321211140 * t16926 + 318606120 * t16928 + 666324300 * t16930 - 2264401200 * t16932 + 2669787270 * t16934 - 1479088740 * t16936 - 4290
            t16939 = 150415286 * t16896 + 1716428 * t16914 - 36535842 * t16922 + 323622096 * t16924 - 1500033444 * t16926 + 3959996040 * t16928 - 6084594516 * t16930 + 5222988624 * t16932 - 2081636298 * t16934 + 44076172 * t16936 - 14546
            t16920 = 4 * phi1
            t16919 = 8 * phi1
            t16918 = -9 * phi2
            t16917 = 9 * phi2
            t16916 = 16 * phi1
            tfunc[..., c] = (-0.39e2 / 0.4194304e7*1j) * np.sqrt(0.11e2) * np.sqrt(0.31e2) * ((-t16942 + t16945) * np.exp((-3*1j) * (t16920 + 3 * phi2)) + (-t16940 + t16941) * np.exp((-1*1j) * (t16920 + t16917)) + (t16939 + t16943) * np.exp((-1*1j) * (t16919 + t16917)) + (t16940 + t16941) * np.exp((1j) * (t16920 + t16918)) + (-t16939 + t16943) * np.exp((1j) * (t16919 + t16918)) + (t16942 + t16945) * np.exp((3*1j) * (t16920 - 3 * phi2)) + (-t16944 + t16946) * np.exp((-1*1j) * (t16916 + t16917)) + (t16944 + t16946) * np.exp((1j) * (t16916 + t16918))) * ((1 + t16915) ** (-0.1e1 / 0.2e1)) * ((1 - t16915) ** (-0.1e1 / 0.2e1))

        if Bindx == 403:
            t16973 = np.cos(phi)
            t16972 = t16973 ** 2
            t16979 = t16972 ** 2
            t16978 = t16973 * t16972
            t16981 = t16978 ** 2
            t16983 = t16979 ** 2
            t16980 = t16973 * t16979
            t16985 = t16980 ** 2
            t16987 = t16981 ** 2
            t16982 = t16973 * t16981
            t16989 = t16982 ** 2
            t16991 = t16983 ** 2
            t16984 = t16973 * t16983
            t16993 = t16984 ** 2
            t17002 = 473280 * t16972 - 3297184 * t16979 + 6121088 * t16981 + 7998432 * t16983 - 40607424 * t16985 + 50246560 * t16987 - 22338816 * t16989 - 915008 * t16991 + 2334848 * t16993 - 15776
            t17001 = 438944 * t16972 - 7232368 * t16979 + 50325440 * t16981 - 172050736 * t16983 + 299512928 * t16985 - 234819728 * t16987 + 9513856 * t16989 + 92841760 * t16991 - 38524992 * t16993 - 5104
            t16955 = t16973 * t16993
            t16957 = t16973 * t16991
            t16959 = t16973 * t16989
            t16961 = t16973 * t16987
            t16963 = t16973 * t16985
            t17000 = -346579 * t16955 - 4976835 * t16957 + 19240804 * t16959 - 15852908 * t16961 - 17804202 * t16963 - 35003 * t16973 - 334747 * t16978 + 6099396 * t16980 - 24482380 * t16982 + 38492454 * t16984
            t16999 = 560448 * t16972 - 9450336 * t16979 + 41112960 * t16981 + 44227872 * t16983 - 759863104 * t16985 + 2206879584 * t16987 - 2968167168 * t16989 + 1951333440 * t16991 - 506662016 * t16993 - 4448
            t16998 = -7624738 * t16955 - 43286386 * t16957 + 234230216 * t16959 - 379107256 * t16961 + 270301460 * t16963 + 66990 * t16973 - 1734722 * t16978 + 10409608 * t16980 - 12374648 * t16982 - 70880524 * t16984
            t16997 = 1116000 * t16972 - 27484560 * t16979 + 261119040 * t16981 - 1248780240 * t16983 + 3375530400 * t16985 - 5392921200 * t16987 + 5048784000 * t16989 - 2560208160 * t16991 + 542852160 * t16993 - 7440
            t16996 = -322318470 * t16955 + 1368592650 * t16957 - 2334631080 * t16959 + 2016816600 * t16961 - 894212100 * t16963 - 17430 * t16973 + 786330 * t16978 - 7845480 * t16980 + 11707800 * t16982 + 161121180 * t16984
            t16995 = -150415286 * t16955 + 78951978 * t16957 + 1232787912 * t16959 - 3043143768 * t16961 + 3238211340 * t16963 - 195590 * t16973 + 8244474 * t16978 - 103743864 * t16980 + 599996904 * t16982 - 1860726868 * t16984
            t16977 = 2 * phi1
            t16976 = 3 * phi1
            t16975 = -2 * phi2
            t16974 = 2 * phi2
            tfunc[..., c] = (0.39e2 / 0.2097152e7) * np.sqrt(0.7e1) * np.sqrt(0.31e2) * ((t16995 + t16999) * np.exp((-8*1j) * (phi1 + phi2)) + (-t17000 + t17002) * np.exp((-8*1j) * (t16977 + phi2)) + (-t16996 + t16997) * np.exp((-4*1j) * (phi1 + t16974)) + (t16998 + t17001) * np.exp((-4*1j) * (t16976 + t16974)) + (t16996 + t16997) * np.exp((4*1j) * (phi1 + t16975)) + (-t16998 + t17001) * np.exp((4*1j) * (t16976 + t16975)) + (-t16995 + t16999) * np.exp((8*1j) * (phi1 - phi2)) + (t17000 + t17002) * np.exp((8*1j) * (t16977 - phi2)))

        if Bindx == 404:
            t17030 = np.cos(phi)
            t17029 = t17030 ** 2
            t17038 = t17029 ** 2
            t17039 = t17030 * t17038
            t17044 = t17039 ** 2
            t17011 = t17044 ** 2
            t17037 = t17030 * t17029
            t17040 = t17037 ** 2
            t17042 = t17038 ** 2
            t17046 = t17040 ** 2
            t17041 = t17030 * t17040
            t17048 = t17041 ** 2
            t17050 = t17042 ** 2
            t17043 = t17030 * t17042
            t17052 = t17043 ** 2
            t17062 = -22874214 * t17011 + 59972 * t17029 + 1739826 * t17038 - 42439760 * t17040 + 279657092 * t17042 - 863604456 * t17044 + 1431328756 * t17046 - 1287652432 * t17048 + 556562490 * t17050 - 52776636 * t17052 - 638
            t17012 = t17030 * t17052
            t17014 = t17030 * t17050
            t17016 = t17030 * t17048
            t17018 = t17030 * t17046
            t17020 = t17030 * t17044
            t17061 = -1329987792 * t17012 + 6146700336 * t17014 - 11820368448 * t17016 + 12226342464 * t17018 - 7340642400 * t17020 + 45360 * t17030 - 2505552 * t17037 + 52207680 * t17039 - 508690752 * t17041 + 2576899104 * t17043
            t17060 = 6128976 * t17012 - 15957424 * t17014 - 18773440 * t17016 + 118225344 * t17018 - 179862176 * t17020 - 181424 * t17030 + 1396176 * t17037 + 2366400 * t17039 - 41112256 * t17041 + 127769824 * t17043
            t17059 = -101128104 * t17012 + 382343192 * t17014 - 454102880 * t17016 - 31144608 * t17018 + 551716880 * t17020 - 191400 * t17030 + 6015064 * t17037 - 57072928 * t17039 + 247717536 * t17041 - 544152752 * t17043
            t17058 = -1039737 * t17011 + 917966 * t17029 - 9659349 * t17038 + 38734024 * t17040 - 65076986 * t17042 + 22277684 * t17044 + 74639214 * t17046 - 108771576 * t17048 + 56944951 * t17050 - 8942034 * t17052 - 24157
            t17057 = 1424986920 * t17012 - 7304662680 * t17014 + 15855339360 * t17016 - 18941570400 * t17018 + 13544194800 * t17020 - 262360 * t17030 + 13804840 * t17037 - 214212320 * t17039 + 1521415520 * t17041 - 5899033680 * t17043
            t17056 = -966955410 * t17011 + 216460 * t17029 - 6895690 * t17038 + 95614480 * t17040 - 696621620 * t17042 + 2897501640 * t17044 - 7197814500 * t17046 + 10840861200 * t17048 - 9689269170 * t17050 + 4723363980 * t17052 - 1370
            t17055 = -451245858 * t17011 - 3441924 * t17029 + 76112358 * t17038 - 653061360 * t17040 + 2821408044 * t17042 - 6797086296 * t17044 + 9270205308 * t17046 - 6516944496 * t17048 + 1266807870 * t17050 + 987220668 * t17052 + 25686
            t17036 = 4 * phi1
            t17035 = 8 * phi1
            t17034 = -7 * phi2
            t17033 = 7 * phi2
            t17032 = 12 * phi1
            t17031 = 16 * phi1
            tfunc[..., c] = (0.39e2 / 0.4194304e7*1j) * np.sqrt(0.7e1) * np.sqrt(0.31e2) * ((1 + t17030) ** (-0.1e1 / 0.2e1)) * ((1 - t17030) ** (-0.1e1 / 0.2e1)) * ((-t17056 + t17057) * np.exp((-1*1j) * (t17036 + t17033)) + (t17055 + t17061) * np.exp((-1*1j) * (t17035 + t17033)) + (t17056 + t17057) * np.exp((1j) * (t17036 + t17034)) + (-t17055 + t17061) * np.exp((1j) * (t17035 + t17034)) + (t17059 + t17062) * np.exp((-1*1j) * (t17032 + t17033)) + (-t17058 + t17060) * np.exp((-1*1j) * (t17031 + t17033)) + (t17059 - t17062) * np.exp((1j) * (t17032 + t17034)) + (t17058 + t17060) * np.exp((1j) * (t17031 + t17034)))

        if Bindx == 405:
            t17089 = np.cos(phi)
            t17088 = t17089 ** 2
            t17096 = t17088 ** 2
            t17095 = t17089 * t17088
            t17098 = t17095 ** 2
            t17100 = t17096 ** 2
            t17097 = t17089 * t17096
            t17102 = t17097 ** 2
            t17104 = t17098 ** 2
            t17099 = t17089 * t17098
            t17106 = t17099 ** 2
            t17108 = t17100 ** 2
            t17101 = t17089 * t17100
            t17110 = t17101 ** 2
            t17119 = 347072 * t17088 - 5568928 * t17096 + 30337248 * t17098 - 74494272 * t17100 + 89023968 * t17102 - 41759072 * t17104 - 11469152 * t17106 + 18844432 * t17108 - 5253408 * t17110 - 7888
            t17118 = -765600 * t17088 + 11489104 * t17096 - 59762736 * t17098 + 123384096 * t17100 - 25382192 * t17102 - 309685200 * t17104 + 523838832 * t17106 - 349805192 * t17108 + 86681232 * t17110 + 7656
            t17071 = t17089 * t17110
            t17073 = t17089 * t17108
            t17075 = t17089 * t17106
            t17077 = t17089 * t17104
            t17079 = t17089 * t17102
            t17117 = 22874214 * t17071 + 7321050 * t17073 - 323688024 * t17075 + 799727896 * t17077 - 898917756 * t17079 + 83578 * t17089 - 2941818 * t17095 + 33862488 * t17097 - 186104600 * t17099 + 547782972 * t17101
            t17116 = 1350720 * t17088 - 32975712 * t17096 + 327009312 * t17098 - 1687465152 * t17100 + 4996274976 * t17102 - 8768917920 * t17104 + 8990373984 * t17106 - 4965630096 * t17108 + 1139989536 * t17110 - 9648
            t17115 = -1620320 * t17088 + 43292080 * t17096 - 442238160 * t17098 + 2253270240 * t17100 - 6434485200 * t17102 + 10784763600 * t17104 - 10536639600 * t17106 + 5555064840 * t17108 - 1221417360 * t17110 + 9880
            t17114 = 966955410 * t17071 - 4356113490 * t17073 + 8236314360 * t17075 - 8504719800 * t17077 + 5229857100 * t17079 - 57330 * t17089 + 3193970 * t17095 - 54478840 * t17097 + 438059960 * t17099 - 1959011340 * t17101
            t17113 = 1039737 * t17071 + 4722447 * t17073 - 39832428 * t17075 + 90433948 * t17077 - 92562722 * t17079 - 187833 * t17089 + 2439857 * t17095 - 8757652 * t17097 + 3843428 * t17099 + 38861218 * t17101
            t17112 = -451245858 * t17071 + 1216373970 * t17073 - 286464552 * t17075 - 2442036408 * t17077 + 3722970468 * t17079 - 256734 * t17089 + 11740974 * t17095 - 152175576 * t17097 + 860842680 * t17099 - 2479748964 * t17101
            t17094 = 2 * phi1
            t17093 = 4 * phi1
            t17092 = 8 * phi1
            t17091 = -3 * phi2
            t17090 = 3 * phi2
            tfunc[..., c] = -(0.39e2 / 0.4194304e7) * np.sqrt(0.2e1) * np.sqrt(0.7e1) * np.sqrt(0.31e2) * ((t17117 + t17118) * np.exp((-6*1j) * (t17094 + phi2)) + (-t17114 + t17115) * np.exp((-2*1j) * (t17094 + t17090)) + (-t17112 + t17116) * np.exp((-2*1j) * (t17093 + t17090)) + (-t17113 + t17119) * np.exp((-2*1j) * (t17092 + t17090)) + (t17114 + t17115) * np.exp((2*1j) * (t17094 + t17091)) + (t17112 + t17116) * np.exp((2*1j) * (t17093 + t17091)) + (t17113 + t17119) * np.exp((2*1j) * (t17092 + t17091)) + (-t17117 + t17118) * np.exp((6*1j) * (t17094 - phi2)))

        if Bindx == 406:
            t17147 = np.cos(phi)
            t17146 = t17147 ** 2
            t17155 = t17146 ** 2
            t17159 = t17155 ** 2
            t17160 = t17147 * t17159
            t17169 = t17160 ** 2
            t17129 = t17147 * t17169
            t17167 = t17159 ** 2
            t17131 = t17147 * t17167
            t17154 = t17147 * t17146
            t17157 = t17154 ** 2
            t17158 = t17147 * t17157
            t17165 = t17158 ** 2
            t17133 = t17147 * t17165
            t17163 = t17157 ** 2
            t17135 = t17147 * t17163
            t17156 = t17147 * t17155
            t17161 = t17156 ** 2
            t17137 = t17147 * t17161
            t17179 = -72234360 * t17129 + 373753160 * t17131 - 798316640 * t17133 + 900192480 * t17135 - 563884816 * t17137 - 22968 * t17147 + 671176 * t17154 - 2684704 * t17156 - 21161184 * t17158 + 183687856 * t17160
            t17178 = 4377840 * t17129 - 23387920 * t17131 + 46728512 * t17133 - 34233920 * t17135 - 17779552 * t17137 + 149872 * t17147 - 2563600 * t17154 + 15113408 * t17156 - 40859840 * t17158 + 52455200 * t17160
            t17128 = t17161 ** 2
            t17177 = -1039737 * t17128 + 123250 * t17146 + 934235 * t17155 - 14486312 * t17157 + 59667790 * t17159 - 121019668 * t17161 + 136694110 * t17163 - 85289000 * t17165 + 24610067 * t17167 - 192270 * t17169 - 2465
            t17176 = -22874214 * t17128 - 743908 * t17146 + 13346322 * t17155 - 95694896 * t17157 + 353200628 * t17159 - 736377048 * t17161 + 878473684 * t17163 - 550563376 * t17165 + 108969762 * t17167 + 52256028 * t17169 + 7018
            t17175 = -949991280 * t17129 + 4801307280 * t17131 - 10278633792 * t17133 + 12129681984 * t17135 - 8598047136 * t17137 + 192528 * t17147 - 9465456 * t17154 + 140368704 * t17156 - 972422976 * t17158 + 3737010144 * t17160
            t17174 = 1017847800 * t17129 - 5070899400 * t17131 + 10666742880 * t17133 - 12304792800 * t17135 + 8457979920 * t17137 - 122824 * t17147 + 6934200 * t17154 - 114737376 * t17156 + 863231200 * t17158 - 3522183600 * t17160
            t17173 = -451245858 * t17128 - 1048572 * t17146 + 24109638 * t17155 - 203350224 * t17157 + 800358972 * t17159 - 1527148392 * t17161 + 995425116 * t17163 + 1192850736 * t17165 - 2656766154 * t17167 + 1826807556 * t17169 + 7182
            t17172 = -966955410 * t17128 + 658580 * t17146 - 18972330 * t17155 + 217385584 * t17157 - 1293558500 * t17159 + 4506061560 * t17161 - 9704319300 * t17163 + 13091238000 * t17165 - 10769471610 * t17167 + 4937937300 * t17169 - 3874
            t17153 = 4 * phi1
            t17152 = 8 * phi1
            t17151 = -5 * phi2
            t17150 = 5 * phi2
            t17149 = 12 * phi1
            t17148 = 16 * phi1
            tfunc[..., c] = (0.195e3 / 0.4194304e7*1j) * np.sqrt(0.31e2) * ((1 + t17147) ** (-0.1e1 / 0.2e1)) * ((1 - t17147) ** (-0.1e1 / 0.2e1)) * ((-t17172 + t17174) * np.exp((-1*1j) * (t17153 + t17150)) + (t17173 + t17175) * np.exp((-1*1j) * (t17152 + t17150)) + (t17172 + t17174) * np.exp((1j) * (t17153 + t17151)) + (-t17173 + t17175) * np.exp((1j) * (t17152 + t17151)) + (t17176 + t17179) * np.exp((-1*1j) * (t17149 + t17150)) + (-t17177 + t17178) * np.exp((-1*1j) * (t17148 + t17150)) + (-t17176 + t17179) * np.exp((1j) * (t17149 + t17151)) + (t17177 + t17178) * np.exp((1j) * (t17148 + t17151)))

        if Bindx == 407:
            t17206 = np.cos(phi)
            t17205 = t17206 ** 2
            t17211 = t17205 ** 2
            t17210 = t17206 * t17205
            t17213 = t17210 ** 2
            t17215 = t17211 ** 2
            t17212 = t17206 * t17211
            t17217 = t17212 ** 2
            t17219 = t17213 ** 2
            t17214 = t17206 * t17213
            t17221 = t17214 ** 2
            t17223 = t17215 ** 2
            t17216 = t17206 * t17215
            t17225 = t17216 ** 2
            t17234 = 425952 * t17205 - 2847568 * t17211 + 5079872 * t17213 + 6460272 * t17215 - 37657312 * t17217 + 60903248 * t17219 - 49410432 * t17221 + 20556128 * t17223 - 3502272 * t17225 - 7888
            t17233 = 280720 * t17205 - 5637368 * t17211 + 47375328 * t17213 - 207806808 * t17215 + 518326512 * t17217 - 760942600 * t17219 + 650923328 * t17221 - 300304048 * t17223 + 57787488 * t17225 - 2552
            t17188 = t17206 * t17225
            t17190 = t17206 * t17223
            t17192 = t17206 * t17221
            t17194 = t17206 * t17219
            t17196 = t17206 * t17217
            t17232 = 1039737 * t17188 - 2569023 * t17190 - 7629668 * t17192 + 41591452 * t17194 - 76467258 * t17196 + 89233 * t17206 - 1744727 * t17210 + 12263868 * t17212 - 40901252 * t17214 + 74327638 * t17216
            t17231 = -22874214 * t17188 + 80206170 * t17190 - 55054296 * t17192 - 141465016 * t17194 + 315249836 * t17196 - 74646 * t17206 + 2671306 * t17210 - 27043544 * t17212 + 119982280 * t17214 - 271597876 * t17216
            t17230 = -778128 * t17205 + 21985912 * t17211 - 236585440 * t17213 + 1264287960 * t17215 - 3769125360 * t17217 + 6564821640 * t17219 - 6635914560 * t17221 + 3605565360 * t17223 - 814278240 * t17225 + 4472
            t17229 = 1562400 * t17205 - 38478384 * t17211 + 365566656 * t17213 - 1748292336 * t17215 + 4725742560 * t17217 - 7550089680 * t17219 + 7068297600 * t17221 - 3584291424 * t17223 + 759993024 * t17225 - 10416
            t17228 = -451245858 * t17188 + 1916029710 * t17190 - 3268483512 * t17192 + 2823543240 * t17194 - 1251896940 * t17196 - 24402 * t17206 + 1100862 * t17210 - 10983672 * t17212 + 16390920 * t17214 + 225569652 * t17216
            t17227 = -966955410 * t17188 + 4534924590 * t17190 - 8988237960 * t17192 + 9787628760 * t17194 - 6369271740 * t17196 + 75998 * t17206 - 4406402 * t17210 + 75387000 * t17212 - 590248360 * t17214 + 2521087140 * t17216
            t17209 = 2 * phi1
            t17208 = 3 * phi1
            t17207 = 4 * phi1
            tfunc[..., c] = -(0.39e2 / 0.2097152e7) * np.sqrt(0.2e1) * np.sqrt(0.5e1) * np.sqrt(0.31e2) * ((t17227 + t17230) * np.exp((-4*1j) * (phi1 + phi2)) + (-t17228 + t17229) * np.exp((-4*1j) * (t17209 + phi2)) + (-t17231 + t17233) * np.exp((-4*1j) * (t17208 + phi2)) + (-t17232 + t17234) * np.exp((-4*1j) * (t17207 + phi2)) + (-t17227 + t17230) * np.exp((4*1j) * (phi1 - phi2)) + (t17228 + t17229) * np.exp((4*1j) * (t17209 - phi2)) + (t17231 + t17233) * np.exp((4*1j) * (t17208 - phi2)) + (t17232 + t17234) * np.exp((4*1j) * (t17207 - phi2)))

        if Bindx == 408:
            t17262 = np.cos(phi)
            t17261 = t17262 ** 2
            t17269 = t17261 ** 2
            t17273 = t17269 ** 2
            t17274 = t17262 * t17273
            t17283 = t17274 ** 2
            t17244 = t17262 * t17283
            t17281 = t17273 ** 2
            t17246 = t17262 * t17281
            t17268 = t17262 * t17261
            t17271 = t17268 ** 2
            t17272 = t17262 * t17271
            t17279 = t17272 ** 2
            t17248 = t17262 * t17279
            t17277 = t17271 ** 2
            t17250 = t17262 * t17277
            t17270 = t17262 * t17269
            t17275 = t17270 ** 2
            t17252 = t17262 * t17275
            t17293 = 2626704 * t17244 - 18828656 * t17246 + 58276544 * t17248 - 101376576 * t17250 + 107892064 * t17252 - 23664 * t17262 + 607376 * t17268 - 6215744 * t17270 + 28491456 * t17272 - 71449504 * t17274
            t17292 = -43340616 * t17244 + 264512248 * t17246 - 689601440 * t17248 + 999373408 * t17250 - 876994800 * t17252 + 63800 * t17262 - 2447368 * t17268 + 28429280 * t17270 - 155478048 * t17272 + 475483536 * t17274
            t17291 = 610708680 * t17244 - 2983852920 * t17246 + 6138372000 * t17248 - 6903888480 * t17250 + 4611675120 * t17252 - 55224 * t17262 + 3260296 * t17268 - 56254432 * t17270 + 439963680 * t17272 - 1859928720 * t17274
            t17243 = t17275 ** 2
            t17290 = 1039737 * t17243 + 543286 * t17261 - 5177979 * t17269 + 20780936 * t17271 - 44152094 * t17273 + 52386180 * t17275 - 31010686 * t17277 + 1344904 * t17279 + 9895989 * t17281 - 5640906 * t17283 - 9367
            t17289 = 22874214 * t17243 + 218196 * t17261 - 3750802 * t17269 + 22381040 * t17271 - 55239316 * t17273 + 33852280 * t17275 + 111457324 * t17277 - 270956048 * t17279 + 261442830 * t17281 - 122277804 * t17283 - 1914
            t17288 = -569994768 * t17244 + 3045107184 * t17246 - 6888267456 * t17248 + 8572576320 * t17250 - 6380273760 * t17252 + 146160 * t17262 - 7482384 * t17268 + 112569408 * t17270 - 772744896 * t17272 + 2888364192 * t17274
            t17287 = -451245858 * t17243 + 394548 * t17261 - 10660986 * t17269 + 117867120 * t17271 - 688528932 * t17273 + 2369965752 * t17275 - 5038488420 * t17277 + 6677124720 * t17279 - 5362957530 * t17281 + 2386532148 * t17283 - 2562
            t17286 = -966955410 * t17243 + 726596 * t17261 - 21553194 * t17269 + 250285360 * t17271 - 1488681220 * t17273 + 5126635800 * t17275 - 10827718980 * t17277 + 14250300720 * t17279 - 11404021770 * t17281 + 5080986180 * t17283 - 4082
            t17267 = 4 * phi1
            t17266 = 8 * phi1
            t17265 = -3 * phi2
            t17264 = 3 * phi2
            t17263 = 16 * phi1
            tfunc[..., c] = (0.39e2 / 0.8388608e7*1j) * np.sqrt(0.2e1) * np.sqrt(0.5e1) * np.sqrt(0.31e2) * np.sqrt(0.23e2) * ((1 + t17262) ** (-0.1e1 / 0.2e1)) * ((1 - t17262) ** (-0.1e1 / 0.2e1)) * ((-t17289 + t17292) * np.exp((-3*1j) * (t17267 + phi2)) + (-t17286 + t17291) * np.exp((-1*1j) * (t17267 + t17264)) + (t17287 + t17288) * np.exp((-1*1j) * (t17266 + t17264)) + (t17286 + t17291) * np.exp((1j) * (t17267 + t17265)) + (-t17287 + t17288) * np.exp((1j) * (t17266 + t17265)) + (t17289 + t17292) * np.exp((3*1j) * (t17267 - phi2)) + (t17290 + t17293) * np.exp((-1*1j) * (t17263 + t17264)) + (-t17290 + t17293) * np.exp((1j) * (t17263 + t17265)))

        if Bindx == 409:
            t17320 = np.cos(phi)
            t17319 = t17320 ** 2
            t17326 = t17319 ** 2
            t17330 = t17326 ** 2
            t17331 = t17320 * t17330
            t17340 = t17331 ** 2
            t17302 = t17320 * t17340
            t17338 = t17330 ** 2
            t17304 = t17320 * t17338
            t17325 = t17320 * t17319
            t17328 = t17325 ** 2
            t17329 = t17320 * t17328
            t17336 = t17329 ** 2
            t17306 = t17320 * t17336
            t17334 = t17328 ** 2
            t17308 = t17320 * t17334
            t17327 = t17320 * t17326
            t17332 = t17327 ** 2
            t17310 = t17320 * t17332
            t17349 = -61161 * t17302 + 408465 * t17304 - 1144804 * t17306 + 1714132 * t17308 - 1411662 * t17310 - 1943 * t17320 + 33263 * t17325 - 117276 * t17327 + 52780 * t17329 + 528206 * t17331
            t17348 = -27840 * t17319 + 284896 * t17326 - 1253728 * t17328 + 3040128 * t17330 - 4475744 * t17332 + 4124960 * t17334 - 2335776 * t17336 + 745648 * t17338 - 103008 * t17340 + 464
            t17347 = 26912 * t17319 - 506224 * t17326 + 3654000 * t17328 - 13301952 * t17330 + 27562992 * t17332 - 34082192 * t17334 + 24963664 * t17336 - 10016600 * t17338 + 1699632 * t17340 - 232
            t17346 = -1345542 * t17302 + 7807206 * t17304 - 19147656 * t17306 + 25755016 * t17308 - 20625380 * t17310 + 870 * t17320 - 35206 * t17325 + 457736 * t17327 - 2870536 * t17329 + 10003492 * t17331
            t17345 = -18720 * t17319 + 546416 * t17326 - 6064240 * t17328 + 33359040 * t17330 - 102151920 * t17332 + 182317200 * t17334 - 188358480 * t17336 + 104319960 * t17338 - 23949360 * t17340 + 104
            t17344 = 52416 * t17319 - 1324512 * t17326 + 12724320 * t17328 - 60649344 * t17330 + 161263200 * t17332 - 250713120 * t17334 + 226548000 * t17336 - 110253360 * t17338 + 22352736 * t17340 - 336
            t17343 = 56879730 * t17302 - 273071250 * t17304 + 552237720 * t17306 - 610924440 * t17308 + 401663340 * t17310 - 4498 * t17320 + 268658 * t17325 - 4694040 * t17327 + 37208600 * t17329 - 159563820 * t17331
            t17342 = 26543874 * t17302 - 137401362 * t17304 + 300704712 * t17306 - 361721640 * t17308 + 260201340 * t17310 - 5250 * t17320 + 273042 * t17325 - 4196808 * t17327 + 29581608 * t17329 - 113979516 * t17331
            t17324 = 2 * phi1
            t17323 = 4 * phi1
            t17322 = 6 * phi1
            t17321 = 8 * phi1
            tfunc[..., c] = -(0.39e2 / 0.4194304e7) * np.sqrt(0.11e2) * np.sqrt(0.5e1) * np.sqrt(0.17e2) * np.sqrt(0.23e2) * np.sqrt(0.31e2) * ((-t17343 + t17345) * np.exp((-2*1j) * (t17324 + phi2)) + (t17342 + t17344) * np.exp((-2*1j) * (t17323 + phi2)) + (-t17346 + t17347) * np.exp((-2*1j) * (t17322 + phi2)) + (t17348 + t17349) * np.exp((-2*1j) * (t17321 + phi2)) + (t17343 + t17345) * np.exp((2*1j) * (t17324 - phi2)) + (-t17342 + t17344) * np.exp((2*1j) * (t17323 - phi2)) + (t17346 + t17347) * np.exp((2*1j) * (t17322 - phi2)) + (t17348 - t17349) * np.exp((2*1j) * (t17321 - phi2)))

        if Bindx == 410:
            t17377 = np.cos(phi)
            t17376 = t17377 ** 2
            t17383 = t17376 ** 2
            t17387 = t17383 ** 2
            t17388 = t17377 * t17387
            t17397 = t17388 ** 2
            t17359 = t17377 * t17397
            t17395 = t17387 ** 2
            t17361 = t17377 * t17395
            t17382 = t17377 * t17376
            t17385 = t17382 ** 2
            t17386 = t17377 * t17385
            t17393 = t17386 ** 2
            t17363 = t17377 * t17393
            t17391 = t17385 ** 2
            t17365 = t17377 * t17391
            t17384 = t17377 * t17383
            t17389 = t17384 ** 2
            t17367 = t17377 * t17389
            t17407 = 17168 * t17359 - 138736 * t17361 + 491840 * t17363 - 1000384 * t17365 + 1279712 * t17367 - 1392 * t17377 + 28304 * t17382 - 176320 * t17384 + 558656 * t17386 - 1058848 * t17388
            t17358 = t17389 ** 2
            t17406 = 20387 * t17358 - 5394 * t17376 + 60407 * t17383 - 299512 * t17385 + 840014 * t17387 - 1475404 * t17389 + 1692614 * t17391 - 1273912 * t17393 + 608507 * t17395 - 167794 * t17397 + 87
            t17405 = -283272 * t17359 + 1860408 * t17361 - 5236704 * t17363 + 8215584 * t17365 - 7813296 * t17367 + 696 * t17377 - 27144 * t17382 + 309024 * t17384 - 1606368 * t17386 + 4581072 * t17388
            t17404 = 3991560 * t17359 - 19310520 * t17361 + 39268320 * t17363 - 43583520 * t17365 + 28682160 * t17367 - 312 * t17377 + 18824 * t17382 - 331552 * t17384 + 2643680 * t17386 - 11378640 * t17388
            t17403 = -3725456 * t17359 + 20439664 * t17361 - 47352128 * t17363 + 60125120 * t17365 - 45430240 * t17367 + 1008 * t17377 - 52752 * t17382 + 805056 * t17384 - 5560896 * t17386 + 20750624 * t17388
            t17402 = -448514 * t17358 + 6844 * t17376 - 135546 * t17383 + 1065808 * t17385 - 4372852 * t17387 + 10597992 * t17389 - 16062404 * t17391 + 15446096 * t17393 - 9181458 * t17395 + 3084092 * t17397 - 58
            t17401 = -8847958 * t17358 + 19908 * t17376 - 522942 * t17383 + 5368944 * t17385 - 28210236 * t17387 + 85811032 * t17389 - 160169900 * t17391 + 186488560 * t17393 - 132219526 * t17395 + 52282244 * t17397 - 126
            t17400 = -18959910 * t17358 + 14196 * t17376 - 428558 * t17383 + 5040880 * t17385 - 30228380 * t17387 + 104477880 * t17389 - 220522380 * t17391 + 288902640 * t17393 - 229325910 * t17395 + 101029620 * t17397 - 78
            t17381 = 4 * phi1
            t17380 = 8 * phi1
            t17379 = 12 * phi1
            t17378 = 16 * phi1
            tfunc[..., c] = (0.39e2 / 0.8388608e7*1j) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.11e2) * np.sqrt(0.5e1) * np.sqrt(0.7e1) * np.sqrt(0.17e2) * np.sqrt(0.23e2) * np.sqrt(0.31e2) * ((1 + t17377) ** (-0.1e1 / 0.2e1)) * ((1 - t17377) ** (-0.1e1 / 0.2e1)) * ((-t17400 + t17404) * np.exp((-1*1j) * (t17381 + phi2)) + (t17401 + t17403) * np.exp((-1*1j) * (t17380 + phi2)) + (t17400 + t17404) * np.exp((1j) * (t17381 - phi2)) + (-t17401 + t17403) * np.exp((1j) * (t17380 - phi2)) + (t17402 + t17405) * np.exp((-1*1j) * (t17379 + phi2)) + (t17406 + t17407) * np.exp((-1*1j) * (t17378 + phi2)) + (-t17402 + t17405) * np.exp((1j) * (t17379 - phi2)) + (-t17406 + t17407) * np.exp((1j) * (t17378 - phi2)))

        if Bindx == 411:
            t17421 = np.cos(phi)
            t17420 = t17421 ** 2
            t17422 = t17420 ** 2
            t17424 = t17422 ** 2
            t17428 = t17424 ** 2
            t17423 = t17420 * t17422
            t17426 = t17423 ** 2
            t17416 = t17420 * t17424
            t17414 = t17420 * t17426
            t17412 = t17420 * t17428
            tfunc[..., c] = (0.195e3 / 0.2097152e7*1j) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.11e2) * np.sqrt(0.7e1) * np.sqrt(0.17e2) * np.sqrt(0.31e2) * np.sqrt(0.437e3) * t17421 * ((-997890 * t17412 + 4827630 * t17428 - 9817080 * t17414 + 10895880 * t17426 - 7170540 * t17416 + 2844660 * t17424 - 660920 * t17423 + 82888 * t17422 - 4706 * t17420 + 78) * np.sin((4 * phi1)) + (465682 * t17412 - 2554958 * t17428 + 5919016 * t17414 - 7515640 * t17426 + 5678780 * t17416 - 2593828 * t17424 + 695112 * t17423 - 100632 * t17422 + 6594 * t17420 - 126) * np.sin((8 * phi1)) + (23606 * t17412 - 155034 * t17428 + 436392 * t17414 - 684632 * t17426 + 651108 * t17416 - 381756 * t17424 + 133864 * t17423 - 25752 * t17422 + 2262 * t17420 - 58) * np.sin((12 * phi1)) + (-1073 * t17412 + 8671 * t17428 - 30740 * t17414 + 62524 * t17426 - 79982 * t17416 + 66178 * t17424 - 34916 * t17423 + 11020 * t17422 - 1769 * t17420 + 87) * np.sin((16 * phi1)))

        if Bindx == 412:
            t17457 = np.cos(phi)
            t17456 = t17457 ** 2
            t17463 = t17456 ** 2
            t17467 = t17463 ** 2
            t17468 = t17457 * t17467
            t17477 = t17468 ** 2
            t17439 = t17457 * t17477
            t17475 = t17467 ** 2
            t17441 = t17457 * t17475
            t17462 = t17457 * t17456
            t17465 = t17462 ** 2
            t17466 = t17457 * t17465
            t17473 = t17466 ** 2
            t17443 = t17457 * t17473
            t17471 = t17465 ** 2
            t17445 = t17457 * t17471
            t17464 = t17457 * t17463
            t17469 = t17464 ** 2
            t17447 = t17457 * t17469
            t17487 = 17168 * t17439 - 138736 * t17441 + 491840 * t17443 - 1000384 * t17445 + 1279712 * t17447 - 1392 * t17457 + 28304 * t17462 - 176320 * t17464 + 558656 * t17466 - 1058848 * t17468
            t17438 = t17469 ** 2
            t17486 = -20387 * t17438 + 5394 * t17456 - 60407 * t17463 + 299512 * t17465 - 840014 * t17467 + 1475404 * t17469 - 1692614 * t17471 + 1273912 * t17473 - 608507 * t17475 + 167794 * t17477 - 87
            t17485 = -283272 * t17439 + 1860408 * t17441 - 5236704 * t17443 + 8215584 * t17445 - 7813296 * t17447 + 696 * t17457 - 27144 * t17462 + 309024 * t17464 - 1606368 * t17466 + 4581072 * t17468
            t17484 = 3991560 * t17439 - 19310520 * t17441 + 39268320 * t17443 - 43583520 * t17445 + 28682160 * t17447 - 312 * t17457 + 18824 * t17462 - 331552 * t17464 + 2643680 * t17466 - 11378640 * t17468
            t17483 = -3725456 * t17439 + 20439664 * t17441 - 47352128 * t17443 + 60125120 * t17445 - 45430240 * t17447 + 1008 * t17457 - 52752 * t17462 + 805056 * t17464 - 5560896 * t17466 + 20750624 * t17468
            t17482 = -448514 * t17438 + 6844 * t17456 - 135546 * t17463 + 1065808 * t17465 - 4372852 * t17467 + 10597992 * t17469 - 16062404 * t17471 + 15446096 * t17473 - 9181458 * t17475 + 3084092 * t17477 - 58
            t17481 = -8847958 * t17438 + 19908 * t17456 - 522942 * t17463 + 5368944 * t17465 - 28210236 * t17467 + 85811032 * t17469 - 160169900 * t17471 + 186488560 * t17473 - 132219526 * t17475 + 52282244 * t17477 - 126
            t17480 = -18959910 * t17438 + 14196 * t17456 - 428558 * t17463 + 5040880 * t17465 - 30228380 * t17467 + 104477880 * t17469 - 220522380 * t17471 + 288902640 * t17473 - 229325910 * t17475 + 101029620 * t17477 - 78
            t17461 = 4 * phi1
            t17460 = 8 * phi1
            t17459 = 12 * phi1
            t17458 = 16 * phi1
            tfunc[..., c] = (-0.39e2 / 0.8388608e7*1j) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.11e2) * np.sqrt(0.5e1) * np.sqrt(0.7e1) * np.sqrt(0.17e2) * np.sqrt(0.23e2) * np.sqrt(0.31e2) * ((t17480 + t17484) * np.exp((-1*1j) * (t17461 - phi2)) + (-t17481 + t17483) * np.exp((-1*1j) * (t17460 - phi2)) + (-t17480 + t17484) * np.exp((1j) * (t17461 + phi2)) + (t17481 + t17483) * np.exp((1j) * (t17460 + phi2)) + (-t17482 + t17485) * np.exp((-1*1j) * (t17459 - phi2)) + (t17486 + t17487) * np.exp((-1*1j) * (t17458 - phi2)) + (t17482 + t17485) * np.exp((1j) * (t17459 + phi2)) + (-t17486 + t17487) * np.exp((1j) * (t17458 + phi2))) * ((1 + t17457) ** (-0.1e1 / 0.2e1)) * ((1 - t17457) ** (-0.1e1 / 0.2e1))

        if Bindx == 413:
            t17514 = np.cos(phi)
            t17513 = t17514 ** 2
            t17520 = t17513 ** 2
            t17524 = t17520 ** 2
            t17525 = t17514 * t17524
            t17534 = t17525 ** 2
            t17496 = t17514 * t17534
            t17532 = t17524 ** 2
            t17498 = t17514 * t17532
            t17519 = t17514 * t17513
            t17522 = t17519 ** 2
            t17523 = t17514 * t17522
            t17530 = t17523 ** 2
            t17500 = t17514 * t17530
            t17528 = t17522 ** 2
            t17502 = t17514 * t17528
            t17521 = t17514 * t17520
            t17526 = t17521 ** 2
            t17504 = t17514 * t17526
            t17543 = -61161 * t17496 + 408465 * t17498 - 1144804 * t17500 + 1714132 * t17502 - 1411662 * t17504 - 1943 * t17514 + 33263 * t17519 - 117276 * t17521 + 52780 * t17523 + 528206 * t17525
            t17542 = 27840 * t17513 - 284896 * t17520 + 1253728 * t17522 - 3040128 * t17524 + 4475744 * t17526 - 4124960 * t17528 + 2335776 * t17530 - 745648 * t17532 + 103008 * t17534 - 464
            t17541 = -26912 * t17513 + 506224 * t17520 - 3654000 * t17522 + 13301952 * t17524 - 27562992 * t17526 + 34082192 * t17528 - 24963664 * t17530 + 10016600 * t17532 - 1699632 * t17534 + 232
            t17540 = 1345542 * t17496 - 7807206 * t17498 + 19147656 * t17500 - 25755016 * t17502 + 20625380 * t17504 - 870 * t17514 + 35206 * t17519 - 457736 * t17521 + 2870536 * t17523 - 10003492 * t17525
            t17539 = 18720 * t17513 - 546416 * t17520 + 6064240 * t17522 - 33359040 * t17524 + 102151920 * t17526 - 182317200 * t17528 + 188358480 * t17530 - 104319960 * t17532 + 23949360 * t17534 - 104
            t17538 = -52416 * t17513 + 1324512 * t17520 - 12724320 * t17522 + 60649344 * t17524 - 161263200 * t17526 + 250713120 * t17528 - 226548000 * t17530 + 110253360 * t17532 - 22352736 * t17534 + 336
            t17537 = -56879730 * t17496 + 273071250 * t17498 - 552237720 * t17500 + 610924440 * t17502 - 401663340 * t17504 + 4498 * t17514 - 268658 * t17519 + 4694040 * t17521 - 37208600 * t17523 + 159563820 * t17525
            t17536 = 26543874 * t17496 - 137401362 * t17498 + 300704712 * t17500 - 361721640 * t17502 + 260201340 * t17504 - 5250 * t17514 + 273042 * t17519 - 4196808 * t17521 + 29581608 * t17523 - 113979516 * t17525
            t17518 = 2 * phi1
            t17517 = 4 * phi1
            t17516 = 6 * phi1
            t17515 = 8 * phi1
            tfunc[..., c] = -(0.39e2 / 0.4194304e7) * np.sqrt(0.11e2) * np.sqrt(0.5e1) * np.sqrt(0.17e2) * np.sqrt(0.23e2) * np.sqrt(0.31e2) * ((t17537 + t17539) * np.exp((-2*1j) * (t17518 - phi2)) + (t17536 + t17538) * np.exp((-2*1j) * (t17517 - phi2)) + (t17540 + t17541) * np.exp((-2*1j) * (t17516 - phi2)) + (t17542 + t17543) * np.exp((-2*1j) * (t17515 - phi2)) + (-t17537 + t17539) * np.exp((2*1j) * (t17518 + phi2)) + (-t17536 + t17538) * np.exp((2*1j) * (t17517 + phi2)) + (-t17540 + t17541) * np.exp((2*1j) * (t17516 + phi2)) + (t17542 - t17543) * np.exp((2*1j) * (t17515 + phi2)))

        if Bindx == 414:
            t17571 = np.cos(phi)
            t17570 = t17571 ** 2
            t17578 = t17570 ** 2
            t17582 = t17578 ** 2
            t17583 = t17571 * t17582
            t17592 = t17583 ** 2
            t17553 = t17571 * t17592
            t17590 = t17582 ** 2
            t17555 = t17571 * t17590
            t17577 = t17571 * t17570
            t17580 = t17577 ** 2
            t17581 = t17571 * t17580
            t17588 = t17581 ** 2
            t17557 = t17571 * t17588
            t17586 = t17580 ** 2
            t17559 = t17571 * t17586
            t17579 = t17571 * t17578
            t17584 = t17579 ** 2
            t17561 = t17571 * t17584
            t17602 = -2626704 * t17553 + 18828656 * t17555 - 58276544 * t17557 + 101376576 * t17559 - 107892064 * t17561 + 23664 * t17571 - 607376 * t17577 + 6215744 * t17579 - 28491456 * t17581 + 71449504 * t17583
            t17601 = 43340616 * t17553 - 264512248 * t17555 + 689601440 * t17557 - 999373408 * t17559 + 876994800 * t17561 - 63800 * t17571 + 2447368 * t17577 - 28429280 * t17579 + 155478048 * t17581 - 475483536 * t17583
            t17600 = -610708680 * t17553 + 2983852920 * t17555 - 6138372000 * t17557 + 6903888480 * t17559 - 4611675120 * t17561 + 55224 * t17571 - 3260296 * t17577 + 56254432 * t17579 - 439963680 * t17581 + 1859928720 * t17583
            t17552 = t17584 ** 2
            t17599 = 1039737 * t17552 + 543286 * t17570 - 5177979 * t17578 + 20780936 * t17580 - 44152094 * t17582 + 52386180 * t17584 - 31010686 * t17586 + 1344904 * t17588 + 9895989 * t17590 - 5640906 * t17592 - 9367
            t17598 = 22874214 * t17552 + 218196 * t17570 - 3750802 * t17578 + 22381040 * t17580 - 55239316 * t17582 + 33852280 * t17584 + 111457324 * t17586 - 270956048 * t17588 + 261442830 * t17590 - 122277804 * t17592 - 1914
            t17597 = 569994768 * t17553 - 3045107184 * t17555 + 6888267456 * t17557 - 8572576320 * t17559 + 6380273760 * t17561 - 146160 * t17571 + 7482384 * t17577 - 112569408 * t17579 + 772744896 * t17581 - 2888364192 * t17583
            t17596 = -451245858 * t17552 + 394548 * t17570 - 10660986 * t17578 + 117867120 * t17580 - 688528932 * t17582 + 2369965752 * t17584 - 5038488420 * t17586 + 6677124720 * t17588 - 5362957530 * t17590 + 2386532148 * t17592 - 2562
            t17595 = -966955410 * t17552 + 726596 * t17570 - 21553194 * t17578 + 250285360 * t17580 - 1488681220 * t17582 + 5126635800 * t17584 - 10827718980 * t17586 + 14250300720 * t17588 - 11404021770 * t17590 + 5080986180 * t17592 - 4082
            t17576 = 4 * phi1
            t17575 = 8 * phi1
            t17574 = -3 * phi2
            t17573 = 3 * phi2
            t17572 = 16 * phi1
            tfunc[..., c] = (0.39e2 / 0.8388608e7*1j) * np.sqrt(0.2e1) * np.sqrt(0.5e1) * np.sqrt(0.31e2) * np.sqrt(0.23e2) * ((1 + t17571) ** (-0.1e1 / 0.2e1)) * ((1 - t17571) ** (-0.1e1 / 0.2e1)) * ((-t17598 + t17601) * np.exp((-3*1j) * (t17576 - phi2)) + (-t17595 + t17600) * np.exp((-1*1j) * (t17576 + t17574)) + (t17596 + t17597) * np.exp((-1*1j) * (t17575 + t17574)) + (t17595 + t17600) * np.exp((1j) * (t17576 + t17573)) + (-t17596 + t17597) * np.exp((1j) * (t17575 + t17573)) + (t17598 + t17601) * np.exp((3*1j) * (t17576 + phi2)) + (t17599 + t17602) * np.exp((-1*1j) * (t17572 + t17574)) + (-t17599 + t17602) * np.exp((1j) * (t17572 + t17573)))

        if Bindx == 415:
            t17629 = np.cos(phi)
            t17628 = t17629 ** 2
            t17634 = t17628 ** 2
            t17633 = t17629 * t17628
            t17636 = t17633 ** 2
            t17638 = t17634 ** 2
            t17635 = t17629 * t17634
            t17640 = t17635 ** 2
            t17642 = t17636 ** 2
            t17637 = t17629 * t17636
            t17644 = t17637 ** 2
            t17646 = t17638 ** 2
            t17639 = t17629 * t17638
            t17648 = t17639 ** 2
            t17657 = -425952 * t17628 + 2847568 * t17634 - 5079872 * t17636 - 6460272 * t17638 + 37657312 * t17640 - 60903248 * t17642 + 49410432 * t17644 - 20556128 * t17646 + 3502272 * t17648 + 7888
            t17656 = -280720 * t17628 + 5637368 * t17634 - 47375328 * t17636 + 207806808 * t17638 - 518326512 * t17640 + 760942600 * t17642 - 650923328 * t17644 + 300304048 * t17646 - 57787488 * t17648 + 2552
            t17611 = t17629 * t17648
            t17613 = t17629 * t17646
            t17615 = t17629 * t17644
            t17617 = t17629 * t17642
            t17619 = t17629 * t17640
            t17655 = 1039737 * t17611 - 2569023 * t17613 - 7629668 * t17615 + 41591452 * t17617 - 76467258 * t17619 + 89233 * t17629 - 1744727 * t17633 + 12263868 * t17635 - 40901252 * t17637 + 74327638 * t17639
            t17654 = -22874214 * t17611 + 80206170 * t17613 - 55054296 * t17615 - 141465016 * t17617 + 315249836 * t17619 - 74646 * t17629 + 2671306 * t17633 - 27043544 * t17635 + 119982280 * t17637 - 271597876 * t17639
            t17653 = 778128 * t17628 - 21985912 * t17634 + 236585440 * t17636 - 1264287960 * t17638 + 3769125360 * t17640 - 6564821640 * t17642 + 6635914560 * t17644 - 3605565360 * t17646 + 814278240 * t17648 - 4472
            t17652 = -1562400 * t17628 + 38478384 * t17634 - 365566656 * t17636 + 1748292336 * t17638 - 4725742560 * t17640 + 7550089680 * t17642 - 7068297600 * t17644 + 3584291424 * t17646 - 759993024 * t17648 + 10416
            t17651 = 451245858 * t17611 - 1916029710 * t17613 + 3268483512 * t17615 - 2823543240 * t17617 + 1251896940 * t17619 + 24402 * t17629 - 1100862 * t17633 + 10983672 * t17635 - 16390920 * t17637 - 225569652 * t17639
            t17650 = 966955410 * t17611 - 4534924590 * t17613 + 8988237960 * t17615 - 9787628760 * t17617 + 6369271740 * t17619 - 75998 * t17629 + 4406402 * t17633 - 75387000 * t17635 + 590248360 * t17637 - 2521087140 * t17639
            t17632 = 2 * phi1
            t17631 = 3 * phi1
            t17630 = 4 * phi1
            tfunc[..., c] = -(0.39e2 / 0.2097152e7) * np.sqrt(0.2e1) * np.sqrt(0.31e2) * np.sqrt(0.5e1) * ((-t17650 + t17653) * np.exp((-4*1j) * (phi1 - phi2)) + (t17651 + t17652) * np.exp((-4*1j) * (t17632 - phi2)) + (-t17654 + t17656) * np.exp((-4*1j) * (t17631 - phi2)) + (-t17655 + t17657) * np.exp((-4*1j) * (t17630 - phi2)) + (t17650 + t17653) * np.exp((4*1j) * (phi1 + phi2)) + (-t17651 + t17652) * np.exp((4*1j) * (t17632 + phi2)) + (t17654 + t17656) * np.exp((4*1j) * (t17631 + phi2)) + (t17655 + t17657) * np.exp((4*1j) * (t17630 + phi2)))

        if Bindx == 416:
            t17685 = np.cos(phi)
            t17684 = t17685 ** 2
            t17693 = t17684 ** 2
            t17697 = t17693 ** 2
            t17698 = t17685 * t17697
            t17707 = t17698 ** 2
            t17667 = t17685 * t17707
            t17705 = t17697 ** 2
            t17669 = t17685 * t17705
            t17692 = t17685 * t17684
            t17695 = t17692 ** 2
            t17696 = t17685 * t17695
            t17703 = t17696 ** 2
            t17671 = t17685 * t17703
            t17701 = t17695 ** 2
            t17673 = t17685 * t17701
            t17694 = t17685 * t17693
            t17699 = t17694 ** 2
            t17675 = t17685 * t17699
            t17717 = -72234360 * t17667 + 373753160 * t17669 - 798316640 * t17671 + 900192480 * t17673 - 563884816 * t17675 - 22968 * t17685 + 671176 * t17692 - 2684704 * t17694 - 21161184 * t17696 + 183687856 * t17698
            t17716 = 4377840 * t17667 - 23387920 * t17669 + 46728512 * t17671 - 34233920 * t17673 - 17779552 * t17675 + 149872 * t17685 - 2563600 * t17692 + 15113408 * t17694 - 40859840 * t17696 + 52455200 * t17698
            t17666 = t17699 ** 2
            t17715 = 1039737 * t17666 - 123250 * t17684 - 934235 * t17693 + 14486312 * t17695 - 59667790 * t17697 + 121019668 * t17699 - 136694110 * t17701 + 85289000 * t17703 - 24610067 * t17705 + 192270 * t17707 + 2465
            t17714 = 22874214 * t17666 + 743908 * t17684 - 13346322 * t17693 + 95694896 * t17695 - 353200628 * t17697 + 736377048 * t17699 - 878473684 * t17701 + 550563376 * t17703 - 108969762 * t17705 - 52256028 * t17707 - 7018
            t17713 = -949991280 * t17667 + 4801307280 * t17669 - 10278633792 * t17671 + 12129681984 * t17673 - 8598047136 * t17675 + 192528 * t17685 - 9465456 * t17692 + 140368704 * t17694 - 972422976 * t17696 + 3737010144 * t17698
            t17712 = 1017847800 * t17667 - 5070899400 * t17669 + 10666742880 * t17671 - 12304792800 * t17673 + 8457979920 * t17675 - 122824 * t17685 + 6934200 * t17692 - 114737376 * t17694 + 863231200 * t17696 - 3522183600 * t17698
            t17711 = -451245858 * t17666 - 1048572 * t17684 + 24109638 * t17693 - 203350224 * t17695 + 800358972 * t17697 - 1527148392 * t17699 + 995425116 * t17701 + 1192850736 * t17703 - 2656766154 * t17705 + 1826807556 * t17707 + 7182
            t17710 = -966955410 * t17666 + 658580 * t17684 - 18972330 * t17693 + 217385584 * t17695 - 1293558500 * t17697 + 4506061560 * t17699 - 9704319300 * t17701 + 13091238000 * t17703 - 10769471610 * t17705 + 4937937300 * t17707 - 3874
            t17691 = 4 * phi1
            t17690 = 8 * phi1
            t17689 = -5 * phi2
            t17688 = 5 * phi2
            t17687 = 12 * phi1
            t17686 = 16 * phi1
            tfunc[..., c] = (-0.195e3 / 0.4194304e7*1j) * np.sqrt(0.31e2) * ((t17710 + t17712) * np.exp((-1*1j) * (t17691 + t17689)) + (-t17711 + t17713) * np.exp((-1*1j) * (t17690 + t17689)) + (-t17710 + t17712) * np.exp((1j) * (t17691 + t17688)) + (t17711 + t17713) * np.exp((1j) * (t17690 + t17688)) + (t17714 + t17717) * np.exp((-1*1j) * (t17687 + t17689)) + (-t17715 + t17716) * np.exp((-1*1j) * (t17686 + t17689)) + (-t17714 + t17717) * np.exp((1j) * (t17687 + t17688)) + (t17715 + t17716) * np.exp((1j) * (t17686 + t17688))) * ((1 + t17685) ** (-0.1e1 / 0.2e1)) * ((1 - t17685) ** (-0.1e1 / 0.2e1))

        if Bindx == 417:
            t17744 = np.cos(phi)
            t17743 = t17744 ** 2
            t17751 = t17743 ** 2
            t17750 = t17744 * t17743
            t17753 = t17750 ** 2
            t17755 = t17751 ** 2
            t17752 = t17744 * t17751
            t17757 = t17752 ** 2
            t17759 = t17753 ** 2
            t17754 = t17744 * t17753
            t17761 = t17754 ** 2
            t17763 = t17755 ** 2
            t17756 = t17744 * t17755
            t17765 = t17756 ** 2
            t17774 = 347072 * t17743 - 5568928 * t17751 + 30337248 * t17753 - 74494272 * t17755 + 89023968 * t17757 - 41759072 * t17759 - 11469152 * t17761 + 18844432 * t17763 - 5253408 * t17765 - 7888
            t17773 = -765600 * t17743 + 11489104 * t17751 - 59762736 * t17753 + 123384096 * t17755 - 25382192 * t17757 - 309685200 * t17759 + 523838832 * t17761 - 349805192 * t17763 + 86681232 * t17765 + 7656
            t17726 = t17744 * t17765
            t17728 = t17744 * t17763
            t17730 = t17744 * t17761
            t17732 = t17744 * t17759
            t17734 = t17744 * t17757
            t17772 = -22874214 * t17726 - 7321050 * t17728 + 323688024 * t17730 - 799727896 * t17732 + 898917756 * t17734 - 83578 * t17744 + 2941818 * t17750 - 33862488 * t17752 + 186104600 * t17754 - 547782972 * t17756
            t17771 = 1350720 * t17743 - 32975712 * t17751 + 327009312 * t17753 - 1687465152 * t17755 + 4996274976 * t17757 - 8768917920 * t17759 + 8990373984 * t17761 - 4965630096 * t17763 + 1139989536 * t17765 - 9648
            t17770 = -1620320 * t17743 + 43292080 * t17751 - 442238160 * t17753 + 2253270240 * t17755 - 6434485200 * t17757 + 10784763600 * t17759 - 10536639600 * t17761 + 5555064840 * t17763 - 1221417360 * t17765 + 9880
            t17769 = 966955410 * t17726 - 4356113490 * t17728 + 8236314360 * t17730 - 8504719800 * t17732 + 5229857100 * t17734 - 57330 * t17744 + 3193970 * t17750 - 54478840 * t17752 + 438059960 * t17754 - 1959011340 * t17756
            t17768 = 1039737 * t17726 + 4722447 * t17728 - 39832428 * t17730 + 90433948 * t17732 - 92562722 * t17734 - 187833 * t17744 + 2439857 * t17750 - 8757652 * t17752 + 3843428 * t17754 + 38861218 * t17756
            t17767 = -451245858 * t17726 + 1216373970 * t17728 - 286464552 * t17730 - 2442036408 * t17732 + 3722970468 * t17734 - 256734 * t17744 + 11740974 * t17750 - 152175576 * t17752 + 860842680 * t17754 - 2479748964 * t17756
            t17749 = 2 * phi1
            t17748 = 4 * phi1
            t17747 = 8 * phi1
            t17746 = -3 * phi2
            t17745 = 3 * phi2
            tfunc[..., c] = (0.39e2 / 0.4194304e7) * np.sqrt(0.2e1) * np.sqrt(0.7e1) * np.sqrt(0.31e2) * ((t17772 + t17773) * np.exp((-6*1j) * (t17749 - phi2)) + (t17769 + t17770) * np.exp((-2*1j) * (t17749 + t17746)) + (t17767 + t17771) * np.exp((-2*1j) * (t17748 + t17746)) + (t17768 + t17774) * np.exp((-2*1j) * (t17747 + t17746)) + (-t17769 + t17770) * np.exp((2*1j) * (t17749 + t17745)) + (-t17767 + t17771) * np.exp((2*1j) * (t17748 + t17745)) + (-t17768 + t17774) * np.exp((2*1j) * (t17747 + t17745)) + (-t17772 + t17773) * np.exp((6*1j) * (t17749 + phi2)))

        if Bindx == 418:
            t17802 = np.cos(phi)
            t17801 = t17802 ** 2
            t17810 = t17801 ** 2
            t17811 = t17802 * t17810
            t17816 = t17811 ** 2
            t17783 = t17816 ** 2
            t17809 = t17802 * t17801
            t17812 = t17809 ** 2
            t17814 = t17810 ** 2
            t17818 = t17812 ** 2
            t17813 = t17802 * t17812
            t17820 = t17813 ** 2
            t17822 = t17814 ** 2
            t17815 = t17802 * t17814
            t17824 = t17815 ** 2
            t17834 = -22874214 * t17783 + 59972 * t17801 + 1739826 * t17810 - 42439760 * t17812 + 279657092 * t17814 - 863604456 * t17816 + 1431328756 * t17818 - 1287652432 * t17820 + 556562490 * t17822 - 52776636 * t17824 - 638
            t17784 = t17802 * t17824
            t17786 = t17802 * t17822
            t17788 = t17802 * t17820
            t17790 = t17802 * t17818
            t17792 = t17802 * t17816
            t17833 = -1329987792 * t17784 + 6146700336 * t17786 - 11820368448 * t17788 + 12226342464 * t17790 - 7340642400 * t17792 + 45360 * t17802 - 2505552 * t17809 + 52207680 * t17811 - 508690752 * t17813 + 2576899104 * t17815
            t17832 = 6128976 * t17784 - 15957424 * t17786 - 18773440 * t17788 + 118225344 * t17790 - 179862176 * t17792 - 181424 * t17802 + 1396176 * t17809 + 2366400 * t17811 - 41112256 * t17813 + 127769824 * t17815
            t17831 = -101128104 * t17784 + 382343192 * t17786 - 454102880 * t17788 - 31144608 * t17790 + 551716880 * t17792 - 191400 * t17802 + 6015064 * t17809 - 57072928 * t17811 + 247717536 * t17813 - 544152752 * t17815
            t17830 = 1039737 * t17783 - 917966 * t17801 + 9659349 * t17810 - 38734024 * t17812 + 65076986 * t17814 - 22277684 * t17816 - 74639214 * t17818 + 108771576 * t17820 - 56944951 * t17822 + 8942034 * t17824 + 24157
            t17829 = 1424986920 * t17784 - 7304662680 * t17786 + 15855339360 * t17788 - 18941570400 * t17790 + 13544194800 * t17792 - 262360 * t17802 + 13804840 * t17809 - 214212320 * t17811 + 1521415520 * t17813 - 5899033680 * t17815
            t17828 = -966955410 * t17783 + 216460 * t17801 - 6895690 * t17810 + 95614480 * t17812 - 696621620 * t17814 + 2897501640 * t17816 - 7197814500 * t17818 + 10840861200 * t17820 - 9689269170 * t17822 + 4723363980 * t17824 - 1370
            t17827 = 451245858 * t17783 + 3441924 * t17801 - 76112358 * t17810 + 653061360 * t17812 - 2821408044 * t17814 + 6797086296 * t17816 - 9270205308 * t17818 + 6516944496 * t17820 - 1266807870 * t17822 - 987220668 * t17824 - 25686
            t17808 = 4 * phi1
            t17807 = 8 * phi1
            t17806 = -7 * phi2
            t17805 = 7 * phi2
            t17804 = 12 * phi1
            t17803 = 16 * phi1
            tfunc[..., c] = (-0.39e2 / 0.4194304e7*1j) * np.sqrt(0.31e2) * np.sqrt(0.7e1) * ((t17828 + t17829) * np.exp((-1*1j) * (t17808 + t17806)) + (t17827 + t17833) * np.exp((-1*1j) * (t17807 + t17806)) + (-t17828 + t17829) * np.exp((1j) * (t17808 + t17805)) + (-t17827 + t17833) * np.exp((1j) * (t17807 + t17805)) + (t17831 - t17834) * np.exp((-1*1j) * (t17804 + t17806)) + (-t17830 + t17832) * np.exp((-1*1j) * (t17803 + t17806)) + (t17831 + t17834) * np.exp((1j) * (t17804 + t17805)) + (t17830 + t17832) * np.exp((1j) * (t17803 + t17805))) * ((1 + t17802) ** (-0.1e1 / 0.2e1)) * ((1 - t17802) ** (-0.1e1 / 0.2e1))

        if Bindx == 419:
            t17861 = np.cos(phi)
            t17860 = t17861 ** 2
            t17867 = t17860 ** 2
            t17866 = t17861 * t17860
            t17869 = t17866 ** 2
            t17871 = t17867 ** 2
            t17868 = t17861 * t17867
            t17873 = t17868 ** 2
            t17875 = t17869 ** 2
            t17870 = t17861 * t17869
            t17877 = t17870 ** 2
            t17879 = t17871 ** 2
            t17872 = t17861 * t17871
            t17881 = t17872 ** 2
            t17890 = -473280 * t17860 + 3297184 * t17867 - 6121088 * t17869 - 7998432 * t17871 + 40607424 * t17873 - 50246560 * t17875 + 22338816 * t17877 + 915008 * t17879 - 2334848 * t17881 + 15776
            t17889 = -438944 * t17860 + 7232368 * t17867 - 50325440 * t17869 + 172050736 * t17871 - 299512928 * t17873 + 234819728 * t17875 - 9513856 * t17877 - 92841760 * t17879 + 38524992 * t17881 + 5104
            t17843 = t17861 * t17881
            t17845 = t17861 * t17879
            t17847 = t17861 * t17877
            t17849 = t17861 * t17875
            t17851 = t17861 * t17873
            t17888 = -346579 * t17843 - 4976835 * t17845 + 19240804 * t17847 - 15852908 * t17849 - 17804202 * t17851 - 35003 * t17861 - 334747 * t17866 + 6099396 * t17868 - 24482380 * t17870 + 38492454 * t17872
            t17887 = -560448 * t17860 + 9450336 * t17867 - 41112960 * t17869 - 44227872 * t17871 + 759863104 * t17873 - 2206879584 * t17875 + 2968167168 * t17877 - 1951333440 * t17879 + 506662016 * t17881 + 4448
            t17886 = 7624738 * t17843 + 43286386 * t17845 - 234230216 * t17847 + 379107256 * t17849 - 270301460 * t17851 - 66990 * t17861 + 1734722 * t17866 - 10409608 * t17868 + 12374648 * t17870 + 70880524 * t17872
            t17885 = -1116000 * t17860 + 27484560 * t17867 - 261119040 * t17869 + 1248780240 * t17871 - 3375530400 * t17873 + 5392921200 * t17875 - 5048784000 * t17877 + 2560208160 * t17879 - 542852160 * t17881 + 7440
            t17884 = -322318470 * t17843 + 1368592650 * t17845 - 2334631080 * t17847 + 2016816600 * t17849 - 894212100 * t17851 - 17430 * t17861 + 786330 * t17866 - 7845480 * t17868 + 11707800 * t17870 + 161121180 * t17872
            t17883 = 150415286 * t17843 - 78951978 * t17845 - 1232787912 * t17847 + 3043143768 * t17849 - 3238211340 * t17851 + 195590 * t17861 - 8244474 * t17866 + 103743864 * t17868 - 599996904 * t17870 + 1860726868 * t17872
            t17865 = 2 * phi1
            t17864 = 3 * phi1
            t17863 = -2 * phi2
            t17862 = 2 * phi2
            tfunc[..., c] = (0.39e2 / 0.2097152e7) * np.sqrt(0.31e2) * np.sqrt(0.7e1) * ((-t17883 + t17887) * np.exp((-8*1j) * (phi1 - phi2)) + (-t17888 + t17890) * np.exp((-8*1j) * (t17865 - phi2)) + (-t17884 + t17885) * np.exp((-4*1j) * (phi1 + t17863)) + (-t17886 + t17889) * np.exp((-4*1j) * (t17864 + t17863)) + (t17884 + t17885) * np.exp((4*1j) * (phi1 + t17862)) + (t17886 + t17889) * np.exp((4*1j) * (t17864 + t17862)) + (t17883 + t17887) * np.exp((8*1j) * (phi1 + phi2)) + (t17888 + t17890) * np.exp((8*1j) * (t17865 + phi2)))

        if Bindx == 420:
            t17918 = np.cos(phi)
            t17917 = t17918 ** 2
            t17925 = t17917 ** 2
            t17929 = t17925 ** 2
            t17930 = t17918 * t17929
            t17939 = t17930 ** 2
            t17900 = t17918 * t17939
            t17937 = t17929 ** 2
            t17902 = t17918 * t17937
            t17924 = t17918 * t17917
            t17927 = t17924 ** 2
            t17928 = t17918 * t17927
            t17935 = t17928 ** 2
            t17904 = t17918 * t17935
            t17933 = t17927 ** 2
            t17906 = t17918 * t17933
            t17926 = t17918 * t17925
            t17931 = t17926 ** 2
            t17908 = t17918 * t17931
            t17949 = -2626704 * t17900 - 2752912 * t17902 + 38840512 * t17904 - 69761472 * t17906 + 36300576 * t17908 + 23664 * t17918 - 1427728 * t17924 + 11011648 * t17926 - 28680768 * t17928 + 19073184 * t17930
            t17948 = 43340616 * t17900 - 83340664 * t17902 - 125670688 * t17904 + 511069088 * t17906 - 605498192 * t17908 + 3016 * t17918 - 498104 * t17924 + 13464352 * t17926 - 102478112 * t17928 + 349608688 * t17930
            t17899 = t17931 ** 2
            t17947 = 346579 * t17899 + 574838 * t17917 - 2175609 * t17925 - 5012824 * t17927 + 40902238 * t17929 - 80368860 * t17931 + 59206342 * t17933 + 950504 * t17935 - 21266541 * t17937 + 6869462 * t17939 - 26129
            t17946 = 569994768 * t17900 - 2305654512 * t17902 + 3560730432 * t17904 - 2366973504 * t17906 + 190599136 * t17908 + 240912 * t17918 - 9126768 * t17924 + 94438848 * t17926 - 396720576 * t17928 + 662471264 * t17930
            t17945 = -7624738 * t17899 + 909324 * t17917 - 11832986 * t17925 + 59936272 * t17927 - 128573588 * t17929 + 49996232 * t17931 + 265587452 * t17933 - 481347568 * t17935 + 317234654 * t17937 - 64273396 * t17939 - 11658
            t17944 = -610708680 * t17900 + 3247943160 * t17902 - 7326778080 * t17904 + 9120175200 * t17906 - 6822087600 * t17908 + 191160 * t17918 - 9099720 * t17924 + 129581280 * t17926 - 856470240 * t17928 + 3127253520 * t17930
            t17943 = 322318470 * t17899 + 609180 * t17917 - 13203090 * t17925 + 100263120 * t17927 - 321211140 * t17929 + 318606120 * t17931 + 666324300 * t17933 - 2264401200 * t17935 + 2669787270 * t17937 - 1479088740 * t17939 - 4290
            t17942 = -150415286 * t17899 - 1716428 * t17917 + 36535842 * t17925 - 323622096 * t17927 + 1500033444 * t17929 - 3959996040 * t17931 + 6084594516 * t17933 - 5222988624 * t17935 + 2081636298 * t17937 - 44076172 * t17939 + 14546
            t17923 = 4 * phi1
            t17922 = 8 * phi1
            t17921 = -9 * phi2
            t17920 = 9 * phi2
            t17919 = 16 * phi1
            tfunc[..., c] = (0.39e2 / 0.4194304e7*1j) * np.sqrt(0.11e2) * np.sqrt(0.31e2) * ((1 + t17918) ** (-0.1e1 / 0.2e1)) * ((1 - t17918) ** (-0.1e1 / 0.2e1)) * ((t17945 + t17948) * np.exp((-3*1j) * (t17923 - 3 * phi2)) + (t17943 + t17944) * np.exp((-1*1j) * (t17923 + t17921)) + (t17942 + t17946) * np.exp((-1*1j) * (t17922 + t17921)) + (-t17943 + t17944) * np.exp((1j) * (t17923 + t17920)) + (-t17942 + t17946) * np.exp((1j) * (t17922 + t17920)) + (-t17945 + t17948) * np.exp((3*1j) * (t17923 + 3 * phi2)) + (t17947 + t17949) * np.exp((-1*1j) * (t17919 + t17921)) + (-t17947 + t17949) * np.exp((1j) * (t17919 + t17920)))

        if Bindx == 421:
            t17976 = np.cos(phi)
            t17975 = t17976 ** 2
            t17984 = t17975 ** 2
            t17983 = t17976 * t17975
            t17986 = t17983 ** 2
            t17988 = t17984 ** 2
            t17985 = t17976 * t17984
            t17990 = t17985 ** 2
            t17992 = t17986 ** 2
            t17987 = t17976 * t17986
            t17994 = t17987 ** 2
            t17996 = t17988 ** 2
            t17989 = t17976 * t17988
            t17998 = t17989 ** 2
            t18007 = -16320 * t17975 - 51680 * t17984 + 727328 * t17986 - 1824576 * t17988 + 1166880 * t17990 + 1152736 * t17992 - 1630368 * t17994 + 374000 * t17996 + 100640 * t17998 + 1360
            t18006 = -32096 * t17975 + 237424 * t17984 - 1232 * t17986 - 4470752 * t17988 + 15222064 * t17990 - 20765680 * t17992 + 10939280 * t17994 + 531080 * t17996 - 1660560 * t17998 + 472
            t17958 = t17976 * t17998
            t17960 = t17976 * t17996
            t17962 = t17976 * t17994
            t17964 = t17976 * t17992
            t17966 = t17976 * t17990
            t18005 = -11951 * t17958 - 322473 * t17960 + 392020 * t17962 + 1348508 * t17964 - 2862834 * t17966 - 4369 * t17976 + 88553 * t17983 - 370260 * t17985 + 152932 * t17987 + 1589874 * t17989
            t18004 = 79200 * t17975 - 1753200 * t17984 + 15303120 * t17986 - 68459040 * t17988 + 175131600 * t17990 - 266418960 * t17992 + 238132080 * t17994 - 115413000 * t17996 + 23398800 * t17998 - 600
            t18003 = -262922 * t17958 - 3303542 * t17960 + 10697896 * t17962 - 8243816 * t17964 - 4322396 * t17966 + 5994 * t17976 - 152746 * t17983 + 1399640 * t17985 - 5560984 * t17987 + 9742876 * t17989
            t18002 = 133056 * t17975 - 2282784 * t17984 + 14592480 * t17986 - 43243200 * t17988 + 56484064 * t17990 - 4603872 * t17992 - 69183072 * t17994 + 69943440 * t17996 - 21838880 * t17998 - 1232
            t18001 = -11114430 * t17958 + 43493310 * t17960 - 58749960 * t17962 + 18722760 * t17964 + 30607020 * t17966 - 6690 * t17976 + 284130 * t17983 - 3304440 * t17985 + 15987000 * t17987 - 35918700 * t17989
            t18000 = -5186734 * t17958 - 11753154 * t17960 + 97655208 * t17962 - 187461960 * t17964 + 171940860 * t17966 - 4690 * t17976 + 200130 * t17983 - 3134376 * t17985 + 22838088 * t17987 - 85093372 * t17989
            t17982 = 2 * phi1
            t17981 = 4 * phi1
            t17980 = 6 * phi1
            t17979 = 8 * phi1
            t17978 = -5 * phi2
            t17977 = 5 * phi2
            tfunc[..., c] = -(0.39e2 / 0.4194304e7) * np.sqrt(0.2e1) * np.sqrt(0.11e2) * np.sqrt(0.29e2) * np.sqrt(0.31e2) * np.sqrt(0.5e1) * ((t18001 + t18004) * np.exp((-2*1j) * (t17982 + t17978)) + (-t18000 + t18002) * np.exp((-2*1j) * (t17981 + t17978)) + (-t18003 + t18006) * np.exp((-2*1j) * (t17980 + t17978)) + (t18005 + t18007) * np.exp((-2*1j) * (t17979 + t17978)) + (-t18001 + t18004) * np.exp((2*1j) * (t17982 + t17977)) + (t18000 + t18002) * np.exp((2*1j) * (t17981 + t17977)) + (t18003 + t18006) * np.exp((2*1j) * (t17980 + t17977)) + (-t18005 + t18007) * np.exp((2*1j) * (t17979 + t17977)))

        if Bindx == 422:
            t18035 = np.cos(phi)
            t18034 = t18035 ** 2
            t18043 = t18034 ** 2
            t18044 = t18035 * t18043
            t18049 = t18044 ** 2
            t18016 = t18049 ** 2
            t18042 = t18035 * t18034
            t18045 = t18042 ** 2
            t18047 = t18043 ** 2
            t18051 = t18045 ** 2
            t18046 = t18035 * t18045
            t18053 = t18046 ** 2
            t18055 = t18047 ** 2
            t18048 = t18035 * t18047
            t18057 = t18048 ** 2
            t18067 = -35853 * t18016 + 11594 * t18034 + 686103 * t18043 - 3618824 * t18045 + 4808518 * t18047 + 3743740 * t18049 - 12945738 * t18051 + 8083704 * t18053 + 486047 * t18055 - 1213494 * t18057 - 5797
            t18017 = t18035 * t18057
            t18019 = t18035 * t18055
            t18021 = t18035 * t18053
            t18023 = t18035 * t18051
            t18025 = t18035 * t18049
            t18066 = -332112 * t18017 - 1864016 * t18019 + 6259264 * t18021 - 1184832 * t18023 - 10657504 * t18025 - 29648 * t18035 + 359856 * t18042 - 623424 * t18044 - 3080128 * t18046 + 11152544 * t18048
            t18065 = 5479848 * t18017 + 2188648 * t18019 - 54544864 * t18021 + 97869024 * t18023 - 65773136 * t18025 - 43800 * t18035 + 841960 * t18042 - 5126176 * t18044 + 10320288 * t18046 + 8788208 * t18048
            t18064 = -788766 * t18016 + 6380 * t18034 - 1026630 * t18043 + 10637968 * t18045 - 41550652 * t18047 + 73489416 * t18049 - 48780316 * t18051 - 17976176 * t18053 + 38674218 * t18055 - 12685332 * t18057 - 110
            t18063 = 72068304 * t18017 - 239578416 * t18019 + 204861888 * t18021 + 180113472 * t18023 - 476924448 * t18025 + 97104 * t18035 - 3222576 * t18042 + 32977728 * t18044 - 156760128 * t18046 + 386367072 * t18048
            t18062 = -77216040 * t18017 + 429209880 * t18019 - 1011378720 * t18021 + 1313859360 * t18023 - 1024866480 * t18025 + 41880 * t18035 - 1747560 * t18042 + 22693920 * t18044 - 140837280 * t18046 + 490241040 * t18048
            t18061 = -15560202 * t18016 + 168756 * t18034 - 1330434 * t18043 - 9151632 * t18045 + 117126828 * t18047 - 451461192 * t18049 + 857371788 * t18051 - 860226192 * t18053 + 415875726 * t18055 - 52811724 * t18057 - 1722
            t18060 = -33343290 * t18016 - 369660 * t18034 + 7182030 * t18043 - 52199760 * t18045 + 183047820 * t18047 - 333761640 * t18049 + 284295660 * t18051 - 5036880 * t18053 - 190494690 * t18055 + 140677380 * t18057 + 3030
            t18041 = 4 * phi1
            t18040 = 8 * phi1
            t18039 = 12 * phi1
            t18038 = 16 * phi1
            t18037 = -11 * phi2
            t18036 = 11 * phi2
            tfunc[..., c] = (0.13e2 / 0.4194304e7*1j) * np.sqrt(0.3e1) * np.sqrt(0.11e2) * np.sqrt(0.29e2) * np.sqrt(0.31e2) * ((1 + t18035) ** (-0.1e1 / 0.2e1)) * ((1 - t18035) ** (-0.1e1 / 0.2e1)) * ((-t18060 + t18062) * np.exp((-1*1j) * (t18041 + t18037)) + (t18061 + t18063) * np.exp((-1*1j) * (t18040 + t18037)) + (t18060 + t18062) * np.exp((1j) * (t18041 + t18036)) + (-t18061 + t18063) * np.exp((1j) * (t18040 + t18036)) + (t18064 + t18065) * np.exp((-1*1j) * (t18039 + t18037)) + (t18066 - t18067) * np.exp((-1*1j) * (t18038 + t18037)) + (-t18064 + t18065) * np.exp((1j) * (t18039 + t18036)) + (t18066 + t18067) * np.exp((1j) * (t18038 + t18036)))

        if Bindx == 423:
            t18094 = np.cos(phi)
            t18093 = t18094 ** 2
            t18100 = t18093 ** 2
            t18099 = t18094 * t18093
            t18102 = t18099 ** 2
            t18104 = t18100 ** 2
            t18101 = t18094 * t18100
            t18106 = t18101 ** 2
            t18108 = t18102 ** 2
            t18103 = t18094 * t18102
            t18110 = t18103 ** 2
            t18112 = t18104 ** 2
            t18105 = t18094 * t18104
            t18114 = t18105 ** 2
            t18123 = -78880 * t18093 + 1278128 * t18100 - 2718912 * t18102 - 3723408 * t18104 + 14235936 * t18106 - 8398000 * t18108 - 4114816 * t18110 + 3165536 * t18112 + 362304 * t18114 - 7888
            t18076 = t18094 * t18114
            t18078 = t18094 * t18112
            t18080 = t18094 * t18110
            t18082 = t18094 * t18108
            t18084 = t18094 * t18106
            t18122 = 35853 * t18076 + 1520565 * t18078 + 2275212 * t18080 - 11292148 * t18082 + 5223998 * t18084 - 53499 * t18094 + 308669 * t18099 + 1089836 * t18101 - 7164820 * t18103 + 8056334 * t18105
            t18121 = -788766 * t18076 - 16550622 * t18078 + 28045512 * t18080 + 28020328 * t18082 - 87324900 * t18084 - 64270 * t18094 + 693330 * t18099 - 44088 * t18101 - 18135832 * t18103 + 66132924 * t18105
            t18120 = -259440 * t18093 + 3537160 * t18100 - 16964640 * t18102 + 29024424 * t18104 + 5932784 * t18106 - 71712264 * t18108 + 69757248 * t18110 - 13359280 * t18112 - 5978016 * t18114 + 5640
            t18119 = 409200 * t18093 - 8217480 * t18100 + 69058080 * t18102 - 302915880 * t18104 + 755554320 * t18106 - 1109211000 * t18108 + 948838080 * t18110 - 437747280 * t18112 + 84235680 * t18114 - 3720
            t18118 = 895776 * t18093 - 14759472 * t18100 + 102701760 * t18102 - 351112944 * t18104 + 611231712 * t18106 - 479208912 * t18108 + 19415424 * t18110 + 189467040 * t18112 - 78619968 * t18114 - 10416
            t18117 = -15560202 * t18076 - 88336794 * t18078 + 478005864 * t18080 - 773664024 * t18082 + 551618340 * t18084 + 136710 * t18094 - 3540138 * t18099 + 21243432 * t18101 - 25253592 * t18103 - 144649596 * t18105
            t18116 = 33343290 * t18076 - 116914950 * t18078 + 80251560 * t18080 + 206210760 * t18082 - 459533460 * t18084 + 108810 * t18094 - 3893910 * t18099 + 39420840 * t18101 - 174895800 * t18103 + 395902860 * t18105
            t18098 = 2 * phi1
            t18097 = 4 * phi1
            t18096 = -3 * phi2
            t18095 = 3 * phi2
            tfunc[..., c] = -(0.13e2 / 0.2097152e7) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.11e2) * np.sqrt(0.29e2) * ((-t18116 + t18119) * np.exp((-4*1j) * (phi1 + t18096)) + (-t18117 + t18118) * np.exp((-4*1j) * (t18098 + t18096)) + (-t18122 + t18123) * np.exp((-4*1j) * (t18097 + t18096)) + (t18116 + t18119) * np.exp((4*1j) * (phi1 + t18095)) + (t18117 + t18118) * np.exp((4*1j) * (t18098 + t18095)) + (t18122 + t18123) * np.exp((4*1j) * (t18097 + t18095)) + (t18120 - t18121) * np.exp((-12*1j) * (phi1 - phi2)) + (t18120 + t18121) * np.exp((12*1j) * (phi1 + phi2)))

        if Bindx == 424:
            t18151 = np.cos(phi)
            t18150 = t18151 ** 2
            t18159 = t18150 ** 2
            t18163 = t18159 ** 2
            t18164 = t18151 * t18163
            t18173 = t18164 ** 2
            t18133 = t18151 * t18173
            t18171 = t18163 ** 2
            t18135 = t18151 * t18171
            t18158 = t18151 * t18150
            t18161 = t18158 ** 2
            t18162 = t18151 * t18161
            t18169 = t18162 ** 2
            t18137 = t18151 * t18169
            t18167 = t18161 ** 2
            t18139 = t18151 * t18167
            t18160 = t18151 * t18159
            t18165 = t18160 ** 2
            t18141 = t18151 * t18165
            t18183 = 392496 * t18133 + 4352816 * t18135 - 3210688 * t18137 - 17580992 * t18139 + 22269728 * t18141 - 86224 * t18151 + 87856 * t18158 + 3360832 * t18160 - 9790912 * t18162 + 205088 * t18164
            t18182 = -6476184 * t18133 - 20634328 * t18135 + 98544160 * t18137 - 91479648 * t18139 - 28459600 * t18141 - 45720 * t18151 - 462040 * t18158 + 10423072 * t18160 - 49719648 * t18162 + 88309936 * t18164
            t18132 = t18165 ** 2
            t18181 = -35853 * t18132 + 228514 * t18150 - 1746121 * t18159 + 139672 * t18161 + 13751062 * t18163 - 20877428 * t18165 - 1029418 * t18167 + 15893912 * t18169 - 4517801 * t18171 - 1816926 * t18173 + 10387
            t18180 = -85171632 * t18133 + 209476176 * t18135 + 118772160 * t18137 - 923018304 * t18139 + 1277284320 * t18141 - 81840 * t18151 + 3108432 * t18158 - 46883904 * t18160 + 284380608 * t18162 - 837866016 * t18164
            t18179 = 91255320 * t18133 - 533555880 * t18135 + 1317519840 * t18137 - 1779841440 * t18139 + 1423041360 * t18141 - 48360 * t18151 + 1886040 * t18158 - 27275040 * t18160 + 187056480 * t18162 - 680038320 * t18164
            t18178 = -788766 * t18132 - 640900 * t18150 + 5203770 * t18159 - 10902320 * t18161 - 22317724 * t18163 + 119052648 * t18165 - 162498076 * t18167 + 63489232 * t18169 + 29312250 * t18171 - 19928964 * t18173 + 18850
            t18177 = -33343290 * t18132 - 1731660 * t18150 + 27846990 * t18159 - 174936720 * t18161 + 557187180 * t18163 - 984196680 * t18165 + 951150060 * t18167 - 399684240 * t18169 - 68188530 * t18171 + 125879220 * t18173 + 17670
            t18176 = -15560202 * t18132 + 2326116 * t18150 - 27490242 * t18159 + 121383600 * t18161 - 197255604 * t18163 - 106285608 * t18165 + 810334668 * t18167 - 1112632656 * t18169 + 635925630 * t18171 - 110714268 * t18173 - 31434
            t18157 = 4 * phi1
            t18156 = 8 * phi1
            t18155 = 12 * phi1
            t18154 = 16 * phi1
            t18153 = -13 * phi2
            t18152 = 13 * phi2
            tfunc[..., c] = (-0.13e2 / 0.8388608e7*1j) * np.sqrt(0.3e1) * np.sqrt(0.11e2) * np.sqrt(0.29e2) * np.sqrt(0.7e1) * ((t18177 + t18179) * np.exp((-1*1j) * (t18157 + t18153)) + (-t18176 + t18180) * np.exp((-1*1j) * (t18156 + t18153)) + (-t18177 + t18179) * np.exp((1j) * (t18157 + t18152)) + (t18176 + t18180) * np.exp((1j) * (t18156 + t18152)) + (-t18178 + t18182) * np.exp((-1*1j) * (t18155 + t18153)) + (t18181 + t18183) * np.exp((-1*1j) * (t18154 + t18153)) + (t18178 + t18182) * np.exp((1j) * (t18155 + t18152)) + (-t18181 + t18183) * np.exp((1j) * (t18154 + t18152))) * ((1 + t18151) ** (-0.1e1 / 0.2e1)) * ((1 - t18151) ** (-0.1e1 / 0.2e1))

        if Bindx == 425:
            t18210 = np.cos(phi)
            t18209 = t18210 ** 2
            t18218 = t18209 ** 2
            t18217 = t18210 * t18209
            t18220 = t18217 ** 2
            t18222 = t18218 ** 2
            t18219 = t18210 * t18218
            t18224 = t18219 ** 2
            t18226 = t18220 ** 2
            t18221 = t18210 * t18220
            t18228 = t18221 ** 2
            t18230 = t18222 ** 2
            t18223 = t18210 * t18222
            t18232 = t18223 ** 2
            t18241 = -479808 * t18209 + 1214752 * t18218 + 7223776 * t18220 - 18330624 * t18222 - 3656224 * t18224 + 26046176 * t18226 - 5380704 * t18228 - 6201328 * t18230 - 422688 * t18232 - 13328
            t18240 = -906400 * t18209 + 1662320 * t18218 + 22229328 * t18220 - 96864768 * t18222 + 119824848 * t18224 + 7264400 * t18226 - 96870928 * t18228 + 36641528 * t18230 + 6974352 * t18232 + 45320
            t18192 = t18210 * t18232
            t18194 = t18210 * t18230
            t18196 = t18210 * t18228
            t18198 = t18210 * t18226
            t18200 = t18210 * t18224
            t18239 = -35853 * t18192 - 2174283 * t18194 - 9836948 * t18196 + 10772356 * t18198 + 20912346 * t18200 - 129523 * t18210 - 602293 * t18217 + 5589396 * t18219 - 1998724 * t18221 - 22496474 * t18223
            t18238 = 788766 * t18192 + 24397890 * t18194 - 3891096 * t18196 - 122813416 * t18198 + 154121396 * t18200 + 78210 * t18210 - 3033250 * t18217 + 20042264 * t18219 - 35103640 * t18221 - 34587124 * t18223
            t18237 = 312480 * t18209 + 1019280 * t18218 - 59676240 * t18220 + 370690560 * t18222 - 1015388880 * t18224 + 1495313520 * t18226 - 1235389680 * t18228 + 541397640 * t18230 - 98274960 * t18232 - 3720
            t18236 = 1696320 * t18209 - 1586208 * t18218 - 101192928 * t18220 + 560821248 * t18222 - 1224359136 * t18224 + 1217317920 * t18226 - 409286304 * t18228 - 135105936 * t18230 + 91723296 * t18232 - 28272
            t18235 = 15560202 * t18192 + 151064550 * t18194 - 672355032 * t18196 + 865083768 * t18198 - 230256468 * t18200 - 811146 * t18210 + 17008026 * t18217 - 121070376 * t18219 + 359266440 * t18221 - 383489964 * t18223
            t18234 = -33343290 * t18192 + 100883610 * t18194 + 56220360 * t18196 - 640290120 * t18198 + 1161817380 * t18200 - 568230 * t18210 + 15790470 * t18217 - 130917960 * t18219 + 503453640 * t18221 - 1033045860 * t18223
            t18216 = 2 * phi1
            t18215 = 4 * phi1
            t18214 = 6 * phi1
            t18213 = 8 * phi1
            t18212 = -7 * phi2
            t18211 = 7 * phi2
            tfunc[..., c] = (0.13e2 / 0.8388608e7) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.29e2) * np.sqrt(0.7e1) * ((-t18234 + t18237) * np.exp((-2*1j) * (t18216 + t18212)) + (-t18235 + t18236) * np.exp((-2*1j) * (t18215 + t18212)) + (-t18238 + t18240) * np.exp((-2*1j) * (t18214 + t18212)) + (-t18239 + t18241) * np.exp((-2*1j) * (t18213 + t18212)) + (t18234 + t18237) * np.exp((2*1j) * (t18216 + t18211)) + (t18235 + t18236) * np.exp((2*1j) * (t18215 + t18211)) + (t18238 + t18240) * np.exp((2*1j) * (t18214 + t18211)) + (t18239 + t18241) * np.exp((2*1j) * (t18213 + t18211)))

        if Bindx == 426:
            t18269 = np.cos(phi)
            t18268 = t18269 ** 2
            t18276 = t18268 ** 2
            t18277 = t18269 * t18276
            t18282 = t18277 ** 2
            t18250 = t18282 ** 2
            t18275 = t18269 * t18268
            t18278 = t18275 ** 2
            t18280 = t18276 ** 2
            t18284 = t18278 ** 2
            t18279 = t18269 * t18278
            t18286 = t18279 ** 2
            t18288 = t18280 ** 2
            t18281 = t18269 * t18280
            t18290 = t18281 ** 2
            t18300 = -2109 * t18250 - 49250 * t18268 - 22185 * t18276 + 932552 * t18278 - 903890 * t18280 - 2071212 * t18282 + 2517190 * t18284 + 596360 * t18286 - 848181 * t18288 - 148290 * t18290 - 985
            t18251 = t18269 * t18290
            t18253 = t18269 * t18288
            t18255 = t18269 * t18286
            t18257 = t18269 * t18284
            t18259 = t18269 * t18282
            t18299 = 26640 * t18251 + 465680 * t18253 + 684352 * t18255 - 2301120 * t18257 - 431392 * t18259 + 10896 * t18269 + 102800 * t18275 - 399296 * t18277 - 669120 * t18279 + 2510560 * t18281
            t18298 = -46398 * t18250 + 32868 * t18268 + 551738 * t18276 - 3907024 * t18278 + 7121972 * t18280 + 994136 * t18282 - 14369212 * t18284 + 11544368 * t18286 - 247566 * t18288 - 1669404 * t18290 - 5478
            t18297 = -439560 * t18251 - 2829640 * t18253 + 7446560 * t18255 + 1554080 * t18257 - 15093936 * t18259 - 24904 * t18269 + 378488 * t18275 - 1064800 * t18277 - 2068704 * t18279 + 12142416 * t18281
            t18296 = 6193800 * t18251 - 38297400 * t18253 + 99264480 * t18255 - 138160800 * t18257 + 108646320 * t18259 + 33480 * t18269 - 651000 * t18275 + 2068320 * t18277 + 5580000 * t18279 - 44677200 * t18281
            t18295 = -5780880 * t18251 + 8384880 * t18253 + 37848768 * t18255 - 120188736 * t18257 + 135910944 * t18259 + 111600 * t18269 - 1435920 * t18275 + 4065216 * t18277 + 9445824 * t18279 - 68361696 * t18281
            t18294 = -915306 * t18250 + 316572 * t18268 - 4771458 * t18276 + 26291472 * t18278 - 63801348 * t18280 + 62877672 * t18282 + 9609132 * t18284 - 69952368 * t18286 + 50838822 * t18288 - 10486308 * t18290 - 6882
            t18293 = -1961370 * t18250 - 455700 * t18268 + 5705550 * t18276 - 30407280 * t18278 + 85364700 * t18280 - 137368440 * t18282 + 127289100 * t18284 - 60524400 * t18286 + 5962230 * t18288 + 6389100 * t18290 + 6510
            t18274 = 4 * phi1
            t18273 = 8 * phi1
            t18272 = 16 * phi1
            t18271 = -15 * phi2
            t18270 = 15 * phi2
            tfunc[..., c] = (-0.13e2 / 0.8388608e7*1j) * np.sqrt(0.5e1) * np.sqrt(0.17e2) * np.sqrt(0.7e1) * np.sqrt(0.29e2) * np.sqrt(0.3e1) * ((t18297 - t18298) * np.exp((-3*1j) * (t18274 - 5 * phi2)) + (t18297 + t18298) * np.exp((3*1j) * (t18274 + 5 * phi2)) + (t18293 + t18296) * np.exp((-1*1j) * (t18274 + t18271)) + (-t18294 + t18295) * np.exp((-1*1j) * (t18273 + t18271)) + (-t18293 + t18296) * np.exp((1j) * (t18274 + t18270)) + (t18294 + t18295) * np.exp((1j) * (t18273 + t18270)) + (t18299 + t18300) * np.exp((-1*1j) * (t18272 + t18271)) + (t18299 - t18300) * np.exp((1j) * (t18272 + t18270))) * ((1 + t18269) ** (-0.1e1 / 0.2e1)) * ((1 - t18269) ** (-0.1e1 / 0.2e1))

        if Bindx == 427:
            t18327 = np.cos(phi)
            t18326 = t18327 ** 2
            t18332 = t18326 ** 2
            t18331 = t18327 * t18326
            t18334 = t18331 ** 2
            t18336 = t18332 ** 2
            t18333 = t18327 * t18332
            t18338 = t18333 ** 2
            t18340 = t18334 ** 2
            t18335 = t18327 * t18334
            t18342 = t18335 ** 2
            t18344 = t18336 ** 2
            t18337 = t18327 * t18336
            t18346 = t18337 ** 2
            t18355 = -80256 * t18326 - 334016 * t18332 + 1127168 * t18334 + 1654848 * t18336 - 3422848 * t18338 - 1371968 * t18340 + 1853952 * t18342 + 611456 * t18344 + 28416 * t18346 - 1216
            t18309 = t18327 * t18346
            t18311 = t18327 * t18344
            t18313 = t18327 * t18342
            t18315 = t18327 * t18340
            t18317 = t18327 * t18338
            t18354 = -2109 * t18309 - 172269 * t18311 - 1367684 * t18313 - 1010548 * t18315 + 3589482 * t18317 + 15019 * t18327 + 231659 * t18331 - 33252 * t18333 - 2186132 * t18335 + 870298 * t18337
            t18353 = 46398 * t18309 + 1967790 * t18311 + 2944392 * t18313 - 14613368 * t18315 + 6760468 * t18317 - 69234 * t18327 + 399454 * t18331 + 1410376 * t18333 - 9272120 * t18335 + 10425844 * t18337
            t18352 = 102080 * t18326 - 1654048 * t18332 + 3518592 * t18334 + 4818528 * t18336 - 18422976 * t18338 + 10868000 * t18340 + 5325056 * t18342 - 4096576 * t18344 - 468864 * t18346 + 10208
            t18351 = -803520 * t18326 + 5371680 * t18332 - 9582720 * t18334 - 12186720 * t18336 + 71037120 * t18338 - 114888480 * t18340 + 93208320 * t18342 - 38777280 * t18344 + 6606720 * t18346 + 14880
            t18350 = -1249920 * t18326 + 8707776 * t18332 - 16165632 * t18334 - 21123648 * t18336 + 107243136 * t18338 - 132699840 * t18340 + 58996224 * t18342 + 2416512 * t18344 - 6166272 * t18346 + 41664
            t18349 = -915306 * t18309 - 13143690 * t18311 + 50814456 * t18313 - 41867112 * t18315 - 47020428 * t18317 - 92442 * t18327 - 884058 * t18331 + 16108344 * t18333 - 64657320 * t18335 + 101657556 * t18337
            t18348 = 1961370 * t18309 - 4846230 * t18311 - 14392680 * t18313 + 78458520 * t18315 - 144248580 * t18317 + 168330 * t18327 - 3291270 * t18331 + 23134680 * t18333 - 77156520 * t18335 + 140212380 * t18337
            t18330 = 3 * phi1
            t18329 = -4 * phi2
            t18328 = 4 * phi2
            tfunc[..., c] = -(0.13e2 / 0.4194304e7) * np.sqrt(0.3e1) * np.sqrt(0.29e2) * np.sqrt(0.17e2) * ((-t18349 + t18350) * np.exp((-8*1j) * (phi1 - 2 * phi2)) + (-t18348 + t18351) * np.exp((-4*1j) * (phi1 + t18329)) + (t18352 + t18353) * np.exp((-4*1j) * (t18330 + t18329)) + (t18348 + t18351) * np.exp((4*1j) * (phi1 + t18328)) + (t18352 - t18353) * np.exp((4*1j) * (t18330 + t18328)) + (t18349 + t18350) * np.exp((8*1j) * (phi1 + 2 * phi2)) + (t18354 + t18355) * np.exp((-16*1j) * (phi1 - phi2)) + (-t18354 + t18355) * np.exp((16*1j) * (phi1 + phi2)))

        if Bindx == 428:
            t18382 = np.cos(phi)
            t18381 = t18382 ** 2
            t18390 = t18381 ** 2
            t18394 = t18390 ** 2
            t18395 = t18382 * t18394
            t18404 = t18395 ** 2
            t18364 = t18382 * t18404
            t18409 = -493 - 703 * t18364
            t18408 = -5918 - 15466 * t18364
            t18407 = -305102 * t18364 - 47306
            t18406 = -653790 * t18364 - 12090
            t18402 = t18394 ** 2
            t18389 = t18382 * t18381
            t18392 = t18389 ** 2
            t18393 = t18382 * t18392
            t18400 = t18393 ** 2
            t18398 = t18392 ** 2
            t18391 = t18382 * t18390
            t18396 = t18391 ** 2
            t18388 = 4 * phi1
            t18387 = 8 * phi1
            t18386 = 12 * phi1
            t18385 = 16 * phi1
            t18384 = -17 * phi2
            t18383 = 17 * phi2
            t18372 = t18382 * t18396
            t18370 = t18382 * t18398
            t18368 = t18382 * t18400
            t18366 = t18382 * t18402
            tfunc[..., c] = (0.39e2 / 0.8388608e7*1j) * np.sqrt(0.17e2) * np.sqrt(0.29e2) * np.sqrt((1 - t18382)) * ((3428910 * t18366 - 5457240 * t18368 - 2890440 * t18370 + 22303260 * t18372 + 220410 * t18381 - 239010 * t18382 + 2820690 * t18389 - 2890440 * t18390 - 12398760 * t18391 + 15077160 * t18392 + 27888840 * t18393 - 40583340 * t18394 - 34802460 * t18395 + 64019340 * t18396 - 61949160 * t18398 + 36370440 * t18400 - 11938410 * t18402 + 1686090 * t18404 + t18406) * np.exp((-1*1j) * (t18388 + t18384)) + (3130442 * t18366 - 17549224 * t18368 + 28506856 * t18370 - 10144316 * t18372 - 736498 * t18381 - 74214 * t18382 + 1975134 * t18389 + 2043272 * t18390 - 11441976 * t18391 + 4789624 * t18392 + 25524408 * t18393 - 30252404 * t18394 - 20232212 * t18395 + 53497444 * t18396 - 41502552 * t18398 + 10212888 * t18400 + 3779706 * t18402 - 1878786 * t18404 - t18407) * np.exp((-1*1j) * (t18387 + t18384)) + (1250850 * t18366 - 20597640 * t18368 + 60490920 * t18370 - 82820220 * t18372 - 674250 * t18381 - 214830 * t18382 + 1926030 * t18389 + 7637160 * t18390 - 1871160 * t18391 - 29347080 * t18392 - 16535400 * t18393 + 51936780 * t18394 + 57717660 * t18395 - 41104140 * t18396 + 1432200 * t18398 + 21230040 * t18400 - 14116470 * t18402 + 2993670 * t18404 - t18406) * np.exp((1j) * (t18388 + t18383)) + (-7498218 * t18366 + 14479976 * t18368 + 23948120 * t18370 - 77419524 * t18372 + 493458 * t18381 - 168826 * t18382 + 3205090 * t18389 + 3136952 * t18390 - 10348296 * t18391 - 26579896 * t18392 - 5845112 * t18393 + 49931700 * t18394 + 59951892 * t18395 - 13777764 * t18396 - 46061288 * t18398 + 42242088 * t18400 - 6848954 * t18402 - 2488990 * t18404 + t18407) * np.exp((1j) * (t18387 + t18383)) + (-150590 * t18404 + 595254 * t18366 - 1090738 * t18402 + 327272 * t18368 + 2500872 * t18400 - 4635400 * t18370 + 1735448 * t18398 + 4597164 * t18372 - 6625476 * t18396 + 1566708 * t18395 + 3852420 * t18394 - 3726008 * t18393 + 444136 * t18392 + 1240536 * t18391 - 780296 * t18390 + 64570 * t18389 + 108306 * t18381 - 45562 * t18382 - t18408) * np.exp((-1*1j) * (t18386 + t18384)) + (9361 * t18404 - 55845 * t18366 + 193579 * t18402 - 416092 * t18368 + 516324 * t18400 - 163268 * t18370 - 640900 * t18398 + 1263678 * t18372 - 1006434 * t18396 + 14586 * t18395 + 799578 * t18394 - 826540 * t18393 + 336532 * t18392 + 73644 * t18391 - 173332 * t18390 + 104329 * t18389 - 34215 * t18381 + 6211 * t18382 + t18409) * np.exp((-1*1j) * (t18385 + t18384)) + (-181522 * t18404 - 927366 * t18366 - 2613358 * t18402 - 4031368 * t18368 - 1857768 * t18400 + 5278504 * t18370 + 11649352 * t18398 + 8787636 * t18372 - 2435004 * t18396 - 10627188 * t18395 - 8341476 * t18394 - 763048 * t18393 + 3407096 * t18392 + 2610696 * t18391 + 589864 * t18390 - 255002 * t18389 - 211266 * t18381 - 57398 * t18382 + t18408) * np.exp((1j) * (t18386 + t18383)) + (10767 * t18404 + 75973 * t18366 + 325397 * t18402 + 935068 * t18368 + 1867484 * t18400 + 2547076 * t18370 + 2069444 * t18398 + 164866 * t18372 - 2105246 * t18396 - 3126266 * t18395 - 2341274 * t18394 - 715156 * t18393 + 447916 * t18392 + 710804 * t18391 + 463828 * t18390 + 186167 * t18389 + 47623 * t18381 + 7197 * t18382 - t18409) * np.exp((1j) * (t18385 + t18383))) * ((1 + t18382) ** (-0.1e1 / 0.2e1))

        if Bindx == 429:
            t18436 = np.cos(phi)
            t18435 = t18436 ** 2
            t18443 = t18435 ** 2
            t18442 = t18436 * t18435
            t18445 = t18442 ** 2
            t18447 = t18443 ** 2
            t18444 = t18436 * t18443
            t18449 = t18444 ** 2
            t18451 = t18445 ** 2
            t18446 = t18436 * t18445
            t18453 = t18446 ** 2
            t18455 = t18447 ** 2
            t18448 = t18436 * t18447
            t18457 = t18448 ** 2
            t18466 = -16 - 1600 * t18435 - 16864 * t18443 - 26656 * t18445 + 56576 * t18447 + 77792 * t18449 - 35360 * t18451 - 45152 * t18453 - 8432 * t18455 - 288 * t18457
            t18418 = t18436 * t18457
            t18420 = t18436 * t18455
            t18422 = t18436 * t18453
            t18424 = t18436 * t18451
            t18426 = t18436 * t18449
            t18465 = -19 * t18418 - 2005 * t18420 - 23596 * t18422 - 56644 * t18424 + 20774 * t18426 - 237 * t18436 - 6443 * t18442 - 28628 * t18444 + 4420 * t18446 + 92378 * t18448
            t18464 = 418 * t18418 + 23166 * t18420 + 76824 * t18422 - 196504 * t18424 - 111540 * t18426 + 2750 * t18436 + 22242 * t18442 - 81048 * t18444 - 94952 * t18446 + 358644 * t18448
            t18463 = 11616 * t18435 + 2288 * t18443 - 166320 * t18445 + 164736 * t18447 + 226512 * t18449 - 295152 * t18451 - 8976 * t18453 + 60280 * t18455 + 4752 * t18457 + 264
            t18462 = 13888 * t18435 - 340256 * t18443 + 1006880 * t18445 - 722176 * t18447 - 992992 * t18449 + 1895712 * t18451 - 979104 * t18453 + 52080 * t18455 + 62496 * t18457 + 3472
            t18461 = -8246 * t18418 - 161882 * t18420 + 550312 * t18422 - 71176 * t18424 - 1636180 * t18426 - 19530 * t18436 + 134106 * t18442 + 5208 * t18444 - 1150968 * t18446 + 2358356 * t18448
            t18460 = 17670 * t18418 - 32550 * t18420 - 264120 * t18422 + 1275960 * t18424 - 2512860 * t18426 - 2790 * t18436 - 71610 * t18442 + 561720 * t18444 - 1692600 * t18446 + 2721180 * t18448
            t18459 = 74400 * t18435 - 349680 * t18443 + 677040 * t18445 - 416640 * t18447 - 572880 * t18449 + 1302000 * t18451 - 1063920 * t18453 + 420360 * t18455 - 66960 * t18457 - 3720
            t18441 = 2 * phi1
            t18440 = 4 * phi1
            t18439 = 8 * phi1
            t18438 = -9 * phi2
            t18437 = 9 * phi2
            tfunc[..., c] = (0.39e2 / 0.8388608e7) * np.sqrt(0.2e1) * np.sqrt(0.29e2) * np.sqrt(0.17e2) * np.sqrt(0.37e2) * ((t18463 - t18464) * np.exp((-6*1j) * (t18441 - 3 * phi2)) + (t18459 + t18460) * np.exp((-2*1j) * (t18441 + t18438)) + (t18461 + t18462) * np.exp((-2*1j) * (t18440 + t18438)) + (-t18465 + t18466) * np.exp((-2*1j) * (t18439 + t18438)) + (t18459 - t18460) * np.exp((2*1j) * (t18441 + t18437)) + (-t18461 + t18462) * np.exp((2*1j) * (t18440 + t18437)) + (t18465 + t18466) * np.exp((2*1j) * (t18439 + t18437)) + (t18463 + t18464) * np.exp((6*1j) * (t18441 + 3 * phi2)))

        if Bindx == 430:
            t18491 = np.cos(phi)
            t18490 = t18491 ** 2
            t18499 = t18490 ** 2
            t18503 = t18499 ** 2
            t18510 = t18503 ** 2
            t18511 = t18491 * t18510
            t18475 = t18491 * t18511
            t18522 = 1 - t18475
            t18521 = t18511 - t18491
            t18498 = t18491 * t18490
            t18501 = t18498 ** 2
            t18502 = t18491 * t18501
            t18508 = t18502 ** 2
            t18478 = t18491 * t18508
            t18506 = t18501 ** 2
            t18480 = t18491 * t18506
            t18500 = t18491 * t18499
            t18504 = t18500 ** 2
            t18482 = t18491 * t18504
            t18520 = -544 * t18478 - 3808 * t18480 - 7072 * t18482 + 544 * t18498 + 3808 * t18500 + 7072 * t18502 - 16 * t18521
            t18519 = 4048 * t18478 + 3696 * t18480 - 20592 * t18482 - 264 * t18491 - 4048 * t18498 - 3696 * t18500 + 20592 * t18502 + 264 * t18511
            t18518 = 6944 * t18478 - 62496 * t18480 + 90272 * t18482 - 6944 * t18498 + 62496 * t18500 - 90272 * t18502 + 3472 * t18521
            t18517 = 22320 * t18478 - 52080 * t18480 + 52080 * t18482 - 22320 * t18498 + 52080 * t18500 - 52080 * t18502 - 3720 * t18521
            t18516 = 119 * t18490 + 1700 * t18499 + 6188 * t18501 + 4862 * t18503 - 4862 * t18504 - 6188 * t18506 - 1700 * t18508 - 119 * t18510 + t18522
            t18515 = 22 - 22 * t18475 + 1386 * t18490 + 6600 * t18499 - 8008 * t18501 - 18876 * t18503 + 18876 * t18504 + 8008 * t18506 - 6600 * t18508 - 1386 * t18510
            t18514 = -930 * t18490 - 18600 * t18499 + 78120 * t18501 - 78120 * t18506 + 18600 * t18508 + 930 * t18510 + 143220 * t18504 - 143220 * t18503 + 930 * t18522
            t18513 = 434 * t18475 - 9982 * t18490 + 26040 * t18499 + 22568 * t18501 - 22568 * t18506 - 26040 * t18508 + 9982 * t18510 - 434 + 124124 * t18504 - 124124 * t18503
            t18497 = 4 * phi1
            t18496 = 8 * phi1
            t18495 = 12 * phi1
            t18494 = 16 * phi1
            t18493 = -19 * phi2
            t18492 = 19 * phi2
            tfunc[..., c] = (-0.39e2 / 0.8388608e7*1j) * np.sqrt((1 - t18491)) * np.sqrt((1 + t18491)) * np.sqrt(0.29e2) * np.sqrt(0.17e2) * np.sqrt(0.703e3) * ((-t18516 + t18520) * np.exp((-1*1j) * (t18494 + t18493)) + (t18516 + t18520) * np.exp((1j) * (t18494 + t18492)) + (-t18514 + t18517) * np.exp((-1*1j) * (t18497 + t18493)) + (-t18513 + t18518) * np.exp((-1*1j) * (t18496 + t18493)) + (t18514 + t18517) * np.exp((1j) * (t18497 + t18492)) + (t18513 + t18518) * np.exp((1j) * (t18496 + t18492)) + (t18515 + t18519) * np.exp((-1*1j) * (t18495 + t18493)) + (-t18515 + t18519) * np.exp((1j) * (t18495 + t18492)))

        if Bindx == 431:
            t18551 = np.cos(phi)
            t18550 = t18551 ** 2
            t18558 = t18550 ** 2
            t18562 = t18558 ** 2
            t18563 = t18551 * t18562
            t18572 = t18563 ** 2
            t18533 = t18551 * t18572
            t18584 = -t18533 - t18551
            t18557 = t18551 * t18550
            t18560 = t18557 ** 2
            t18561 = t18551 * t18560
            t18568 = t18561 ** 2
            t18537 = t18551 * t18568
            t18559 = t18551 * t18558
            t18583 = -20 * t18537 - 20 * t18559
            t18570 = t18562 ** 2
            t18535 = t18551 * t18570
            t18566 = t18560 ** 2
            t18539 = t18551 * t18566
            t18564 = t18559 ** 2
            t18541 = t18551 * t18564
            t18582 = -528 * t18535 - 3264 * t18537 - 3264 * t18539 + 7072 * t18541 - 528 * t18557 - 3264 * t18559 - 3264 * t18561 + 7072 * t18563 + 16 * t18584
            t18532 = t18564 ** 2
            t18581 = 1 + t18532 + 118 * t18550 + 1581 * t18558 + 4488 * t18560 - 1326 * t18562 - 9724 * t18564 - 1326 * t18566 + 4488 * t18568 + 1581 * t18570 + 118 * t18572
            t18580 = 288 * t18533 + 4128 * t18535 - 384 * t18537 - 26496 * t18539 + 22464 * t18541 + 288 * t18551 + 4128 * t18557 - 384 * t18559 - 26496 * t18561 + 22464 * t18563
            t18579 = 736 * t18535 + 32384 * t18539 - 19136 * t18541 + 736 * t18557 + 32384 * t18561 - 19136 * t18563 + 736 * t18583 - 736 * t18584
            t18578 = 92 + 92 * t18532 + 2024 * t18550 - 7636 * t18558 + 736 * t18560 + 31096 * t18562 - 52624 * t18564 + 31096 * t18566 + 736 * t18568 - 7636 * t18570 + 2024 * t18572
            t18577 = 16800 * t18535 + 67200 * t18539 - 33600 * t18541 + 16800 * t18557 + 67200 * t18561 - 33600 * t18563 + 2400 * t18583 + 2400 * t18584
            t18576 = 24 + 24 * t18532 + 1488 * t18550 + 5688 * t18558 - 15936 * t18560 - 11856 * t18562 + 41184 * t18564 - 11856 * t18566 - 15936 * t18568 + 5688 * t18570 + 1488 * t18572
            t18575 = -600 * t18532 + 1200 * t18550 + 11400 * t18558 - 62400 * t18560 + 142800 * t18562 - 184800 * t18564 + 142800 * t18566 - 62400 * t18568 + 11400 * t18570 + 1200 * t18572 - 600
            t18556 = 2 * phi1
            t18555 = 3 * phi1
            t18554 = 4 * phi1
            t18553 = -5 * phi2
            t18552 = 5 * phi2
            tfunc[..., c] = (0.41e2 / 0.7314866176e10) * np.sqrt(0.17e2) * np.sqrt(0.19e2) * np.sqrt(0.109e3) * np.sqrt(0.11e2) * np.sqrt(0.5e1) * np.sqrt(0.31e2) * np.sqrt(0.29e2) * np.sqrt(0.481e3) * ((966 * t18532 - 9660 * t18572 + 43470 * t18570 - 243432 * t18564 + 43470 * t18558 - 9660 * t18550 + 966 + 202860 * t18566 + 202860 * t18562 - 115920 * t18568 - 115920 * t18560) * np.exp((-20*1j) * phi2) + (t18581 - t18582) * np.exp((-4*1j) * (t18554 + t18552)) + (t18581 + t18582) * np.exp((4*1j) * (t18554 + t18553)) + (t18575 + t18577) * np.exp((-4*1j) * (phi1 + t18552)) + (t18578 + t18579) * np.exp((-4*1j) * (t18556 + t18552)) + (t18576 + t18580) * np.exp((-4*1j) * (t18555 + t18552)) + (t18575 - t18577) * np.exp((4*1j) * (phi1 + t18553)) + (t18578 - t18579) * np.exp((4*1j) * (t18556 + t18553)) + (t18576 - t18580) * np.exp((4*1j) * (t18555 + t18553)))

        if Bindx == 432:
            t18615 = np.cos(phi)
            t18614 = t18615 ** 2
            t18622 = t18614 ** 2
            t18623 = t18615 * t18622
            t18628 = t18623 ** 2
            t18596 = t18628 ** 2
            t18658 = t18596 + 1
            t18626 = t18622 ** 2
            t18627 = t18615 * t18626
            t18636 = t18627 ** 2
            t18597 = t18615 * t18636
            t18649 = -t18597 - t18615
            t18634 = t18626 ** 2
            t18599 = t18615 * t18634
            t18621 = t18615 * t18614
            t18657 = -t18599 - t18621
            t18624 = t18621 ** 2
            t18625 = t18615 * t18624
            t18632 = t18625 ** 2
            t18601 = t18615 * t18632
            t18656 = t18601 + t18623
            t18630 = t18624 ** 2
            t18603 = t18615 * t18630
            t18655 = t18603 + t18625
            t18605 = t18615 * t18628
            t18654 = t18605 + t18627
            t18653 = t18630 + t18626
            t18652 = t18632 + t18624
            t18651 = t18634 + t18622
            t18650 = t18636 + t18614
            t18648 = 38 * t18596 + 4484 * t18614 + 60078 * t18622 - 50388 * t18626 - 369512 * t18628 - 50388 * t18630 + 60078 * t18634 + 4484 * t18636 + 170544 * t18652 + 38
            t18647 = -20064 * t18599 - 20064 * t18621 + 268736 * t18605 + 268736 * t18627 - 124032 * t18601 - 124032 * t18603 - 124032 * t18625 - 124032 * t18623 + 608 * t18649
            t18646 = 109 * t18596 + 20710 * t18614 + 20138404 * t18628 + 20710 * t18636 + 528105 * t18651 + 4224840 * t18652 + 13730730 * t18653 + 109
            t18645 = -2180 * t18597 - 2180 * t18615 - 18307640 * t18654 - 8449680 * t18655 - 1689936 * t18656 + 124260 * t18657
            t18644 = 31977 * t18596 + 54872532 * t18628 + 1982574 * t18650 + 7578549 * t18651 - 21232728 * t18652 - 15796638 * t18653 + 31977
            t18643 = 383724 * t18649 - 29930472 * t18654 + 35302608 * t18655 + 511632 * t18656 + 5500044 * t18657
            t18642 = 18584128 * t18649 + 483187328 * t18654 - 817701632 * t18655 + 371682560 * t18656 + 18584128 * t18657
            t18641 = 2927000160 * t18603 + 2927000160 * t18625 - 2090714400 * t18601 - 2090714400 * t18623 - 1463500080 * t18605 - 1463500080 * t18627 + 731750040 * t18599 + 731750040 * t18621 + 104535720 * t18649
            t18640 = -1328765152 * t18628 + 51106352 * t18650 - 192810328 * t18651 + 18584128 * t18652 + 785179408 * t18653 + 2323016 * t18658
            t18639 = 8049250440 * t18628 - 52267860 * t18650 - 496544670 * t18651 + 2717928720 * t18652 - 6219875340 * t18653 + 26133930 * t18658
            t18620 = 2 * phi1
            t18619 = 3 * phi1
            t18618 = 4 * phi1
            t18617 = -5 * phi2
            t18616 = 5 * phi2
            tfunc[..., c] = (0.41e2 / 0.351113576448e12) * np.sqrt(0.2e1) * np.sqrt(0.5e1) * np.sqrt(0.3e1) * np.sqrt(0.37e2) * np.sqrt(0.13e2) * np.sqrt(0.109e3) * ((-14443794288 * t18628 + 57316644 * t18596 + 57316644 + 12036495240 * t18630 + 12036495240 * t18626 - 6877997280 * t18632 - 6877997280 * t18624 + 2579248980 * t18634 + 2579248980 * t18622 - 573166440 * t18636 - 573166440 * t18614) * np.exp((-20*1j) * phi2) + (t18639 - t18641) * np.exp((-4*1j) * (phi1 + t18616)) + (t18640 - t18642) * np.exp((-4*1j) * (t18620 + t18616)) + (-t18643 + t18644) * np.exp((-4*1j) * (t18619 + t18616)) + (-t18647 + t18648) * np.exp((-4*1j) * (t18618 + t18616)) + (t18639 + t18641) * np.exp((4*1j) * (phi1 + t18617)) + (t18640 + t18642) * np.exp((4*1j) * (t18620 + t18617)) + (t18643 + t18644) * np.exp((4*1j) * (t18619 + t18617)) + (t18647 + t18648) * np.exp((4*1j) * (t18618 + t18617)) + (-t18645 + t18646) * np.exp((-20*1j) * (phi1 + phi2)) + (t18645 + t18646) * np.exp((20*1j) * (phi1 - phi2)))

        if Bindx == 433:
            t18686 = np.cos(phi)
            t18685 = t18686 ** 2
            t18694 = t18685 ** 2
            t18698 = t18694 ** 2
            t18699 = t18686 * t18698
            t18708 = t18699 ** 2
            t18668 = t18686 * t18708
            t18713 = 5 * t18668
            t18712 = 120 * t18668
            t18711 = 460 * t18668
            t18710 = -3000 * t18668
            t18706 = t18698 ** 2
            t18693 = t18686 * t18685
            t18696 = t18693 ** 2
            t18697 = t18686 * t18696
            t18704 = t18697 ** 2
            t18702 = t18696 ** 2
            t18695 = t18686 * t18694
            t18700 = t18695 ** 2
            t18692 = 4 * phi1
            t18691 = 8 * phi1
            t18690 = 12 * phi1
            t18689 = 16 * phi1
            t18688 = -19 * phi2
            t18687 = 19 * phi2
            t18676 = t18686 * t18700
            t18674 = t18686 * t18702
            t18672 = t18686 * t18704
            t18670 = t18686 * t18706
            tfunc[..., c] = (0.41e2 / 0.3657433088e10*1j) * np.sqrt(0.481e3) * np.sqrt(0.29e2) * np.sqrt(0.31e2) * np.sqrt(0.11e2) * np.sqrt(0.2e1) * np.sqrt(0.109e3) * np.sqrt(0.17e2) * np.sqrt(0.19e2) * ((1 + t18686) ** (0.3e1 / 0.2e1)) * ((1 - t18686) ** (-0.1e1 / 0.2e1)) * (4830 * (t18668 - 2 * t18708 - 7 * t18670 + 16 * t18706 + 20 * t18672 + 14 * t18676 - 140 * t18700 + 14 * t18699 + 20 * t18695 + 16 * t18694 - 7 * t18693 - 2 * t18685 + t18686 + 112 * t18702 + 112 * t18698 - 56 * t18704 - 56 * t18696 - 28 * t18674 - 28 * t18697) * np.exp((-19*1j) * phi2) + (44896 * t18702 - 56856 * t18676 - 89056 * t18700 + 10120 * t18699 + 78384 * t18698 + 26864 * t18697 - 32384 * t18696 - 23184 * t18695 + 3680 * t18694 + 7084 * t18693 + 1104 * t18685 - 184 + t18711 + 2576 * t18708 + 3036 * t18670 - 9016 * t18706 - 24656 * t18672 + 57776 * t18674 - 644 * t18686) * np.exp((-1*1j) * (t18691 + t18687)) + (319200 * t18702 - 109200 * t18676 - 411600 * t18700 + 42000 * t18699 + 344400 * t18698 + 16800 * t18697 - 184800 * t18696 - 26400 * t18695 + 60000 * t18694 + 11400 * t18693 - 10200 * t18685 + 600 + t18710 - 5400 * t18708 + 22200 * t18670 + 43800 * t18706 - 69600 * t18672 - 156000 * t18704 + 117600 * t18674 - 1800 * t18686) * np.exp((-1*1j) * (t18692 + t18687)) + (t18710 + 17400 * t18708 - 23400 * t18670 - 53400 * t18706 + 170400 * t18672 - 36000 * t18704 + 284400 * t18676 - 620400 * t18700 + 66000 * t18699 + 471600 * t18698 - 261600 * t18697 - 141600 * t18696 + 165600 * t18695 - 12000 * t18694 - 36600 * t18693 + 12600 * t18685 + 600 * t18686 - 600 - 362400 * t18674 + 362400 * t18702) * np.exp((1j) * (t18692 + t18688)) + (169832 * t18676 - 210496 * t18700 + 26312 * t18699 + 148304 * t18698 - 129168 * t18697 + 10304 * t18696 + 47472 * t18695 - 30176 * t18694 + 4140 * t18693 + 2944 * t18685 + 184 + t18711 - 4416 * t18708 + 17020 * t18670 - 29256 * t18706 + 1840 * t18672 + 83904 * t18704 - 136528 * t18674 + 28704 * t18702 - 1380 * t18686) * np.exp((1j) * (t18691 + t18688)) + (1248 * t18702 + 49296 * t18676 + 48048 * t18700 - 6864 * t18699 - 45552 * t18698 - 28704 * t18697 + 6048 * t18696 + 16416 * t18695 + 7008 * t18694 - 840 * t18693 - 72 + t18712 + 1128 * t18708 + 4200 * t18670 + 6648 * t18706 - 1440 * t18672 - 22752 * t18704 - 31584 * t18674 - 1752 * t18685 - 600 * t18686) * np.exp((-1*1j) * (t18690 + t18687)) + (-5408 * t18702 - 9178 * t18676 - 6292 * t18700 + 1430 * t18699 + 6968 * t18698 + 6292 * t18697 + 2072 * t18696 - 1052 * t18695 - 1600 * t18694 - 899 * t18693 - 286 * t18685 - 4 + t18713 + 66 * t18708 + 389 * t18670 + 1324 * t18706 + 2756 * t18672 + 3160 * t18704 + 308 * t18674 - 51 * t18686) * np.exp((-1*1j) * (t18689 + t18687)) + (103584 * t18702 - 225264 * t18676 + 199056 * t18700 - 34320 * t18699 - 119184 * t18698 + 146016 * t18697 - 75936 * t18696 + 5664 * t18695 + 18720 * t18694 - 13512 * t18693 + 4728 * t18685 + 72 + t18712 - 1608 * t18708 + 9672 * t18670 - 33912 * t18706 + 74208 * t18672 - 95520 * t18704 + 38304 * t18674 - 888 * t18686) * np.exp((1j) * (t18690 + t18688)) + (-84864 * t18702 + 91494 * t18676 - 68068 * t18700 + 24310 * t18699 + 15912 * t18698 - 34476 * t18697 + 31416 * t18696 - 18972 * t18695 + 8160 * t18694 - 2499 * t18693 + 522 * t18685 + 4 + t18713 - 86 * t18708 + 693 * t18670 - 3468 * t18706 + 12036 * t18672 - 30600 * t18704 + 58548 * t18674 - 67 * t18686) * np.exp((1j) * (t18689 + t18688)))

        if Bindx == 434:
            t18744 = np.cos(phi)
            t18743 = t18744 ** 2
            t18753 = t18743 ** 2
            t18754 = t18744 * t18753
            t18759 = t18754 ** 2
            t18725 = t18759 ** 2
            t18774 = 190 * t18725
            t18773 = 545 * t18725
            t18772 = 159885 * t18725
            t18771 = 11615080 * t18725
            t18770 = 130669650 * t18725
            t18757 = t18753 ** 2
            t18758 = t18744 * t18757
            t18767 = t18758 ** 2
            t18765 = t18757 ** 2
            t18752 = t18744 * t18743
            t18755 = t18752 ** 2
            t18756 = t18744 * t18755
            t18763 = t18756 ** 2
            t18761 = t18755 ** 2
            t18751 = 4 * phi1
            t18750 = 8 * phi1
            t18749 = 12 * phi1
            t18748 = 16 * phi1
            t18747 = 20 * phi1
            t18746 = -19 * phi2
            t18745 = 19 * phi2
            t18734 = t18744 * t18759
            t18732 = t18744 * t18761
            t18730 = t18744 * t18763
            t18728 = t18744 * t18765
            t18726 = t18744 * t18767
            tfunc[..., c] = (0.41e2 / 0.87778394112e11*1j) * np.sqrt(0.109e3) * np.sqrt(0.13e2) * np.sqrt(0.37e2) * np.sqrt(0.3e1) * np.sqrt((1 + t18744)) * ((1 - t18744) ** (-0.1e1 / 0.2e1)) * ((-627214320 * t18726 + 3345143040 * t18728 - 5854000320 * t18730 + 14635000800 * t18734 - 574946460 * t18743 + 1045357200 * t18752 + 2116848330 * t18753 - 6690286080 * t18754 - 1045357200 * t18755 + 17562000960 * t18756 - 9146875500 * t18757 - 23416001280 * t18758 + 24147751320 * t18759 - 28172376540 * t18761 + 17352929520 * t18763 - 5096116350 * t18765 + 261339300 * t18767 + t18770 + 26133930) * np.exp((1j) * (t18751 + t18746)) + 286583220 * (126 * t18761 - 126 * t18734 - 126 * t18759 + 126 * t18758 - 84 * t18763 + 84 * t18732 + 84 * t18757 - 84 * t18756 + 36 * t18765 - 36 * t18730 - 36 * t18755 + 36 * t18754 - 9 * t18767 + 9 * t18728 + 9 * t18753 - 9 * t18752 + t18725 - t18726 - t18743 + t18744) * np.exp((-19*1j) * phi2) + (9810 * t18726 + 434910 * t18728 + 4224840 * t18730 + 12674520 * t18732 + 9153820 * t18734 - 82840 * t18743 - 9810 * t18744 - 434910 * t18752 - 1584315 * t18753 - 4224840 * t18754 - 12674520 * t18756 - 13730730 * t18757 - 9153820 * t18758 + 13730730 * t18761 + 1584315 * t18765 + 82840 * t18767 + t18773 - 545 + 8449680 * t18763 - 8449680 * t18755) * np.exp((-1*1j) * (t18747 + t18745)) + (365875020 * t18726 - 2874732300 * t18728 + 9826357680 * t18730 - 19025501040 * t18732 + 22684251240 * t18734 + 522678600 * t18743 + 52267860 * t18744 - 52267860 * t18752 - 3109937670 * t18753 - 1463500080 * t18754 + 9199143360 * t18755 + 7317500400 * t18756 - 15732625860 * t18757 - 16830250920 * t18758 + 16098500880 * t18759 - 9146875500 * t18761 + 1672571520 * t18763 + 1123758990 * t18765 - 731750040 * t18767 + t18770 - 26133930) * np.exp((-1*1j) * (t18751 + t18745)) + (76659528 * t18726 - 150996040 * t18728 - 622568288 * t18730 + 2592485856 * t18732 - 3684303376 * t18734 + 11615080 * t18743 - 20907144 * t18744 + 206748424 * t18752 + 271792872 * t18753 - 492479392 * t18754 - 1403101664 * t18755 - 139380960 * t18756 + 2657530304 * t18757 + 2234741392 * t18758 - 1993147728 * t18759 - 301992080 * t18761 + 1458854048 * t18763 - 850223856 * t18765 + 141703976 * t18767 + t18771 - 4646032) * np.exp((-1*1j) * (t18750 + t18745)) + (-99889688 * t18726 - 308961128 * t18728 + 2165050912 * t18730 - 2722574752 * t18732 - 1026773072 * t18734 + 39491272 * t18743 - 30199208 * t18744 + 178872232 * t18752 - 657413528 * t18753 + 436727008 * t18754 + 1458854048 * t18755 - 3001336672 * t18756 + 483187328 * t18757 + 4409084368 * t18758 - 4650678032 * t18759 + 5013068528 * t18761 - 1328765152 * t18763 - 692258768 * t18765 + 318253192 * t18767 + t18771 + 4646032) * np.exp((1j) * (t18750 + t18746)) + (1662804 * t18726 + 14453604 * t18728 - 32232816 * t18730 - 40418928 * t18732 + 129698712 * t18734 - 3133746 * t18743 - 895356 * t18744 - 3453516 * t18752 + 8218089 * t18753 + 31209552 * t18754 + 29930472 * t18755 - 30186288 * t18756 - 98936838 * t18757 - 69837768 * t18758 + 54872532 * t18759 + 67343562 * t18761 - 72395928 * t18763 + 6939009 * t18765 + 7098894 * t18767 + t18772 - 95931) * np.exp((-1*1j) * (t18749 + t18745)) + (-152 + t18774 + 2698 * t18726 + 17290 * t18767 + 65094 * t18728 + 155040 * t18765 + 224808 * t18730 + 131784 * t18763 - 193800 * t18732 - 554268 * t18761 - 587860 * t18734 - 184756 * t18759 + 319124 * t18758 + 503880 * t18757 + 317832 * t18756 + 38760 * t18755 - 100776 * t18754 - 94962 * t18753 - 45030 * t18752 - 12806 * t18743 - 2090 * t18744) * np.exp((-1*1j) * (t18748 + t18745)) + (-1982574 * t18726 - 32296770 * t18728 - 28395576 * t18730 + 189048024 * t18732 - 34918884 * t18734 + 5116320 * t18743 - 1087218 * t18744 - 11703582 * t18752 + 6939009 * t18753 + 32488632 * t18754 - 93628656 * t18755 + 93372840 * t18756 + 35750286 * t18757 - 204524892 * t18758 + 219490128 * t18759 - 162123390 * t18761 - 76233168 * t18763 + 53689383 * t18765 + 10744272 * t18767 + t18772 + 95931) * np.exp((1j) * (t18749 + t18746)) + (-3078 * t18726 - 105450 * t18728 - 705432 * t18730 - 1000008 * t18732 + 890188 * t18734 + 17290 * t18743 - 2394 * t18744 - 75126 * t18752 + 215118 * t18753 - 410856 * t18754 + 472872 * t18755 - 116280 * t18756 - 705432 * t18757 + 1528436 * t18758 - 1662804 * t18759 + 251940 * t18761 + 1062024 * t18763 + 325584 * t18765 + 23066 * t18767 + t18774 + 152) * np.exp((1j) * (t18748 + t18746)) + (-10900 * t18726 - 621300 * t18728 - 42248400 * t18732 - 91538200 * t18734 + 103550 * t18743 - 10900 * t18744 - 621300 * t18752 + 2640525 * t18753 + 21124200 * t18755 - 42248400 * t18756 + 68653650 * t18757 - 91538200 * t18758 + 100692020 * t18759 + 68653650 * t18761 + 21124200 * t18763 + 2640525 * t18765 + 103550 * t18767 + t18773 + 545 - 8449680 * t18730 - 8449680 * t18754) * np.exp((1j) * (t18747 + t18746)))

        if Bindx == 435:
            t18803 = np.cos(phi)
            t18802 = t18803 ** 2
            t18810 = t18802 ** 2
            t18814 = t18810 ** 2
            t18815 = t18803 * t18814
            t18824 = t18815 ** 2
            t18785 = t18803 * t18824
            t18822 = t18814 ** 2
            t18787 = t18803 * t18822
            t18809 = t18803 * t18802
            t18812 = t18809 ** 2
            t18813 = t18803 * t18812
            t18820 = t18813 ** 2
            t18789 = t18803 * t18820
            t18818 = t18812 ** 2
            t18791 = t18803 * t18818
            t18811 = t18803 * t18810
            t18816 = t18811 ** 2
            t18793 = t18803 * t18816
            t18834 = 936 * t18785 + 23640 * t18787 + 93024 * t18789 - 27744 * t18791 - 215696 * t18793 - 552 * t18803 - 10968 * t18809 - 14688 * t18811 + 106080 * t18813 + 45968 * t18815
            t18784 = t18816 ** 2
            t18833 = 65 * t18784 - 3280 * t18802 - 20859 * t18810 + 31824 * t18812 + 133926 * t18814 - 116688 * t18816 - 165750 * t18818 + 75888 * t18820 + 58803 * t18822 + 6112 * t18824 - 41
            t18832 = 1560 * t18784 - 12864 * t18802 + 85368 * t18810 + 41600 * t18812 - 724464 * t18814 + 878592 * t18816 + 218608 * t18818 - 721536 * t18820 + 157320 * t18822 + 76352 * t18824 - 536
            t18831 = 43056 * t18785 - 7728 * t18787 - 560832 * t18789 + 1373376 * t18791 - 1196000 * t18793 - 1840 * t18803 + 48944 * t18809 - 263488 * t18811 + 440128 * t18813 + 124384 * t18815
            t18830 = 16848 * t18785 + 175536 * t18787 - 200896 * t18789 - 688704 * t18791 + 1104480 * t18793 - 4560 * t18803 + 592 * t18809 + 184512 * t18811 - 441792 * t18813 - 146016 * t18815
            t18829 = 5980 * t18784 + 13248 * t18802 - 11316 * t18810 - 287040 * t18812 + 1069224 * t18814 - 1473472 * t18816 + 672152 * t18818 + 328256 * t18820 - 416300 * t18822 + 100096 * t18824 - 828
            t18828 = -39000 * t18784 - 24000 * t18802 + 323400 * t18810 - 1603200 * t18812 + 4057200 * t18814 - 5913600 * t18816 + 5082000 * t18818 - 2390400 * t18820 + 406200 * t18822 + 100800 * t18824 + 600
            t18827 = -140400 * t18785 + 918000 * t18787 - 2481600 * t18789 + 3460800 * t18791 - 2368800 * t18793 - 13200 * t18803 + 157200 * t18809 - 590400 * t18811 + 840000 * t18813 + 218400 * t18815
            t18808 = 2 * phi1
            t18807 = 4 * phi1
            t18806 = 8 * phi1
            t18805 = -9 * phi2
            t18804 = 9 * phi2
            tfunc[..., c] = (0.41e2 / 0.3657433088e10) * np.sqrt(0.19e2) * np.sqrt(0.17e2) * np.sqrt(0.109e3) * np.sqrt(0.3e1) * np.sqrt(0.11e2) * np.sqrt(0.31e2) * np.sqrt(0.29e2) * np.sqrt(0.37e2) * ((1610 + 62790 * t18784 - 566720 * t18824 + 2274930 * t18822 - 5332320 * t18820 + 8046780 * t18818 - 8114400 * t18816 + 5477220 * t18814 - 2395680 * t18812 + 623070 * t18810 - 77280 * t18802) * np.exp((-18*1j) * phi2) + (t18830 + t18832) * np.exp((-6*1j) * (t18808 + 3 * phi2)) + (t18827 + t18828) * np.exp((-2*1j) * (t18808 + t18804)) + (t18829 + t18831) * np.exp((-2*1j) * (t18807 + t18804)) + (t18833 + t18834) * np.exp((-2*1j) * (t18806 + t18804)) + (-t18827 + t18828) * np.exp((2*1j) * (t18808 + t18805)) + (t18829 - t18831) * np.exp((2*1j) * (t18807 + t18805)) + (t18833 - t18834) * np.exp((2*1j) * (t18806 + t18805)) + (-t18830 + t18832) * np.exp((6*1j) * (t18808 - 3 * phi2)))

        if Bindx == 436:
            t18865 = np.cos(phi)
            t18864 = t18865 ** 2
            t18873 = t18864 ** 2
            t18877 = t18873 ** 2
            t18878 = t18865 * t18877
            t18887 = t18878 ** 2
            t18847 = t18865 * t18887
            t18885 = t18877 ** 2
            t18849 = t18865 * t18885
            t18872 = t18865 * t18864
            t18875 = t18872 ** 2
            t18876 = t18865 * t18875
            t18883 = t18876 ** 2
            t18851 = t18865 * t18883
            t18881 = t18875 ** 2
            t18853 = t18865 * t18881
            t18874 = t18865 * t18873
            t18879 = t18874 ** 2
            t18855 = t18865 * t18879
            t18899 = -35568 * t18847 - 898320 * t18849 - 3534912 * t18851 + 1054272 * t18853 + 8196448 * t18855 + 20976 * t18865 + 416784 * t18872 + 558144 * t18874 - 4031040 * t18876 - 1746784 * t18878
            t18846 = t18879 ** 2
            t18898 = 7085 * t18846 - 7085 + 178499490 * t18881 - 178499490 * t18877 + 109845840 * t18883 - 109845840 * t18875 + 20596095 * t18885 - 20596095 * t18873 + 1076920 * t18887 - 1076920 * t18864
            t18897 = 2470 * t18846 - 124640 * t18864 - 792642 * t18873 + 1209312 * t18875 + 5089188 * t18877 - 4434144 * t18879 - 6298500 * t18881 + 2883744 * t18883 + 2234514 * t18885 + 232256 * t18887 - 1558
            t18896 = -164768760 * t18853 + 164768760 * t18876 - 118999660 * t18855 + 118999660 * t18878 - 54922920 * t18851 + 54922920 * t18874 - 5653830 * t18849 + 5653830 * t18872 - 127530 * t18847 + 127530 * t18865
            t18895 = -22447854 * t18847 - 233879778 * t18849 + 267668808 * t18851 + 917611992 * t18853 - 1471581540 * t18855 + 6075630 * t18865 - 788766 * t18872 - 245839176 * t18874 + 588632616 * t18876 + 194548068 * t18878
            t18894 = -1087171488 * t18847 + 195133344 * t18849 + 14161105536 * t18851 - 34677982848 * t18853 + 30199208000 * t18855 + 46460320 * t18865 - 1235844512 * t18872 + 6653117824 * t18874 - 11113308544 * t18876 - 3140717632 * t18878
            t18893 = 2078505 * t18846 - 17139672 * t18864 + 113742189 * t18873 + 55426800 * t18875 - 965257722 * t18877 + 1170614016 * t18879 + 291267834 * t18881 - 961356528 * t18883 + 209609235 * t18885 + 101729496 * t18887 - 714153
            t18892 = -6115339620 * t18847 + 39984912900 * t18849 - 108089934480 * t18851 + 150740508240 * t18853 - 103176755640 * t18855 - 574946460 * t18865 + 6847089660 * t18872 - 25715787120 * t18874 + 36587502000 * t18876 + 9512750520 * t18878
            t18891 = 150996040 * t18846 + 334514304 * t18864 - 285730968 * t18873 - 7247809920 * t18875 + 26998091952 * t18877 - 37205424256 * t18879 + 16971954896 * t18881 + 8288521088 * t18883 - 10511647400 * t18885 + 2527441408 * t18887 - 20907144
            t18890 = 1698705450 * t18846 + 1045357200 * t18864 - 14086188270 * t18873 + 69829860960 * t18875 - 176717634660 * t18877 + 257576014080 * t18879 - 221354387100 * t18881 + 104117577120 * t18883 - 17692670610 * t18885 - 4390500240 * t18887 - 26133930
            t18871 = 2 * phi1
            t18870 = 4 * phi1
            t18869 = 8 * phi1
            t18868 = -9 * phi2
            t18867 = 9 * phi2
            t18866 = 10 * phi1
            tfunc[..., c] = (0.41e2 / 0.58518929408e11) * np.sqrt(0.2e1) * np.sqrt(0.37e2) * np.sqrt(0.109e3) * ((95527740 + 3725581860 * t18846 - 33625764480 * t18887 + 134980696620 * t18885 - 316387874880 * t18883 + 477447644520 * t18881 - 481459809600 * t18879 + 324985371480 * t18877 - 142145277120 * t18875 + 36969235380 * t18873 - 4585331520 * t18864) * np.exp((-18*1j) * phi2) + (-t18896 + t18898) * np.exp((-2*1j) * (t18866 + t18867)) + (t18896 + t18898) * np.exp((2*1j) * (t18866 + t18868)) + (t18893 - t18895) * np.exp((-6*1j) * (t18871 + 3 * phi2)) + (t18890 - t18892) * np.exp((-2*1j) * (t18871 + t18867)) + (t18891 - t18894) * np.exp((-2*1j) * (t18870 + t18867)) + (t18897 - t18899) * np.exp((-2*1j) * (t18869 + t18867)) + (t18890 + t18892) * np.exp((2*1j) * (t18871 + t18868)) + (t18891 + t18894) * np.exp((2*1j) * (t18870 + t18868)) + (t18897 + t18899) * np.exp((2*1j) * (t18869 + t18868)) + (t18893 + t18895) * np.exp((6*1j) * (t18871 - 3 * phi2)))

        if Bindx == 437:
            t18928 = np.cos(phi)
            t18927 = t18928 ** 2
            t18936 = t18927 ** 2
            t18937 = t18928 * t18936
            t18942 = t18937 ** 2
            t18909 = t18942 ** 2
            t18956 = 1235 * t18909
            t18955 = 29640 * t18909
            t18954 = 113620 * t18909
            t18953 = 741000 * t18909
            t18940 = t18936 ** 2
            t18941 = t18928 * t18940
            t18950 = t18941 ** 2
            t18948 = t18940 ** 2
            t18935 = t18928 * t18927
            t18938 = t18935 ** 2
            t18939 = t18928 * t18938
            t18946 = t18939 ** 2
            t18944 = t18938 ** 2
            t18934 = 4 * phi1
            t18933 = 8 * phi1
            t18932 = 12 * phi1
            t18931 = 16 * phi1
            t18930 = -17 * phi2
            t18929 = 17 * phi2
            t18918 = t18928 * t18942
            t18916 = t18928 * t18944
            t18914 = t18928 * t18946
            t18912 = t18928 * t18948
            t18910 = t18928 * t18950
            tfunc[..., c] = (0.41e2 / 0.3657433088e10*1j) * np.sqrt(0.2e1) * np.sqrt(0.11e2) * np.sqrt(0.29e2) * np.sqrt(0.37e2) * np.sqrt(0.31e2) * np.sqrt(0.109e3) * np.sqrt(0.17e2) * np.sqrt((1 + t18928)) * ((1 - t18928) ** (-0.1e1 / 0.2e1)) * (91770 * (-t18927 + t18928 + 966 * t18944 - 966 * t18918 - 798 * t18942 + 798 * t18941 - 756 * t18946 + 756 * t18916 + 420 * t18940 - 420 * t18939 + 372 * t18948 - 372 * t18914 - 132 * t18938 + 132 * t18937 - 105 * t18950 + 105 * t18912 + 21 * t18936 - 21 * t18935 + 13 * t18909 - 13 * t18910) * np.exp((-17*1j) * phi2) + (-1778400 * t18910 + 12933600 * t18912 - 40790400 * t18914 + 72777600 * t18916 - 80270400 * t18918 - 363600 * t18927 + 50400 * t18928 - 837600 * t18935 + 3317400 * t18936 + 6230400 * t18937 - 12753600 * t18938 - 24393600 * t18939 + 25796400 * t18940 + 56078400 * t18941 - 28274400 * t18942 + 13263600 * t18944 + 4257600 * t18946 - 8771400 * t18948 + 4263600 * t18950 + 5400 - t18953) * np.exp((-1*1j) * (t18934 + t18929)) + (658996 * t18910 - 1855364 * t18912 - 1431152 * t18914 + 11923568 * t18916 - 19324968 * t18918 - 126316 * t18927 - 17572 * t18928 + 85652 * t18935 + 1132244 * t18936 + 658352 * t18937 - 4080752 * t18938 - 5401136 * t18939 + 6066112 * t18940 + 14703624 * t18941 - 552552 * t18942 - 9632584 * t18944 + 12256976 * t18946 - 6091688 * t18948 + 910708 * t18950 + 4232 + t18954) * np.exp((-1*1j) * (t18933 + t18929)) + (3260400 * t18910 - 16422000 * t18912 + 28977600 * t18914 - 11524800 * t18916 - 30559200 * t18918 + 252000 * t18927 + 61200 * t18928 - 1453200 * t18935 - 1026600 * t18936 + 10574400 * t18937 - 4051200 * t18938 - 33096000 * t18939 + 31693200 * t18940 + 50181600 * t18941 - 77985600 * t18942 + 97566000 * t18944 - 65510400 * t18946 + 20584200 * t18948 - 775200 * t18950 - 5400 - t18953) * np.exp((1j) * (t18934 + t18930)) + (-886236 * t18910 - 1511284 * t18912 + 13958608 * t18914 - 21047760 * t18916 + 5618808 * t18918 + 152996 * t18927 - 9108 * t18928 - 193660 * t18935 - 1024236 * t18936 + 2814832 * t18937 + 607568 * t18938 - 10089456 * t18939 + 9424480 * t18940 + 11345256 * t18941 - 25496328 * t18942 + 23338744 * t18944 - 3132784 * t18946 - 6435768 * t18948 + 2455940 * t18950 - 4232 + t18954) * np.exp((1j) * (t18933 + t18930)) + (5496 + 8260512 * t18918 - 3898752 * t18942 - 9418656 * t18941 - 3516240 * t18940 + 2997696 * t18939 + 3050112 * t18938 + 368448 * t18937 - 661272 * t18936 - 306000 * t18935 + 3072 * t18927 + 29904 * t18928 + t18955 + 272688 * t18910 + 984960 * t18950 + 1468752 * t18912 - 534696 * t18948 - 5216064 * t18914 - 6381696 * t18946 + 1542720 * t18916 + 10919376 * t18944) * np.exp((-1*1j) * (t18932 + t18929)) + (604 - 182546 * t18918 + 1268982 * t18942 + 1471418 * t18941 + 485316 * t18940 - 437580 * t18939 - 564876 * t18938 - 229908 * t18937 + 22491 * t18936 + 65937 * t18935 + 30725 * t18927 + 6723 * t18928 + t18956 + 15561 * t18910 + 86317 * t18950 + 269595 * t18912 + 485928 * t18948 + 377604 * t18914 - 378012 * t18946 - 1356804 * t18916 - 1438710 * t18944) * np.exp((-1*1j) * (t18931 + t18929)) + (-5496 + 18793632 * t18942 - 5476224 * t18941 - 7458672 * t18940 + 7977216 * t18939 - 1929408 * t18938 - 1489152 * t18937 + 1196328 * t18936 - 229056 * t18935 - 73872 * t18927 + 40896 * t18928 + t18955 - 331968 * t18910 + 1589616 * t18950 - 4043328 * t18912 + 4977384 * t18948 + 773376 * t18914 - 12371136 * t18946 + 17210112 * t18916 - 4748016 * t18944 - 14431872 * t18918) * np.exp((1j) * (t18932 + t18930)) + (-604 - 2970682 * t18942 + 230282 * t18941 + 1726452 * t18940 - 1774188 * t18939 + 771732 * t18938 + 23052 * t18937 - 230469 * t18936 + 142041 * t18935 - 45379 * t18927 + 7931 * t18928 + t18956 - 18031 * t18910 + 119909 * t18950 - 475821 * t18912 + 1231344 * t18948 - 2094876 * t18914 + 2094468 * t18946 - 359652 * t18916 - 2435862 * t18944 + 4057118 * t18918) * np.exp((1j) * (t18931 + t18930)))

        if Bindx == 438:
            t18987 = np.cos(phi)
            t18986 = t18987 ** 2
            t18996 = t18986 ** 2
            t18997 = t18987 * t18996
            t19002 = t18997 ** 2
            t18968 = t19002 ** 2
            t19017 = 2470 * t18968
            t19016 = 7085 * t18968
            t19015 = 2078505 * t18968
            t19014 = 150996040 * t18968
            t19013 = 1698705450 * t18968
            t19000 = t18996 ** 2
            t19001 = t18987 * t19000
            t19010 = t19001 ** 2
            t19008 = t19000 ** 2
            t18995 = t18987 * t18986
            t18998 = t18995 ** 2
            t18999 = t18987 * t18998
            t19006 = t18999 ** 2
            t19004 = t18998 ** 2
            t18994 = 4 * phi1
            t18993 = 8 * phi1
            t18992 = 12 * phi1
            t18991 = 16 * phi1
            t18990 = 20 * phi1
            t18989 = -17 * phi2
            t18988 = 17 * phi2
            t18977 = t18987 * t19002
            t18975 = t18987 * t19004
            t18973 = t18987 * t19006
            t18971 = t18987 * t19008
            t18969 = t18987 * t19010
            tfunc[..., c] = (0.41e2 / 0.87778394112e11*1j) * np.sqrt(0.19e2) * np.sqrt(0.109e3) * np.sqrt(0.37e2) * np.sqrt(0.3e1) * np.sqrt((1 + t18987)) * ((1 - t18987) ** (-0.1e1 / 0.2e1)) * (286583220 * (966 * t19004 - 966 * t18977 - 798 * t19002 + 798 * t19001 - 756 * t19006 + 756 * t18975 + 420 * t19000 - 420 * t18999 + 372 * t19008 - 372 * t18973 - 132 * t18998 + 132 * t18997 - 105 * t19010 + 105 * t18971 + 21 * t18996 - 21 * t18995 + 13 * t18968 - 13 * t18969 - t18986 + t18987) * np.exp((-17*1j) * phi2) + (t19016 - 7085 + 178499490 * t19004 - 178499490 * t19000 - 164768760 * t18975 + 164768760 * t18999 - 118999660 * t18977 + 118999660 * t19001 + 109845840 * t19006 - 109845840 * t18998 - 54922920 * t18973 + 54922920 * t18997 + 20596095 * t19008 - 20596095 * t18996 - 5653830 * t18971 + 5653830 * t18995 + 1076920 * t19010 - 1076920 * t18986 - 127530 * t18969 + 127530 * t18987) * np.exp((1j) * (t18990 + t18989)) + (4076893080 * t18969 - 29649631320 * t18971 + 93509952480 * t18973 - 166839009120 * t18975 + 184015878480 * t18977 + 833534820 * t18986 - 115539480 * t18987 + 1920156120 * t18995 - 7604973630 * t18996 - 14282880480 * t18997 + 29236990320 * t18998 + 55921108320 * t18999 - 59136957180 * t19000 - 128556928080 * t19001 + 64817648280 * t19002 - 30406139820 * t19004 - 9760335120 * t19006 + 20107995930 * t19008 - 9774089820 * t19010 - 12379230 + t19013) * np.exp((-1*1j) * (t18994 + t18988)) + (875777032 * t18969 - 2465698088 * t18971 - 1901938784 * t18973 + 15845903456 * t18975 - 25682042256 * t18977 - 167868472 * t18986 - 23352424 * t18987 + 113827784 * t18995 + 1504703048 * t18996 + 874921184 * t18997 - 5423141984 * t18998 - 7177874912 * t18999 + 8061599104 * t19000 + 19540477008 * t19001 - 734317584 * t19002 - 12801285328 * t19004 + 16288988192 * t19006 - 8095588496 * t19008 + 1210291336 * t19010 + 5624144 + t19014) * np.exp((-1*1j) * (t18993 + t18988)) + (-7474303980 * t18969 + 37646613900 * t18971 - 66429699120 * t18973 + 26420027760 * t18975 + 70055438040 * t18977 - 577697400 * t18986 - 140297940 * t18987 + 3331388340 * t18995 + 2353429170 * t18996 - 24241283280 * t18997 + 9287173440 * t18998 + 75870925200 * t18999 - 72655076340 * t19000 - 115038808920 * t19001 + 178778088720 * t19002 - 223665176700 * t19004 + 150179316480 * t19006 - 47188249290 * t19008 + 1777107240 * t19010 + 12379230 + t19013) * np.exp((1j) * (t18994 + t18989)) + (-1177769112 * t18969 - 2008430728 * t18971 + 18550383136 * t18973 - 27971557920 * t18975 + 7467151536 * t18977 + 203325032 * t18986 - 12104136 * t18987 - 257365720 * t18995 - 1361165112 * t18996 + 3740789344 * t18997 + 807431456 * t18998 - 13408448352 * t18999 + 12524724160 * t19000 + 15077351952 * t19001 - 33883511376 * t19002 + 31016176048 * t19004 - 4163333728 * t19006 - 8552855856 * t19008 + 3263837480 * t19010 - 5624144 + t19014) * np.exp((1j) * (t18993 + t18989)) + (19122246 * t18969 + 102996234 * t18971 - 365776488 * t18973 + 108183240 * t18975 + 579268404 * t18977 + 215424 * t18986 + 2097018 * t18987 - 21458250 * t18995 - 46371699 * t18996 + 25837416 * t18997 + 213889104 * t18998 + 210213432 * t18999 - 246576330 * t19000 - 660483252 * t19001 - 273399984 * t19002 + 765721242 * t19004 - 447516432 * t19006 - 37495557 * t19008 + 69070320 * t19010 + 385407 + t19015) * np.exp((-1*1j) * (t18992 + t18988)) + (-875160 * t18999 - 1129752 * t18998 - 459816 * t18997 + 44982 * t18996 + 131874 * t18995 + 61450 * t18986 + 13446 * t18987 + 172634 * t19010 + 539190 * t18971 + 971856 * t19008 + 755208 * t18973 - 756024 * t19006 - 2713608 * t18975 - 2877420 * t19004 - 365092 * t18977 + 2537964 * t19002 + 2942836 * t19001 + 970632 * t19000 + t19017 + 31122 * t18969 + 1208) * np.exp((-1*1j) * (t18991 + t18988)) + (t19016 - 68894540 * t19002 + 7085 - 50105120 * t18977 - 50105120 * t19001 + 31797480 * t19006 + 31797480 * t18998 + 11201385 * t19008 + 11201385 * t18996 - 9394710 * t19004 - 9394710 * t19000 + 3740880 * t18971 + 3740880 * t18995 + 836030 * t19010 + 836030 * t18986 + 113360 * t18969 + 113360 * t18987 + 23125440 * t18973 + 23125440 * t18975 + 23125440 * t18999 + 23125440 * t18997) * np.exp((-1*1j) * (t18990 + t18988)) + (-23279256 * t18969 - 283538376 * t18971 + 54232992 * t18973 + 1206859104 * t18975 - 1012035024 * t18977 - 5180274 * t18986 + 2867832 * t18987 - 16062552 * t18995 + 83892501 * t18996 - 104426784 * t18997 - 135299736 * t18998 + 559402272 * t18999 - 523039374 * t19000 - 384020208 * t19001 + 1317903444 * t19002 - 332954622 * t19004 - 867525912 * t19006 + 349039053 * t19008 + 111471822 * t19010 - 385407 + t19015) * np.exp((1j) * (t18992 + t18989)) + (3452904 * t19000 - 3548376 * t18999 + 1543464 * t18998 + 46104 * t18997 - 460938 * t18996 + 284082 * t18995 - 90758 * t18986 + 15862 * t18987 + 239818 * t19010 - 951642 * t18971 + 2462688 * t19008 - 4189752 * t18973 + 4188936 * t19006 - 719304 * t18975 - 4871724 * t19004 + 8114236 * t18977 - 5941364 * t19002 + 460564 * t19001 + t19017 - 36062 * t18969 - 1208) * np.exp((1j) * (t18991 + t18989)))

        if Bindx == 439:
            t19046 = np.cos(phi)
            t19045 = t19046 ** 2
            t19051 = t19045 ** 2
            t19052 = t19046 * t19051
            t19057 = t19052 ** 2
            t19027 = t19057 ** 2
            t19050 = t19046 * t19045
            t19053 = t19050 ** 2
            t19055 = t19051 ** 2
            t19059 = t19053 ** 2
            t19054 = t19046 * t19053
            t19061 = t19054 ** 2
            t19063 = t19055 ** 2
            t19056 = t19046 * t19055
            t19065 = t19056 ** 2
            t19075 = 45695 * t19027 + 781586 * t19045 - 677229 * t19051 - 16055208 * t19053 + 25375662 * t19055 + 32254508 * t19057 - 59361042 * t19059 - 6054312 * t19061 + 20618739 * t19063 + 3316754 * t19065 + 16991
            t19028 = t19046 * t19065
            t19030 = t19046 * t19063
            t19032 = t19046 * t19061
            t19034 = t19046 * t19059
            t19036 = t19046 * t19057
            t19074 = 584896 * t19028 + 10719936 * t19030 + 19858176 * t19032 - 45996288 * t19034 - 22375808 * t19036 + 182464 * t19046 + 1408704 * t19050 - 8447232 * t19052 - 6619392 * t19054 + 50946688 * t19056
            t19073 = -10528128 * t19028 - 72816000 * t19030 + 166583808 * t19032 + 80567808 * t19034 - 374669568 * t19036 - 402816 * t19046 + 7694976 * t19050 - 28647936 * t19052 - 21864960 * t19054 + 254082816 * t19056
            t19072 = 26905216 * t19028 - 33223040 * t19030 - 193373696 * t19032 + 565801472 * t19034 - 601865472 * t19036 - 462208 * t19046 + 6674048 * t19050 - 23893504 * t19052 - 19136000 * t19054 + 272573184 * t19056
            t19071 = -87734400 * t19028 + 537417600 * t19030 - 1374758400 * t19032 + 1875417600 * t19034 - 1423430400 * t19036 - 489600 * t19046 + 10262400 * t19050 - 40281600 * t19052 - 34137600 * t19054 + 537734400 * t19056
            t19070 = 4203940 * t19027 - 1025800 * t19045 + 18442964 * t19051 - 112911968 * t19053 + 297418888 * t19055 - 327268656 * t19057 + 7546760 * t19059 + 296939936 * t19061 - 233943212 * t19063 + 50576632 * t19065 + 20516
            t19069 = -27417000 * t19027 - 5727600 * t19045 + 74753400 * t19051 - 411873600 * t19053 + 1184996400 * t19055 - 1944650400 * t19057 + 1836567600 * t19059 - 898478400 * t19061 + 106548600 * t19063 + 85203600 * t19065 + 77400
            t19068 = 1096680 * t19027 - 1013520 * t19045 - 8329272 * t19051 + 81177408 * t19053 - 180558768 * t19055 + 30984096 * t19057 + 305382480 * t19059 - 288052416 * t19061 + 18347976 * t19063 + 40863984 * t19065 + 101352
            t19049 = 3 * phi1
            t19048 = -4 * phi2
            t19047 = 4 * phi2
            tfunc[..., c] = (0.41e2 / 0.7314866176e10) * np.sqrt(0.17e2) * np.sqrt(0.109e3) * np.sqrt(0.2e1) * np.sqrt(0.31e2) * np.sqrt(0.11e2) * np.sqrt(0.29e2) * ((91770 + 44141370 * t19027 - 359921940 * t19065 + 1290377970 * t19063 - 2662798320 * t19061 + 3472760340 * t19059 - 2952424440 * t19057 + 1622677140 * t19055 - 548417520 * t19053 + 101038770 * t19051 - 7525140 * t19045) * np.exp((-16*1j) * phi2) + (t19070 + t19072) * np.exp((-8*1j) * (phi1 + 2 * phi2)) + (t19069 + t19071) * np.exp((-4*1j) * (phi1 + t19047)) + (t19068 - t19073) * np.exp((-4*1j) * (t19049 + t19047)) + (t19069 - t19071) * np.exp((4*1j) * (phi1 + t19048)) + (t19068 + t19073) * np.exp((4*1j) * (t19049 + t19048)) + (t19070 - t19072) * np.exp((8*1j) * (phi1 - 2 * phi2)) + (t19074 + t19075) * np.exp((-16*1j) * (phi1 + phi2)) + (-t19074 + t19075) * np.exp((16*1j) * (phi1 - phi2)))

        if Bindx == 440:
            t19106 = np.cos(phi)
            t19105 = t19106 ** 2
            t19112 = t19105 ** 2
            t19113 = t19106 * t19112
            t19118 = t19113 ** 2
            t19087 = t19118 ** 2
            t19111 = t19106 * t19105
            t19114 = t19111 ** 2
            t19116 = t19112 ** 2
            t19120 = t19114 ** 2
            t19115 = t19106 * t19114
            t19122 = t19115 ** 2
            t19124 = t19116 ** 2
            t19117 = t19106 * t19116
            t19126 = t19117 ** 2
            t19138 = 91390 * t19087 + 1563172 * t19105 - 1354458 * t19112 - 32110416 * t19114 + 50751324 * t19116 + 64509016 * t19118 - 118722084 * t19120 - 12108624 * t19122 + 41237478 * t19124 + 6633508 * t19126 + 33982
            t19088 = t19106 * t19126
            t19090 = t19106 * t19124
            t19092 = t19106 * t19122
            t19094 = t19106 * t19120
            t19096 = t19106 * t19118
            t19137 = -1169792 * t19088 - 21439872 * t19090 - 39716352 * t19092 + 91992576 * t19094 + 44751616 * t19096 - 364928 * t19106 - 2817408 * t19111 + 16894464 * t19113 + 13238784 * t19115 - 101893376 * t19117
            t19136 = 1853889440 * t19096 + 1853889440 * t19117 - 138412560 * t19090 - 138412560 * t19111 - 4194320 * t19088 - 4194320 * t19106 - 855641280 * t19092 - 855641280 * t19094 - 855641280 * t19115 - 855641280 * t19113
            t19135 = -738284976 * t19088 - 5106222000 * t19090 + 11681689536 * t19092 + 5649817536 * t19094 - 26273703456 * t19096 - 28247472 * t19106 + 539610192 * t19111 - 2008936512 * t19113 - 1533280320 * t19115 + 17817557472 * t19117
            t19134 = 262145 * t19087 + 30933110 * t19105 + 414451245 * t19112 + 1176506760 * t19114 - 347604270 * t19116 - 2549097980 * t19118 - 347604270 * t19120 + 1176506760 * t19122 + 414451245 * t19124 + 30933110 * t19126 + 262145
            t19133 = 35755862272 * t19088 - 44151975680 * t19090 - 256985234432 * t19092 + 751925556224 * t19094 - 799853044224 * t19096 - 614254336 * t19106 + 8869519616 * t19111 - 31753427968 * t19113 - 25430912000 * t19115 + 362237910528 * t19117
            t19132 = 76904685 * t19087 - 71073090 * t19105 - 584090199 * t19112 + 5692565736 * t19114 - 12661683606 * t19116 + 2172759732 * t19118 + 21414946410 * t19120 - 20199675672 * t19122 + 1286651817 * t19124 + 2865586878 * t19126 + 7107309
            t19131 = -201126725280 * t19088 + 1232002977120 * t19090 - 3151564894080 * t19092 + 4299301077120 * t19094 - 3263143020480 * t19096 - 1122383520 * t19106 + 23526038880 * t19111 - 92343553920 * t19113 - 78258741120 * t19115 + 1232729225280 * t19117
            t19130 = 5586853480 * t19087 - 1363243600 * t19105 + 24509897288 * t19112 - 150055096256 * t19114 + 395256770896 * t19116 - 434925814752 * t19118 + 10029315920 * t19120 + 394620264512 * t19122 - 310900357304 * t19124 + 67214144944 * t19126 + 27264872
            t19129 = 62852101650 * t19087 + 13130236620 * t19105 - 171368431830 * t19112 + 944199634320 * t19114 - 2716544997180 * t19116 + 4458013809480 * t19118 - 4210239394620 * t19120 + 2059716808080 * t19122 - 244257338070 * t19124 - 195324992820 * t19126 - 177435630
            t19110 = 3 * phi1
            t19109 = 5 * phi1
            t19108 = -4 * phi2
            t19107 = 4 * phi2
            tfunc[..., c] = (0.41e2 / 0.175556788224e12) * np.sqrt(0.3e1) * np.sqrt(0.109e3) * np.sqrt(0.19e2) * ((286583220 - 9219955353840 * t19118 + 5067364496040 * t19116 - 1712621322720 * t19114 + 315528125220 * t19112 - 23499824040 * t19105 + 137846528820 * t19087 - 1123979388840 * t19126 + 4029646656420 * t19124 - 8315498711520 * t19122 + 10844882211240 * t19120) * np.exp((-16*1j) * phi2) + (t19130 + t19133) * np.exp((-8*1j) * (phi1 + 2 * phi2)) + (t19129 - t19131) * np.exp((-4*1j) * (phi1 + t19107)) + (t19132 - t19135) * np.exp((-4*1j) * (t19110 + t19107)) + (t19134 - t19136) * np.exp((-4*1j) * (t19109 + t19107)) + (t19129 + t19131) * np.exp((4*1j) * (phi1 + t19108)) + (t19132 + t19135) * np.exp((4*1j) * (t19110 + t19108)) + (t19134 + t19136) * np.exp((4*1j) * (t19109 + t19108)) + (t19130 - t19133) * np.exp((8*1j) * (phi1 - 2 * phi2)) + (-t19137 + t19138) * np.exp((-16*1j) * (phi1 + phi2)) + (t19137 + t19138) * np.exp((16*1j) * (phi1 - phi2)))

        if Bindx == 441:
            t19168 = np.cos(phi)
            t19167 = t19168 ** 2
            t19175 = t19167 ** 2
            t19176 = t19168 * t19175
            t19181 = t19176 ** 2
            t19191 = t19181 ** 2
            t19148 = t19168 * t19191
            t19179 = t19175 ** 2
            t19180 = t19168 * t19179
            t19189 = t19180 ** 2
            t19150 = t19168 * t19189
            t19187 = t19179 ** 2
            t19152 = t19168 * t19187
            t19174 = t19168 * t19167
            t19177 = t19174 ** 2
            t19178 = t19168 * t19177
            t19185 = t19178 ** 2
            t19154 = t19168 * t19185
            t19183 = t19177 ** 2
            t19156 = t19168 * t19183
            t19158 = t19168 * t19181
            t19200 = 27417 * t19148 + 1708290 * t19150 + 7142985 * t19152 - 13821000 * t19154 - 14023470 * t19156 + 31816044 * t19158 - 70179 * t19168 - 96030 * t19174 + 3632373 * t19176 - 7505160 * t19178 - 8811270 * t19180
            t19199 = 227160 * t19167 - 1330620 * t19175 - 2097120 * t19177 + 16946280 * t19179 - 16728816 * t19181 - 15726360 * t19183 + 25581600 * t19185 - 1724412 * t19187 - 4826280 * t19189 - 329004 * t19191 + 7572
            t19198 = 327888 * t19167 - 1645512 * t19175 - 8924736 * t19177 + 87877296 * t19179 - 267549984 * t19181 + 394436016 * t19183 - 282222144 * t19185 + 59304120 * t19187 + 33536208 * t19189 - 15134184 * t19191 - 4968
            t19197 = -701584 * t19167 + 3158216 * t19175 + 8759616 * t19177 - 82605744 * t19179 + 180754080 * t19181 - 124981168 * t19183 - 60315328 * t19185 + 110369096 * t19187 - 28542096 * t19189 - 5922072 * t19191 + 26984
            t19196 = -270000 * t19167 + 1623000 * t19175 + 17342400 * t19177 - 172746000 * t19179 + 614661600 * t19181 - 1169322000 * t19183 + 1310040000 * t19185 - 869663400 * t19187 + 317682000 * t19189 - 49350600 * t19191 + 3000
            t19195 = 658008 * t19148 + 20685072 * t19150 - 17036808 * t19152 - 115602240 * t19154 + 225837616 * t19156 - 122583968 * t19158 - 19752 * t19168 + 1790224 * t19174 - 16623752 * t19176 + 49466560 * t19178 - 26570960 * t19180
            t19194 = 2522364 * t19148 + 23671416 * t19150 - 135512964 * t19152 + 236637984 * t19154 - 141204360 * t19156 - 63077040 * t19158 + 101292 * t19168 - 2427144 * t19174 + 20624652 * t19176 - 78505440 * t19178 + 137169240 * t19180
            t19193 = -16450200 * t19148 + 63270000 * t19150 - 4563000 * t19152 - 386001600 * t19154 + 941682000 * t19156 - 1115100000 * t19158 + 244200 * t19168 - 7386000 * t19174 + 68790600 * t19176 - 306744000 * t19178 + 762258000 * t19180
            t19173 = 4 * phi1
            t19172 = 8 * phi1
            t19171 = 16 * phi1
            t19170 = -15 * phi2
            t19169 = 15 * phi2
            tfunc[..., c] = (0.41e2 / 0.3657433088e10*1j) * np.sqrt(0.2e1) * np.sqrt(0.11e2) * np.sqrt(0.29e2) * np.sqrt(0.31e2) * np.sqrt(0.5e1) * np.sqrt(0.109e3) * np.sqrt(0.17e2) * ((26484822 * t19148 - 218669556 * t19150 + 796178166 * t19152 - 1675499952 * t19154 + 2241941100 * t19156 - 1973935992 * t19158 + 1141141596 * t19180 - 417443376 * t19178 + 88521342 * t19176 - 8993460 * t19174 + 275310 * t19168) * np.exp((-15*1j) * phi2) + (t19195 - t19197) * np.exp((-3*1j) * (t19173 + 5 * phi2)) + (t19195 + t19197) * np.exp((3*1j) * (t19173 - 5 * phi2)) + (t19193 + t19196) * np.exp((-1*1j) * (t19173 + t19169)) + (t19194 - t19198) * np.exp((-1*1j) * (t19172 + t19169)) + (t19193 - t19196) * np.exp((1j) * (t19173 + t19170)) + (t19194 + t19198) * np.exp((1j) * (t19172 + t19170)) + (-t19199 + t19200) * np.exp((-1*1j) * (t19171 + t19169)) + (t19199 + t19200) * np.exp((1j) * (t19171 + t19170))) * ((1 + t19168) ** (-0.1e1 / 0.2e1)) * ((1 - t19168) ** (-0.1e1 / 0.2e1))

        if Bindx == 442:
            t19232 = np.cos(phi)
            t19231 = t19232 ** 2
            t19239 = t19231 ** 2
            t19240 = t19232 * t19239
            t19245 = t19240 ** 2
            t19255 = t19245 ** 2
            t19212 = t19232 * t19255
            t19243 = t19239 ** 2
            t19244 = t19232 * t19243
            t19253 = t19244 ** 2
            t19214 = t19232 * t19253
            t19251 = t19243 ** 2
            t19216 = t19232 * t19251
            t19238 = t19232 * t19231
            t19241 = t19238 ** 2
            t19242 = t19232 * t19241
            t19249 = t19242 ** 2
            t19218 = t19232 * t19249
            t19247 = t19241 ** 2
            t19220 = t19232 * t19247
            t19222 = t19232 * t19245
            t19266 = 18278 * t19212 + 1138860 * t19214 + 4761990 * t19216 - 9214000 * t19218 - 9348980 * t19220 + 21210696 * t19222 - 46786 * t19232 - 64020 * t19238 + 2421582 * t19240 - 5003440 * t19242 - 5874180 * t19244
            t19265 = -151440 * t19231 + 887080 * t19239 + 1398080 * t19241 - 11297520 * t19243 + 11152544 * t19245 + 10484240 * t19247 - 17054400 * t19249 + 1149608 * t19251 + 3217520 * t19253 + 219336 * t19255 - 5048
            t19264 = -5347758 * t19231 - 55207737 * t19239 - 64173096 * t19241 + 240649110 * t19243 + 139041708 * t19245 - 301257034 * t19247 - 64173096 * t19249 + 88238007 * t19251 + 21495890 * t19253 + 786435 * t19255 - 52429
            t19263 = 52429 * t19212 + 5347758 * t19214 + 55207737 * t19216 + 64173096 * t19218 - 240649110 * t19220 - 139041708 * t19222 - 786435 * t19232 - 21495890 * t19238 - 88238007 * t19240 + 64173096 * t19242 + 301257034 * t19244
            t19262 = 16399526 * t19231 - 73823299 * t19239 - 204756024 * t19241 + 1930909266 * t19243 - 4225126620 * t19245 + 2921434802 * t19247 + 1409870792 * t19249 - 2579877619 * t19251 + 667171494 * t19253 + 138428433 * t19255 - 630751
            t19261 = 15380937 * t19212 + 483513558 * t19214 - 398235387 * t19216 - 2702202360 * t19218 + 5278954274 * t19220 - 2865400252 * t19222 - 461703 * t19232 + 41846486 * t19238 - 388580203 * t19240 + 1156280840 * t19242 - 621096190 * t19244
            t19260 = 145249632 * t19231 - 728937968 * t19239 - 3953528704 * t19241 + 38928368544 * t19243 - 118520765376 * t19245 + 174729438624 * t19247 - 125020319616 * t19249 + 26270865680 * t19251 + 14856054112 * t19253 - 6704224176 * t19255 - 2200752
            t19259 = 206320500 * t19231 - 1240215450 * t19239 - 13252194960 * t19241 + 132003855900 * t19243 - 469693661640 * t19245 + 893537406300 * t19247 - 1001067066000 * t19249 + 664553287110 * t19251 - 242756700300 * t19253 + 37711260990 * t19255 - 2292450
            t19258 = 1117370696 * t19212 + 10486094224 * t19214 - 60030279096 * t19216 + 104827197376 * t19218 - 62551485040 * t19220 - 27942214560 * t19222 + 44870888 * t19232 - 1075189616 * t19238 + 9136421928 * t19240 - 34776772160 * t19242 + 60763985360 * t19244
            t19257 = 12570420330 * t19212 - 48347770500 * t19214 + 3486816450 * t19216 + 294963122640 * t19218 - 719586300300 * t19220 + 852103665000 * t19222 - 186605430 * t19232 + 5644011900 * t19238 - 52566336990 * t19240 + 234398427600 * t19242 - 582479450700 * t19244
            t19237 = 4 * phi1
            t19236 = 8 * phi1
            t19235 = 16 * phi1
            t19234 = -15 * phi2
            t19233 = 15 * phi2
            tfunc[..., c] = (0.41e2 / 0.29259464704e11*1j) * np.sqrt(0.19e2) * np.sqrt(0.109e3) * np.sqrt(0.3e1) * np.sqrt(0.5e1) * ((1 + t19232) ** (-0.1e1 / 0.2e1)) * ((1 - t19232) ** (-0.1e1 / 0.2e1)) * ((-1744107265824 * t19218 + 2333742688200 * t19220 - 2054763476304 * t19222 + 1187868341352 * t19244 - 434536583712 * t19242 + 92146058004 * t19240 - 9361718520 * t19238 + 286583220 * t19232 + 27569305764 * t19212 - 227623498872 * t19214 + 828779566692 * t19216) * np.exp((-15*1j) * phi2) + (t19263 + t19264) * np.exp((-5*1j) * (t19237 + 3 * phi2)) + (t19261 + t19262) * np.exp((-3*1j) * (t19237 + 5 * phi2)) + (t19261 - t19262) * np.exp((3*1j) * (t19237 - 5 * phi2)) + (t19263 - t19264) * np.exp((5*1j) * (t19237 - 3 * phi2)) + (t19257 + t19259) * np.exp((-1*1j) * (t19237 + t19233)) + (t19258 - t19260) * np.exp((-1*1j) * (t19236 + t19233)) + (t19257 - t19259) * np.exp((1j) * (t19237 + t19234)) + (t19258 + t19260) * np.exp((1j) * (t19236 + t19234)) + (t19265 + t19266) * np.exp((-1*1j) * (t19235 + t19233)) + (-t19265 + t19266) * np.exp((1j) * (t19235 + t19234)))

        if Bindx == 443:
            t19295 = np.cos(phi)
            t19294 = t19295 ** 2
            t19303 = t19294 ** 2
            t19307 = t19303 ** 2
            t19308 = t19295 * t19307
            t19317 = t19308 ** 2
            t19277 = t19295 * t19317
            t19315 = t19307 ** 2
            t19279 = t19295 * t19315
            t19302 = t19295 * t19294
            t19305 = t19302 ** 2
            t19306 = t19295 * t19305
            t19313 = t19306 ** 2
            t19281 = t19295 * t19313
            t19311 = t19305 ** 2
            t19283 = t19295 * t19311
            t19304 = t19295 * t19303
            t19309 = t19304 ** 2
            t19285 = t19295 * t19309
            t19327 = 9212112 * t19277 + 35244720 * t19279 - 137154752 * t19281 + 93414848 * t19283 + 78893152 * t19285 + 73520 * t19295 - 39600 * t19302 - 9334592 * t19304 + 58743360 * t19306 - 129052768 * t19308
            t19326 = 511784 * t19277 + 6251224 * t19279 - 864416 * t19281 - 25756768 * t19283 + 21452912 * t19285 - 70056 * t19295 + 283304 * t19302 + 2509472 * t19304 - 11661728 * t19306 + 7344272 * t19308
            t19325 = 23542064 * t19277 - 50991920 * t19279 - 55342784 * t19281 + 275989696 * t19283 - 346715616 * t19285 + 4048 * t19295 - 357328 * t19302 + 8639168 * t19304 - 63244480 * t19306 + 208477152 * t19308
            t19276 = t19309 ** 2
            t19324 = 45695 * t19276 - 145776 * t19294 + 1810619 * t19303 - 2379728 * t19305 - 11562278 * t19307 + 27499472 * t19309 - 7075978 * t19311 - 18408688 * t19313 + 7773709 * t19315 + 2452064 * t19317 - 9111
            t19323 = -76767600 * t19277 + 442268400 * t19279 - 1071537600 * t19281 + 1411307200 * t19283 - 1089152800 * t19285 + 18800 * t19295 - 873200 * t19302 + 15793600 * t19304 - 124958400 * t19306 + 493901600 * t19308
            t19322 = 4203940 * t19276 - 537280 * t19294 + 6965044 * t19303 - 34463936 * t19305 + 69351256 * t19307 - 11998272 * t19309 - 174580120 * t19311 + 283508672 * t19313 - 175570132 * t19315 + 33114112 * t19317 + 6716
            t19321 = 1096680 * t19276 + 654400 * t19294 - 6557560 * t19303 + 19966336 * t19305 + 6315504 * t19307 - 132081664 * t19309 + 225073680 * t19311 - 113396096 * t19313 - 30614664 * t19315 + 29559744 * t19317 - 16360
            t19320 = -27417000 * t19276 - 1268800 * t19294 + 21398200 * t19303 - 139785600 * t19305 + 460736400 * t19307 - 841139200 * t19309 + 846578800 * t19311 - 390339200 * t19313 - 26633400 * t19315 + 97857600 * t19317 + 12200
            t19301 = 2 * phi1
            t19300 = 4 * phi1
            t19299 = 6 * phi1
            t19298 = 8 * phi1
            t19297 = -7 * phi2
            t19296 = 7 * phi2
            tfunc[..., c] = (0.41e2 / 0.3657433088e10) * np.sqrt(0.7e1) * np.sqrt(0.17e2) * np.sqrt(0.109e3) * np.sqrt(0.3e1) * np.sqrt(0.11e2) * np.sqrt(0.31e2) * np.sqrt(0.29e2) * ((44141370 * t19276 - 325967040 * t19317 + 1047187470 * t19315 - 1911123360 * t19313 + 2168158020 * t19311 - 1569634080 * t19309 + 714154140 * t19307 - 192349920 * t19305 + 26888610 * t19303 - 1468320 * t19294 + 13110) * np.exp((-14*1j) * phi2) + (t19320 + t19323) * np.exp((-2*1j) * (t19301 + t19296)) + (t19322 + t19325) * np.exp((-2*1j) * (t19300 + t19296)) + (t19321 + t19327) * np.exp((-2*1j) * (t19299 + t19296)) + (t19324 + t19326) * np.exp((-2*1j) * (t19298 + t19296)) + (t19320 - t19323) * np.exp((2*1j) * (t19301 + t19297)) + (t19322 - t19325) * np.exp((2*1j) * (t19300 + t19297)) + (t19321 - t19327) * np.exp((2*1j) * (t19299 + t19297)) + (t19324 - t19326) * np.exp((2*1j) * (t19298 + t19297)))

        if Bindx == 444:
            t19358 = np.cos(phi)
            t19357 = t19358 ** 2
            t19367 = t19357 ** 2
            t19368 = t19358 * t19367
            t19373 = t19368 ** 2
            t19339 = t19373 ** 2
            t19366 = t19358 * t19357
            t19369 = t19366 ** 2
            t19371 = t19367 ** 2
            t19375 = t19369 ** 2
            t19370 = t19358 * t19369
            t19377 = t19370 ** 2
            t19379 = t19371 ** 2
            t19372 = t19358 * t19371
            t19381 = t19372 ** 2
            t19393 = 91390 * t19339 - 291552 * t19357 + 3621238 * t19367 - 4759456 * t19369 - 23124556 * t19371 + 54998944 * t19373 - 14151956 * t19375 - 36817376 * t19377 + 15547418 * t19379 + 4904128 * t19381 - 18222
            t19392 = 262145 * t19339 - 262145 - 811076630 * t19375 + 811076630 * t19371 + 191627995 * t19379 - 191627995 * t19367 + 71303440 * t19377 - 71303440 * t19369 + 23068760 * t19381 - 23068760 * t19357
            t19340 = t19358 * t19381
            t19342 = t19358 * t19379
            t19344 = t19358 * t19377
            t19346 = t19358 * t19375
            t19348 = t19358 * t19373
            t19391 = 1023568 * t19340 + 12502448 * t19342 - 1728832 * t19344 - 51513536 * t19346 + 42905824 * t19348 - 140112 * t19358 + 566608 * t19366 + 5018944 * t19368 - 23323456 * t19370 + 14688544 * t19372
            t19390 = 695208540 * t19348 - 695208540 * t19372 + 392168920 * t19346 - 392168920 * t19370 - 249562040 * t19344 + 249562040 * t19368 - 84410690 * t19342 + 84410690 * t19366 - 3670030 * t19340 + 3670030 * t19358
            t19389 = -645999354 * t19340 - 2471535990 * t19342 + 9617976984 * t19344 - 6550716216 * t19346 - 5532382284 * t19348 - 5155590 * t19358 + 2776950 * t19366 + 654588264 * t19368 - 4119378120 * t19370 + 9049825356 * t19372
            t19388 = 31286379488 * t19340 - 67766044640 * t19342 - 73548153728 * t19344 + 366778306432 * t19346 - 460769979072 * t19348 + 5379616 * t19358 - 474873376 * t19366 + 11481078656 * t19368 - 84049164160 * t19370 + 277057070784 * t19372
            t19387 = 76904685 * t19339 + 45889800 * t19357 - 459848895 * t19367 + 1400139312 * t19369 + 442874718 * t19371 - 9262226688 * t19373 + 15783291810 * t19375 - 7951901232 * t19377 - 2146853313 * t19379 + 2072877048 * t19381 - 1147245
            t19386 = -175985884620 * t19340 + 1013878193580 * t19342 - 2456446371120 * t19344 + 3235351190640 * t19346 - 2496828336360 * t19348 + 43098060 * t19358 - 2001767340 * t19366 + 36206038320 * t19368 - 286460884080 * t19370 + 1132244722920 * t19372
            t19385 = 5586853480 * t19339 - 714021760 * t19357 + 9256240648 * t19367 - 45801072512 * t19369 + 92164803952 * t19371 - 15945181824 * t19373 - 232009389040 * t19375 + 376770698624 * t19377 - 233325071944 * t19379 + 44007215104 * t19381 + 8925272
            t19384 = 62852101650 * t19339 + 2908660560 * t19357 - 49054303590 * t19367 + 320451498720 * t19369 - 1056215160180 * t19371 + 1928269559040 * t19373 - 1940739570060 * t19375 + 894833099040 * t19377 + 61055737830 * t19379 - 224333655120 * t19381 - 27967890
            t19365 = 2 * phi1
            t19364 = 4 * phi1
            t19363 = 6 * phi1
            t19362 = 8 * phi1
            t19361 = -7 * phi2
            t19360 = 7 * phi2
            t19359 = 10 * phi1
            tfunc[..., c] = (0.41e2 / 0.58518929408e11) * np.sqrt(0.2e1) * np.sqrt(0.109e3) * np.sqrt(0.7e1) * np.sqrt(0.19e2) * ((40940460 + 137846528820 * t19339 - 1017943597440 * t19381 + 3270201123420 * t19379 - 5968136496960 * t19377 + 6770815155720 * t19375 - 4901719394880 * t19373 + 2230190618040 * t19371 - 600678429120 * t19369 + 83968883460 * t19367 - 4585331520 * t19357) * np.exp((-14*1j) * phi2) + (-t19390 + t19392) * np.exp((-2*1j) * (t19359 + t19360)) + (t19390 + t19392) * np.exp((2*1j) * (t19359 + t19361)) + (t19384 - t19386) * np.exp((-2*1j) * (t19365 + t19360)) + (t19385 + t19388) * np.exp((-2*1j) * (t19364 + t19360)) + (t19387 - t19389) * np.exp((-2*1j) * (t19363 + t19360)) + (t19391 + t19393) * np.exp((-2*1j) * (t19362 + t19360)) + (t19384 + t19386) * np.exp((2*1j) * (t19365 + t19361)) + (t19385 - t19388) * np.exp((2*1j) * (t19364 + t19361)) + (t19387 + t19389) * np.exp((2*1j) * (t19363 + t19361)) + (-t19391 + t19393) * np.exp((2*1j) * (t19362 + t19361)))

        if Bindx == 445:
            t19423 = np.cos(phi)
            t19422 = t19423 ** 2
            t19431 = t19422 ** 2
            t19430 = t19423 * t19422
            t19433 = t19430 ** 2
            t19435 = t19431 ** 2
            t19432 = t19423 * t19431
            t19437 = t19432 ** 2
            t19439 = t19433 ** 2
            t19434 = t19423 * t19433
            t19441 = t19434 ** 2
            t19443 = t19435 ** 2
            t19436 = t19423 * t19435
            t19445 = t19436 ** 2
            t19447 = t19437 ** 2
            t19456 = -215832 * t19422 + 18350548 * t19431 - 83693856 * t19433 + 62999144 * t19435 + 253527664 * t19437 - 492188216 * t19439 + 193963744 * t19441 + 127859108 * t19443 - 72415512 * t19445 - 8078876 * t19447 - 107916
            t19455 = 3315600 * t19422 - 62345240 * t19431 + 414078400 * t19433 - 1159649712 * t19435 + 1125529184 * t19437 + 971474192 * t19439 - 2970137664 * t19441 + 2104636040 * t19443 - 281419632 * t19445 - 145419768 * t19447 - 61400
            t19454 = 2715472 * t19422 - 52495384 * t19431 + 441283520 * t19433 - 1879619248 * t19435 + 4352416224 * t19437 - 5429557744 * t19439 + 3006897088 * t19441 + 333241480 * t19443 - 1146480816 * t19445 + 371628296 * t19447 - 28888
            t19453 = 3988400 * t19422 - 89702600 * t19431 + 866964800 * t19433 - 4456093200 * t19435 + 13352487200 * t19437 - 24481064400 * t19439 + 27869857600 * t19441 - 19243309800 * t19443 + 7388737200 * t19445 - 1211831400 * t19447 - 33800
            t19403 = t19423 * t19447
            t19405 = t19423 * t19445
            t19407 = t19423 * t19443
            t19409 = t19423 * t19441
            t19411 = t19423 * t19439
            t19413 = t19423 * t19437
            t19452 = 776815 * t19403 + 34681802 * t19405 + 44527267 * t19407 - 312995976 * t19409 + 242927246 * t19411 + 200826236 * t19413 + 642447 * t19423 - 7053878 * t19430 + 3358979 * t19432 + 115745656 * t19434 - 323436594 * t19436
            t19451 = 71466980 * t19403 + 393618136 * t19405 - 2727611308 * t19407 + 5595053600 * t19409 - 5358061048 * t19411 + 2290363920 * t19413 + 568100 * t19423 - 16799016 * t19430 + 131520532 * t19432 - 369066464 * t19434 - 11053432 * t19436
            t19450 = 18643560 * t19403 + 406716432 * t19405 - 936725976 * t19407 - 519699520 * t19409 + 3159241424 * t19411 - 3408780960 * t19413 - 1210040 * t19423 + 18587920 * t19430 - 62909496 * t19432 - 178058816 * t19434 + 1504195472 * t19436
            t19449 = -466089000 * t19403 + 1993426800 * t19405 - 2164756200 * t19407 - 3108606400 * t19409 + 10915284400 * t19411 - 12994837600 * t19413 + 1316600 * t19423 - 51200400 * t19430 + 580353400 * t19432 - 2990884800 * t19434 + 8285993200 * t19436
            t19429 = 4 * phi1
            t19428 = 8 * phi1
            t19427 = 12 * phi1
            t19426 = 16 * phi1
            t19425 = -13 * phi2
            t19424 = 13 * phi2
            tfunc[..., c] = (0.41e2 / 0.3657433088e10*1j) * np.sqrt(0.109e3) * np.sqrt(0.31e2) * np.sqrt(0.3e1) * np.sqrt(0.29e2) * np.sqrt(0.2e1) * np.sqrt(0.11e2) * ((750403290 * t19403 - 5656886340 * t19405 + 18641515410 * t19407 - 35133226800 * t19409 + 41563917780 * t19411 - 31844557080 * t19413 + 15703865940 * t19436 - 4780115760 * t19434 + 819047250 * t19432 - 65523780 * t19430 + 1560090 * t19423) * np.exp((-13*1j) * phi2) + (t19449 + t19453) * np.exp((-1*1j) * (t19429 + t19424)) + (t19451 + t19454) * np.exp((-1*1j) * (t19428 + t19424)) + (t19449 - t19453) * np.exp((1j) * (t19429 + t19425)) + (t19451 - t19454) * np.exp((1j) * (t19428 + t19425)) + (t19450 - t19455) * np.exp((-1*1j) * (t19427 + t19424)) + (t19452 - t19456) * np.exp((-1*1j) * (t19426 + t19424)) + (t19450 + t19455) * np.exp((1j) * (t19427 + t19425)) + (t19452 + t19456) * np.exp((1j) * (t19426 + t19425))) * ((1 + t19423) ** (-0.1e1 / 0.2e1)) * ((1 - t19423) ** (-0.1e1 / 0.2e1))

        if Bindx == 446:
            t19488 = np.cos(phi)
            t19487 = t19488 ** 2
            t19497 = t19487 ** 2
            t19496 = t19488 * t19487
            t19499 = t19496 ** 2
            t19501 = t19497 ** 2
            t19498 = t19488 * t19497
            t19503 = t19498 ** 2
            t19505 = t19499 ** 2
            t19500 = t19488 * t19499
            t19507 = t19500 ** 2
            t19509 = t19501 ** 2
            t19502 = t19488 * t19501
            t19511 = t19502 ** 2
            t19513 = t19503 ** 2
            t19524 = -25392 * t19487 + 2158888 * t19497 - 9846336 * t19499 + 7411664 * t19501 + 29826784 * t19503 - 57904496 * t19505 + 22819264 * t19507 + 15042248 * t19509 - 8519472 * t19511 - 950456 * t19513 - 12696
            t19468 = t19488 * t19513
            t19470 = t19488 * t19511
            t19472 = t19488 * t19509
            t19474 = t19488 * t19507
            t19476 = t19488 * t19505
            t19478 = t19488 * t19503
            t19523 = 91390 * t19468 + 4080212 * t19470 + 5238502 * t19472 - 36823056 * t19474 + 28579676 * t19476 + 23626616 * t19478 + 75582 * t19488 - 829868 * t19496 + 395174 * t19498 + 13617136 * t19500 - 38051364 * t19502
            t19522 = -19398730 * t19487 - 107217305 * t19497 + 178258600 * t19499 + 418907710 * t19501 - 695208540 * t19503 - 115868090 * t19505 + 463472360 * t19507 - 57934045 * t19509 - 61341930 * t19511 - 3407885 * t19513 - 262145
            t19521 = 13676850 * t19487 - 257174115 * t19497 + 1708073400 * t19499 - 4783555062 * t19501 + 4642807884 * t19503 + 4007331042 * t19505 - 12251817864 * t19507 + 8681623665 * t19509 - 1160855982 * t19511 - 599856543 * t19513 - 253275
            t19520 = 262145 * t19468 + 19398730 * t19470 + 107217305 * t19472 - 178258600 * t19474 - 418907710 * t19476 + 695208540 * t19478 + 3407885 * t19488 + 61341930 * t19496 + 57934045 * t19498 - 463472360 * t19500 + 115868090 * t19502
            t19519 = 76904685 * t19468 + 1677705282 * t19470 - 3863994651 * t19472 - 2143760520 * t19474 + 13031870874 * t19476 - 14061221460 * t19478 - 4991415 * t19488 + 76675170 * t19496 - 259501671 * t19498 - 734492616 * t19500 + 6204806322 * t19502
            t19518 = -212279072 * t19487 + 4103769584 * t19497 - 34496859520 * t19499 + 146937191648 * t19501 - 340245407424 * t19503 + 424449774944 * t19505 - 235060911488 * t19507 - 26050790480 * t19509 + 89624891616 * t19511 - 29051638096 * t19513 + 2258288
            t19517 = 537835740 * t19487 - 12096395610 * t19497 + 116910203280 * t19499 - 600904168020 * t19501 + 1800582898920 * t19503 - 3301271534340 * t19505 + 3758250297360 * t19507 - 2594960326530 * t19509 + 996371211420 * t19511 - 163415464290 * t19513 - 4557930
            t19516 = 5586853480 * t19468 + 30770669936 * t19470 - 213228049208 * t19472 + 437387233600 * t19474 - 418860598448 * t19476 + 179046709920 * t19478 + 44410600 * t19488 - 1313244816 * t19496 + 10281474632 * t19498 - 28851369664 * t19500 - 864090032 * t19502
            t19515 = 62852101650 * t19468 - 268813603980 * t19470 + 291917373570 * t19472 + 419195573040 * t19474 - 1471926101340 * t19476 + 1752353850360 * t19478 - 177543510 * t19488 + 6904373940 * t19496 - 78260655990 * t19498 + 403320815280 * t19500 - 1117366183020 * t19502
            t19495 = 4 * phi1
            t19494 = 8 * phi1
            t19493 = 12 * phi1
            t19492 = 16 * phi1
            t19491 = 20 * phi1
            t19490 = -13 * phi2
            t19489 = 13 * phi2
            tfunc[..., c] = (0.41e2 / 0.29259464704e11*1j) * np.sqrt(0.109e3) * np.sqrt(0.19e2) * np.sqrt(0.17e2) * ((1 + t19488) ** (-0.1e1 / 0.2e1)) * ((1 - t19488) ** (-0.1e1 / 0.2e1)) * ((137846528820 * t19468 - 1039150755720 * t19470 + 3424382895780 * t19472 - 6453854114400 * t19474 + 7635150147240 * t19476 - 5849736686640 * t19478 + 2884746692520 * t19502 - 878090986080 * t19500 + 150456190500 * t19498 - 12036495240 * t19496 + 286583220 * t19488) * np.exp((-13*1j) * phi2) + (t19515 - t19517) * np.exp((-1*1j) * (t19495 + t19489)) + (t19516 - t19518) * np.exp((-1*1j) * (t19494 + t19489)) + (t19515 + t19517) * np.exp((1j) * (t19495 + t19490)) + (t19516 + t19518) * np.exp((1j) * (t19494 + t19490)) + (t19519 - t19521) * np.exp((-1*1j) * (t19493 + t19489)) + (t19523 - t19524) * np.exp((-1*1j) * (t19492 + t19489)) + (t19520 - t19522) * np.exp((-1*1j) * (t19491 + t19489)) + (t19519 + t19521) * np.exp((1j) * (t19493 + t19490)) + (t19523 + t19524) * np.exp((1j) * (t19492 + t19490)) + (t19520 + t19522) * np.exp((1j) * (t19491 + t19490)))

        if Bindx == 447:
            t19553 = np.cos(phi)
            t19552 = t19553 ** 2
            t19559 = t19552 ** 2
            t19563 = t19559 ** 2
            t19564 = t19553 * t19563
            t19573 = t19564 ** 2
            t19535 = t19553 * t19573
            t19571 = t19563 ** 2
            t19537 = t19553 * t19571
            t19558 = t19553 * t19552
            t19561 = t19558 ** 2
            t19562 = t19553 * t19561
            t19569 = t19562 ** 2
            t19539 = t19553 * t19569
            t19567 = t19561 ** 2
            t19541 = t19553 * t19567
            t19560 = t19553 * t19559
            t19565 = t19560 ** 2
            t19543 = t19553 * t19565
            t19583 = -246094992 * t19535 - 1702074000 * t19537 + 3893896512 * t19539 + 1883272512 * t19541 - 8757901152 * t19543 - 9415824 * t19553 + 179870064 * t19558 - 669645504 * t19560 - 511093440 * t19562 + 5939185824 * t19564
            t19582 = 4429709856 * t19535 + 5083306272 * t19537 - 47671344512 * t19539 + 69462805632 * t19541 - 33345399360 * t19543 - 21888480 * t19553 + 496965920 * t19558 - 3739942272 * t19560 + 10853960832 * t19562 - 5543979584 * t19564
            t19581 = -11320369632 * t19535 + 33655565856 * t19537 - 18132740736 * t19539 - 46219772544 * t19541 + 83321684160 * t19543 - 10322400 * t19553 + 372067872 * t19558 - 4167723648 * t19560 + 21764865408 * t19562 - 59263254336 * t19564
            t19580 = 36914248800 * t19535 - 201010788000 * t19537 + 462140131200 * t19539 - 582803548800 * t19541 + 438581140800 * t19543 - 13648800 * t19553 + 605800800 * t19558 - 8352643200 * t19560 + 54865008000 * t19562 - 200925700800 * t19564
            t19534 = t19565 ** 2
            t19579 = 25634895 * t19534 - 23691030 * t19552 - 194696733 * t19559 + 1897521912 * t19561 - 4220561202 * t19563 + 724253244 * t19565 + 7138315470 * t19567 - 6733225224 * t19569 + 428883939 * t19571 + 955195626 * t19573 + 2369103
            t19578 = 615237480 * t19534 + 31233840 * t19552 + 186010440 * t19559 - 4959880640 * t19561 + 25876792656 * t19563 - 56714253024 * t19565 + 51100157264 * t19567 - 34719168 * t19569 - 27182806200 * t19571 + 11086894896 * t19573 - 473240
            t19577 = 2358410340 * t19534 - 35721576 * t19552 + 453903252 * t19559 - 835142880 * t19561 - 8959314936 * t19563 + 51286140048 * t19565 - 114483485688 * t19567 + 127449021216 * t19569 - 67320886380 * t19571 + 10086739608 * t19573 + 336996
            t19576 = -15380937000 * t19534 - 153582000 * t19552 + 3157380600 * t19559 - 24176961600 * t19561 + 89399415600 * t19563 - 174139706400 * t19565 + 168715998000 * t19567 - 39315777600 * t19569 - 69157499400 * t19571 + 61050488400 * t19573 + 1181400
            t19557 = 2 * phi1
            t19556 = 4 * phi1
            t19555 = -3 * phi2
            t19554 = 3 * phi2
            tfunc[..., c] = (0.41e2 / 0.7314866176e10) * np.sqrt(0.109e3) * np.sqrt(0.31e2) * np.sqrt(0.29e2) * ((1560090 + 24763308570 * t19534 - 166358637060 * t19573 + 481726150290 * t19571 - 783776735280 * t19569 + 782319611220 * t19567 - 490436132760 * t19565 + 189635179860 * t19563 - 42521813040 * t19561 + 4862800530 * t19559 - 215292420 * t19552) * np.exp((-12*1j) * phi2) + (t19576 - t19580) * np.exp((-4*1j) * (phi1 + t19554)) + (t19577 - t19581) * np.exp((-4*1j) * (t19557 + t19554)) + (t19579 - t19583) * np.exp((-4*1j) * (t19556 + t19554)) + (t19576 + t19580) * np.exp((4*1j) * (phi1 + t19555)) + (t19577 + t19581) * np.exp((4*1j) * (t19557 + t19555)) + (t19579 + t19583) * np.exp((4*1j) * (t19556 + t19555)) + (t19578 + t19582) * np.exp((-12*1j) * (phi1 + phi2)) + (t19578 - t19582) * np.exp((12*1j) * (phi1 - phi2)))

        if Bindx == 448:
            t19614 = np.cos(phi)
            t19613 = t19614 ** 2
            t19621 = t19613 ** 2
            t19622 = t19614 * t19621
            t19627 = t19622 ** 2
            t19595 = t19627 ** 2
            t19620 = t19614 * t19613
            t19623 = t19620 ** 2
            t19625 = t19621 ** 2
            t19629 = t19623 ** 2
            t19624 = t19614 * t19623
            t19631 = t19624 ** 2
            t19633 = t19625 ** 2
            t19626 = t19614 * t19625
            t19635 = t19626 ** 2
            t19647 = 91390 * t19595 - 84460 * t19613 - 694106 * t19621 + 6764784 * t19623 - 15046564 * t19625 + 2582008 * t19627 + 25448540 * t19629 - 24004368 * t19631 + 1528998 * t19633 + 3405332 * t19635 + 8446
            t19596 = t19614 * t19635
            t19598 = t19614 * t19633
            t19600 = t19614 * t19631
            t19602 = t19614 * t19629
            t19604 = t19614 * t19627
            t19646 = -877344 * t19596 - 6068000 * t19598 + 13881984 * t19600 + 6713984 * t19602 - 31222464 * t19604 - 33568 * t19614 + 641248 * t19620 - 2387328 * t19622 - 1822080 * t19624 + 21173568 * t19626
            t19645 = 289408080 * t19602 + 289408080 * t19624 - 245367720 * t19604 - 245367720 * t19626 - 45088940 * t19598 - 45088940 * t19620 + 4194320 * t19600 + 4194320 * t19622 - 3145740 * t19596 - 3145740 * t19614
            t19644 = -553713732 * t19596 - 635413284 * t19598 + 5958918064 * t19600 - 8682850704 * t19602 + 4168174920 * t19604 + 2736060 * t19614 - 62120740 * t19620 + 467492784 * t19622 - 1356745104 * t19624 + 692997448 * t19626
            t19643 = 76904685 * t19595 + 3904230 * t19613 + 23251305 * t19621 - 619985080 * t19623 + 3234599082 * t19625 - 7089281628 * t19627 + 6387519658 * t19629 - 4339896 * t19631 - 3397850775 * t19633 + 1385861862 * t19635 - 59155
            t19642 = 262145 * t19595 + 16252990 * t19613 + 62128365 * t19621 - 174064280 * t19623 - 129499630 * t19625 + 449840820 * t19627 - 129499630 * t19629 - 174064280 * t19631 + 62128365 * t19633 + 16252990 * t19635 + 262145
            t19641 = -26816896704 * t19596 + 79726887232 * t19598 - 42954766592 * t19600 - 109490317568 * t19602 + 197381275520 * t19604 - 24452800 * t19614 + 881393984 * t19620 - 9872947456 * t19622 + 51558930176 * t19624 - 140389105792 * t19626
            t19640 = -150845043960 * t19596 + 821403174600 * t19598 - 1888472627040 * t19600 + 2381547228960 * t19602 - 1792202025360 * t19604 + 55773960 * t19614 - 2475522360 * t19620 + 34131937440 * t19622 - 224198373600 * t19624 + 821055477360 * t19626
            t19639 = 5586853480 * t19595 - 84621072 * t19613 + 1075254344 * t19621 - 1978375360 * t19623 - 21223778992 * t19625 + 121492068256 * t19627 - 271200668336 * t19629 + 301914809152 * t19631 - 159476882360 * t19633 + 23894542576 * t19635 + 798312
            t19638 = 62852101650 * t19595 + 627591900 * t19613 - 12902205270 * t19621 + 98795856720 * t19623 - 365318521020 * t19625 + 711598163880 * t19627 - 689434919100 * t19629 + 160658563920 * t19631 + 282602690730 * t19633 - 249474495780 * t19635 - 4827630
            t19619 = 2 * phi1
            t19618 = 4 * phi1
            t19617 = 5 * phi1
            t19616 = -3 * phi2
            t19615 = 3 * phi2
            tfunc[..., c] = (0.41e2 / 0.117037858816e12) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.109e3) * np.sqrt(0.11e2) * np.sqrt(0.17e2) * np.sqrt(0.19e2) * ((8684340 + 137846528820 * t19595 - 926045911560 * t19635 + 2681559189540 * t19633 - 4362942941280 * t19631 + 4354831767720 * t19629 - 2730043859760 * t19627 + 1055616264360 * t19625 - 236700371040 * t19623 + 27069087780 * t19621 - 1198438920 * t19613) * np.exp((-12*1j) * phi2) + (t19638 - t19640) * np.exp((-4*1j) * (phi1 + t19615)) + (t19639 - t19641) * np.exp((-4*1j) * (t19619 + t19615)) + (-t19646 + t19647) * np.exp((-4*1j) * (t19618 + t19615)) + (t19642 - t19645) * np.exp((-4*1j) * (t19617 + t19615)) + (t19638 + t19640) * np.exp((4*1j) * (phi1 + t19616)) + (t19639 + t19641) * np.exp((4*1j) * (t19619 + t19616)) + (t19646 + t19647) * np.exp((4*1j) * (t19618 + t19616)) + (t19642 + t19645) * np.exp((4*1j) * (t19617 + t19616)) + (t19643 - t19644) * np.exp((-12*1j) * (phi1 + phi2)) + (t19643 + t19644) * np.exp((12*1j) * (phi1 - phi2)))

        if Bindx == 449:
            t19677 = np.cos(phi)
            t19676 = t19677 ** 2
            t19685 = t19676 ** 2
            t19684 = t19677 * t19676
            t19687 = t19684 ** 2
            t19689 = t19685 ** 2
            t19686 = t19677 * t19685
            t19691 = t19686 ** 2
            t19693 = t19687 ** 2
            t19688 = t19677 * t19687
            t19695 = t19688 ** 2
            t19697 = t19689 ** 2
            t19690 = t19677 * t19689
            t19699 = t19690 ** 2
            t19701 = t19691 ** 2
            t19710 = 10844504 * t19676 - 30532612 * t19685 - 234937824 * t19687 + 1361379448 * t19689 - 2423415280 * t19691 + 1163554392 * t19693 + 1240189984 * t19695 - 1468047988 * t19697 + 306262616 * t19699 + 75195692 * t19701 - 492932
            t19657 = t19677 * t19701
            t19659 = t19677 * t19699
            t19661 = t19677 * t19697
            t19663 = t19677 * t19695
            t19665 = t19677 * t19693
            t19667 = t19677 * t19691
            t19709 = 786136780 * t19657 + 1717406504 * t19659 - 18721891716 * t19661 + 44226529248 * t19663 - 51058834728 * t19665 + 33006983152 * t19667 - 73876 * t19677 + 6883624 * t19684 - 219463332 * t19686 + 2403759072 * t19688 - 12147434728 * t19690
            t19708 = 22398480 * t19676 - 249188280 * t19685 + 833731008 * t19687 + 566671248 * t19689 - 9697363104 * t19691 + 23782943184 * t19693 - 25542259776 * t19695 + 10909883688 * t19697 + 726993168 * t19699 - 1353522456 * t19701 - 287160
            t19707 = -16001744 * t19676 + 313029816 * t19685 - 2394651072 * t19687 + 9116950128 * t19689 - 18237268192 * t19691 + 16681123888 * t19693 + 1417593408 * t19695 - 16669746984 * t19697 + 13247836976 * t19699 - 3459001832 * t19701 + 135608
            t19706 = 8544965 * t19657 + 252142198 * t19659 - 337687031 * t19661 - 1246079736 * t19663 + 3080386298 * t19665 - 2185964924 * t19667 - 779603 * t19677 + 34635766 * t19684 - 262652159 * t19686 + 622316552 * t19688 + 35137674 * t19690
            t19705 = -27178800 * t19676 + 661247400 * t19685 - 6487060800 * t19687 + 33420459600 * t19689 - 101462407200 * t19691 + 191027878800 * t19693 - 225619310400 * t19695 + 162691009800 * t19697 - 65484183600 * t19699 + 11279353800 * t19701 + 191400
            t19704 = 205079160 * t19657 + 2782766448 * t19659 - 10642524552 * t19661 + 10479982656 * t19663 + 4097251824 * t19665 - 15216361056 * t19667 + 2026200 * t19677 - 65316240 * t19684 + 808487064 * t19686 - 4443122112 * t19688 + 11991730608 * t19690
            t19703 = -5126979000 * t19657 + 23820733200 * t19659 - 39993353400 * t19661 + 20134065600 * t19663 + 23629069200 * t19665 - 42722301600 * t19667 + 2778600 * t19677 - 128713200 * t19684 + 1689263400 * t19686 - 9697089600 * t19688 + 28392526800 * t19690
            t19683 = 4 * phi1
            t19682 = 8 * phi1
            t19681 = 12 * phi1
            t19680 = 16 * phi1
            t19679 = -11 * phi2
            t19678 = 11 * phi2
            tfunc[..., c] = (0.41e2 / 0.1828716544e10*1j) * np.sqrt(0.109e3) * np.sqrt(0.31e2) * np.sqrt(0.29e2) * np.sqrt(0.2e1) * ((4680270 * t19677 + 8254436190 * t19657 - 57146096700 * t19659 + 171695704950 * t19661 - 292560557520 * t19663 + 309880676700 * t19665 - 210181565160 * t19667 + 90594426300 * t19690 - 23775771600 * t19688 + 3468080070 * t19686 - 234013500 * t19684) * np.exp((-11*1j) * phi2) + (t19703 - t19705) * np.exp((-1*1j) * (t19683 + t19678)) + (-t19707 + t19709) * np.exp((-1*1j) * (t19682 + t19678)) + (t19703 + t19705) * np.exp((1j) * (t19683 + t19679)) + (t19707 + t19709) * np.exp((1j) * (t19682 + t19679)) + (t19704 - t19708) * np.exp((-1*1j) * (t19681 + t19678)) + (t19706 + t19710) * np.exp((-1*1j) * (t19680 + t19678)) + (t19704 + t19708) * np.exp((1j) * (t19681 + t19679)) + (t19706 - t19710) * np.exp((1j) * (t19680 + t19679))) * ((1 + t19677) ** (-0.1e1 / 0.2e1)) * ((1 - t19677) ** (-0.1e1 / 0.2e1))

        if Bindx == 450:
            t19742 = np.cos(phi)
            t19741 = t19742 ** 2
            t19751 = t19741 ** 2
            t19752 = t19742 * t19751
            t19757 = t19752 ** 2
            t19767 = t19757 ** 2
            t19722 = t19742 * t19767
            t19755 = t19751 ** 2
            t19756 = t19742 * t19755
            t19765 = t19756 ** 2
            t19724 = t19742 * t19765
            t19763 = t19755 ** 2
            t19726 = t19742 * t19763
            t19750 = t19742 * t19741
            t19753 = t19750 ** 2
            t19754 = t19742 * t19753
            t19761 = t19754 ** 2
            t19728 = t19742 * t19761
            t19759 = t19753 ** 2
            t19730 = t19742 * t19759
            t19732 = t19742 * t19757
            t19778 = 91390 * t19722 + 2696708 * t19724 - 3611626 * t19726 - 13327056 * t19728 + 32945308 * t19730 - 23379304 * t19732 - 8338 * t19742 + 370436 * t19750 - 2809114 * t19752 + 6655792 * t19754 + 375804 * t19756
            t19777 = 115984 * t19741 - 326552 * t19751 - 2512704 * t19753 + 14560208 * t19755 - 25918880 * t19757 + 12444432 * t19759 + 13264064 * t19761 - 15701048 * t19763 + 3275536 * t19765 + 804232 * t19767 - 5272
            t19776 = -13107250 * t19741 - 17039425 * t19751 + 169869960 * t19753 - 159908450 * t19755 - 204473100 * t19757 + 374867350 * t19759 - 115343800 * t19761 - 66322685 * t19763 + 28835950 * t19765 + 2883595 * t19767 - 262145
            t19775 = 8399430 * t19741 - 93445605 * t19751 + 312649128 * t19753 + 212501718 * t19755 - 3636511164 * t19757 + 8918603694 * t19759 - 9578347416 * t19761 + 4091206383 * t19763 + 272622438 * t19765 - 507570921 * t19767 - 107685
            t19774 = 262145 * t19722 + 13107250 * t19724 + 17039425 * t19726 - 169869960 * t19728 + 159908450 * t19730 + 204473100 * t19732 - 2883595 * t19742 - 28835950 * t19750 + 66322685 * t19752 + 115343800 * t19754 - 374867350 * t19756
            t19773 = 76904685 * t19722 + 1043537418 * t19724 - 3990946707 * t19726 + 3929993496 * t19728 + 1536469434 * t19730 - 5706135396 * t19732 + 759825 * t19742 - 24493590 * t19750 + 303182649 * t19752 - 1666170792 * t19754 + 4496898978 * t19756
            t19772 = -113719904 * t19741 + 2224615056 * t19751 - 17018113152 * t19753 + 64791606048 * t19755 - 129607147072 * t19757 + 118548066208 * t19759 + 10074438528 * t19761 - 118467213744 * t19763 + 94148659616 * t19765 - 24582155312 * t19767 + 963728
            t19771 = 333187380 * t19741 - 8106291990 * t19751 + 79525468080 * t19753 - 409704452460 * t19755 + 1243836873720 * t19757 - 2341828132380 * t19759 + 2765887637040 * t19761 - 1994443879230 * t19763 + 802776559860 * t19765 - 138274623630 * t19767 - 2346390
            t19770 = 5586853480 * t19722 + 12205126064 * t19724 - 133051230456 * t19726 + 314305531968 * t19728 - 362860809648 * t19730 + 234571366432 * t19732 - 525016 * t19742 + 48919984 * t19750 - 1559664312 * t19752 + 17082841152 * t19754 - 86328409648 * t19756
            t19769 = 62852101650 * t19722 - 292020533820 * t19724 + 490282155090 * t19726 - 246825340560 * t19728 - 289670907420 * t19730 + 523736579160 * t19732 - 34063110 * t19742 + 1577906820 * t19750 - 20708833590 * t19752 + 118877502960 * t19754 - 348066567180 * t19756
            t19749 = 4 * phi1
            t19748 = 8 * phi1
            t19747 = 12 * phi1
            t19746 = 16 * phi1
            t19745 = 20 * phi1
            t19744 = -11 * phi2
            t19743 = 11 * phi2
            tfunc[..., c] = (0.41e2 / 0.43889197056e11*1j) * np.sqrt(0.3e1) * np.sqrt(0.109e3) * np.sqrt(0.11e2) * np.sqrt(0.17e2) * np.sqrt(0.19e2) * ((1 + t19742) ** (-0.1e1 / 0.2e1)) * ((1 - t19742) ** (-0.1e1 / 0.2e1)) * ((137846528820 * t19722 - 954322122600 * t19724 + 2867265116100 * t19726 - 4885670734560 * t19728 + 5174911362600 * t19730 - 3509967066480 * t19732 + 1512898871400 * t19756 - 397048024800 * t19754 + 57915863460 * t19752 - 3907953000 * t19750 + 78159060 * t19742) * np.exp((-11*1j) * phi2) + (t19769 - t19771) * np.exp((-1*1j) * (t19749 + t19743)) + (t19770 - t19772) * np.exp((-1*1j) * (t19748 + t19743)) + (t19769 + t19771) * np.exp((1j) * (t19749 + t19744)) + (t19770 + t19772) * np.exp((1j) * (t19748 + t19744)) + (t19773 - t19775) * np.exp((-1*1j) * (t19747 + t19743)) + (t19777 + t19778) * np.exp((-1*1j) * (t19746 + t19743)) + (t19774 + t19776) * np.exp((-1*1j) * (t19745 + t19743)) + (t19773 + t19775) * np.exp((1j) * (t19747 + t19744)) + (-t19777 + t19778) * np.exp((1j) * (t19746 + t19744)) + (t19774 - t19776) * np.exp((1j) * (t19745 + t19744)))

        if Bindx == 451:
            t19807 = np.cos(phi)
            t19806 = t19807 ** 2
            t19815 = t19806 ** 2
            t19819 = t19815 ** 2
            t19820 = t19807 * t19819
            t19829 = t19820 ** 2
            t19789 = t19807 * t19829
            t19827 = t19819 ** 2
            t19791 = t19807 * t19827
            t19814 = t19807 * t19806
            t19817 = t19814 ** 2
            t19818 = t19807 * t19817
            t19825 = t19818 ** 2
            t19793 = t19807 * t19825
            t19823 = t19817 ** 2
            t19795 = t19807 * t19823
            t19816 = t19807 * t19815
            t19821 = t19816 ** 2
            t19797 = t19807 * t19821
            t19839 = -423830264 * t19789 - 1031263112 * t19791 + 6624533344 * t19793 - 8013587296 * t19795 + 196541488 * t19797 - 2828936 * t19807 - 63210488 * t19814 + 973710496 * t19816 - 3947710624 * t19818 + 5687645392 * t19820
            t19838 = -7628944752 * t19789 + 8534946288 * t19791 + 37107107136 * t19793 - 95255409216 * t19795 + 90741272544 * t19797 + 4670832 * t19807 - 91677168 * t19814 - 333841728 * t19816 + 8568386112 * t19818 - 41646510048 * t19820
            t19837 = -19496192144 * t19789 + 71275552656 * t19791 - 93054371520 * t19793 + 37855713984 * t19795 + 25589261984 * t19797 - 6553712 * t19807 + 271260528 * t19814 - 3127662912 * t19816 + 15276326208 * t19818 - 34583335072 * t19820
            t19836 = -63574539600 * t19789 + 329197717200 * t19791 - 720543912000 * t19793 + 866932756800 * t19795 - 624227234400 * t19797 + 13477200 * t19807 - 683720400 * t19814 + 10303656000 * t19816 - 71685345600 * t19818 + 274267144800 * t19820
            t19788 = t19821 ** 2
            t19835 = 52978783 * t19788 + 55465696 * t19806 - 394943813 * t19815 + 512454800 * t19817 + 2816240570 * t19819 - 9881334320 * t19821 + 11032096790 * t19823 - 2907311440 * t19825 - 2522802227 * t19827 + 1238888464 * t19829 - 1733303
            t19834 = 4874048036 * t19788 + 29663744 * t19806 - 708544716 * t19815 + 7146549696 * t19817 - 37478733864 * t19819 + 110476510144 * t19821 - 187595587608 * t19823 + 177686490432 * t19825 - 80428992468 * t19827 + 5998828352 * t19829 - 231748
            t19833 = 1271490792 * t19788 - 96309312 * t19806 + 1480051848 * t19815 - 9166734720 * t19817 + 26164984560 * t19819 - 29605914624 * t19821 - 12123407088 * t19823 + 61770605952 * t19825 - 52997611656 * t19827 + 13301749824 * t19829 + 1094424
            t19832 = -31787269800 * t19788 - 61195200 * t19806 + 1433724600 * t19815 - 12020342400 * t19817 + 45319942800 * t19819 - 75390796800 * t19821 + 12656146800 * t19823 + 144860073600 * t19825 - 221940463800 * t19827 + 136929777600 * t19829 + 402600
            t19813 = 2 * phi1
            t19812 = 4 * phi1
            t19811 = 6 * phi1
            t19810 = 8 * phi1
            t19809 = -5 * phi2
            t19808 = 5 * phi2
            tfunc[..., c] = (0.41e2 / 0.1828716544e10) * np.sqrt(0.109e3) * np.sqrt(0.5e1) * np.sqrt(0.29e2) * ((51177504378 * t19788 - 314938488480 * t19829 + 829373485710 * t19827 - 1217194698720 * t19825 + 1085938086660 * t19823 - 602514246432 * t19821 + 204144016860 * t19819 - 39763573920 * t19817 + 3926746530 * t19815 - 149768640 * t19806 + 936054) * np.exp((-10*1j) * phi2) + (t19832 + t19836) * np.exp((-2*1j) * (t19813 + t19808)) + (t19834 - t19837) * np.exp((-2*1j) * (t19812 + t19808)) + (t19833 - t19838) * np.exp((-2*1j) * (t19811 + t19808)) + (t19835 - t19839) * np.exp((-2*1j) * (t19810 + t19808)) + (t19832 - t19836) * np.exp((2*1j) * (t19813 + t19809)) + (t19834 + t19837) * np.exp((2*1j) * (t19812 + t19809)) + (t19833 + t19838) * np.exp((2*1j) * (t19811 + t19809)) + (t19835 + t19839) * np.exp((2*1j) * (t19810 + t19809)))

        if Bindx == 452:
            t19870 = np.cos(phi)
            t19869 = t19870 ** 2
            t19878 = t19869 ** 2
            t19882 = t19878 ** 2
            t19883 = t19870 * t19882
            t19892 = t19883 ** 2
            t19852 = t19870 * t19892
            t19890 = t19882 ** 2
            t19854 = t19870 * t19890
            t19877 = t19870 * t19869
            t19880 = t19877 ** 2
            t19881 = t19870 * t19880
            t19888 = t19881 ** 2
            t19856 = t19870 * t19888
            t19886 = t19880 ** 2
            t19858 = t19870 * t19886
            t19879 = t19870 * t19878
            t19884 = t19879 ** 2
            t19860 = t19870 * t19884
            t19904 = -146224 * t19852 - 355792 * t19854 + 2285504 * t19856 - 2764736 * t19858 + 67808 * t19860 - 976 * t19870 - 21808 * t19877 + 335936 * t19879 - 1361984 * t19881 + 1962272 * t19883
            t19851 = t19884 ** 2
            t19903 = 52429 * t19851 - 52429 + 34078850 * t19886 - 34078850 * t19882 - 20971600 * t19888 + 20971600 * t19880 - 2097160 * t19869 + 2097160 * t19892 - 262145 * t19890 + 262145 * t19878
            t19902 = 18278 * t19851 + 19136 * t19869 - 136258 * t19878 + 176800 * t19880 + 971620 * t19882 - 3409120 * t19884 + 3806140 * t19886 - 1003040 * t19888 - 870382 * t19890 + 427424 * t19892 - 598
            t19901 = -92285622 * t19852 + 103245318 * t19854 + 448876296 * t19856 - 1152283176 * t19858 + 1097676684 * t19860 + 56502 * t19870 - 1108998 * t19877 - 4038408 * t19879 + 103649832 * t19881 - 503788428 * t19883
            t19900 = -40894620 * t19860 + 40894620 * t19883 + 13002392 * t19856 - 13002392 * t19879 - 3670030 * t19854 + 3670030 * t19877 + 2097160 * t19858 - 2097160 * t19881 - 524290 * t19852 + 524290 * t19870
            t19899 = 15380937 * t19851 - 1165032 * t19869 + 17903853 * t19878 - 110887920 * t19880 + 316511910 * t19882 - 358136064 * t19884 - 146654118 * t19886 + 747225072 * t19888 - 641100141 * t19890 + 160908264 * t19892 + 13239
            t19898 = -4469482784 * t19852 + 16339850016 * t19854 - 21332622720 * t19856 + 8678385024 * t19858 + 5866313024 * t19860 - 1502432 * t19870 + 62186208 * t19877 - 717013632 * t19879 + 3502082688 * t19881 - 7928195392 * t19883
            t19897 = -25140840660 * t19852 + 130182733620 * t19854 - 284942365200 * t19856 + 342832499280 * t19858 - 246853497240 * t19860 + 5329620 * t19870 - 270380340 * t19877 + 4074627600 * t19879 - 28348295760 * t19881 + 108460189080 * t19883
            t19896 = 1117370696 * t19851 + 6800384 * t19869 - 162433176 * t19878 + 1638339456 * t19880 - 8591962704 * t19882 + 25326630784 * t19884 - 43006103088 * t19886 + 40734452352 * t19888 - 18438267048 * t19890 + 1375225472 * t19892 - 53128
            t19895 = 12570420330 * t19851 + 24199920 * t19869 - 566972910 * t19878 + 4753499040 * t19880 - 17921977380 * t19882 + 29813633280 * t19884 - 5004930780 * t19886 - 57285574560 * t19888 + 87767365230 * t19890 - 54149502960 * t19892 - 159210
            t19876 = 2 * phi1
            t19875 = 4 * phi1
            t19874 = 6 * phi1
            t19873 = 8 * phi1
            t19872 = -5 * phi2
            t19871 = 5 * phi2
            tfunc[..., c] = (0.41e2 / 0.87778394112e11) * np.sqrt(0.2e1) * np.sqrt(0.5e1) * np.sqrt(0.3e1) * np.sqrt(0.109e3) * np.sqrt(0.17e2) * np.sqrt(0.19e2) * np.sqrt(0.31e2) * np.sqrt(0.11e2) * ((504252 + 27569305764 * t19851 - 169657266240 * t19892 + 446783239980 * t19890 - 655702407360 * t19888 + 584994511080 * t19886 - 324574238016 * t19884 + 109972318680 * t19882 - 21420624960 * t19880 + 2115337140 * t19878 - 80680320 * t19869) * np.exp((-10*1j) * phi2) + (-t19900 + t19903) * np.exp((-10*1j) * (t19876 + phi2)) + (t19900 + t19903) * np.exp((10*1j) * (t19876 - phi2)) + (t19895 - t19897) * np.exp((-2*1j) * (t19876 + t19871)) + (t19896 - t19898) * np.exp((-2*1j) * (t19875 + t19871)) + (t19899 - t19901) * np.exp((-2*1j) * (t19874 + t19871)) + (t19902 - t19904) * np.exp((-2*1j) * (t19873 + t19871)) + (t19895 + t19897) * np.exp((2*1j) * (t19876 + t19872)) + (t19896 + t19898) * np.exp((2*1j) * (t19875 + t19872)) + (t19899 + t19901) * np.exp((2*1j) * (t19874 + t19872)) + (t19902 + t19904) * np.exp((2*1j) * (t19873 + t19872)))

        if Bindx == 453:
            t19934 = np.cos(phi)
            t19933 = t19934 ** 2
            t19941 = t19933 ** 2
            t19940 = t19934 * t19933
            t19943 = t19940 ** 2
            t19945 = t19941 ** 2
            t19942 = t19934 * t19941
            t19947 = t19942 ** 2
            t19949 = t19943 ** 2
            t19944 = t19934 * t19943
            t19951 = t19944 ** 2
            t19953 = t19945 ** 2
            t19946 = t19934 * t19945
            t19955 = t19946 ** 2
            t19957 = t19947 ** 2
            t19966 = 15847944 * t19933 - 181960452 * t19941 + 764225888 * t19943 - 1109697576 * t19945 - 790879440 * t19947 + 4315417496 * t19949 - 5002992288 * t19951 + 2163332892 * t19953 + 467976 * t19955 - 173385108 * t19957 - 377332
            t19965 = -9826704 * t19933 + 204490056 * t19941 - 1464800448 * t19943 + 4107843792 * t19945 - 829593440 * t19947 - 22053249712 * t19949 + 55878619968 * t19951 - 63355691256 * t19953 + 35497851504 * t19955 - 7975714968 * t19957 + 71208
            t19964 = -12565168 * t19933 + 276333752 * t19941 - 2651320384 * t19943 + 12643348016 * t19945 - 32495585824 * t19947 + 45430396336 * t19949 - 30397481024 * t19951 + 2221397752 * t19953 + 8106280272 * t19955 - 3120931944 * t19957 + 128216
            t19914 = t19934 * t19957
            t19916 = t19934 * t19955
            t19918 = t19934 * t19953
            t19920 = t19934 * t19951
            t19922 = t19934 * t19949
            t19924 = t19934 * t19947
            t19963 = 24081265 * t19914 + 406788138 * t19916 - 1581713031 * t19918 + 1160331736 * t19920 + 2351380194 * t19922 - 4952533092 * t19924 - 2629203 * t19934 + 18696906 * t19940 + 105688269 * t19942 - 1174151784 * t19944 + 3644060602 * t19946
            t19962 = 37033200 * t19933 - 1002144600 * t19941 + 10673236800 * t19943 - 58611135600 * t19945 + 187562704800 * t19947 - 370144278000 * t19949 + 457093512000 * t19951 - 344275714200 * t19953 + 144674780400 * t19955 - 26007766200 * t19957 - 228600
            t19961 = 577950360 * t19914 + 3870785488 * t19916 - 22953788552 * t19918 + 42056691136 * t19920 - 34463156816 * t19922 + 9731179744 * t19924 + 3933528 * t19934 - 123879472 * t19940 + 1086591416 * t19942 - 3835863616 * t19944 + 4049556784 * t19946
            t19960 = 2215476380 * t19914 - 1295201576 * t19916 - 24680731716 * t19918 + 72831889056 * t19920 - 95634364872 * t19922 + 70687747728 * t19924 - 1728404 * t19934 + 81215576 * t19940 - 1179094356 * t19942 + 8127049632 * t19944 - 31152257448 * t19946
            t19959 = -14448759000 * t19914 + 71576929200 * t19916 - 144726953400 * t19918 + 150149467200 * t19920 - 79050558000 * t19922 + 12685140000 * t19924 + 1098600 * t19934 - 56581200 * t19940 + 772417800 * t19942 - 4062782400 * t19944 + 7160581200 * t19946
            t19939 = 4 * phi1
            t19938 = 8 * phi1
            t19937 = -9 * phi2
            t19936 = 9 * phi2
            t19935 = 16 * phi1
            tfunc[..., c] = (0.41e2 / 0.1828716544e10*1j) * np.sqrt(0.109e3) * np.sqrt(0.3e1) * np.sqrt(0.11e2) * np.sqrt(0.29e2) * np.sqrt(0.2e1) * ((23262501990 * t19914 - 149118602500 * t19916 + 412615203350 * t19918 - 643676493040 * t19920 + 620172177100 * t19922 - 380023363160 * t19924 + 146965678300 * t19946 - 34384383600 * t19944 + 4447816590 * t19942 - 265215300 * t19940 + 4680270 * t19934) * np.exp((-9*1j) * phi2) + (t19961 - t19964) * np.exp((-3*1j) * (t19939 + 3 * phi2)) + (t19959 + t19962) * np.exp((-1*1j) * (t19939 + t19936)) + (t19960 - t19965) * np.exp((-1*1j) * (t19938 + t19936)) + (t19959 - t19962) * np.exp((1j) * (t19939 + t19937)) + (t19960 + t19965) * np.exp((1j) * (t19938 + t19937)) + (t19961 + t19964) * np.exp((3*1j) * (t19939 - 3 * phi2)) + (t19963 - t19966) * np.exp((-1*1j) * (t19935 + t19936)) + (t19963 + t19966) * np.exp((1j) * (t19935 + t19937))) * ((1 + t19934) ** (-0.1e1 / 0.2e1)) * ((1 - t19934) ** (-0.1e1 / 0.2e1))

        if Bindx == 454:
            t19998 = np.cos(phi)
            t19997 = t19998 ** 2
            t20006 = t19997 ** 2
            t20005 = t19998 * t19997
            t20008 = t20005 ** 2
            t20010 = t20006 ** 2
            t20007 = t19998 * t20006
            t20012 = t20007 ** 2
            t20014 = t20008 ** 2
            t20009 = t19998 * t20008
            t20016 = t20009 ** 2
            t20018 = t20010 ** 2
            t20011 = t19998 * t20010
            t20020 = t20011 ** 2
            t20022 = t20012 ** 2
            t20033 = 60144 * t19997 - 690552 * t20006 + 2900288 * t20008 - 4211376 * t20010 - 3001440 * t20012 + 16377296 * t20014 - 18986688 * t20016 + 8209992 * t20018 + 1776 * t20020 - 658008 * t20022 - 1432
            t19978 = t19998 * t20022
            t19980 = t19998 * t20020
            t19982 = t19998 * t20018
            t19984 = t19998 * t20016
            t19986 = t19998 * t20014
            t19988 = t19998 * t20012
            t20032 = 91390 * t19978 + 1543788 * t19980 - 6002706 * t19982 + 4403536 * t19984 + 8923644 * t19986 - 18795192 * t19988 - 9978 * t19998 + 70956 * t20005 + 401094 * t20007 - 4455984 * t20009 + 13829452 * t20011
            t20031 = -7864350 * t19997 + 19660875 * t20006 + 39846040 * t20008 - 180880050 * t20010 + 204473100 * t20012 - 34078850 * t20014 - 94372200 * t20016 + 63701235 * t20018 - 7864350 * t20020 - 2359305 * t20022 - 262145
            t20030 = -1671978 * t19997 + 36770217 * t20006 - 352796664 * t20008 + 1682380986 * t20010 - 4324009404 * t20012 + 6045173706 * t20014 - 4044826104 * t20016 + 295589217 * t20018 + 1078658262 * t20020 - 415285299 * t20022 + 17061
            t20029 = 262145 * t19978 + 7864350 * t19980 - 19660875 * t19982 - 39846040 * t19984 + 180880050 * t19986 - 204473100 * t19988 + 2359305 * t19998 + 7864350 * t20005 - 63701235 * t20007 + 94372200 * t20009 + 34078850 * t20011
            t20028 = -24780384 * t19997 + 515670576 * t20006 - 3693844608 * t20008 + 10358910432 * t20010 - 2092018240 * t20012 - 55612542752 * t20014 + 140911302528 * t20016 - 159766525776 * t20018 + 89516321184 * t20020 - 20112672528 * t20022 + 179568
            t20027 = 76904685 * t19978 + 515064198 * t19980 - 3054334767 * t19982 + 5596253256 * t19984 - 4585823286 * t19986 + 1294874724 * t19988 + 523413 * t19998 - 16483962 * t20005 + 144586761 * t20007 - 510417336 * t20009 + 538852314 * t20011
            t20026 = 161094420 * t19997 - 4359329010 * t20006 + 46428580080 * t20008 - 254958439860 * t20010 + 815897765880 * t20012 - 1610127609300 * t20014 + 1988356777200 * t20016 - 1497599356770 * t20018 + 629335294740 * t20020 - 113133782970 * t20022 - 994410
            t20025 = 5586853480 * t19978 - 3266160496 * t19980 - 62238366936 * t19982 + 183663024576 * t19984 - 241164920112 * t19986 + 178256059488 * t19988 - 4358584 * t19998 + 204804496 * t20005 - 2973368376 * t20007 + 20494299072 * t20009 - 78557866608 * t20011
            t20024 = 62852101650 * t19978 - 311359642020 * t19980 + 629562247290 * t19982 - 653150182320 * t19984 + 343869927300 * t19986 - 55180359000 * t19988 - 4778910 * t19998 + 246128220 * t20005 - 3360017430 * t20007 + 17673103440 * t20009 - 31148528220 * t20011
            t20004 = 4 * phi1
            t20003 = 8 * phi1
            t20002 = -9 * phi2
            t20001 = 9 * phi2
            t20000 = 16 * phi1
            t19999 = 20 * phi1
            tfunc[..., c] = (0.41e2 / 0.14629732352e11*1j) * np.sqrt(0.109e3) * np.sqrt(0.31e2) * np.sqrt(0.19e2) * np.sqrt(0.17e2) * ((1 + t19998) ** (-0.1e1 / 0.2e1)) * ((1 - t19998) ** (-0.1e1 / 0.2e1)) * ((26356411620 * t20007 - 1571585400 * t20005 + 27733860 * t19998 + 137846528820 * t19978 - 883631595000 * t19980 + 2445032505300 * t19982 - 3814231602720 * t19984 + 3674952157800 * t19986 - 2251903148880 * t19988 + 870874019400 * t20011 - 203751424800 * t20009) * np.exp((-9*1j) * phi2) + (t20027 - t20030) * np.exp((-3*1j) * (t20004 + 3 * phi2)) + (t20024 - t20026) * np.exp((-1*1j) * (t20004 + t20001)) + (t20025 - t20028) * np.exp((-1*1j) * (t20003 + t20001)) + (t20024 + t20026) * np.exp((1j) * (t20004 + t20002)) + (t20025 + t20028) * np.exp((1j) * (t20003 + t20002)) + (t20027 + t20030) * np.exp((3*1j) * (t20004 - 3 * phi2)) + (t20032 - t20033) * np.exp((-1*1j) * (t20000 + t20001)) + (t20029 - t20031) * np.exp((-1*1j) * (t19999 + t20001)) + (t20032 + t20033) * np.exp((1j) * (t20000 + t20002)) + (t20029 + t20031) * np.exp((1j) * (t19999 + t20002)))

        if Bindx == 455:
            t20062 = np.cos(phi)
            t20061 = t20062 ** 2
            t20068 = t20061 ** 2
            t20072 = t20068 ** 2
            t20073 = t20062 * t20072
            t20082 = t20073 ** 2
            t20044 = t20062 * t20082
            t20080 = t20072 ** 2
            t20046 = t20062 * t20080
            t20067 = t20062 * t20061
            t20070 = t20067 ** 2
            t20071 = t20062 * t20070
            t20078 = t20071 ** 2
            t20048 = t20062 * t20078
            t20076 = t20070 ** 2
            t20050 = t20062 * t20076
            t20069 = t20062 * t20068
            t20074 = t20069 ** 2
            t20052 = t20062 * t20074
            t20092 = 4469482784 * t20044 - 5518996960 * t20046 - 32123154304 * t20048 + 93990694528 * t20050 - 99981630528 * t20052 - 76781792 * t20062 + 1108689952 * t20067 - 3969178496 * t20069 - 3178864000 * t20071 + 45279738816 * t20073
            t20091 = 205596208064 * t20044 - 866500617792 * t20046 + 1490443153152 * t20048 - 1335232658688 * t20050 + 653207934080 * t20052 + 6395840 * t20062 - 260106816 * t20067 + 1549821696 * t20069 + 13196262144 * t20071 - 162000362368 * t20073
            t20090 = -80450690112 * t20044 + 239180661696 * t20046 - 128864299776 * t20048 - 328470952704 * t20050 + 592143826560 * t20052 - 73358400 * t20062 + 2644181952 * t20067 - 29618842368 * t20069 + 154676790528 * t20071 - 421167317376 * t20073
            t20089 = 670422417600 * t20044 - 3324969480000 * t20046 + 6962885894400 * t20048 - 8000984928000 * t20050 + 5485007568000 * t20052 - 80289600 * t20062 + 4524945600 * t20067 - 74629881600 * t20069 + 559935648000 * t20071 - 2282111894400 * t20073
            t20043 = t20074 ** 2
            t20088 = -698356685 * t20043 + 170405450 * t20061 - 3063737161 * t20068 + 18756887032 * t20070 - 49407096362 * t20072 + 54365726844 * t20074 - 1253664490 * t20076 - 49327533064 * t20078 + 38862544663 * t20080 - 8401768118 * t20082 - 3408109
            t20087 = -16760560440 * t20043 + 253863216 * t20061 - 3225763032 * t20068 + 5935126080 * t20070 + 63671336976 * t20072 - 364476204768 * t20074 + 813602005008 * t20076 - 905744427456 * t20078 + 478430647080 * t20080 - 71683627728 * t20082 - 2394936
            t20086 = 419014011000 * t20043 + 31314000 * t20061 - 444589800 * t20068 - 4656628800 * t20070 + 104400946800 * t20072 - 663656532000 * t20074 + 2085595494000 * t20076 - 3655082280000 * t20078 + 3635816530200 * t20080 - 1921018081200 * t20082 - 184200
            t20085 = -64248815020 * t20043 - 335517928 * t20061 + 8089245636 * t20068 - 75846732000 * t20070 + 359292079848 * t20072 - 954498269296 * t20074 + 1455389683176 * t20076 - 1198381355232 * t20078 + 389479002180 * t20080 + 81052351256 * t20082 + 2298068
            t20066 = 2 * phi1
            t20065 = 3 * phi1
            t20064 = -2 * phi2
            t20063 = 2 * phi2
            tfunc[..., c] = -(0.41e2 / 0.3657433088e10) * np.sqrt(0.109e3) * np.sqrt(0.2e1) * np.sqrt(0.11e2) * ((-674612557710 * t20043 + 3840102251580 * t20082 - 9308531279670 * t20080 + 12510486517200 * t20078 - 10168276597500 * t20076 + 5114405604840 * t20074 - 1564267921020 * t20072 + 274188937680 * t20070 - 24323363190 * t20068 + 833088060 * t20061 - 4680270) * np.exp((-8*1j) * phi2) + (t20085 - t20091) * np.exp((-8*1j) * (phi1 + phi2)) + (t20088 - t20092) * np.exp((-8*1j) * (t20066 + phi2)) + (t20086 + t20089) * np.exp((-4*1j) * (phi1 + t20063)) + (t20087 + t20090) * np.exp((-4*1j) * (t20065 + t20063)) + (t20086 - t20089) * np.exp((4*1j) * (phi1 + t20064)) + (t20087 - t20090) * np.exp((4*1j) * (t20065 + t20064)) + (t20085 + t20091) * np.exp((8*1j) * (phi1 - phi2)) + (t20088 + t20092) * np.exp((8*1j) * (t20066 - phi2)))

        if Bindx == 456:
            t20123 = np.cos(phi)
            t20122 = t20123 ** 2
            t20130 = t20122 ** 2
            t20131 = t20123 * t20130
            t20136 = t20131 ** 2
            t20104 = t20136 ** 2
            t20129 = t20123 * t20122
            t20132 = t20129 ** 2
            t20134 = t20130 ** 2
            t20138 = t20132 ** 2
            t20133 = t20123 * t20132
            t20140 = t20133 ** 2
            t20142 = t20134 ** 2
            t20135 = t20123 * t20134
            t20144 = t20135 ** 2
            t20156 = 91390 * t20104 - 22300 * t20122 + 400934 * t20130 - 2454608 * t20132 + 6465628 * t20134 - 7114536 * t20136 + 164060 * t20138 + 6455216 * t20140 - 5085722 * t20142 + 1099492 * t20144 + 446
            t20105 = t20123 * t20144
            t20107 = t20123 * t20142
            t20109 = t20123 * t20140
            t20111 = t20123 * t20138
            t20113 = t20123 * t20136
            t20155 = -584896 * t20105 + 722240 * t20107 + 4203776 * t20109 - 12300032 * t20111 + 13084032 * t20113 + 10048 * t20123 - 145088 * t20129 + 519424 * t20131 + 416000 * t20133 - 5925504 * t20135
            t20154 = 41943200 * t20109 - 92275040 * t20111 + 54526160 * t20113 + 41943200 * t20131 - 92275040 * t20133 + 54526160 * t20135 - 2097160 * t20105 - 2097160 * t20107 - 2097160 * t20123 - 2097160 * t20129
            t20153 = -369142488 * t20105 + 1097464104 * t20107 - 591285024 * t20109 - 1507166496 * t20111 + 2717011440 * t20113 - 336600 * t20123 + 12132648 * t20129 - 135904032 * t20131 + 709723872 * t20133 - 1932497424 * t20135
            t20152 = 262145 * t20104 + 5767190 * t20122 - 21758035 * t20130 + 88605010 * t20134 - 149946940 * t20136 + 88605010 * t20138 - 21758035 * t20142 + 5767190 * t20144 + 262145 + 2097160 * t20132 + 2097160 * t20140
            t20151 = 76904685 * t20104 - 1164834 * t20122 + 14801193 * t20130 - 27232920 * t20132 - 292151574 * t20134 + 1672374132 * t20136 - 3733157142 * t20138 + 4155946344 * t20140 - 2195246295 * t20142 + 328915422 * t20144 + 10989
            t20150 = -17877931136 * t20105 + 75347879808 * t20107 - 129603752448 * t20109 + 116107187712 * t20111 - 56800689920 * t20113 - 556160 * t20123 + 22617984 * t20129 - 134767104 * t20131 - 1147501056 * t20133 + 14086988032 * t20135
            t20149 = -100563362640 * t20105 + 498745422000 * t20107 - 1044432884160 * t20109 + 1200147739200 * t20111 - 822751135200 * t20113 + 12043440 * t20123 - 678741840 * t20129 + 11194482240 * t20131 - 83990347200 * t20133 + 342316784160 * t20135
            t20148 = 62852101650 * t20104 + 4697100 * t20122 - 66688470 * t20130 - 698494320 * t20132 + 15660142020 * t20134 - 99548479800 * t20136 + 312839324100 * t20138 - 548262342000 * t20140 + 545372479530 * t20142 - 288152712180 * t20144 - 27630
            t20147 = 5586853480 * t20104 + 29175472 * t20122 - 703412664 * t20130 + 6595368000 * t20132 - 31242789552 * t20134 + 82999849504 * t20136 - 126555624624 * t20138 + 104207074368 * t20140 - 33867739320 * t20142 - 7048030544 * t20144 - 199832
            t20128 = 2 * phi1
            t20127 = 3 * phi1
            t20126 = 5 * phi1
            t20125 = -2 * phi2
            t20124 = 2 * phi2
            tfunc[..., c] = (0.41e2 / 0.87778394112e11) * np.sqrt(0.3e1) * np.sqrt(0.109e3) * np.sqrt(0.31e2) * np.sqrt(0.17e2) * np.sqrt(0.19e2) * np.sqrt(0.29e2) * ((956340 + 137846528820 * t20104 - 784664856360 * t20144 + 1902052831140 * t20142 - 2556322322400 * t20140 + 2077728345000 * t20138 - 1045048823280 * t20136 + 319633692840 * t20134 - 56026222560 * t20132 + 4970098980 * t20130 - 170228520 * t20122) * np.exp((-8*1j) * phi2) + (t20147 - t20150) * np.exp((-8*1j) * (phi1 + phi2)) + (-t20155 + t20156) * np.exp((-8*1j) * (t20128 + phi2)) + (t20148 - t20149) * np.exp((-4*1j) * (phi1 + t20124)) + (t20151 - t20153) * np.exp((-4*1j) * (t20127 + t20124)) + (t20152 - t20154) * np.exp((-4*1j) * (t20126 + t20124)) + (t20148 + t20149) * np.exp((4*1j) * (phi1 + t20125)) + (t20151 + t20153) * np.exp((4*1j) * (t20127 + t20125)) + (t20152 + t20154) * np.exp((4*1j) * (t20126 + t20125)) + (t20147 + t20150) * np.exp((8*1j) * (phi1 - phi2)) + (t20155 + t20156) * np.exp((8*1j) * (t20128 - phi2)))

        if Bindx == 457:
            t20186 = np.cos(phi)
            t20185 = t20186 ** 2
            t20194 = t20185 ** 2
            t20193 = t20186 * t20185
            t20196 = t20193 ** 2
            t20198 = t20194 ** 2
            t20195 = t20186 * t20194
            t20200 = t20195 ** 2
            t20202 = t20196 ** 2
            t20197 = t20186 * t20196
            t20204 = t20197 ** 2
            t20206 = t20198 ** 2
            t20199 = t20186 * t20198
            t20208 = t20199 ** 2
            t20210 = t20200 ** 2
            t20219 = 3545656 * t20185 + 46643716 * t20194 - 743854176 * t20196 + 3422291624 * t20198 - 7525838256 * t20200 + 8630738024 * t20202 - 4578053216 * t20204 + 63760676 * t20206 + 981657656 * t20208 - 300830572 * t20210 - 61132
            t20218 = -5072144 * t20185 + 148636488 * t20194 - 1865384640 * t20196 + 12445834704 * t20198 - 48283735136 * t20200 + 113769485648 * t20202 - 164790065856 * t20204 + 143204766600 * t20206 - 68462704912 * t20208 + 13838206312 * t20210 + 32936
            t20217 = -31975632 * t20185 + 593102664 * t20194 - 4228032960 * t20196 + 14688466128 * t20198 - 25548659424 * t20200 + 15817667664 * t20202 + 16219801152 * t20204 - 35085488760 * t20206 + 22989788976 * t20208 - 5414950296 * t20210 + 280488
            t20166 = t20186 * t20210
            t20168 = t20186 * t20208
            t20170 = t20186 * t20206
            t20172 = t20186 * t20204
            t20174 = t20186 * t20202
            t20176 = t20186 * t20200
            t20216 = 53719745 * t20166 + 365294266 * t20168 - 2735244359 * t20170 + 6101584920 * t20172 - 5959789246 * t20174 + 1665052284 * t20176 + 4386221 * t20186 - 87082534 * t20193 + 584651165 * t20195 - 1667558696 * t20197 + 1674986234 * t20199
            t20215 = 39622800 * t20185 - 1166764200 * t20194 + 13382174400 * t20196 - 78352851600 * t20198 + 265044943200 * t20200 - 549136170000 * t20202 + 708361656000 * t20204 - 555295578600 * t20206 + 242247776400 * t20208 - 45124585800 * t20210 - 222600
            t20214 = 1289273880 * t20166 + 1547128656 * t20168 - 27204595848 * t20170 + 71524440000 * t20172 - 90368443728 * t20174 + 64366817760 * t20176 - 970920 * t20186 + 44748624 * t20193 - 772269768 * t20195 + 6270330816 * t20197 - 26696459472 * t20199
            t20213 = 4942216540 * t20166 - 13838206312 * t20168 - 2627881284 * t20170 + 56792606112 * t20172 - 96712283976 * t20174 + 80824125200 * t20176 - 2034580 * t20186 + 103826968 * t20193 - 1550961300 * t20195 + 10523683488 * t20197 - 38455090856 * t20199
            t20212 = -32231847000 * t20166 + 167605604400 * t20168 - 371257692600 * t20170 + 457242907200 * t20172 - 343096158000 * t20174 + 161848884000 * t20176 - 706200 * t20186 + 43978800 * t20193 - 882209400 * t20195 + 8626766400 * t20197 - 47899527600 * t20199
            t20192 = 4 * phi1
            t20191 = 8 * phi1
            t20190 = -7 * phi2
            t20189 = 7 * phi2
            t20188 = 12 * phi1
            t20187 = 16 * phi1
            tfunc[..., c] = (0.41e2 / 0.1828716544e10*1j) * np.sqrt(0.7e1) * np.sqrt(0.109e3) * np.sqrt(0.13e2) * np.sqrt(0.11e2) * np.sqrt(0.2e1) * ((51893273670 * t20166 - 311359642020 * t20168 + 803644481430 * t20170 - 1165294516080 * t20172 + 1039869074700 * t20174 - 588128077080 * t20176 + 209264677980 * t20199 - 44925243120 * t20197 + 5321466990 * t20195 - 290176740 * t20193 + 4680270 * t20186) * np.exp((-7*1j) * phi2) + (t20212 + t20215) * np.exp((-1*1j) * (t20192 + t20189)) + (t20213 + t20218) * np.exp((-1*1j) * (t20191 + t20189)) + (t20212 - t20215) * np.exp((1j) * (t20192 + t20190)) + (t20213 - t20218) * np.exp((1j) * (t20191 + t20190)) + (t20214 - t20217) * np.exp((-1*1j) * (t20188 + t20189)) + (t20216 - t20219) * np.exp((-1*1j) * (t20187 + t20189)) + (t20214 + t20217) * np.exp((1j) * (t20188 + t20190)) + (t20216 + t20219) * np.exp((1j) * (t20187 + t20190))) * ((1 + t20186) ** (-0.1e1 / 0.2e1)) * ((1 - t20186) ** (-0.1e1 / 0.2e1))

        if Bindx == 458:
            t20251 = np.cos(phi)
            t20250 = t20251 ** 2
            t20260 = t20250 ** 2
            t20259 = t20251 * t20250
            t20262 = t20259 ** 2
            t20264 = t20260 ** 2
            t20261 = t20251 * t20260
            t20266 = t20261 ** 2
            t20268 = t20262 ** 2
            t20263 = t20251 * t20262
            t20270 = t20263 ** 2
            t20272 = t20264 ** 2
            t20265 = t20251 * t20264
            t20274 = t20265 ** 2
            t20276 = t20266 ** 2
            t20287 = 464 * t20250 + 6104 * t20260 - 97344 * t20262 + 447856 * t20264 - 984864 * t20266 + 1129456 * t20268 - 599104 * t20270 + 8344 * t20272 + 128464 * t20274 - 39368 * t20276 - 8
            t20231 = t20251 * t20276
            t20233 = t20251 * t20274
            t20235 = t20251 * t20272
            t20237 = t20251 * t20270
            t20239 = t20251 * t20268
            t20241 = t20251 * t20266
            t20286 = 7030 * t20231 + 47804 * t20233 - 357946 * t20235 + 798480 * t20237 - 779924 * t20239 + 217896 * t20241 + 574 * t20251 - 11396 * t20259 + 76510 * t20261 - 218224 * t20263 + 219196 * t20265
            t20285 = -282310 * t20250 + 1835015 * t20260 - 3387720 * t20262 + 282310 * t20264 + 7340060 * t20266 - 11010090 * t20268 + 6936760 * t20270 - 1552705 * t20272 - 282310 * t20274 + 141155 * t20276 - 20165
            t20284 = 20165 * t20231 + 282310 * t20233 - 1835015 * t20235 + 3387720 * t20237 - 282310 * t20239 - 7340060 * t20241 - 141155 * t20251 + 282310 * t20259 + 1552705 * t20261 - 6936760 * t20263 + 11010090 * t20265
            t20283 = -146718 * t20250 + 2721411 * t20260 - 19400040 * t20262 + 67397022 * t20264 - 117228276 * t20266 + 72578286 * t20268 + 74423448 * t20270 - 160987365 * t20272 + 105487074 * t20274 - 24846129 * t20276 + 1287
            t20282 = 5915745 * t20231 + 7098894 * t20233 - 124826427 * t20235 + 328185000 * t20237 - 414649422 * t20239 + 295342740 * t20241 - 4455 * t20251 + 205326 * t20259 - 3543507 * t20261 + 28770984 * t20263 - 122494878 * t20265
            t20281 = -441056 * t20250 + 12924912 * t20260 - 162207360 * t20262 + 1082246496 * t20264 - 4198585664 * t20266 + 9892998752 * t20268 - 14329570944 * t20270 + 12452588400 * t20272 - 5953278688 * t20274 + 1203322288 * t20276 + 2864
            t20280 = -5943420 * t20250 + 175014630 * t20260 - 2007326160 * t20262 + 11752927740 * t20264 - 39756741480 * t20266 + 82370425500 * t20268 - 106254248400 * t20270 + 83294336790 * t20272 - 36337166460 * t20274 + 6768687870 * t20276 + 33390
            t20279 = 429757960 * t20231 - 1203322288 * t20233 - 228511416 * t20235 + 4938487488 * t20237 - 8409763824 * t20239 + 7028184800 * t20241 - 176920 * t20251 + 9028432 * t20259 - 134866200 * t20261 + 915102912 * t20263 - 3343920944 * t20265
            t20278 = 4834777050 * t20231 - 25140840660 * t20233 + 55688653890 * t20235 - 68586436080 * t20237 + 51464423700 * t20239 - 24277332600 * t20241 + 105930 * t20251 - 6596820 * t20259 + 132331410 * t20261 - 1294014960 * t20263 + 7184929140 * t20265
            t20258 = 4 * phi1
            t20257 = 8 * phi1
            t20256 = -7 * phi2
            t20255 = 7 * phi2
            t20254 = 12 * phi1
            t20253 = 16 * phi1
            t20252 = 20 * phi1
            tfunc[..., c] = (0.41e2 / 0.43889197056e11*1j) * np.sqrt(0.3e1) * np.sqrt(0.13e2) * np.sqrt(0.109e3) * np.sqrt(0.7e1) * np.sqrt(0.31e2) * np.sqrt(0.29e2) * np.sqrt(0.19e2) * np.sqrt(0.17e2) * ((1 + t20251) ** (-0.1e1 / 0.2e1)) * ((1 - t20251) ** (-0.1e1 / 0.2e1)) * ((1087358580 * t20261 - 59293080 * t20259 + 956340 * t20251 + 10603579140 * t20231 - 63621474840 * t20233 + 164212185060 * t20235 - 238109715360 * t20237 + 212480987400 * t20239 - 120174777360 * t20241 + 42759965160 * t20265 - 9179771040 * t20263) * np.exp((-7*1j) * phi2) + (t20278 + t20280) * np.exp((-1*1j) * (t20258 + t20255)) + (t20279 + t20281) * np.exp((-1*1j) * (t20257 + t20255)) + (t20278 - t20280) * np.exp((1j) * (t20258 + t20256)) + (t20279 - t20281) * np.exp((1j) * (t20257 + t20256)) + (t20282 - t20283) * np.exp((-1*1j) * (t20254 + t20255)) + (t20286 - t20287) * np.exp((-1*1j) * (t20253 + t20255)) + (t20284 + t20285) * np.exp((-1*1j) * (t20252 + t20255)) + (t20282 + t20283) * np.exp((1j) * (t20254 + t20256)) + (t20286 + t20287) * np.exp((1j) * (t20253 + t20256)) + (t20284 - t20285) * np.exp((1j) * (t20252 + t20256)))

        if Bindx == 459:
            t20316 = np.cos(phi)
            t20315 = t20316 ** 2
            t20323 = t20315 ** 2
            t20327 = t20323 ** 2
            t20328 = t20316 * t20327
            t20337 = t20328 ** 2
            t20298 = t20316 * t20337
            t20335 = t20327 ** 2
            t20300 = t20316 * t20335
            t20322 = t20316 * t20315
            t20325 = t20322 ** 2
            t20326 = t20316 * t20325
            t20333 = t20326 ** 2
            t20302 = t20316 * t20333
            t20331 = t20325 ** 2
            t20304 = t20316 * t20331
            t20324 = t20316 * t20323
            t20329 = t20324 ** 2
            t20306 = t20316 * t20329
            t20347 = -773564328 * t20298 + 3162113832 * t20300 - 3507998688 * t20302 - 2947540512 * t20304 + 10840170768 * t20306 - 6969048 * t20316 + 165423192 * t20322 - 1421685792 * t20324 + 5576705568 * t20326 - 11086654992 * t20328
            t20346 = -13924157904 * t20298 + 61478007120 * t20300 - 106538893376 * t20302 + 87245231424 * t20304 - 26841493344 * t20306 - 5998128 * t20316 + 226361008 * t20322 - 2221637568 * t20324 + 8111712960 * t20326 - 7529132192 * t20328
            t20345 = -35583959088 * t20298 + 165434195760 * t20300 - 323883204672 * t20302 + 347385509952 * t20304 - 222460038432 * t20306 + 2957616 * t20316 - 159902256 * t20322 + 2627471424 * t20324 - 20277057600 * t20326 + 86914027296 * t20328
            t20344 = 116034649200 * t20298 - 555744898800 * t20300 + 1121136427200 * t20302 - 1236973656000 * t20304 + 810707412000 * t20306 - 8639600 * t20316 + 525596400 * t20322 - 9300164800 * t20324 + 74355595200 * t20326 - 320732320800 * t20328
            t20297 = t20329 ** 2
            t20343 = 161159235 * t20297 - 38146368 * t20315 + 290820207 * t20323 - 398336112 * t20325 - 2398727982 * t20327 + 10223960208 * t20329 - 16873257282 * t20331 + 14016589488 * t20333 - 5500366983 * t20335 + 515709552 * t20337 + 596037
            t20342 = 14826649620 * t20297 + 31486080 * t20315 - 801864732 * t20323 + 7620722112 * t20325 - 34972280712 * t20327 + 84985703616 * t20329 - 106249178040 * t20331 + 46095484224 * t20333 + 35908753404 * t20335 - 47445278784 * t20337 - 196788
            t20341 = 3867821640 * t20297 + 57823680 * t20315 - 1206767256 * t20323 + 10251419264 * t20325 - 45086806224 * t20327 + 112142727168 * t20329 - 161061459760 * t20331 + 127297364352 * t20333 - 44198802792 * t20335 - 2062838208 * t20337 - 481864
            t20340 = -96695541000 * t20297 + 32641600 * t20315 - 1020015400 * t20323 + 12715580800 * t20325 - 82468321200 * t20327 + 312977280000 * t20329 - 732381138000 * t20331 + 1068831888000 * t20333 - 946130794200 * t20335 + 464138596800 * t20337 - 177400
            t20321 = 2 * phi1
            t20320 = 4 * phi1
            t20319 = 8 * phi1
            t20318 = -3 * phi2
            t20317 = 3 * phi2
            tfunc[..., c] = (0.41e2 / 0.1828716544e10) * np.sqrt(0.109e3) * np.sqrt(0.13e2) * np.sqrt(0.3e1) * np.sqrt(0.11e2) * ((155679821010 * t20297 - 830292378720 * t20337 + 1880780540310 * t20335 - 2356235128800 * t20333 + 1781201555700 * t20331 - 831740142240 * t20329 + 235857526380 * t20327 - 38299169440 * t20325 + 3146701530 * t20323 - 99845760 * t20315 + 520030) * np.exp((-6*1j) * phi2) + (t20341 - t20346) * np.exp((-6*1j) * (t20321 + phi2)) + (t20340 - t20344) * np.exp((-2*1j) * (t20321 + t20317)) + (t20342 - t20345) * np.exp((-2*1j) * (t20320 + t20317)) + (t20343 - t20347) * np.exp((-2*1j) * (t20319 + t20317)) + (t20340 + t20344) * np.exp((2*1j) * (t20321 + t20318)) + (t20342 + t20345) * np.exp((2*1j) * (t20320 + t20318)) + (t20343 + t20347) * np.exp((2*1j) * (t20319 + t20318)) + (t20341 + t20346) * np.exp((6*1j) * (t20321 - phi2)))

        if Bindx == 460:
            t20378 = np.cos(phi)
            t20377 = t20378 ** 2
            t20386 = t20377 ** 2
            t20387 = t20378 * t20386
            t20392 = t20387 ** 2
            t20359 = t20392 ** 2
            t20385 = t20378 * t20377
            t20388 = t20385 ** 2
            t20390 = t20386 ** 2
            t20394 = t20388 ** 2
            t20389 = t20378 * t20388
            t20396 = t20389 ** 2
            t20398 = t20390 ** 2
            t20391 = t20378 * t20390
            t20400 = t20391 ** 2
            t20412 = 7030 * t20359 - 1664 * t20377 + 12686 * t20386 - 17376 * t20388 - 104636 * t20390 + 445984 * t20392 - 736036 * t20394 + 611424 * t20396 - 239934 * t20398 + 22496 * t20400 + 26
            t20360 = t20378 * t20400
            t20362 = t20378 * t20398
            t20364 = t20378 * t20396
            t20366 = t20378 * t20394
            t20368 = t20378 * t20392
            t20411 = 33744 * t20360 - 137936 * t20362 + 153024 * t20364 + 128576 * t20366 - 472864 * t20368 + 304 * t20378 - 7216 * t20385 + 62016 * t20387 - 243264 * t20389 + 483616 * t20391
            t20410 = 20165 * t20359 - 20165 - 3670030 * t20394 + 3670030 * t20390 + 3549040 * t20396 - 3549040 * t20388 - 1391385 * t20398 + 1391385 * t20386 - 161320 * t20377 + 161320 * t20400
            t20409 = -21296682 * t20360 + 94029210 * t20362 - 162948808 * t20364 + 133439592 * t20366 - 41053452 * t20368 - 9174 * t20378 + 346214 * t20385 - 3397944 * t20387 + 12406680 * t20389 - 11515636 * t20391
            t20408 = 7340060 * t20368 - 7340060 * t20391 - 3387720 * t20366 + 3387720 * t20389 + 443630 * t20362 - 443630 * t20385 + 161320 * t20364 - 161320 * t20387 - 120990 * t20360 + 120990 * t20378
            t20407 = 5915745 * t20359 + 88440 * t20377 - 1845723 * t20386 + 15679312 * t20388 - 68959242 * t20390 + 171519744 * t20392 - 246339830 * t20394 + 194698416 * t20396 - 67601061 * t20398 - 3155064 * t20400 - 737
            t20406 = -1031419104 * t20360 + 4795194080 * t20362 - 9387918976 * t20364 + 10069145216 * t20366 - 6448117056 * t20368 + 85728 * t20378 - 4634848 * t20385 + 76158592 * t20387 - 587740800 * t20389 + 2519247168 * t20391
            t20405 = -5801732460 * t20360 + 27787244940 * t20362 - 56056821360 * t20364 + 61848682800 * t20366 - 40535370600 * t20368 + 431980 * t20378 - 26279820 * t20385 + 465008240 * t20387 - 3717779760 * t20389 + 16036616040 * t20391
            t20404 = 429757960 * t20359 + 912640 * t20377 - 23242456 * t20386 + 220890496 * t20388 - 1013689296 * t20390 + 2463353728 * t20392 - 3079686320 * t20394 + 1336100992 * t20396 + 1040833432 * t20398 - 1375225472 * t20400 - 5704
            t20403 = 4834777050 * t20359 - 1632080 * t20377 + 51000770 * t20386 - 635779040 * t20388 + 4123416060 * t20390 - 15648864000 * t20392 + 36619056900 * t20394 - 53441594400 * t20396 + 47306539710 * t20398 - 23206929840 * t20400 + 8870
            t20384 = 2 * phi1
            t20383 = 4 * phi1
            t20382 = 8 * phi1
            t20381 = -3 * phi2
            t20380 = 3 * phi2
            t20379 = 10 * phi1
            tfunc[..., c] = (0.123e3 / 0.29259464704e11) * np.sqrt(0.2e1) * np.sqrt(0.13e2) * np.sqrt(0.109e3) * np.sqrt(0.31e2) * np.sqrt(0.17e2) * np.sqrt(0.19e2) * np.sqrt(0.29e2) * ((35420 + 10603579140 * t20359 - 56552422080 * t20400 + 128102699340 * t20398 - 160486603200 * t20396 + 121320229800 * t20394 - 56651031360 * t20392 + 16064599320 * t20390 - 2608612160 * t20388 + 214326420 * t20386 - 6800640 * t20377) * np.exp((-6*1j) * phi2) + (-t20408 + t20410) * np.exp((-2*1j) * (t20379 + t20380)) + (t20408 + t20410) * np.exp((2*1j) * (t20379 + t20381)) + (t20407 - t20409) * np.exp((-6*1j) * (t20384 + phi2)) + (t20403 - t20405) * np.exp((-2*1j) * (t20384 + t20380)) + (t20404 - t20406) * np.exp((-2*1j) * (t20383 + t20380)) + (t20411 + t20412) * np.exp((-2*1j) * (t20382 + t20380)) + (t20403 + t20405) * np.exp((2*1j) * (t20384 + t20381)) + (t20404 + t20406) * np.exp((2*1j) * (t20383 + t20381)) + (-t20411 + t20412) * np.exp((2*1j) * (t20382 + t20381)) + (t20407 + t20409) * np.exp((6*1j) * (t20384 - phi2)))

        if Bindx == 461:
            t20442 = np.cos(phi)
            t20441 = t20442 ** 2
            t20450 = t20441 ** 2
            t20449 = t20442 * t20441
            t20452 = t20449 ** 2
            t20454 = t20450 ** 2
            t20451 = t20442 * t20450
            t20456 = t20451 ** 2
            t20458 = t20452 ** 2
            t20453 = t20442 * t20452
            t20460 = t20453 ** 2
            t20462 = t20454 ** 2
            t20455 = t20442 * t20454
            t20464 = t20455 ** 2
            t20466 = t20456 ** 2
            t20475 = -2718576 * t20441 - 133577016 * t20450 + 4179702720 * t20452 - 36782721648 * t20454 + 152803216992 * t20456 - 352323091248 * t20458 + 478331116992 * t20460 - 381282851544 * t20462 + 165379910544 * t20464 - 30169008792 * t20466 + 21576
            t20474 = -115539480 * t20441 + 1325036100 * t20450 - 6104886048 * t20452 + 13389741960 * t20454 - 12195834000 * t20456 - 4737118680 * t20458 + 22088214240 * t20460 - 21542977932 * t20462 + 9567769320 * t20464 - 1676056044 * t20466 + 1650564
            t20473 = 75229872 * t20441 - 2099139528 * t20450 + 23180736576 * t20452 - 132560624016 * t20454 + 443065646112 * t20456 - 914782570704 * t20458 + 1182733663296 * t20460 - 932665859880 * t20462 + 410151949488 * t20464 - 77098578024 * t20466 - 453192
            t20422 = t20442 * t20466
            t20424 = t20442 * t20464
            t20426 = t20442 * t20462
            t20428 = t20442 * t20460
            t20430 = t20442 * t20458
            t20432 = t20442 * t20456
            t20472 = 419014011 * t20422 - 322318470 * t20424 - 7969702425 * t20426 + 31220968248 * t20428 - 54711153210 * t20430 + 53950518300 * t20432 - 3163581 * t20442 + 117831930 * t20449 - 1744875393 * t20451 + 10363707960 * t20453 - 31320827370 * t20455
            t20471 = -150670000 * t20441 + 4715113000 * t20450 - 57192865600 * t20452 + 352334034000 * t20454 - 1247685722400 * t20456 + 2693315898000 * t20458 - 3604421832000 * t20460 + 2920700507400 * t20462 - 1313023662000 * t20464 + 251408406600 * t20466 + 793000
            t20470 = 38549289012 * t20422 - 171989135592 * t20424 + 296748115908 * t20426 - 224369600736 * t20428 + 22126209576 * t20430 + 85508108688 * t20432 - 4049196 * t20442 + 218012952 * t20449 - 3272320860 * t20451 + 20901045024 * t20453 - 64415674776 * t20455
            t20469 = 10056336264 * t20422 - 29395444464 * t20424 - 19750648824 * t20426 + 197466141120 * t20428 - 363432659952 * t20430 + 340492323168 * t20432 - 19051608 * t20442 + 800599056 * t20449 - 10023583896 * t20451 + 58105203648 * t20453 - 184299214512 * t20455
            t20468 = -251408406600 * t20422 + 1353737574000 * t20424 - 3139235181000 * t20426 + 4099927617600 * t20428 - 3309440154000 * t20430 + 1703903978400 * t20432 - 10090600 * t20442 + 644358000 * t20449 - 12369429800 * t20451 + 110975592000 * t20453 - 556725858000 * t20455
            t20448 = 4 * phi1
            t20447 = 8 * phi1
            t20446 = -5 * phi2
            t20445 = 5 * phi2
            t20444 = 12 * phi1
            t20443 = 16 * phi1
            tfunc[..., c] = (0.41e2 / 0.1828716544e10*1j) * np.sqrt(0.109e3) * np.sqrt(0.5e1) * np.sqrt(0.11e2) * np.sqrt(0.2e1) * ((404767534626 * t20422 - 2304061350948 * t20424 + 5632243470378 * t20426 - 7721719122096 * t20428 + 6504891980580 * t20430 - 3468226094424 * t20432 + 1161940679172 * t20455 - 234645024432 * t20453 + 26126203194 * t20451 - 1338557220 * t20449 + 20281170 * t20442) * np.exp((-5*1j) * phi2) + (t20468 - t20471) * np.exp((-1*1j) * (t20448 + t20445)) + (t20470 - t20473) * np.exp((-1*1j) * (t20447 + t20445)) + (t20468 + t20471) * np.exp((1j) * (t20448 + t20446)) + (t20470 + t20473) * np.exp((1j) * (t20447 + t20446)) + (t20469 - t20475) * np.exp((-1*1j) * (t20444 + t20445)) + (t20472 - t20474) * np.exp((-1*1j) * (t20443 + t20445)) + (t20469 + t20475) * np.exp((1j) * (t20444 + t20446)) + (t20472 + t20474) * np.exp((1j) * (t20443 + t20446))) * ((1 + t20442) ** (-0.1e1 / 0.2e1)) * ((1 - t20442) ** (-0.1e1 / 0.2e1))

        if Bindx == 462:
            t20507 = np.cos(phi)
            t20506 = t20507 ** 2
            t20515 = t20506 ** 2
            t20516 = t20507 * t20515
            t20521 = t20516 ** 2
            t20531 = t20521 ** 2
            t20487 = t20507 * t20531
            t20519 = t20515 ** 2
            t20520 = t20507 * t20519
            t20529 = t20520 ** 2
            t20489 = t20507 * t20529
            t20527 = t20519 ** 2
            t20491 = t20507 * t20527
            t20514 = t20507 * t20506
            t20517 = t20514 ** 2
            t20518 = t20507 * t20517
            t20525 = t20518 ** 2
            t20493 = t20507 * t20525
            t20523 = t20517 ** 2
            t20495 = t20507 * t20523
            t20497 = t20507 * t20521
            t20542 = 18278 * t20487 - 14060 * t20489 - 347650 * t20491 + 1361904 * t20493 - 2386580 * t20495 + 2353400 * t20497 - 138 * t20507 + 5140 * t20514 - 76114 * t20516 + 452080 * t20518 - 1366260 * t20520
            t20541 = 5040 * t20506 - 57800 * t20515 + 266304 * t20517 - 584080 * t20519 + 532000 * t20521 + 206640 * t20523 - 963520 * t20525 + 939736 * t20527 - 417360 * t20529 + 73112 * t20531 - 72
            t20540 = 4158 * t20506 + 204303 * t20515 - 6392760 * t20517 + 56258334 * t20519 - 233709036 * t20521 + 538870134 * t20523 - 731596536 * t20525 + 583163427 * t20527 - 252944802 * t20529 + 46142811 * t20531 - 33
            t20539 = -104858 * t20506 + 2464163 * t20515 - 9646936 * t20517 + 18350150 * t20519 - 19084156 * t20521 + 9542078 * t20523 + 419432 * t20525 - 3198169 * t20527 + 1572870 * t20529 - 262145 * t20531 - 52429
            t20538 = 52429 * t20487 + 104858 * t20489 - 2464163 * t20491 + 9646936 * t20493 - 18350150 * t20495 + 19084156 * t20497 + 262145 * t20507 - 1572870 * t20514 + 3198169 * t20516 - 419432 * t20518 - 9542078 * t20520
            t20537 = 15380937 * t20487 - 44959662 * t20489 - 30208167 * t20491 + 302019960 * t20493 - 555861966 * t20495 + 520775244 * t20497 - 29139 * t20507 + 1224498 * t20514 - 15330843 * t20516 + 88870584 * t20518 - 281881446 * t20520
            t20536 = 2180576 * t20506 - 60844624 * t20515 + 671905408 * t20517 - 3842336928 * t20519 + 12842482496 * t20521 - 26515436832 * t20523 + 34282135168 * t20525 - 27033793040 * t20527 + 11888462304 * t20529 - 2234741392 * t20531 - 13136
            t20535 = -7533500 * t20506 + 235755650 * t20515 - 2859643280 * t20517 + 17616701700 * t20519 - 62384286120 * t20521 + 134665794900 * t20523 - 180221091600 * t20525 + 146035025370 * t20527 - 65651183100 * t20529 + 12570420330 * t20531 + 39650
            t20534 = 1117370696 * t20487 - 4985192336 * t20489 + 8601394664 * t20491 - 6503466688 * t20493 + 641339408 * t20495 + 2478495904 * t20497 - 117368 * t20507 + 6319216 * t20514 - 94849880 * t20516 + 605827392 * t20518 - 1867121008 * t20520
            t20533 = 12570420330 * t20487 - 67686878700 * t20489 + 156961759050 * t20491 - 204996380880 * t20493 + 165472007700 * t20495 - 85195198920 * t20497 + 504530 * t20507 - 32217900 * t20514 + 618471490 * t20516 - 5548779600 * t20518 + 27836292900 * t20520
            t20513 = 4 * phi1
            t20512 = 8 * phi1
            t20511 = -5 * phi2
            t20510 = 5 * phi2
            t20509 = 12 * phi1
            t20508 = 16 * phi1
            tfunc[..., c] = (0.41e2 / 0.14629732352e11*1j) * np.sqrt(0.5e1) * np.sqrt(0.3e1) * np.sqrt(0.109e3) * np.sqrt(0.17e2) * np.sqrt(0.19e2) * np.sqrt(0.31e2) * np.sqrt(0.29e2) * ((1 + t20507) ** (-0.1e1 / 0.2e1)) * ((1 - t20507) ** (-0.1e1 / 0.2e1)) * ((27569305764 * t20487 - 156932971272 * t20489 + 383620298292 * t20491 - 525937525344 * t20493 + 443057658120 * t20495 - 236225925936 * t20497 + 79141470408 * t20520 - 15982014048 * t20518 + 1779493716 * t20516 - 91171080 * t20514 + 1381380 * t20507) * np.exp((-5*1j) * phi2) + (t20538 - t20539) * np.exp((-5*1j) * (t20513 + phi2)) + (t20533 + t20535) * np.exp((-1*1j) * (t20513 + t20510)) + (t20534 - t20536) * np.exp((-1*1j) * (t20512 + t20510)) + (t20533 - t20535) * np.exp((1j) * (t20513 + t20511)) + (t20534 + t20536) * np.exp((1j) * (t20512 + t20511)) + (t20538 + t20539) * np.exp((5*1j) * (t20513 - phi2)) + (t20537 + t20540) * np.exp((-1*1j) * (t20509 + t20510)) + (t20541 + t20542) * np.exp((-1*1j) * (t20508 + t20510)) + (t20537 - t20540) * np.exp((1j) * (t20509 + t20511)) + (-t20541 + t20542) * np.exp((1j) * (t20508 + t20511)))

        if Bindx == 463:
            t20571 = np.cos(phi)
            t20570 = t20571 ** 2
            t20576 = t20570 ** 2
            t20580 = t20576 ** 2
            t20581 = t20571 * t20580
            t20590 = t20581 ** 2
            t20553 = t20571 * t20590
            t20588 = t20580 ** 2
            t20555 = t20571 * t20588
            t20575 = t20571 * t20570
            t20578 = t20575 ** 2
            t20579 = t20571 * t20578
            t20586 = t20579 ** 2
            t20557 = t20571 * t20586
            t20584 = t20578 ** 2
            t20559 = t20571 * t20584
            t20577 = t20571 * t20576
            t20582 = t20577 ** 2
            t20561 = t20571 * t20582
            t20600 = 6704224176 * t20553 - 41066765904 * t20555 + 105052163136 * t20557 - 143310035904 * t20559 + 108771434016 * t20561 + 37412784 * t20571 - 784201296 * t20575 + 3078118464 * t20577 + 2608624704 * t20579 - 41090974176 * t20581
            t20599 = 120676035168 * t20553 - 657122539680 * t20555 + 1510778101632 * t20557 - 1905237783168 * t20559 + 1433761620288 * t20561 - 44619168 * t20571 + 1980417888 * t20575 - 27305549952 * t20577 + 179358698880 * t20579 - 656844381888 * t20581
            t20598 = -308394312096 * t20553 + 1529485960800 * t20555 - 3202927511424 * t20557 + 3680453066880 * t20559 - 2523103481280 * t20561 + 36933216 * t20571 - 2081474976 * t20575 + 34329745536 * t20577 - 257570398080 * t20579 + 1049771471424 * t20581
            t20597 = -1005633626400 * t20553 + 4694314053600 * t20555 - 9203985014400 * t20557 + 9838233110400 * t20559 - 6225206769600 * t20561 + 52829920 * t20571 - 3384578080 * t20575 + 62895497600 * t20577 - 526444214400 * t20579 + 2369148225600 * t20581
            t20552 = t20582 ** 2
            t20596 = 192746445060 * t20552 + 14404440 * t20570 - 204511308 * t20576 - 2142049248 * t20578 + 48024435528 * t20580 - 305282004720 * t20582 + 959373927240 * t20584 - 1681337848800 * t20586 + 1672475603892 * t20588 - 883668317352 * t20590 - 84732
            t20595 = 2095070055 * t20552 + 437674554 * t20570 - 5712281061 * t20576 + 31473321144 * t20578 - 90551499906 * t20580 + 148600460316 * t20582 - 140341313154 * t20584 + 68657226936 * t20586 - 8141911269 * t20588 - 6510833094 * t20590 - 5914521
            t20594 = 50281681320 * t20552 + 502073520 * t20570 - 10321764216 * t20576 + 79036685376 * t20578 - 292254816816 * t20580 + 569278531104 * t20582 - 551547935280 * t20584 + 128526851136 * t20586 + 226082152584 * t20588 - 199579596624 * t20590 - 3862104
            t20593 = -1257042033000 * t20552 + 514588880 * t20570 - 16529032520 * t20576 + 206856062400 * t20578 - 1321264011600 * t20580 + 4872960549600 * t20582 - 10997948504400 * t20584 + 15437468337600 * t20586 - 13152216630600 * t20588 + 6227192840400 * t20590 - 2652520
            t20574 = 2 * phi1
            t20573 = 3 * phi1
            t20572 = 4 * phi1
            tfunc[..., c] = (0.41e2 / 0.7314866176e10) * np.sqrt(0.109e3) * np.sqrt(0.2e1) * np.sqrt(0.5e1) * np.sqrt(0.11e2) * ((4056234 + 2023837673130 * t20552 - 10274868186660 * t20590 + 22135987522530 * t20588 - 26356172940720 * t20586 + 18925617159540 * t20584 - 8391780273240 * t20582 + 2259362900340 * t20580 - 348349375920 * t20578 + 27180824034 * t20576 - 819359268 * t20570) * np.exp((-4*1j) * phi2) + (t20593 + t20597) * np.exp((-4*1j) * (phi1 + phi2)) + (t20596 - t20598) * np.exp((-4*1j) * (t20574 + phi2)) + (t20594 + t20599) * np.exp((-4*1j) * (t20573 + phi2)) + (t20595 + t20600) * np.exp((-4*1j) * (t20572 + phi2)) + (t20593 - t20597) * np.exp((4*1j) * (phi1 - phi2)) + (t20596 + t20598) * np.exp((4*1j) * (t20574 - phi2)) + (t20594 - t20599) * np.exp((4*1j) * (t20573 - phi2)) + (t20595 - t20600) * np.exp((4*1j) * (t20572 - phi2)))

        if Bindx == 464:
            t20631 = np.cos(phi)
            t20630 = t20631 ** 2
            t20637 = t20630 ** 2
            t20641 = t20637 ** 2
            t20642 = t20631 * t20641
            t20651 = t20642 ** 2
            t20613 = t20631 * t20651
            t20649 = t20641 ** 2
            t20615 = t20631 * t20649
            t20636 = t20631 * t20630
            t20639 = t20636 ** 2
            t20640 = t20631 * t20639
            t20647 = t20640 ** 2
            t20617 = t20631 * t20647
            t20645 = t20639 ** 2
            t20619 = t20631 * t20645
            t20638 = t20631 * t20637
            t20643 = t20638 ** 2
            t20621 = t20631 * t20643
            t20663 = 292448 * t20613 - 1791392 * t20615 + 4582528 * t20617 - 6251392 * t20619 + 4744768 * t20621 + 1632 * t20631 - 34208 * t20636 + 134272 * t20638 + 113792 * t20640 - 1792448 * t20642
            t20612 = t20643 ** 2
            t20662 = 91390 * t20612 + 19092 * t20630 - 249178 * t20637 + 1372912 * t20639 - 3949988 * t20641 + 6482168 * t20643 - 6121892 * t20645 + 2994928 * t20647 - 355162 * t20649 - 284012 * t20651 - 258
            t20661 = -184571244 * t20613 + 1005053940 * t20615 - 2310700656 * t20617 + 2914017744 * t20619 - 2192905704 * t20621 + 68244 * t20631 - 3029004 * t20636 + 41763216 * t20638 - 274325040 * t20640 + 1004628504 * t20642
            t20660 = 29360240 * t20619 + 29360240 * t20640 - 20971600 * t20617 - 20971600 * t20638 - 14680120 * t20621 - 14680120 * t20642 + 7340060 * t20615 + 7340060 * t20636 - 1048580 * t20613 - 1048580 * t20631
            t20659 = 262145 * t20612 - 524290 * t20630 - 4980755 * t20637 + 27263080 * t20639 - 62390510 * t20641 + 80740660 * t20643 - 62390510 * t20645 + 27263080 * t20647 - 4980755 * t20649 - 524290 * t20651 + 262145
            t20658 = 76904685 * t20612 + 767910 * t20630 - 15786903 * t20637 + 120884808 * t20639 - 446997078 * t20641 + 870698532 * t20643 - 843579990 * t20645 + 196578888 * t20647 + 345787497 * t20649 - 305252442 * t20651 - 5907
            t20657 = -8938965568 * t20613 + 44332926400 * t20615 - 92838478592 * t20617 + 106679799040 * t20619 - 73133434240 * t20621 + 1070528 * t20631 - 60332608 * t20636 + 995065088 * t20638 - 7465808640 * t20640 + 30428158592 * t20642
            t20656 = 5586853480 * t20612 + 417520 * t20630 - 5927864 * t20637 - 62088384 * t20639 + 1392012624 * t20641 - 8848753760 * t20643 + 27807939920 * t20645 - 48734430400 * t20647 + 48477553736 * t20649 - 25613574416 * t20651 - 2456
            t20655 = -50281681320 * t20613 + 234715702680 * t20615 - 460199250720 * t20617 + 491911655520 * t20619 - 311260338480 * t20621 + 2641496 * t20631 - 169228904 * t20636 + 3144774880 * t20638 - 26322210720 * t20640 + 118457411280 * t20642
            t20654 = 62852101650 * t20612 - 25729444 * t20630 + 826451626 * t20637 - 10342803120 * t20639 + 66063200580 * t20641 - 243648027480 * t20643 + 549897425220 * t20645 - 771873416880 * t20647 + 657610831530 * t20649 - 311359642020 * t20651 + 132626
            t20635 = 2 * phi1
            t20634 = 3 * phi1
            t20633 = 4 * phi1
            t20632 = 5 * phi1
            tfunc[..., c] = (0.41e2 / 0.58518929408e11) * np.sqrt(0.5e1) * np.sqrt(0.3e1) * np.sqrt(0.109e3) * np.sqrt(0.17e2) * np.sqrt(0.19e2) * np.sqrt(0.31e2) * np.sqrt(0.29e2) * ((276276 + 137846528820 * t20612 - 699836223240 * t20651 + 1507714320420 * t20649 - 1795157290080 * t20647 + 1289051323560 * t20645 - 571576365360 * t20643 + 153888494760 * t20641 - 23726582880 * t20639 + 1851325476 * t20637 - 55807752 * t20630) * np.exp((-4*1j) * phi2) + (t20654 - t20655) * np.exp((-4*1j) * (phi1 + phi2)) + (t20656 - t20657) * np.exp((-4*1j) * (t20635 + phi2)) + (t20658 - t20661) * np.exp((-4*1j) * (t20634 + phi2)) + (t20662 + t20663) * np.exp((-4*1j) * (t20633 + phi2)) + (t20659 - t20660) * np.exp((-4*1j) * (t20632 + phi2)) + (t20654 + t20655) * np.exp((4*1j) * (phi1 - phi2)) + (t20656 + t20657) * np.exp((4*1j) * (t20635 - phi2)) + (t20658 + t20661) * np.exp((4*1j) * (t20634 - phi2)) + (t20662 - t20663) * np.exp((4*1j) * (t20633 - phi2)) + (t20659 + t20660) * np.exp((4*1j) * (t20632 - phi2)))

        if Bindx == 465:
            t20693 = np.cos(phi)
            t20692 = t20693 ** 2
            t20700 = t20692 ** 2
            t20699 = t20693 * t20692
            t20702 = t20699 ** 2
            t20704 = t20700 ** 2
            t20701 = t20693 * t20700
            t20706 = t20701 ** 2
            t20708 = t20702 ** 2
            t20703 = t20693 * t20702
            t20710 = t20703 ** 2
            t20712 = t20704 ** 2
            t20705 = t20693 * t20704
            t20714 = t20705 ** 2
            t20716 = t20706 ** 2
            t20725 = 16040016 * t20692 - 460429272 * t20700 + 5134372800 * t20702 - 29159367984 * t20704 + 95487527904 * t20706 - 191219241840 * t20708 + 238139490240 * t20710 - 180090880440 * t20712 + 75758212176 * t20714 - 13605631416 * t20716 - 92184
            t20724 = 10939032 * t20692 - 172834548 * t20700 + 1211104032 * t20702 - 4527788328 * t20704 + 10069303440 * t20706 - 14068781832 * t20708 + 12525903648 * t20710 - 6922540932 * t20712 + 2170610328 * t20714 - 295774596 * t20716 - 140244
            t20723 = 29875568 * t20692 - 672185896 * t20700 + 6004169280 * t20702 - 27920595408 * t20704 + 76327689120 * t20706 - 129639928208 * t20708 + 138708421696 * t20710 - 91085493320 * t20712 + 33572212848 * t20714 - 5323942728 * t20716 - 222952
            t20673 = t20693 * t20716
            t20675 = t20693 * t20714
            t20677 = t20693 * t20712
            t20679 = t20693 * t20710
            t20681 = t20693 * t20708
            t20683 = t20693 * t20706
            t20722 = 123239415 * t20673 - 716684598 * t20675 + 1498590747 * t20677 - 771406728 * t20679 - 2239464738 * t20681 + 4961174652 * t20683 - 3670617 * t20693 + 93192138 * t20699 - 695558997 * t20701 + 2444625528 * t20703 - 4694036802 * t20705
            t20721 = 20489040 * t20692 - 666797560 * t20700 + 8391531200 * t20702 - 53500402800 * t20704 + 195549900000 * t20706 - 434517985200 * t20708 + 596960452800 * t20710 - 495270067800 * t20712 + 227399173200 * t20714 - 44366189400 * t20716 - 103480
            t20720 = 2957745960 * t20673 - 16775728368 * t20675 + 39214574184 * t20677 - 47630314560 * t20679 + 29996839504 * t20681 - 6413394080 * t20683 - 1186680 * t20693 + 50329616 * t20699 - 561587320 * t20701 + 2392404416 * t20703 - 3229682672 * t20705
            t20719 = 11338026180 * t20673 - 63144084264 * t20675 + 150959385972 * t20677 - 202566448608 * t20679 + 167481218760 * t20681 - 88164860400 * t20683 + 652740 * t20693 - 38596392 * t20699 + 700622964 * t20701 - 6044556768 * t20703 + 29478639816 * t20705
            t20718 = -73943649000 * t20673 + 407258866800 * t20675 - 965468284200 * t20677 + 1287073128000 * t20679 - 1057462414800 * t20681 + 551709943200 * t20683 - 3066440 * t20693 + 202798960 * t20699 - 3982722120 * t20701 + 36138356800 * t20703 - 181522957200 * t20705
            t20698 = 4 * phi1
            t20697 = 8 * phi1
            t20696 = -3 * phi2
            t20695 = 3 * phi2
            t20694 = 16 * phi1
            tfunc[..., c] = (0.41e2 / 0.1828716544e10*1j) * np.sqrt(0.17e2) * np.sqrt(0.109e3) * np.sqrt(0.5e1) * np.sqrt(0.3e1) * np.sqrt(0.11e2) * ((1 + t20693) ** (-0.1e1 / 0.2e1)) * ((1 - t20693) ** (-0.1e1 / 0.2e1)) * ((-2030850277680 * t20679 + 1646559548340 * t20681 - 844589043480 * t20683 + 272132739060 * t20705 - 52839208240 * t20703 + 5655742274 * t20701 - 278528068 * t20699 + 4056234 * t20693 + 119049274890 * t20673 - 653244739140 * t20675 + 1538400435810 * t20677) * np.exp((-3*1j) * phi2) + (t20720 - t20723) * np.exp((-3*1j) * (t20698 + phi2)) + (t20718 + t20721) * np.exp((-1*1j) * (t20698 + t20695)) + (t20719 - t20725) * np.exp((-1*1j) * (t20697 + t20695)) + (t20718 - t20721) * np.exp((1j) * (t20698 + t20696)) + (t20719 + t20725) * np.exp((1j) * (t20697 + t20696)) + (t20720 + t20723) * np.exp((3*1j) * (t20698 - phi2)) + (t20722 - t20724) * np.exp((-1*1j) * (t20694 + t20695)) + (t20722 + t20724) * np.exp((1j) * (t20694 + t20696)))

        if Bindx == 466:
            t20757 = np.cos(phi)
            t20756 = t20757 ** 2
            t20765 = t20756 ** 2
            t20766 = t20757 * t20765
            t20771 = t20766 ** 2
            t20781 = t20771 ** 2
            t20737 = t20757 * t20781
            t20769 = t20765 ** 2
            t20770 = t20757 * t20769
            t20779 = t20770 ** 2
            t20739 = t20757 * t20779
            t20777 = t20769 ** 2
            t20741 = t20757 * t20777
            t20764 = t20757 * t20756
            t20767 = t20764 ** 2
            t20768 = t20757 * t20767
            t20775 = t20768 ** 2
            t20743 = t20757 * t20775
            t20773 = t20767 ** 2
            t20745 = t20757 * t20773
            t20747 = t20757 * t20771
            t20792 = 91390 * t20737 - 531468 * t20739 + 1111302 * t20741 - 572048 * t20743 - 1660708 * t20745 + 3679032 * t20747 - 2722 * t20757 + 69108 * t20764 - 515802 * t20766 + 1812848 * t20768 - 3480932 * t20770
            t20791 = 8112 * t20756 - 128168 * t20765 + 898112 * t20767 - 3357648 * t20769 + 7467040 * t20771 - 10432912 * t20773 + 9288768 * t20775 - 5133512 * t20777 + 1609648 * t20779 - 219336 * t20781 - 104
            t20790 = -1572870 * t20756 + 2359305 * t20765 + 6291480 * t20767 - 33030270 * t20769 + 66060540 * t20771 - 77070630 * t20773 + 56623320 * t20775 - 25952355 * t20777 + 6815770 * t20779 - 786435 * t20781 + 262145
            t20789 = 776798 * t20756 - 17477581 * t20765 + 156115080 * t20767 - 725966538 * t20769 + 1984604820 * t20771 - 3370782338 * t20773 + 3606573256 * t20775 - 2368324145 * t20777 + 872914878 * t20779 - 138428433 * t20781 - 5797
            t20788 = 76904685 * t20737 - 436187598 * t20739 + 1019622549 * t20741 - 1238441160 * t20743 + 779951194 * t20745 - 166755380 * t20747 - 30855 * t20757 + 1308626 * t20764 - 14601895 * t20766 + 62205176 * t20768 - 83975342 * t20770
            t20787 = 262145 * t20737 - 1572870 * t20739 + 2359305 * t20741 + 6291480 * t20743 - 33030270 * t20745 + 66060540 * t20747 - 786435 * t20757 + 6815770 * t20764 - 25952355 * t20766 + 56623320 * t20768 - 77070630 * t20770
            t20786 = 7903776 * t20756 - 226878192 * t20765 + 2529980800 * t20767 - 14368384224 * t20769 + 47051825344 * t20771 - 94223974240 * t20773 + 117344096640 * t20775 - 88740433840 * t20777 + 37330133536 * t20779 - 6704224176 * t20781 - 45424
            t20785 = -17415684 * t20756 + 566777926 * t20765 - 7132801520 * t20767 + 45475342380 * t20769 - 166217415000 * t20771 + 369340287420 * t20773 - 507416384880 * t20775 + 420979557630 * t20777 - 193289297220 * t20779 + 37711260990 * t20781 + 87958
            t20784 = 5586853480 * t20737 - 31114476304 * t20739 + 74385784392 * t20741 - 99815351488 * t20743 + 82526977360 * t20745 - 43443554400 * t20747 + 321640 * t20757 - 19018512 * t20764 + 345234504 * t20766 - 2978477248 * t20768 + 14525706576 * t20770
            t20783 = 62852101650 * t20737 - 346170036780 * t20739 + 820648041570 * t20741 - 1094012158800 * t20743 + 898843052580 * t20745 - 468953451720 * t20747 + 2606474 * t20757 - 172379116 * t20764 + 3385313802 * t20766 - 30717603280 * t20768 + 154294513620 * t20770
            t20763 = 4 * phi1
            t20762 = 8 * phi1
            t20761 = -3 * phi2
            t20760 = 3 * phi2
            t20759 = 16 * phi1
            t20758 = 20 * phi1
            tfunc[..., c] = (0.123e3 / 0.29259464704e11*1j) * np.sqrt(0.2e1) * np.sqrt(0.5e1) * np.sqrt(0.109e3) * np.sqrt(0.31e2) * np.sqrt(0.29e2) * np.sqrt(0.19e2) * ((1 + t20757) ** (-0.1e1 / 0.2e1)) * ((1 - t20757) ** (-0.1e1 / 0.2e1)) * ((-756388645320 * t20739 + 1781305767780 * t20741 - 2351510847840 * t20743 + 1906542634920 * t20745 - 977945208240 * t20747 + 315101066280 * t20770 - 61182241120 * t20768 + 6548754212 * t20766 - 322506184 * t20764 + 4696692 * t20757 + 137846528820 * t20737) * np.exp((-3*1j) * phi2) + (t20788 - t20789) * np.exp((-3*1j) * (t20763 + phi2)) + (t20783 + t20785) * np.exp((-1*1j) * (t20763 + t20760)) + (t20784 - t20786) * np.exp((-1*1j) * (t20762 + t20760)) + (t20783 - t20785) * np.exp((1j) * (t20763 + t20761)) + (t20784 + t20786) * np.exp((1j) * (t20762 + t20761)) + (t20788 + t20789) * np.exp((3*1j) * (t20763 - phi2)) + (-t20791 + t20792) * np.exp((-1*1j) * (t20759 + t20760)) + (t20787 - t20790) * np.exp((-1*1j) * (t20758 + t20760)) + (t20791 + t20792) * np.exp((1j) * (t20759 + t20761)) + (t20787 + t20790) * np.exp((1j) * (t20758 + t20761)))

        if Bindx == 467:
            t20821 = np.cos(phi)
            t20820 = t20821 ** 2
            t20827 = t20820 ** 2
            t20831 = t20827 ** 2
            t20832 = t20821 * t20831
            t20841 = t20832 ** 2
            t20803 = t20821 * t20841
            t20839 = t20831 ** 2
            t20805 = t20821 * t20839
            t20826 = t20821 * t20820
            t20829 = t20826 ** 2
            t20830 = t20821 * t20829
            t20837 = t20830 ** 2
            t20807 = t20821 * t20837
            t20835 = t20829 ** 2
            t20809 = t20821 * t20835
            t20828 = t20821 * t20827
            t20833 = t20828 ** 2
            t20811 = t20821 * t20833
            t20851 = 65727688 * t20803 - 482978760 * t20805 + 1541648352 * t20807 - 2789258976 * t20809 + 3126060336 * t20811 - 1172296 * t20821 + 31091016 * t20826 - 250540512 * t20828 + 981708000 * t20830 - 2222284848 * t20832
            t20802 = t20833 ** 2
            t20850 = 41079805 * t20802 + 1654160 * t20820 - 15424143 * t20827 + 22309584 * t20829 + 141101646 * t20831 - 654572688 * t20833 + 1251111330 * t20835 - 1334302992 * t20837 + 830198631 * t20839 - 283134656 * t20841 - 20677
            t20849 = 3023473648 * t20803 - 15558036464 * t20805 + 33682667584 * t20807 - 39812322880 * t20809 + 27885829280 * t20811 - 391920 * t20821 + 22754544 * t20826 - 382518336 * t20828 + 2892749376 * t20830 - 11754204832 * t20832
            t20848 = 9859153200 * t20803 - 45304206000 * t20805 + 87249028800 * t20807 - 91408881600 * t20809 + 56574429600 * t20811 - 419120 * t20821 + 27667120 * t20826 - 529131200 * t20828 + 4551768000 * t20830 - 21019408800 * t20832
            t20847 = 1183098384 * t20803 - 7173631632 * t20805 + 18525844032 * t20807 - 26476168512 * t20809 + 22754481120 * t20811 - 1078800 * t20821 + 48373392 * t20826 - 629846592 * t20828 + 3719529792 * t20830 - 11950601184 * t20832
            t20846 = 985915320 * t20802 - 2934336 * t20820 + 69625752 * t20827 - 674897280 * t20829 + 3447542736 * t20831 - 10334386176 * t20833 + 19071587376 * t20835 - 21927084672 * t20837 + 15310437480 * t20839 - 5945827776 * t20841 + 21576
            t20845 = 3779342060 * t20802 - 3546048 * t20820 + 103403676 * t20827 - 1176179520 * t20829 + 6838077192 * t20831 - 22987701440 * t20833 + 47347848760 * t20835 - 60707672000 * t20837 + 47272998020 * t20839 - 20466590848 * t20841 + 20148
            t20844 = -24647883000 * t20802 + 10088000 * t20820 - 331865560 * t20827 + 4224854400 * t20829 - 27267224400 * t20831 + 100961203200 * t20833 - 227405646000 * t20835 + 316882396800 * t20837 - 266802882600 * t20839 + 124377009600 * t20841 - 50440
            t20825 = 2 * phi1
            t20824 = 4 * phi1
            t20823 = 6 * phi1
            t20822 = 8 * phi1
            tfunc[..., c] = (0.41e2 / 0.3657433088e10) * np.sqrt(0.23e2) * np.sqrt(0.17e2) * np.sqrt(0.109e3) * np.sqrt(0.3e1) * np.sqrt(0.11e2) * np.sqrt(0.2e1) * np.sqrt(0.5e1) * ((58786 + 39683091630 * t20802 - 195362912640 * t20841 + 408133584810 * t20839 - 471247025760 * t20837 + 328189892940 * t20835 - 141156943200 * t20833 + 36871167060 * t20831 - 5516478240 * t20829 + 417792102 * t20827 - 12227488 * t20820) * np.exp((-2*1j) * phi2) + (t20844 - t20848) * np.exp((-2*1j) * (t20825 + phi2)) + (t20845 + t20849) * np.exp((-2*1j) * (t20824 + phi2)) + (t20846 + t20847) * np.exp((-2*1j) * (t20823 + phi2)) + (t20850 + t20851) * np.exp((-2*1j) * (t20822 + phi2)) + (t20844 + t20848) * np.exp((2*1j) * (t20825 - phi2)) + (t20845 - t20849) * np.exp((2*1j) * (t20824 - phi2)) + (t20846 - t20847) * np.exp((2*1j) * (t20823 - phi2)) + (t20850 - t20851) * np.exp((2*1j) * (t20822 - phi2)))

        if Bindx == 468:
            t20882 = np.cos(phi)
            t20881 = t20882 ** 2
            t20889 = t20881 ** 2
            t20890 = t20882 * t20889
            t20895 = t20890 ** 2
            t20863 = t20895 ** 2
            t20888 = t20882 * t20881
            t20891 = t20888 ** 2
            t20893 = t20889 ** 2
            t20897 = t20891 ** 2
            t20892 = t20882 * t20891
            t20899 = t20892 ** 2
            t20901 = t20893 ** 2
            t20894 = t20882 * t20893
            t20903 = t20894 ** 2
            t20915 = 91390 * t20863 + 3680 * t20881 - 34314 * t20889 + 49632 * t20891 + 313908 * t20893 - 1456224 * t20895 + 2783340 * t20897 - 2968416 * t20899 + 1846938 * t20901 - 629888 * t20903 - 46
            t20864 = t20882 * t20903
            t20866 = t20882 * t20901
            t20868 = t20882 * t20899
            t20870 = t20882 * t20897
            t20872 = t20882 * t20895
            t20914 = -146224 * t20864 + 1074480 * t20866 - 3429696 * t20868 + 6205248 * t20870 - 6954528 * t20872 + 2608 * t20882 - 69168 * t20888 + 557376 * t20890 - 2184000 * t20892 + 4943904 * t20894
            t20913 = 262145 * t20863 - 262145 - 12582960 * t20899 + 12582960 * t20891 + 11010090 * t20897 - 11010090 * t20893 + 7077915 * t20901 - 7077915 * t20889 - 2097160 * t20903 + 2097160 * t20881
            t20912 = -92285622 * t20864 + 559567206 * t20866 - 1445077656 * t20868 + 2065229496 * t20870 - 1774925460 * t20872 + 84150 * t20882 - 3773286 * t20888 + 49130136 * t20890 - 290135736 * t20892 + 932186772 * t20894
            t20911 = -66060540 * t20872 + 66060540 * t20894 + 44040360 * t20870 - 44040360 * t20892 - 18874440 * t20868 + 18874440 * t20890 + 4718610 * t20866 - 4718610 * t20888 - 524290 * t20864 + 524290 * t20882
            t20910 = 76904685 * t20863 - 228888 * t20881 + 5431041 * t20889 - 52644240 * t20891 + 268919838 * t20893 - 806116608 * t20895 + 1487647458 * t20897 - 1710385776 * t20899 + 1194265215 * t20901 - 463794408 * t20903 + 1683
            t20909 = -4469482784 * t20864 + 22998836512 * t20866 - 49791769472 * t20868 + 58852999040 * t20870 - 41222530240 * t20872 + 579360 * t20882 - 33637152 * t20888 + 565461888 * t20890 - 4276238208 * t20892 + 17375781056 * t20894
            t20908 = -25140840660 * t20864 + 115525725300 * t20866 - 222485023440 * t20868 + 233092648080 * t20870 - 144264795480 * t20872 + 1068756 * t20882 - 70551156 * t20888 + 1349284560 * t20890 - 11607008400 * t20892 + 53599492440 * t20894
            t20907 = 5586853480 * t20863 - 5241984 * t20881 + 152857608 * t20889 - 1738700160 * t20891 + 10108461936 * t20893 - 33981819520 * t20895 + 69992472080 * t20897 - 89741776000 * t20899 + 69881823160 * t20901 - 30254960384 * t20903 + 29784
            t20906 = 62852101650 * t20863 - 25724400 * t20881 + 846257178 * t20889 - 10773378720 * t20891 + 69531422220 * t20893 - 257451068160 * t20895 + 579884397300 * t20897 - 808050111840 * t20899 + 680347350630 * t20901 - 317161374480 * t20903 + 128622
            t20887 = 2 * phi1
            t20886 = 4 * phi1
            t20885 = 6 * phi1
            t20884 = 8 * phi1
            t20883 = 10 * phi1
            tfunc[..., c] = (0.41e2 / 0.29259464704e11) * np.sqrt(0.5e1) * np.sqrt(0.109e3) * np.sqrt(0.19e2) * np.sqrt(0.31e2) * np.sqrt(0.29e2) * np.sqrt(0.23e2) * ((204204 + 137846528820 * t20863 - 678629064960 * t20903 + 1417727189340 * t20901 - 1636963352640 * t20899 + 1140028049160 * t20897 - 490334644800 * t20895 + 128078790840 * t20893 - 19162503360 * t20891 + 1451277828 * t20889 - 42474432 * t20881) * np.exp((-2*1j) * phi2) + (-t20911 + t20913) * np.exp((-2*1j) * (t20883 + phi2)) + (t20911 + t20913) * np.exp((2*1j) * (t20883 - phi2)) + (t20906 - t20908) * np.exp((-2*1j) * (t20887 + phi2)) + (t20907 - t20909) * np.exp((-2*1j) * (t20886 + phi2)) + (t20910 - t20912) * np.exp((-2*1j) * (t20885 + phi2)) + (-t20914 + t20915) * np.exp((-2*1j) * (t20884 + phi2)) + (t20906 + t20908) * np.exp((2*1j) * (t20887 - phi2)) + (t20907 + t20909) * np.exp((2*1j) * (t20886 - phi2)) + (t20910 + t20912) * np.exp((2*1j) * (t20885 - phi2)) + (t20914 + t20915) * np.exp((2*1j) * (t20884 - phi2)))

        if Bindx == 469:
            t20945 = np.cos(phi)
            t20944 = t20945 ** 2
            t20951 = t20944 ** 2
            t20950 = t20945 * t20944
            t20953 = t20950 ** 2
            t20955 = t20951 ** 2
            t20952 = t20945 * t20951
            t20957 = t20952 ** 2
            t20959 = t20953 ** 2
            t20954 = t20945 * t20953
            t20961 = t20954 ** 2
            t20963 = t20955 ** 2
            t20956 = t20945 * t20955
            t20965 = t20956 ** 2
            t20967 = t20957 ** 2
            t20976 = 3243592 * t20944 - 43551156 * t20951 + 236386656 * t20953 - 699429192 * t20955 + 1272595632 * t20957 - 1496878152 * t20959 + 1147756896 * t20961 - 556196916 * t20963 + 155138632 * t20965 - 19026436 * t20967 - 39556
            t20975 = 1080816 * t20944 - 31556184 * t20951 + 355722048 * t20953 - 2029420272 * t20955 + 6635230624 * t20957 - 13191926000 * t20959 + 16230617920 * t20961 - 12076525912 * t20963 + 4981999088 * t20965 - 875216056 * t20967 - 6072
            t20974 = 2977488 * t20944 - 67252392 * t20951 + 588075456 * t20953 - 2622649104 * t20955 + 6782717664 * t20957 - 10819457808 * t20959 + 10839609792 * t20961 - 6662258856 * t20963 + 2300735184 * t20965 - 342475848 * t20967 - 21576
            t20973 = 1155440 * t20944 - 38329720 * t20951 + 491233600 * t20953 - 3186097200 * t20955 + 11833879200 * t20957 - 26688433200 * t20959 + 37166817600 * t20961 - 31215617400 * t20963 + 14489362800 * t20965 - 2853965400 * t20967 - 5720
            t20925 = t20945 * t20967
            t20927 = t20945 * t20965
            t20929 = t20945 * t20963
            t20931 = t20945 * t20961
            t20933 = t20945 * t20959
            t20935 = t20945 * t20957
            t20972 = 23783045 * t20925 - 198314006 * t20927 + 730727877 * t20929 - 1560484200 * t20931 + 2126945898 * t20933 - 1918030884 * t20935 + 405449 * t20945 - 11293238 * t20950 + 99532785 * t20952 - 438359592 * t20954 + 1145086866 * t20956
            t20971 = 570793080 * t20925 - 4021895856 * t20927 + 12334114584 * t20929 - 21529223232 * t20931 + 23465669232 * t20933 - 16471722528 * t20935 + 496248 * t20945 - 22913712 * t20950 + 316455192 * t20952 - 2042470464 * t20954 + 7400697456 * t20956
            t20970 = 2188040140 * t20925 - 13397538088 * t20927 + 35362549772 * t20929 - 52556633184 * t20931 + 48191470360 * t20933 - 28081927280 * t20935 + 270204 * t20945 - 16048296 * t20950 + 282569628 * t20952 - 2296211808 * t20954 + 10323458552 * t20956
            t20969 = -14269827000 * t20925 + 79471959600 * t20927 - 190064602200 * t20929 + 254946331200 * t20931 - 210149161200 * t20933 + 109649997600 * t20935 - 577720 * t20945 + 38907440 * t20950 - 775180120 * t20952 + 7109044800 * t20954 - 35956892400 * t20956
            t20949 = 4 * phi1
            t20948 = 8 * phi1
            t20947 = 12 * phi1
            t20946 = 16 * phi1
            tfunc[..., c] = (0.41e2 / 0.1828716544e10*1j) * np.sqrt(0.23e2) * np.sqrt(0.17e2) * np.sqrt(0.19e2) * np.sqrt(0.109e3) * np.sqrt(0.5e1) * np.sqrt(0.3e1) * ((1 + t20945) ** (-0.1e1 / 0.2e1)) * ((1 - t20945) ** (-0.1e1 / 0.2e1)) * ((22974421470 * t20925 - 123708423300 * t20927 + 285866761950 * t20929 - 370265520240 * t20931 + 294529391100 * t20933 - 148214790360 * t20935 + 46849502700 * t20956 - 8923714800 * t20954 + 936990054 * t20952 - 45265220 * t20950 + 646646 * t20945) * np.exp((-1*1j) * phi2) + (t20969 + t20973) * np.exp((-1*1j) * (t20949 + phi2)) + (t20970 - t20975) * np.exp((-1*1j) * (t20948 + phi2)) + (t20969 - t20973) * np.exp((1j) * (t20949 - phi2)) + (t20970 + t20975) * np.exp((1j) * (t20948 - phi2)) + (t20971 - t20974) * np.exp((-1*1j) * (t20947 + phi2)) + (t20972 - t20976) * np.exp((-1*1j) * (t20946 + phi2)) + (t20971 + t20974) * np.exp((1j) * (t20947 - phi2)) + (t20972 + t20976) * np.exp((1j) * (t20946 - phi2)))

        if Bindx == 470:
            t21008 = np.cos(phi)
            t21007 = t21008 ** 2
            t21015 = t21007 ** 2
            t21014 = t21008 * t21007
            t21017 = t21014 ** 2
            t21019 = t21015 ** 2
            t21016 = t21008 * t21015
            t21021 = t21016 ** 2
            t21023 = t21017 ** 2
            t21018 = t21008 * t21017
            t21025 = t21018 ** 2
            t21027 = t21019 ** 2
            t21020 = t21008 * t21019
            t21029 = t21020 ** 2
            t21031 = t21021 ** 2
            t21042 = 12464 * t21007 - 167352 * t21015 + 908352 * t21017 - 2687664 * t21019 + 4890144 * t21021 - 5751984 * t21023 + 4410432 * t21025 - 2137272 * t21027 + 596144 * t21029 - 73112 * t21031 - 152
            t20988 = t21008 * t21031
            t20990 = t21008 * t21029
            t20992 = t21008 * t21027
            t20994 = t21008 * t21025
            t20996 = t21008 * t21023
            t20998 = t21008 * t21021
            t21041 = 91390 * t20988 - 762052 * t20990 + 2807934 * t20992 - 5996400 * t20994 + 8173116 * t20996 - 7370328 * t20998 + 1558 * t21008 - 43396 * t21014 + 382470 * t21016 - 1684464 * t21018 + 4400172 * t21020
            t21040 = -2621450 * t21007 + 11796525 * t21015 - 31457400 * t21017 + 55050450 * t21019 - 66060540 * t21021 + 55050450 * t21023 - 31457400 * t21025 + 11796525 * t21027 - 2621450 * t21029 + 262145 * t21031 + 262145
            t21039 = 401166 * t21007 - 9061119 * t21015 + 79233192 * t21017 - 353357478 * t21019 + 913856148 * t21021 - 1457738406 * t21023 + 1460453544 * t21025 - 897626367 * t21027 + 309985038 * t21029 - 46142811 * t21031 - 2907
            t21038 = 76904685 * t20988 - 541882242 * t20990 + 1661812713 * t20992 - 2900697624 * t20994 + 3161600874 * t20996 - 2219285196 * t20998 + 66861 * t21008 - 3087234 * t21014 + 42636969 * t21016 - 275188248 * t21018 + 997118442 * t21020
            t21037 = 262145 * t20988 - 2621450 * t20990 + 11796525 * t20992 - 31457400 * t20994 + 55050450 * t20996 - 66060540 * t20998 + 262145 * t21008 - 2621450 * t21014 + 11796525 * t21016 - 31457400 * t21018 + 55050450 * t21020
            t21036 = 2759712 * t21007 - 80574288 * t21015 + 908286336 * t21017 - 5181839904 * t21019 + 16942130368 * t21021 - 33683732000 * t21023 + 41442605440 * t21025 - 30835714384 * t21027 + 12720835616 * t21029 - 2234741392 * t21031 - 15504
            t21035 = 5089188 * t21007 - 168824994 * t21015 + 2163660720 * t21017 - 14033309940 * t21019 + 52122858840 * t21021 - 117550417140 * t21023 + 163702937520 * t21025 - 137490605730 * t21027 + 63819057060 * t21029 - 12570420330 * t21031 - 25194
            t21034 = 5586853480 * t20988 - 34208733616 * t20990 + 90293308904 * t20992 - 134195988288 * t20994 + 123050157520 * t20996 - 71703260960 * t20998 + 689928 * t21008 - 40977072 * t21014 + 721501896 * t21016 - 5863054656 * t21018 + 26359502864 * t21020
            t21033 = 62852101650 * t20988 - 350037858420 * t20990 + 837148179690 * t20992 - 1122922704240 * t20994 + 925611532740 * t20996 - 482958398520 * t20998 + 2544594 * t21008 - 171369588 * t21014 + 3414316074 * t21016 - 31312110960 * t21018 + 158373766980 * t21020
            t21013 = 4 * phi1
            t21012 = 8 * phi1
            t21011 = 12 * phi1
            t21010 = 16 * phi1
            t21009 = 20 * phi1
            tfunc[..., c] = (0.41e2 / 0.29259464704e11*1j) * np.sqrt(0.2e1) * np.sqrt(0.5e1) * np.sqrt(0.109e3) * np.sqrt(0.23e2) * np.sqrt(0.31e2) * np.sqrt(0.29e2) * np.sqrt(0.11e2) * ((1 + t21008) ** (-0.1e1 / 0.2e1)) * ((1 - t21008) ** (-0.1e1 / 0.2e1)) * ((137846528820 * t20988 - 742250539800 * t20990 + 1715200571700 * t20992 - 2221593121440 * t20994 + 1767176346600 * t20996 - 889288742160 * t20998 + 281097016200 * t21020 - 53542288800 * t21018 + 5621940324 * t21016 - 271591320 * t21014 + 3879876 * t21008) * np.exp((-1*1j) * phi2) + (t21033 - t21035) * np.exp((-1*1j) * (t21013 + phi2)) + (t21034 - t21036) * np.exp((-1*1j) * (t21012 + phi2)) + (t21033 + t21035) * np.exp((1j) * (t21013 - phi2)) + (t21034 + t21036) * np.exp((1j) * (t21012 - phi2)) + (t21038 - t21039) * np.exp((-1*1j) * (t21011 + phi2)) + (t21041 - t21042) * np.exp((-1*1j) * (t21010 + phi2)) + (t21037 + t21040) * np.exp((-1*1j) * (t21009 + phi2)) + (t21038 + t21039) * np.exp((1j) * (t21011 - phi2)) + (t21041 + t21042) * np.exp((1j) * (t21010 - phi2)) + (t21037 - t21040) * np.exp((1j) * (t21009 - phi2)))

        if Bindx == 471:
            t21057 = np.cos(phi)
            t21056 = t21057 ** 2
            t21058 = t21056 ** 2
            t21060 = t21058 ** 2
            t21064 = t21060 ** 2
            t21059 = t21056 * t21058
            t21062 = t21059 ** 2
            t21061 = t21056 * t21060
            t21050 = t21056 * t21062
            t21048 = t21056 * t21064
            t21047 = t21061 ** 2
            tfunc[..., c] = 0.41e2 / 0.1828716544e10 * np.sqrt(0.23e2) * np.sqrt(0.7e1) * np.sqrt(0.17e2) * np.sqrt(0.19e2) * np.sqrt(0.109e3) * ((34461632205 * t21047) - (167890003050 * t21048) + (347123925225 * t21064) - (396713057400 * t21050) + (273491577450 * t21062) - (116454478140 * t21061) + (30117537450 * t21060) - (4461857400 * t21059) + (334639305 * t21058) - (9699690 * t21056) + 0.46189e5 + (-42809481000 * t21047 + 217340442000 * t21048 - 468234261000 * t21064 + 557502264000 * t21050 - 400326498000 * t21062 + 177508188000 * t21061 - 47791458000 * t21060 + 7368504000 * t21059 - 574945800 * t21058 + 17331600 * t21056 - 85800) * np.cos((4 * phi1)) + (6564120420 * t21047 - 37364993160 * t21048 + 90573944340 * t21064 - 121729634400 * t21050 + 98939445000 * t21062 - 49764229680 * t21061 + 15220652040 * t21060 - 2667915360 * t21059 + 236671380 * t21058 - 8106120 * t21056 + 45540) * np.cos((8 * phi1)) + (1712379240 * t21047 - 11503675920 * t21048 + 33311294280 * t21064 - 54198048960 * t21050 + 54097289040 * t21062 - 33913588320 * t21061 + 13113245520 * t21060 - 2940377280 * t21059 + 336261960 * t21058 - 14887440 * t21056 + 107880) * np.cos((12 * phi1)) + (71349135 * t21047 - 581769870 * t21048 + 2085738435 * t21064 - 4304088360 * t21050 + 5613293070 * t21062 - 4772233620 * t21061 + 2622859470 * t21060 - 886449960 * t21059 + 163316835 * t21058 - 12163470 * t21056 + 148335) * np.cos((16 * phi1)))

        if Bindx == 472:
            t21082 = np.cos(phi)
            t21081 = t21082 ** 2
            t21083 = t21081 ** 2
            t21085 = t21083 ** 2
            t21089 = t21085 ** 2
            t21084 = t21081 * t21083
            t21087 = t21084 ** 2
            t21086 = t21081 * t21085
            t21075 = t21081 * t21087
            t21073 = t21081 * t21089
            t21072 = t21086 ** 2
            tfunc[..., c] = 0.41e2 / 0.29259464704e11 * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.109e3) * np.sqrt(0.23e2) * np.sqrt(0.31e2) * np.sqrt(0.7e1) * np.sqrt(0.11e2) * np.sqrt(0.29e2) * ((68923264410 * t21072) - (335780006100 * t21073) + (694247850450 * t21089) - (793426114800 * t21075) + (546983154900 * t21087) - (232908956280 * t21086) + (60235074900 * t21085) - (8923714800 * t21084) + (669278610 * t21083) - (19399380 * t21081) + 0.92378e5 + (62852101650 * t21072 - 319095285300 * t21073 + 687453028650 * t21089 - 818514687600 * t21075 + 587752085700 * t21087 - 260614294200 * t21086 + 70166549700 * t21085 - 10818303600 * t21084 + 844124970 * t21083 - 25445940 * t21081 + 125970) * np.cos((4 * phi1)) + (5586853480 * t21072 - 31802089040 * t21073 + 77089285960 * t21089 - 103606513600 * t21075 + 84209330000 * t21087 - 42355325920 * t21086 + 12954599760 * t21085 - 2270715840 * t21084 + 201435720 * t21083 - 6899280 * t21081 + 38760) * np.cos((8 * phi1)) + (76904685 * t21072 - 516641730 * t21073 + 1496043945 * t21089 - 2434089240 * t21075 + 2429564010 * t21087 - 1523093580 * t21086 + 588929130 * t21085 - 132055320 * t21084 + 15101865 * t21083 - 668610 * t21081 + 4845) * np.cos((12 * phi1)) + (91390 * t21072 - 745180 * t21073 + 2671590 * t21089 - 5513040 * t21075 + 7189980 * t21087 - 6112680 * t21086 + 3359580 * t21085 - 1135440 * t21084 + 209190 * t21083 - 15580 * t21081 + 190) * np.cos((16 * phi1)) + (-66060540 * t21086 + 262145 * t21072 + 262145 + 55050450 * t21087 + 55050450 * t21085 - 31457400 * t21075 - 31457400 * t21084 + 11796525 * t21089 + 11796525 * t21083 - 2621450 * t21073 - 2621450 * t21081) * np.cos((20 * phi1)))

        if Bindx == 473:
            t21121 = np.cos(phi)
            t21120 = t21121 ** 2
            t21127 = t21120 ** 2
            t21126 = t21121 * t21120
            t21129 = t21126 ** 2
            t21131 = t21127 ** 2
            t21128 = t21121 * t21127
            t21133 = t21128 ** 2
            t21135 = t21129 ** 2
            t21130 = t21121 * t21129
            t21137 = t21130 ** 2
            t21139 = t21131 ** 2
            t21132 = t21121 * t21131
            t21141 = t21132 ** 2
            t21143 = t21133 ** 2
            t21152 = 3243592 * t21120 - 43551156 * t21127 + 236386656 * t21129 - 699429192 * t21131 + 1272595632 * t21133 - 1496878152 * t21135 + 1147756896 * t21137 - 556196916 * t21139 + 155138632 * t21141 - 19026436 * t21143 - 39556
            t21151 = 1080816 * t21120 - 31556184 * t21127 + 355722048 * t21129 - 2029420272 * t21131 + 6635230624 * t21133 - 13191926000 * t21135 + 16230617920 * t21137 - 12076525912 * t21139 + 4981999088 * t21141 - 875216056 * t21143 - 6072
            t21150 = 2977488 * t21120 - 67252392 * t21127 + 588075456 * t21129 - 2622649104 * t21131 + 6782717664 * t21133 - 10819457808 * t21135 + 10839609792 * t21137 - 6662258856 * t21139 + 2300735184 * t21141 - 342475848 * t21143 - 21576
            t21149 = 1155440 * t21120 - 38329720 * t21127 + 491233600 * t21129 - 3186097200 * t21131 + 11833879200 * t21133 - 26688433200 * t21135 + 37166817600 * t21137 - 31215617400 * t21139 + 14489362800 * t21141 - 2853965400 * t21143 - 5720
            t21101 = t21121 * t21143
            t21103 = t21121 * t21141
            t21105 = t21121 * t21139
            t21107 = t21121 * t21137
            t21109 = t21121 * t21135
            t21111 = t21121 * t21133
            t21148 = 23783045 * t21101 - 198314006 * t21103 + 730727877 * t21105 - 1560484200 * t21107 + 2126945898 * t21109 - 1918030884 * t21111 + 405449 * t21121 - 11293238 * t21126 + 99532785 * t21128 - 438359592 * t21130 + 1145086866 * t21132
            t21147 = 570793080 * t21101 - 4021895856 * t21103 + 12334114584 * t21105 - 21529223232 * t21107 + 23465669232 * t21109 - 16471722528 * t21111 + 496248 * t21121 - 22913712 * t21126 + 316455192 * t21128 - 2042470464 * t21130 + 7400697456 * t21132
            t21146 = 2188040140 * t21101 - 13397538088 * t21103 + 35362549772 * t21105 - 52556633184 * t21107 + 48191470360 * t21109 - 28081927280 * t21111 + 270204 * t21121 - 16048296 * t21126 + 282569628 * t21128 - 2296211808 * t21130 + 10323458552 * t21132
            t21145 = -14269827000 * t21101 + 79471959600 * t21103 - 190064602200 * t21105 + 254946331200 * t21107 - 210149161200 * t21109 + 109649997600 * t21111 - 577720 * t21121 + 38907440 * t21126 - 775180120 * t21128 + 7109044800 * t21130 - 35956892400 * t21132
            t21125 = 4 * phi1
            t21124 = 8 * phi1
            t21123 = 12 * phi1
            t21122 = 16 * phi1
            tfunc[..., c] = (0.41e2 / 0.1828716544e10*1j) * np.sqrt(0.23e2) * np.sqrt(0.17e2) * np.sqrt(0.19e2) * np.sqrt(0.109e3) * np.sqrt(0.3e1) * np.sqrt(0.5e1) * ((1 + t21121) ** (-0.1e1 / 0.2e1)) * ((1 - t21121) ** (-0.1e1 / 0.2e1)) * ((22974421470 * t21101 - 123708423300 * t21103 + 285866761950 * t21105 - 370265520240 * t21107 + 294529391100 * t21109 - 148214790360 * t21111 + 46849502700 * t21132 - 8923714800 * t21130 + 936990054 * t21128 - 45265220 * t21126 + 646646 * t21121) * np.exp((1j) * phi2) + (t21145 - t21149) * np.exp((-1*1j) * (t21125 - phi2)) + (t21146 + t21151) * np.exp((-1*1j) * (t21124 - phi2)) + (t21145 + t21149) * np.exp((1j) * (t21125 + phi2)) + (t21146 - t21151) * np.exp((1j) * (t21124 + phi2)) + (t21147 + t21150) * np.exp((-1*1j) * (t21123 - phi2)) + (t21148 + t21152) * np.exp((-1*1j) * (t21122 - phi2)) + (t21147 - t21150) * np.exp((1j) * (t21123 + phi2)) + (t21148 - t21152) * np.exp((1j) * (t21122 + phi2)))

        if Bindx == 474:
            t21184 = np.cos(phi)
            t21183 = t21184 ** 2
            t21191 = t21183 ** 2
            t21190 = t21184 * t21183
            t21193 = t21190 ** 2
            t21195 = t21191 ** 2
            t21192 = t21184 * t21191
            t21197 = t21192 ** 2
            t21199 = t21193 ** 2
            t21194 = t21184 * t21193
            t21201 = t21194 ** 2
            t21203 = t21195 ** 2
            t21196 = t21184 * t21195
            t21205 = t21196 ** 2
            t21207 = t21197 ** 2
            t21218 = 12464 * t21183 - 167352 * t21191 + 908352 * t21193 - 2687664 * t21195 + 4890144 * t21197 - 5751984 * t21199 + 4410432 * t21201 - 2137272 * t21203 + 596144 * t21205 - 73112 * t21207 - 152
            t21164 = t21184 * t21207
            t21166 = t21184 * t21205
            t21168 = t21184 * t21203
            t21170 = t21184 * t21201
            t21172 = t21184 * t21199
            t21174 = t21184 * t21197
            t21217 = 91390 * t21164 - 762052 * t21166 + 2807934 * t21168 - 5996400 * t21170 + 8173116 * t21172 - 7370328 * t21174 + 1558 * t21184 - 43396 * t21190 + 382470 * t21192 - 1684464 * t21194 + 4400172 * t21196
            t21216 = -2621450 * t21183 + 11796525 * t21191 - 31457400 * t21193 + 55050450 * t21195 - 66060540 * t21197 + 55050450 * t21199 - 31457400 * t21201 + 11796525 * t21203 - 2621450 * t21205 + 262145 * t21207 + 262145
            t21215 = 401166 * t21183 - 9061119 * t21191 + 79233192 * t21193 - 353357478 * t21195 + 913856148 * t21197 - 1457738406 * t21199 + 1460453544 * t21201 - 897626367 * t21203 + 309985038 * t21205 - 46142811 * t21207 - 2907
            t21214 = 76904685 * t21164 - 541882242 * t21166 + 1661812713 * t21168 - 2900697624 * t21170 + 3161600874 * t21172 - 2219285196 * t21174 + 66861 * t21184 - 3087234 * t21190 + 42636969 * t21192 - 275188248 * t21194 + 997118442 * t21196
            t21213 = 262145 * t21164 - 2621450 * t21166 + 11796525 * t21168 - 31457400 * t21170 + 55050450 * t21172 - 66060540 * t21174 + 262145 * t21184 - 2621450 * t21190 + 11796525 * t21192 - 31457400 * t21194 + 55050450 * t21196
            t21212 = -2759712 * t21183 + 80574288 * t21191 - 908286336 * t21193 + 5181839904 * t21195 - 16942130368 * t21197 + 33683732000 * t21199 - 41442605440 * t21201 + 30835714384 * t21203 - 12720835616 * t21205 + 2234741392 * t21207 + 15504
            t21211 = -5089188 * t21183 + 168824994 * t21191 - 2163660720 * t21193 + 14033309940 * t21195 - 52122858840 * t21197 + 117550417140 * t21199 - 163702937520 * t21201 + 137490605730 * t21203 - 63819057060 * t21205 + 12570420330 * t21207 + 25194
            t21210 = 5586853480 * t21164 - 34208733616 * t21166 + 90293308904 * t21168 - 134195988288 * t21170 + 123050157520 * t21172 - 71703260960 * t21174 + 689928 * t21184 - 40977072 * t21190 + 721501896 * t21192 - 5863054656 * t21194 + 26359502864 * t21196
            t21209 = 62852101650 * t21164 - 350037858420 * t21166 + 837148179690 * t21168 - 1122922704240 * t21170 + 925611532740 * t21172 - 482958398520 * t21174 + 2544594 * t21184 - 171369588 * t21190 + 3414316074 * t21192 - 31312110960 * t21194 + 158373766980 * t21196
            t21189 = 4 * phi1
            t21188 = 8 * phi1
            t21187 = 12 * phi1
            t21186 = 16 * phi1
            t21185 = 20 * phi1
            tfunc[..., c] = (0.41e2 / 0.29259464704e11*1j) * np.sqrt(0.2e1) * np.sqrt(0.5e1) * np.sqrt(0.109e3) * np.sqrt(0.23e2) * np.sqrt(0.31e2) * np.sqrt(0.29e2) * np.sqrt(0.11e2) * ((1 + t21184) ** (-0.1e1 / 0.2e1)) * ((1 - t21184) ** (-0.1e1 / 0.2e1)) * ((137846528820 * t21164 - 742250539800 * t21166 + 1715200571700 * t21168 - 2221593121440 * t21170 + 1767176346600 * t21172 - 889288742160 * t21174 + 281097016200 * t21196 - 53542288800 * t21194 + 5621940324 * t21192 - 271591320 * t21190 + 3879876 * t21184) * np.exp((1j) * phi2) + (t21209 - t21211) * np.exp((-1*1j) * (t21189 - phi2)) + (t21210 - t21212) * np.exp((-1*1j) * (t21188 - phi2)) + (t21209 + t21211) * np.exp((1j) * (t21189 + phi2)) + (t21210 + t21212) * np.exp((1j) * (t21188 + phi2)) + (t21214 + t21215) * np.exp((-1*1j) * (t21187 - phi2)) + (t21217 + t21218) * np.exp((-1*1j) * (t21186 - phi2)) + (t21213 - t21216) * np.exp((-1*1j) * (t21185 - phi2)) + (t21214 - t21215) * np.exp((1j) * (t21187 + phi2)) + (t21217 - t21218) * np.exp((1j) * (t21186 + phi2)) + (t21213 + t21216) * np.exp((1j) * (t21185 + phi2)))

        if Bindx == 475:
            t21247 = np.cos(phi)
            t21246 = t21247 ** 2
            t21253 = t21246 ** 2
            t21257 = t21253 ** 2
            t21258 = t21247 * t21257
            t21267 = t21258 ** 2
            t21229 = t21247 * t21267
            t21265 = t21257 ** 2
            t21231 = t21247 * t21265
            t21252 = t21247 * t21246
            t21255 = t21252 ** 2
            t21256 = t21247 * t21255
            t21263 = t21256 ** 2
            t21233 = t21247 * t21263
            t21261 = t21255 ** 2
            t21235 = t21247 * t21261
            t21254 = t21247 * t21253
            t21259 = t21254 ** 2
            t21237 = t21247 * t21259
            t21277 = -65727688 * t21229 + 482978760 * t21231 - 1541648352 * t21233 + 2789258976 * t21235 - 3126060336 * t21237 + 1172296 * t21247 - 31091016 * t21252 + 250540512 * t21254 - 981708000 * t21256 + 2222284848 * t21258
            t21228 = t21259 ** 2
            t21276 = 41079805 * t21228 + 1654160 * t21246 - 15424143 * t21253 + 22309584 * t21255 + 141101646 * t21257 - 654572688 * t21259 + 1251111330 * t21261 - 1334302992 * t21263 + 830198631 * t21265 - 283134656 * t21267 - 20677
            t21275 = -3023473648 * t21229 + 15558036464 * t21231 - 33682667584 * t21233 + 39812322880 * t21235 - 27885829280 * t21237 + 391920 * t21247 - 22754544 * t21252 + 382518336 * t21254 - 2892749376 * t21256 + 11754204832 * t21258
            t21274 = -9859153200 * t21229 + 45304206000 * t21231 - 87249028800 * t21233 + 91408881600 * t21235 - 56574429600 * t21237 + 419120 * t21247 - 27667120 * t21252 + 529131200 * t21254 - 4551768000 * t21256 + 21019408800 * t21258
            t21273 = 1183098384 * t21229 - 7173631632 * t21231 + 18525844032 * t21233 - 26476168512 * t21235 + 22754481120 * t21237 - 1078800 * t21247 + 48373392 * t21252 - 629846592 * t21254 + 3719529792 * t21256 - 11950601184 * t21258
            t21272 = 985915320 * t21228 - 2934336 * t21246 + 69625752 * t21253 - 674897280 * t21255 + 3447542736 * t21257 - 10334386176 * t21259 + 19071587376 * t21261 - 21927084672 * t21263 + 15310437480 * t21265 - 5945827776 * t21267 + 21576
            t21271 = 3779342060 * t21228 - 3546048 * t21246 + 103403676 * t21253 - 1176179520 * t21255 + 6838077192 * t21257 - 22987701440 * t21259 + 47347848760 * t21261 - 60707672000 * t21263 + 47272998020 * t21265 - 20466590848 * t21267 + 20148
            t21270 = -24647883000 * t21228 + 10088000 * t21246 - 331865560 * t21253 + 4224854400 * t21255 - 27267224400 * t21257 + 100961203200 * t21259 - 227405646000 * t21261 + 316882396800 * t21263 - 266802882600 * t21265 + 124377009600 * t21267 - 50440
            t21251 = 2 * phi1
            t21250 = 4 * phi1
            t21249 = 6 * phi1
            t21248 = 8 * phi1
            tfunc[..., c] = (0.41e2 / 0.3657433088e10) * np.sqrt(0.23e2) * np.sqrt(0.17e2) * np.sqrt(0.109e3) * np.sqrt(0.3e1) * np.sqrt(0.2e1) * np.sqrt(0.5e1) * np.sqrt(0.11e2) * ((39683091630 * t21228 - 195362912640 * t21267 + 408133584810 * t21265 - 471247025760 * t21263 + 328189892940 * t21261 - 141156943200 * t21259 + 36871167060 * t21257 - 5516478240 * t21255 + 417792102 * t21253 - 12227488 * t21246 + 58786) * np.exp((2*1j) * phi2) + (t21270 - t21274) * np.exp((-2*1j) * (t21251 - phi2)) + (t21271 + t21275) * np.exp((-2*1j) * (t21250 - phi2)) + (t21272 - t21273) * np.exp((-2*1j) * (t21249 - phi2)) + (t21276 + t21277) * np.exp((-2*1j) * (t21248 - phi2)) + (t21270 + t21274) * np.exp((2*1j) * (t21251 + phi2)) + (t21271 - t21275) * np.exp((2*1j) * (t21250 + phi2)) + (t21272 + t21273) * np.exp((2*1j) * (t21249 + phi2)) + (t21276 - t21277) * np.exp((2*1j) * (t21248 + phi2)))

        if Bindx == 476:
            t21308 = np.cos(phi)
            t21307 = t21308 ** 2
            t21315 = t21307 ** 2
            t21316 = t21308 * t21315
            t21321 = t21316 ** 2
            t21289 = t21321 ** 2
            t21314 = t21308 * t21307
            t21317 = t21314 ** 2
            t21319 = t21315 ** 2
            t21323 = t21317 ** 2
            t21318 = t21308 * t21317
            t21325 = t21318 ** 2
            t21327 = t21319 ** 2
            t21320 = t21308 * t21319
            t21329 = t21320 ** 2
            t21341 = 91390 * t21289 + 3680 * t21307 - 34314 * t21315 + 49632 * t21317 + 313908 * t21319 - 1456224 * t21321 + 2783340 * t21323 - 2968416 * t21325 + 1846938 * t21327 - 629888 * t21329 - 46
            t21290 = t21308 * t21329
            t21292 = t21308 * t21327
            t21294 = t21308 * t21325
            t21296 = t21308 * t21323
            t21298 = t21308 * t21321
            t21340 = 146224 * t21290 - 1074480 * t21292 + 3429696 * t21294 - 6205248 * t21296 + 6954528 * t21298 - 2608 * t21308 + 69168 * t21314 - 557376 * t21316 + 2184000 * t21318 - 4943904 * t21320
            t21339 = 262145 * t21289 - 262145 - 12582960 * t21325 + 12582960 * t21317 + 11010090 * t21323 - 11010090 * t21319 + 7077915 * t21327 - 7077915 * t21315 - 2097160 * t21329 + 2097160 * t21307
            t21338 = 92285622 * t21290 - 559567206 * t21292 + 1445077656 * t21294 - 2065229496 * t21296 + 1774925460 * t21298 - 84150 * t21308 + 3773286 * t21314 - 49130136 * t21316 + 290135736 * t21318 - 932186772 * t21320
            t21337 = -66060540 * t21298 + 66060540 * t21320 + 44040360 * t21296 - 44040360 * t21318 - 18874440 * t21294 + 18874440 * t21316 + 4718610 * t21292 - 4718610 * t21314 - 524290 * t21290 + 524290 * t21308
            t21336 = 76904685 * t21289 - 228888 * t21307 + 5431041 * t21315 - 52644240 * t21317 + 268919838 * t21319 - 806116608 * t21321 + 1487647458 * t21323 - 1710385776 * t21325 + 1194265215 * t21327 - 463794408 * t21329 + 1683
            t21335 = 4469482784 * t21290 - 22998836512 * t21292 + 49791769472 * t21294 - 58852999040 * t21296 + 41222530240 * t21298 - 579360 * t21308 + 33637152 * t21314 - 565461888 * t21316 + 4276238208 * t21318 - 17375781056 * t21320
            t21334 = 25140840660 * t21290 - 115525725300 * t21292 + 222485023440 * t21294 - 233092648080 * t21296 + 144264795480 * t21298 - 1068756 * t21308 + 70551156 * t21314 - 1349284560 * t21316 + 11607008400 * t21318 - 53599492440 * t21320
            t21333 = 5586853480 * t21289 - 5241984 * t21307 + 152857608 * t21315 - 1738700160 * t21317 + 10108461936 * t21319 - 33981819520 * t21321 + 69992472080 * t21323 - 89741776000 * t21325 + 69881823160 * t21327 - 30254960384 * t21329 + 29784
            t21332 = 62852101650 * t21289 - 25724400 * t21307 + 846257178 * t21315 - 10773378720 * t21317 + 69531422220 * t21319 - 257451068160 * t21321 + 579884397300 * t21323 - 808050111840 * t21325 + 680347350630 * t21327 - 317161374480 * t21329 + 128622
            t21313 = 2 * phi1
            t21312 = 4 * phi1
            t21311 = 6 * phi1
            t21310 = 8 * phi1
            t21309 = 10 * phi1
            tfunc[..., c] = (0.41e2 / 0.29259464704e11) * np.sqrt(0.5e1) * np.sqrt(0.109e3) * np.sqrt(0.31e2) * np.sqrt(0.19e2) * np.sqrt(0.29e2) * np.sqrt(0.23e2) * ((204204 + 137846528820 * t21289 - 678629064960 * t21329 + 1417727189340 * t21327 - 1636963352640 * t21325 + 1140028049160 * t21323 - 490334644800 * t21321 + 128078790840 * t21319 - 19162503360 * t21317 + 1451277828 * t21315 - 42474432 * t21307) * np.exp((2*1j) * phi2) + (t21337 + t21339) * np.exp((-2*1j) * (t21309 - phi2)) + (-t21337 + t21339) * np.exp((2*1j) * (t21309 + phi2)) + (t21332 - t21334) * np.exp((-2*1j) * (t21313 - phi2)) + (t21333 - t21335) * np.exp((-2*1j) * (t21312 - phi2)) + (t21336 - t21338) * np.exp((-2*1j) * (t21311 - phi2)) + (-t21340 + t21341) * np.exp((-2*1j) * (t21310 - phi2)) + (t21332 + t21334) * np.exp((2*1j) * (t21313 + phi2)) + (t21333 + t21335) * np.exp((2*1j) * (t21312 + phi2)) + (t21336 + t21338) * np.exp((2*1j) * (t21311 + phi2)) + (t21340 + t21341) * np.exp((2*1j) * (t21310 + phi2)))

        if Bindx == 477:
            t21371 = np.cos(phi)
            t21370 = t21371 ** 2
            t21378 = t21370 ** 2
            t21377 = t21371 * t21370
            t21380 = t21377 ** 2
            t21382 = t21378 ** 2
            t21379 = t21371 * t21378
            t21384 = t21379 ** 2
            t21386 = t21380 ** 2
            t21381 = t21371 * t21380
            t21388 = t21381 ** 2
            t21390 = t21382 ** 2
            t21383 = t21371 * t21382
            t21392 = t21383 ** 2
            t21394 = t21384 ** 2
            t21403 = 16040016 * t21370 - 460429272 * t21378 + 5134372800 * t21380 - 29159367984 * t21382 + 95487527904 * t21384 - 191219241840 * t21386 + 238139490240 * t21388 - 180090880440 * t21390 + 75758212176 * t21392 - 13605631416 * t21394 - 92184
            t21402 = 10939032 * t21370 - 172834548 * t21378 + 1211104032 * t21380 - 4527788328 * t21382 + 10069303440 * t21384 - 14068781832 * t21386 + 12525903648 * t21388 - 6922540932 * t21390 + 2170610328 * t21392 - 295774596 * t21394 - 140244
            t21401 = 29875568 * t21370 - 672185896 * t21378 + 6004169280 * t21380 - 27920595408 * t21382 + 76327689120 * t21384 - 129639928208 * t21386 + 138708421696 * t21388 - 91085493320 * t21390 + 33572212848 * t21392 - 5323942728 * t21394 - 222952
            t21351 = t21371 * t21394
            t21353 = t21371 * t21392
            t21355 = t21371 * t21390
            t21357 = t21371 * t21388
            t21359 = t21371 * t21386
            t21361 = t21371 * t21384
            t21400 = -123239415 * t21351 + 716684598 * t21353 - 1498590747 * t21355 + 771406728 * t21357 + 2239464738 * t21359 - 4961174652 * t21361 + 3670617 * t21371 - 93192138 * t21377 + 695558997 * t21379 - 2444625528 * t21381 + 4694036802 * t21383
            t21399 = 20489040 * t21370 - 666797560 * t21378 + 8391531200 * t21380 - 53500402800 * t21382 + 195549900000 * t21384 - 434517985200 * t21386 + 596960452800 * t21388 - 495270067800 * t21390 + 227399173200 * t21392 - 44366189400 * t21394 - 103480
            t21398 = -2957745960 * t21351 + 16775728368 * t21353 - 39214574184 * t21355 + 47630314560 * t21357 - 29996839504 * t21359 + 6413394080 * t21361 + 1186680 * t21371 - 50329616 * t21377 + 561587320 * t21379 - 2392404416 * t21381 + 3229682672 * t21383
            t21397 = -11338026180 * t21351 + 63144084264 * t21353 - 150959385972 * t21355 + 202566448608 * t21357 - 167481218760 * t21359 + 88164860400 * t21361 - 652740 * t21371 + 38596392 * t21377 - 700622964 * t21379 + 6044556768 * t21381 - 29478639816 * t21383
            t21396 = 73943649000 * t21351 - 407258866800 * t21353 + 965468284200 * t21355 - 1287073128000 * t21357 + 1057462414800 * t21359 - 551709943200 * t21361 + 3066440 * t21371 - 202798960 * t21377 + 3982722120 * t21379 - 36138356800 * t21381 + 181522957200 * t21383
            t21376 = 4 * phi1
            t21375 = 8 * phi1
            t21374 = -3 * phi2
            t21373 = 3 * phi2
            t21372 = 16 * phi1
            tfunc[..., c] = (-0.41e2 / 0.1828716544e10*1j) * np.sqrt(0.17e2) * np.sqrt(0.109e3) * np.sqrt(0.5e1) * np.sqrt(0.3e1) * np.sqrt(0.11e2) * ((-119049274890 * t21351 + 653244739140 * t21353 - 1538400435810 * t21355 + 2030850277680 * t21357 - 1646559548340 * t21359 + 844589043480 * t21361 - 272132739060 * t21383 + 52839208240 * t21381 - 5655742274 * t21379 + 278528068 * t21377 - 4056234 * t21371) * np.exp((3*1j) * phi2) + (t21398 - t21401) * np.exp((-3*1j) * (t21376 - phi2)) + (t21396 + t21399) * np.exp((-1*1j) * (t21376 + t21374)) + (t21397 - t21403) * np.exp((-1*1j) * (t21375 + t21374)) + (t21396 - t21399) * np.exp((1j) * (t21376 + t21373)) + (t21397 + t21403) * np.exp((1j) * (t21375 + t21373)) + (t21398 + t21401) * np.exp((3*1j) * (t21376 + phi2)) + (t21400 - t21402) * np.exp((-1*1j) * (t21372 + t21374)) + (t21400 + t21402) * np.exp((1j) * (t21372 + t21373))) * ((1 + t21371) ** (-0.1e1 / 0.2e1)) * ((1 - t21371) ** (-0.1e1 / 0.2e1))

        if Bindx == 478:
            t21435 = np.cos(phi)
            t21434 = t21435 ** 2
            t21443 = t21434 ** 2
            t21444 = t21435 * t21443
            t21449 = t21444 ** 2
            t21459 = t21449 ** 2
            t21415 = t21435 * t21459
            t21447 = t21443 ** 2
            t21448 = t21435 * t21447
            t21457 = t21448 ** 2
            t21417 = t21435 * t21457
            t21455 = t21447 ** 2
            t21419 = t21435 * t21455
            t21442 = t21435 * t21434
            t21445 = t21442 ** 2
            t21446 = t21435 * t21445
            t21453 = t21446 ** 2
            t21421 = t21435 * t21453
            t21451 = t21445 ** 2
            t21423 = t21435 * t21451
            t21425 = t21435 * t21449
            t21470 = 91390 * t21415 - 531468 * t21417 + 1111302 * t21419 - 572048 * t21421 - 1660708 * t21423 + 3679032 * t21425 - 2722 * t21435 + 69108 * t21442 - 515802 * t21444 + 1812848 * t21446 - 3480932 * t21448
            t21469 = 8112 * t21434 - 128168 * t21443 + 898112 * t21445 - 3357648 * t21447 + 7467040 * t21449 - 10432912 * t21451 + 9288768 * t21453 - 5133512 * t21455 + 1609648 * t21457 - 219336 * t21459 - 104
            t21468 = -1572870 * t21434 + 2359305 * t21443 + 6291480 * t21445 - 33030270 * t21447 + 66060540 * t21449 - 77070630 * t21451 + 56623320 * t21453 - 25952355 * t21455 + 6815770 * t21457 - 786435 * t21459 + 262145
            t21467 = -776798 * t21434 + 17477581 * t21443 - 156115080 * t21445 + 725966538 * t21447 - 1984604820 * t21449 + 3370782338 * t21451 - 3606573256 * t21453 + 2368324145 * t21455 - 872914878 * t21457 + 138428433 * t21459 + 5797
            t21466 = 76904685 * t21415 - 436187598 * t21417 + 1019622549 * t21419 - 1238441160 * t21421 + 779951194 * t21423 - 166755380 * t21425 - 30855 * t21435 + 1308626 * t21442 - 14601895 * t21444 + 62205176 * t21446 - 83975342 * t21448
            t21465 = 262145 * t21415 - 1572870 * t21417 + 2359305 * t21419 + 6291480 * t21421 - 33030270 * t21423 + 66060540 * t21425 - 786435 * t21435 + 6815770 * t21442 - 25952355 * t21444 + 56623320 * t21446 - 77070630 * t21448
            t21464 = -7903776 * t21434 + 226878192 * t21443 - 2529980800 * t21445 + 14368384224 * t21447 - 47051825344 * t21449 + 94223974240 * t21451 - 117344096640 * t21453 + 88740433840 * t21455 - 37330133536 * t21457 + 6704224176 * t21459 + 45424
            t21463 = 17415684 * t21434 - 566777926 * t21443 + 7132801520 * t21445 - 45475342380 * t21447 + 166217415000 * t21449 - 369340287420 * t21451 + 507416384880 * t21453 - 420979557630 * t21455 + 193289297220 * t21457 - 37711260990 * t21459 - 87958
            t21462 = 5586853480 * t21415 - 31114476304 * t21417 + 74385784392 * t21419 - 99815351488 * t21421 + 82526977360 * t21423 - 43443554400 * t21425 + 321640 * t21435 - 19018512 * t21442 + 345234504 * t21444 - 2978477248 * t21446 + 14525706576 * t21448
            t21461 = 62852101650 * t21415 - 346170036780 * t21417 + 820648041570 * t21419 - 1094012158800 * t21421 + 898843052580 * t21423 - 468953451720 * t21425 + 2606474 * t21435 - 172379116 * t21442 + 3385313802 * t21444 - 30717603280 * t21446 + 154294513620 * t21448
            t21441 = 4 * phi1
            t21440 = 8 * phi1
            t21439 = -3 * phi2
            t21438 = 3 * phi2
            t21437 = 16 * phi1
            t21436 = 20 * phi1
            tfunc[..., c] = (0.123e3 / 0.29259464704e11*1j) * np.sqrt(0.2e1) * np.sqrt(0.5e1) * np.sqrt(0.109e3) * np.sqrt(0.31e2) * np.sqrt(0.19e2) * np.sqrt(0.29e2) * ((1 + t21435) ** (-0.1e1 / 0.2e1)) * ((1 - t21435) ** (-0.1e1 / 0.2e1)) * ((137846528820 * t21415 - 756388645320 * t21417 + 1781305767780 * t21419 - 2351510847840 * t21421 + 1906542634920 * t21423 - 977945208240 * t21425 + 315101066280 * t21448 - 61182241120 * t21446 + 6548754212 * t21444 - 322506184 * t21442 + 4696692 * t21435) * np.exp((3*1j) * phi2) + (t21466 - t21467) * np.exp((-3*1j) * (t21441 - phi2)) + (t21461 + t21463) * np.exp((-1*1j) * (t21441 + t21439)) + (t21462 - t21464) * np.exp((-1*1j) * (t21440 + t21439)) + (t21461 - t21463) * np.exp((1j) * (t21441 + t21438)) + (t21462 + t21464) * np.exp((1j) * (t21440 + t21438)) + (t21466 + t21467) * np.exp((3*1j) * (t21441 + phi2)) + (t21469 + t21470) * np.exp((-1*1j) * (t21437 + t21439)) + (t21465 + t21468) * np.exp((-1*1j) * (t21436 + t21439)) + (-t21469 + t21470) * np.exp((1j) * (t21437 + t21438)) + (t21465 - t21468) * np.exp((1j) * (t21436 + t21438)))

        if Bindx == 479:
            t21499 = np.cos(phi)
            t21498 = t21499 ** 2
            t21504 = t21498 ** 2
            t21508 = t21504 ** 2
            t21509 = t21499 * t21508
            t21518 = t21509 ** 2
            t21481 = t21499 * t21518
            t21516 = t21508 ** 2
            t21483 = t21499 * t21516
            t21503 = t21499 * t21498
            t21506 = t21503 ** 2
            t21507 = t21499 * t21506
            t21514 = t21507 ** 2
            t21485 = t21499 * t21514
            t21512 = t21506 ** 2
            t21487 = t21499 * t21512
            t21505 = t21499 * t21504
            t21510 = t21505 ** 2
            t21489 = t21499 * t21510
            t21528 = -6704224176 * t21481 + 41066765904 * t21483 - 105052163136 * t21485 + 143310035904 * t21487 - 108771434016 * t21489 - 37412784 * t21499 + 784201296 * t21503 - 3078118464 * t21505 - 2608624704 * t21507 + 41090974176 * t21509
            t21527 = 120676035168 * t21481 - 657122539680 * t21483 + 1510778101632 * t21485 - 1905237783168 * t21487 + 1433761620288 * t21489 - 44619168 * t21499 + 1980417888 * t21503 - 27305549952 * t21505 + 179358698880 * t21507 - 656844381888 * t21509
            t21526 = 308394312096 * t21481 - 1529485960800 * t21483 + 3202927511424 * t21485 - 3680453066880 * t21487 + 2523103481280 * t21489 - 36933216 * t21499 + 2081474976 * t21503 - 34329745536 * t21505 + 257570398080 * t21507 - 1049771471424 * t21509
            t21525 = 1005633626400 * t21481 - 4694314053600 * t21483 + 9203985014400 * t21485 - 9838233110400 * t21487 + 6225206769600 * t21489 - 52829920 * t21499 + 3384578080 * t21503 - 62895497600 * t21505 + 526444214400 * t21507 - 2369148225600 * t21509
            t21480 = t21510 ** 2
            t21524 = -192746445060 * t21480 - 14404440 * t21498 + 204511308 * t21504 + 2142049248 * t21506 - 48024435528 * t21508 + 305282004720 * t21510 - 959373927240 * t21512 + 1681337848800 * t21514 - 1672475603892 * t21516 + 883668317352 * t21518 + 84732
            t21523 = -2095070055 * t21480 - 437674554 * t21498 + 5712281061 * t21504 - 31473321144 * t21506 + 90551499906 * t21508 - 148600460316 * t21510 + 140341313154 * t21512 - 68657226936 * t21514 + 8141911269 * t21516 + 6510833094 * t21518 + 5914521
            t21522 = -50281681320 * t21480 - 502073520 * t21498 + 10321764216 * t21504 - 79036685376 * t21506 + 292254816816 * t21508 - 569278531104 * t21510 + 551547935280 * t21512 - 128526851136 * t21514 - 226082152584 * t21516 + 199579596624 * t21518 + 3862104
            t21521 = 1257042033000 * t21480 - 514588880 * t21498 + 16529032520 * t21504 - 206856062400 * t21506 + 1321264011600 * t21508 - 4872960549600 * t21510 + 10997948504400 * t21512 - 15437468337600 * t21514 + 13152216630600 * t21516 - 6227192840400 * t21518 + 2652520
            t21502 = 2 * phi1
            t21501 = 3 * phi1
            t21500 = 4 * phi1
            tfunc[..., c] = -(0.41e2 / 0.7314866176e10) * np.sqrt(0.109e3) * np.sqrt(0.2e1) * np.sqrt(0.5e1) * np.sqrt(0.11e2) * ((-4056234 - 2259362900340 * t21508 + 348349375920 * t21506 - 27180824034 * t21504 + 819359268 * t21498 - 2023837673130 * t21480 + 10274868186660 * t21518 - 22135987522530 * t21516 + 26356172940720 * t21514 - 18925617159540 * t21512 + 8391780273240 * t21510) * np.exp((4*1j) * phi2) + (t21521 - t21525) * np.exp((-4*1j) * (phi1 - phi2)) + (t21524 + t21526) * np.exp((-4*1j) * (t21502 - phi2)) + (t21522 + t21527) * np.exp((-4*1j) * (t21501 - phi2)) + (t21523 - t21528) * np.exp((-4*1j) * (t21500 - phi2)) + (t21521 + t21525) * np.exp((4*1j) * (phi1 + phi2)) + (t21524 - t21526) * np.exp((4*1j) * (t21502 + phi2)) + (t21522 - t21527) * np.exp((4*1j) * (t21501 + phi2)) + (t21523 + t21528) * np.exp((4*1j) * (t21500 + phi2)))

        if Bindx == 480:
            t21559 = np.cos(phi)
            t21558 = t21559 ** 2
            t21565 = t21558 ** 2
            t21569 = t21565 ** 2
            t21570 = t21559 * t21569
            t21579 = t21570 ** 2
            t21541 = t21559 * t21579
            t21577 = t21569 ** 2
            t21543 = t21559 * t21577
            t21564 = t21559 * t21558
            t21567 = t21564 ** 2
            t21568 = t21559 * t21567
            t21575 = t21568 ** 2
            t21545 = t21559 * t21575
            t21573 = t21567 ** 2
            t21547 = t21559 * t21573
            t21566 = t21559 * t21565
            t21571 = t21566 ** 2
            t21549 = t21559 * t21571
            t21591 = 292448 * t21541 - 1791392 * t21543 + 4582528 * t21545 - 6251392 * t21547 + 4744768 * t21549 + 1632 * t21559 - 34208 * t21564 + 134272 * t21566 + 113792 * t21568 - 1792448 * t21570
            t21540 = t21571 ** 2
            t21590 = 91390 * t21540 + 19092 * t21558 - 249178 * t21565 + 1372912 * t21567 - 3949988 * t21569 + 6482168 * t21571 - 6121892 * t21573 + 2994928 * t21575 - 355162 * t21577 - 284012 * t21579 - 258
            t21589 = 184571244 * t21541 - 1005053940 * t21543 + 2310700656 * t21545 - 2914017744 * t21547 + 2192905704 * t21549 - 68244 * t21559 + 3029004 * t21564 - 41763216 * t21566 + 274325040 * t21568 - 1004628504 * t21570
            t21588 = 29360240 * t21547 + 29360240 * t21568 - 20971600 * t21545 - 20971600 * t21566 - 14680120 * t21549 - 14680120 * t21570 + 7340060 * t21543 + 7340060 * t21564 - 1048580 * t21541 - 1048580 * t21559
            t21587 = 262145 * t21540 - 524290 * t21558 - 4980755 * t21565 + 27263080 * t21567 - 62390510 * t21569 + 80740660 * t21571 - 62390510 * t21573 + 27263080 * t21575 - 4980755 * t21577 - 524290 * t21579 + 262145
            t21586 = 76904685 * t21540 + 767910 * t21558 - 15786903 * t21565 + 120884808 * t21567 - 446997078 * t21569 + 870698532 * t21571 - 843579990 * t21573 + 196578888 * t21575 + 345787497 * t21577 - 305252442 * t21579 - 5907
            t21585 = 8938965568 * t21541 - 44332926400 * t21543 + 92838478592 * t21545 - 106679799040 * t21547 + 73133434240 * t21549 - 1070528 * t21559 + 60332608 * t21564 - 995065088 * t21566 + 7465808640 * t21568 - 30428158592 * t21570
            t21584 = 5586853480 * t21540 + 417520 * t21558 - 5927864 * t21565 - 62088384 * t21567 + 1392012624 * t21569 - 8848753760 * t21571 + 27807939920 * t21573 - 48734430400 * t21575 + 48477553736 * t21577 - 25613574416 * t21579 - 2456
            t21583 = 50281681320 * t21541 - 234715702680 * t21543 + 460199250720 * t21545 - 491911655520 * t21547 + 311260338480 * t21549 - 2641496 * t21559 + 169228904 * t21564 - 3144774880 * t21566 + 26322210720 * t21568 - 118457411280 * t21570
            t21582 = 62852101650 * t21540 - 25729444 * t21558 + 826451626 * t21565 - 10342803120 * t21567 + 66063200580 * t21569 - 243648027480 * t21571 + 549897425220 * t21573 - 771873416880 * t21575 + 657610831530 * t21577 - 311359642020 * t21579 + 132626
            t21563 = 2 * phi1
            t21562 = 3 * phi1
            t21561 = 4 * phi1
            t21560 = 5 * phi1
            tfunc[..., c] = (0.41e2 / 0.58518929408e11) * np.sqrt(0.5e1) * np.sqrt(0.3e1) * np.sqrt(0.109e3) * np.sqrt(0.31e2) * np.sqrt(0.17e2) * np.sqrt(0.19e2) * np.sqrt(0.29e2) * ((276276 + 137846528820 * t21540 - 699836223240 * t21579 + 1507714320420 * t21577 - 1795157290080 * t21575 + 1289051323560 * t21573 - 571576365360 * t21571 + 153888494760 * t21569 - 23726582880 * t21567 + 1851325476 * t21565 - 55807752 * t21558) * np.exp((4*1j) * phi2) + (t21582 - t21583) * np.exp((-4*1j) * (phi1 - phi2)) + (t21584 - t21585) * np.exp((-4*1j) * (t21563 - phi2)) + (t21586 - t21589) * np.exp((-4*1j) * (t21562 - phi2)) + (t21590 - t21591) * np.exp((-4*1j) * (t21561 - phi2)) + (t21587 + t21588) * np.exp((-4*1j) * (t21560 - phi2)) + (t21582 + t21583) * np.exp((4*1j) * (phi1 + phi2)) + (t21584 + t21585) * np.exp((4*1j) * (t21563 + phi2)) + (t21586 + t21589) * np.exp((4*1j) * (t21562 + phi2)) + (t21590 + t21591) * np.exp((4*1j) * (t21561 + phi2)) + (t21587 - t21588) * np.exp((4*1j) * (t21560 + phi2)))

        if Bindx == 481:
            t21621 = np.cos(phi)
            t21620 = t21621 ** 2
            t21629 = t21620 ** 2
            t21628 = t21621 * t21620
            t21631 = t21628 ** 2
            t21633 = t21629 ** 2
            t21630 = t21621 * t21629
            t21635 = t21630 ** 2
            t21637 = t21631 ** 2
            t21632 = t21621 * t21631
            t21639 = t21632 ** 2
            t21641 = t21633 ** 2
            t21634 = t21621 * t21633
            t21643 = t21634 ** 2
            t21645 = t21635 ** 2
            t21654 = -2718576 * t21620 - 133577016 * t21629 + 4179702720 * t21631 - 36782721648 * t21633 + 152803216992 * t21635 - 352323091248 * t21637 + 478331116992 * t21639 - 381282851544 * t21641 + 165379910544 * t21643 - 30169008792 * t21645 + 21576
            t21653 = -115539480 * t21620 + 1325036100 * t21629 - 6104886048 * t21631 + 13389741960 * t21633 - 12195834000 * t21635 - 4737118680 * t21637 + 22088214240 * t21639 - 21542977932 * t21641 + 9567769320 * t21643 - 1676056044 * t21645 + 1650564
            t21652 = 75229872 * t21620 - 2099139528 * t21629 + 23180736576 * t21631 - 132560624016 * t21633 + 443065646112 * t21635 - 914782570704 * t21637 + 1182733663296 * t21639 - 932665859880 * t21641 + 410151949488 * t21643 - 77098578024 * t21645 - 453192
            t21601 = t21621 * t21645
            t21603 = t21621 * t21643
            t21605 = t21621 * t21641
            t21607 = t21621 * t21639
            t21609 = t21621 * t21637
            t21611 = t21621 * t21635
            t21651 = 419014011 * t21601 - 322318470 * t21603 - 7969702425 * t21605 + 31220968248 * t21607 - 54711153210 * t21609 + 53950518300 * t21611 - 3163581 * t21621 + 117831930 * t21628 - 1744875393 * t21630 + 10363707960 * t21632 - 31320827370 * t21634
            t21650 = -150670000 * t21620 + 4715113000 * t21629 - 57192865600 * t21631 + 352334034000 * t21633 - 1247685722400 * t21635 + 2693315898000 * t21637 - 3604421832000 * t21639 + 2920700507400 * t21641 - 1313023662000 * t21643 + 251408406600 * t21645 + 793000
            t21649 = 38549289012 * t21601 - 171989135592 * t21603 + 296748115908 * t21605 - 224369600736 * t21607 + 22126209576 * t21609 + 85508108688 * t21611 - 4049196 * t21621 + 218012952 * t21628 - 3272320860 * t21630 + 20901045024 * t21632 - 64415674776 * t21634
            t21648 = 10056336264 * t21601 - 29395444464 * t21603 - 19750648824 * t21605 + 197466141120 * t21607 - 363432659952 * t21609 + 340492323168 * t21611 - 19051608 * t21621 + 800599056 * t21628 - 10023583896 * t21630 + 58105203648 * t21632 - 184299214512 * t21634
            t21647 = -251408406600 * t21601 + 1353737574000 * t21603 - 3139235181000 * t21605 + 4099927617600 * t21607 - 3309440154000 * t21609 + 1703903978400 * t21611 - 10090600 * t21621 + 644358000 * t21628 - 12369429800 * t21630 + 110975592000 * t21632 - 556725858000 * t21634
            t21627 = 4 * phi1
            t21626 = 8 * phi1
            t21625 = -5 * phi2
            t21624 = 5 * phi2
            t21623 = 12 * phi1
            t21622 = 16 * phi1
            tfunc[..., c] = (0.41e2 / 0.1828716544e10*1j) * np.sqrt(0.109e3) * np.sqrt(0.2e1) * np.sqrt(0.5e1) * np.sqrt(0.11e2) * ((1 + t21621) ** (-0.1e1 / 0.2e1)) * ((1 - t21621) ** (-0.1e1 / 0.2e1)) * ((404767534626 * t21601 - 2304061350948 * t21603 + 5632243470378 * t21605 - 7721719122096 * t21607 + 6504891980580 * t21609 - 3468226094424 * t21611 + 1161940679172 * t21634 - 234645024432 * t21632 + 26126203194 * t21630 - 1338557220 * t21628 + 20281170 * t21621) * np.exp((5*1j) * phi2) + (t21647 + t21650) * np.exp((-1*1j) * (t21627 + t21625)) + (t21649 + t21652) * np.exp((-1*1j) * (t21626 + t21625)) + (t21647 - t21650) * np.exp((1j) * (t21627 + t21624)) + (t21649 - t21652) * np.exp((1j) * (t21626 + t21624)) + (t21648 + t21654) * np.exp((-1*1j) * (t21623 + t21625)) + (t21651 + t21653) * np.exp((-1*1j) * (t21622 + t21625)) + (t21648 - t21654) * np.exp((1j) * (t21623 + t21624)) + (t21651 - t21653) * np.exp((1j) * (t21622 + t21624)))

        if Bindx == 482:
            t21686 = np.cos(phi)
            t21685 = t21686 ** 2
            t21694 = t21685 ** 2
            t21695 = t21686 * t21694
            t21700 = t21695 ** 2
            t21710 = t21700 ** 2
            t21666 = t21686 * t21710
            t21698 = t21694 ** 2
            t21699 = t21686 * t21698
            t21708 = t21699 ** 2
            t21668 = t21686 * t21708
            t21706 = t21698 ** 2
            t21670 = t21686 * t21706
            t21693 = t21686 * t21685
            t21696 = t21693 ** 2
            t21697 = t21686 * t21696
            t21704 = t21697 ** 2
            t21672 = t21686 * t21704
            t21702 = t21696 ** 2
            t21674 = t21686 * t21702
            t21676 = t21686 * t21700
            t21721 = 18278 * t21666 - 14060 * t21668 - 347650 * t21670 + 1361904 * t21672 - 2386580 * t21674 + 2353400 * t21676 - 138 * t21686 + 5140 * t21693 - 76114 * t21695 + 452080 * t21697 - 1366260 * t21699
            t21720 = 5040 * t21685 - 57800 * t21694 + 266304 * t21696 - 584080 * t21698 + 532000 * t21700 + 206640 * t21702 - 963520 * t21704 + 939736 * t21706 - 417360 * t21708 + 73112 * t21710 - 72
            t21719 = 4158 * t21685 + 204303 * t21694 - 6392760 * t21696 + 56258334 * t21698 - 233709036 * t21700 + 538870134 * t21702 - 731596536 * t21704 + 583163427 * t21706 - 252944802 * t21708 + 46142811 * t21710 - 33
            t21718 = -104858 * t21685 + 2464163 * t21694 - 9646936 * t21696 + 18350150 * t21698 - 19084156 * t21700 + 9542078 * t21702 + 419432 * t21704 - 3198169 * t21706 + 1572870 * t21708 - 262145 * t21710 - 52429
            t21717 = 52429 * t21666 + 104858 * t21668 - 2464163 * t21670 + 9646936 * t21672 - 18350150 * t21674 + 19084156 * t21676 + 262145 * t21686 - 1572870 * t21693 + 3198169 * t21695 - 419432 * t21697 - 9542078 * t21699
            t21716 = 15380937 * t21666 - 44959662 * t21668 - 30208167 * t21670 + 302019960 * t21672 - 555861966 * t21674 + 520775244 * t21676 - 29139 * t21686 + 1224498 * t21693 - 15330843 * t21695 + 88870584 * t21697 - 281881446 * t21699
            t21715 = 2180576 * t21685 - 60844624 * t21694 + 671905408 * t21696 - 3842336928 * t21698 + 12842482496 * t21700 - 26515436832 * t21702 + 34282135168 * t21704 - 27033793040 * t21706 + 11888462304 * t21708 - 2234741392 * t21710 - 13136
            t21714 = -7533500 * t21685 + 235755650 * t21694 - 2859643280 * t21696 + 17616701700 * t21698 - 62384286120 * t21700 + 134665794900 * t21702 - 180221091600 * t21704 + 146035025370 * t21706 - 65651183100 * t21708 + 12570420330 * t21710 + 39650
            t21713 = 1117370696 * t21666 - 4985192336 * t21668 + 8601394664 * t21670 - 6503466688 * t21672 + 641339408 * t21674 + 2478495904 * t21676 - 117368 * t21686 + 6319216 * t21693 - 94849880 * t21695 + 605827392 * t21697 - 1867121008 * t21699
            t21712 = 12570420330 * t21666 - 67686878700 * t21668 + 156961759050 * t21670 - 204996380880 * t21672 + 165472007700 * t21674 - 85195198920 * t21676 + 504530 * t21686 - 32217900 * t21693 + 618471490 * t21695 - 5548779600 * t21697 + 27836292900 * t21699
            t21692 = 4 * phi1
            t21691 = 8 * phi1
            t21690 = -5 * phi2
            t21689 = 5 * phi2
            t21688 = 12 * phi1
            t21687 = 16 * phi1
            tfunc[..., c] = (0.41e2 / 0.14629732352e11*1j) * np.sqrt(0.5e1) * np.sqrt(0.3e1) * np.sqrt(0.109e3) * np.sqrt(0.31e2) * np.sqrt(0.17e2) * np.sqrt(0.19e2) * np.sqrt(0.29e2) * ((1 + t21686) ** (-0.1e1 / 0.2e1)) * ((1 - t21686) ** (-0.1e1 / 0.2e1)) * ((79141470408 * t21699 - 15982014048 * t21697 + 1779493716 * t21695 - 91171080 * t21693 + 1381380 * t21686 + 27569305764 * t21666 - 156932971272 * t21668 + 383620298292 * t21670 - 525937525344 * t21672 + 443057658120 * t21674 - 236225925936 * t21676) * np.exp((5*1j) * phi2) + (t21717 + t21718) * np.exp((-5*1j) * (t21692 - phi2)) + (t21712 - t21714) * np.exp((-1*1j) * (t21692 + t21690)) + (t21713 + t21715) * np.exp((-1*1j) * (t21691 + t21690)) + (t21712 + t21714) * np.exp((1j) * (t21692 + t21689)) + (t21713 - t21715) * np.exp((1j) * (t21691 + t21689)) + (t21717 - t21718) * np.exp((5*1j) * (t21692 + phi2)) + (t21716 - t21719) * np.exp((-1*1j) * (t21688 + t21690)) + (-t21720 + t21721) * np.exp((-1*1j) * (t21687 + t21690)) + (t21716 + t21719) * np.exp((1j) * (t21688 + t21689)) + (t21720 + t21721) * np.exp((1j) * (t21687 + t21689)))

        if Bindx == 483:
            t21750 = np.cos(phi)
            t21749 = t21750 ** 2
            t21757 = t21749 ** 2
            t21761 = t21757 ** 2
            t21762 = t21750 * t21761
            t21771 = t21762 ** 2
            t21732 = t21750 * t21771
            t21769 = t21761 ** 2
            t21734 = t21750 * t21769
            t21756 = t21750 * t21749
            t21759 = t21756 ** 2
            t21760 = t21750 * t21759
            t21767 = t21760 ** 2
            t21736 = t21750 * t21767
            t21765 = t21759 ** 2
            t21738 = t21750 * t21765
            t21758 = t21750 * t21757
            t21763 = t21758 ** 2
            t21740 = t21750 * t21763
            t21781 = -773564328 * t21732 + 3162113832 * t21734 - 3507998688 * t21736 - 2947540512 * t21738 + 10840170768 * t21740 - 6969048 * t21750 + 165423192 * t21756 - 1421685792 * t21758 + 5576705568 * t21760 - 11086654992 * t21762
            t21780 = -13924157904 * t21732 + 61478007120 * t21734 - 106538893376 * t21736 + 87245231424 * t21738 - 26841493344 * t21740 - 5998128 * t21750 + 226361008 * t21756 - 2221637568 * t21758 + 8111712960 * t21760 - 7529132192 * t21762
            t21779 = -35583959088 * t21732 + 165434195760 * t21734 - 323883204672 * t21736 + 347385509952 * t21738 - 222460038432 * t21740 + 2957616 * t21750 - 159902256 * t21756 + 2627471424 * t21758 - 20277057600 * t21760 + 86914027296 * t21762
            t21778 = -116034649200 * t21732 + 555744898800 * t21734 - 1121136427200 * t21736 + 1236973656000 * t21738 - 810707412000 * t21740 + 8639600 * t21750 - 525596400 * t21756 + 9300164800 * t21758 - 74355595200 * t21760 + 320732320800 * t21762
            t21731 = t21763 ** 2
            t21777 = 161159235 * t21731 - 38146368 * t21749 + 290820207 * t21757 - 398336112 * t21759 - 2398727982 * t21761 + 10223960208 * t21763 - 16873257282 * t21765 + 14016589488 * t21767 - 5500366983 * t21769 + 515709552 * t21771 + 596037
            t21776 = 14826649620 * t21731 + 31486080 * t21749 - 801864732 * t21757 + 7620722112 * t21759 - 34972280712 * t21761 + 84985703616 * t21763 - 106249178040 * t21765 + 46095484224 * t21767 + 35908753404 * t21769 - 47445278784 * t21771 - 196788
            t21775 = 3867821640 * t21731 + 57823680 * t21749 - 1206767256 * t21757 + 10251419264 * t21759 - 45086806224 * t21761 + 112142727168 * t21763 - 161061459760 * t21765 + 127297364352 * t21767 - 44198802792 * t21769 - 2062838208 * t21771 - 481864
            t21774 = -96695541000 * t21731 + 32641600 * t21749 - 1020015400 * t21757 + 12715580800 * t21759 - 82468321200 * t21761 + 312977280000 * t21763 - 732381138000 * t21765 + 1068831888000 * t21767 - 946130794200 * t21769 + 464138596800 * t21771 - 177400
            t21755 = 2 * phi1
            t21754 = 4 * phi1
            t21753 = 8 * phi1
            t21752 = -3 * phi2
            t21751 = 3 * phi2
            tfunc[..., c] = (0.41e2 / 0.1828716544e10) * np.sqrt(0.109e3) * np.sqrt(0.3e1) * np.sqrt(0.11e2) * np.sqrt(0.13e2) * ((520030 + 155679821010 * t21731 - 830292378720 * t21771 + 1880780540310 * t21769 - 2356235128800 * t21767 + 1781201555700 * t21765 - 831740142240 * t21763 + 235857526380 * t21761 - 38299169440 * t21759 + 3146701530 * t21757 - 99845760 * t21749) * np.exp((6*1j) * phi2) + (t21775 + t21780) * np.exp((-6*1j) * (t21755 - phi2)) + (t21774 - t21778) * np.exp((-2*1j) * (t21755 + t21752)) + (t21776 + t21779) * np.exp((-2*1j) * (t21754 + t21752)) + (t21777 + t21781) * np.exp((-2*1j) * (t21753 + t21752)) + (t21774 + t21778) * np.exp((2*1j) * (t21755 + t21751)) + (t21776 - t21779) * np.exp((2*1j) * (t21754 + t21751)) + (t21777 - t21781) * np.exp((2*1j) * (t21753 + t21751)) + (t21775 - t21780) * np.exp((6*1j) * (t21755 + phi2)))

        if Bindx == 484:
            t21812 = np.cos(phi)
            t21811 = t21812 ** 2
            t21820 = t21811 ** 2
            t21821 = t21812 * t21820
            t21826 = t21821 ** 2
            t21793 = t21826 ** 2
            t21819 = t21812 * t21811
            t21822 = t21819 ** 2
            t21824 = t21820 ** 2
            t21828 = t21822 ** 2
            t21823 = t21812 * t21822
            t21830 = t21823 ** 2
            t21832 = t21824 ** 2
            t21825 = t21812 * t21824
            t21834 = t21825 ** 2
            t21846 = 7030 * t21793 - 1664 * t21811 + 12686 * t21820 - 17376 * t21822 - 104636 * t21824 + 445984 * t21826 - 736036 * t21828 + 611424 * t21830 - 239934 * t21832 + 22496 * t21834 + 26
            t21794 = t21812 * t21834
            t21796 = t21812 * t21832
            t21798 = t21812 * t21830
            t21800 = t21812 * t21828
            t21802 = t21812 * t21826
            t21845 = 33744 * t21794 - 137936 * t21796 + 153024 * t21798 + 128576 * t21800 - 472864 * t21802 + 304 * t21812 - 7216 * t21819 + 62016 * t21821 - 243264 * t21823 + 483616 * t21825
            t21844 = 20165 * t21793 + 1391385 * t21820 - 3549040 * t21822 + 3670030 * t21824 - 3670030 * t21828 + 3549040 * t21830 - 1391385 * t21832 - 20165 - 161320 * t21811 + 161320 * t21834
            t21843 = -21296682 * t21794 + 94029210 * t21796 - 162948808 * t21798 + 133439592 * t21800 - 41053452 * t21802 - 9174 * t21812 + 346214 * t21819 - 3397944 * t21821 + 12406680 * t21823 - 11515636 * t21825
            t21842 = -120990 * t21794 + 443630 * t21796 - 3387720 * t21800 + 7340060 * t21802 + 120990 * t21812 - 443630 * t21819 + 3387720 * t21823 - 7340060 * t21825 + 161320 * t21798 - 161320 * t21821
            t21841 = 5915745 * t21793 + 88440 * t21811 - 1845723 * t21820 + 15679312 * t21822 - 68959242 * t21824 + 171519744 * t21826 - 246339830 * t21828 + 194698416 * t21830 - 67601061 * t21832 - 3155064 * t21834 - 737
            t21840 = -1031419104 * t21794 + 4795194080 * t21796 - 9387918976 * t21798 + 10069145216 * t21800 - 6448117056 * t21802 + 85728 * t21812 - 4634848 * t21819 + 76158592 * t21821 - 587740800 * t21823 + 2519247168 * t21825
            t21839 = -5801732460 * t21794 + 27787244940 * t21796 - 56056821360 * t21798 + 61848682800 * t21800 - 40535370600 * t21802 + 431980 * t21812 - 26279820 * t21819 + 465008240 * t21821 - 3717779760 * t21823 + 16036616040 * t21825
            t21838 = 429757960 * t21793 + 912640 * t21811 - 23242456 * t21820 + 220890496 * t21822 - 1013689296 * t21824 + 2463353728 * t21826 - 3079686320 * t21828 + 1336100992 * t21830 + 1040833432 * t21832 - 1375225472 * t21834 - 5704
            t21837 = 4834777050 * t21793 - 1632080 * t21811 + 51000770 * t21820 - 635779040 * t21822 + 4123416060 * t21824 - 15648864000 * t21826 + 36619056900 * t21828 - 53441594400 * t21830 + 47306539710 * t21832 - 23206929840 * t21834 + 8870
            t21818 = 2 * phi1
            t21817 = 4 * phi1
            t21816 = 8 * phi1
            t21815 = -3 * phi2
            t21814 = 3 * phi2
            t21813 = 10 * phi1
            tfunc[..., c] = (0.123e3 / 0.29259464704e11) * np.sqrt(0.2e1) * np.sqrt(0.13e2) * np.sqrt(0.109e3) * np.sqrt(0.31e2) * np.sqrt(0.17e2) * np.sqrt(0.19e2) * np.sqrt(0.29e2) * ((35420 + 10603579140 * t21793 - 56552422080 * t21834 + 128102699340 * t21832 - 160486603200 * t21830 + 121320229800 * t21828 - 56651031360 * t21826 + 16064599320 * t21824 - 2608612160 * t21822 + 214326420 * t21820 - 6800640 * t21811) * np.exp((6*1j) * phi2) + (t21842 + t21844) * np.exp((-2*1j) * (t21813 + t21815)) + (-t21842 + t21844) * np.exp((2*1j) * (t21813 + t21814)) + (t21841 + t21843) * np.exp((-6*1j) * (t21818 - phi2)) + (t21837 + t21839) * np.exp((-2*1j) * (t21818 + t21815)) + (t21838 + t21840) * np.exp((-2*1j) * (t21817 + t21815)) + (-t21845 + t21846) * np.exp((-2*1j) * (t21816 + t21815)) + (t21837 - t21839) * np.exp((2*1j) * (t21818 + t21814)) + (t21838 - t21840) * np.exp((2*1j) * (t21817 + t21814)) + (t21845 + t21846) * np.exp((2*1j) * (t21816 + t21814)) + (t21841 - t21843) * np.exp((6*1j) * (t21818 + phi2)))

        if Bindx == 485:
            t21876 = np.cos(phi)
            t21875 = t21876 ** 2
            t21884 = t21875 ** 2
            t21883 = t21876 * t21875
            t21886 = t21883 ** 2
            t21888 = t21884 ** 2
            t21885 = t21876 * t21884
            t21890 = t21885 ** 2
            t21892 = t21886 ** 2
            t21887 = t21876 * t21886
            t21894 = t21887 ** 2
            t21896 = t21888 ** 2
            t21889 = t21876 * t21888
            t21898 = t21889 ** 2
            t21900 = t21890 ** 2
            t21909 = -3545656 * t21875 - 46643716 * t21884 + 743854176 * t21886 - 3422291624 * t21888 + 7525838256 * t21890 - 8630738024 * t21892 + 4578053216 * t21894 - 63760676 * t21896 - 981657656 * t21898 + 300830572 * t21900 + 61132
            t21908 = -5072144 * t21875 + 148636488 * t21884 - 1865384640 * t21886 + 12445834704 * t21888 - 48283735136 * t21890 + 113769485648 * t21892 - 164790065856 * t21894 + 143204766600 * t21896 - 68462704912 * t21898 + 13838206312 * t21900 + 32936
            t21907 = 31975632 * t21875 - 593102664 * t21884 + 4228032960 * t21886 - 14688466128 * t21888 + 25548659424 * t21890 - 15817667664 * t21892 - 16219801152 * t21894 + 35085488760 * t21896 - 22989788976 * t21898 + 5414950296 * t21900 - 280488
            t21856 = t21876 * t21900
            t21858 = t21876 * t21898
            t21860 = t21876 * t21896
            t21862 = t21876 * t21894
            t21864 = t21876 * t21892
            t21866 = t21876 * t21890
            t21906 = 53719745 * t21856 + 365294266 * t21858 - 2735244359 * t21860 + 6101584920 * t21862 - 5959789246 * t21864 + 1665052284 * t21866 + 4386221 * t21876 - 87082534 * t21883 + 584651165 * t21885 - 1667558696 * t21887 + 1674986234 * t21889
            t21905 = 39622800 * t21875 - 1166764200 * t21884 + 13382174400 * t21886 - 78352851600 * t21888 + 265044943200 * t21890 - 549136170000 * t21892 + 708361656000 * t21894 - 555295578600 * t21896 + 242247776400 * t21898 - 45124585800 * t21900 - 222600
            t21904 = 1289273880 * t21856 + 1547128656 * t21858 - 27204595848 * t21860 + 71524440000 * t21862 - 90368443728 * t21864 + 64366817760 * t21866 - 970920 * t21876 + 44748624 * t21883 - 772269768 * t21885 + 6270330816 * t21887 - 26696459472 * t21889
            t21903 = 4942216540 * t21856 - 13838206312 * t21858 - 2627881284 * t21860 + 56792606112 * t21862 - 96712283976 * t21864 + 80824125200 * t21866 - 2034580 * t21876 + 103826968 * t21883 - 1550961300 * t21885 + 10523683488 * t21887 - 38455090856 * t21889
            t21902 = -32231847000 * t21856 + 167605604400 * t21858 - 371257692600 * t21860 + 457242907200 * t21862 - 343096158000 * t21864 + 161848884000 * t21866 - 706200 * t21876 + 43978800 * t21883 - 882209400 * t21885 + 8626766400 * t21887 - 47899527600 * t21889
            t21882 = 4 * phi1
            t21881 = 8 * phi1
            t21880 = -7 * phi2
            t21879 = 7 * phi2
            t21878 = 12 * phi1
            t21877 = 16 * phi1
            tfunc[..., c] = (0.41e2 / 0.1828716544e10*1j) * np.sqrt(0.7e1) * np.sqrt(0.109e3) * np.sqrt(0.13e2) * np.sqrt(0.11e2) * np.sqrt(0.2e1) * ((1 + t21876) ** (-0.1e1 / 0.2e1)) * ((1 - t21876) ** (-0.1e1 / 0.2e1)) * ((51893273670 * t21856 - 311359642020 * t21858 + 803644481430 * t21860 - 1165294516080 * t21862 + 1039869074700 * t21864 - 588128077080 * t21866 + 209264677980 * t21889 - 44925243120 * t21887 + 5321466990 * t21885 - 290176740 * t21883 + 4680270 * t21876) * np.exp((7*1j) * phi2) + (t21902 - t21905) * np.exp((-1*1j) * (t21882 + t21880)) + (t21903 - t21908) * np.exp((-1*1j) * (t21881 + t21880)) + (t21902 + t21905) * np.exp((1j) * (t21882 + t21879)) + (t21903 + t21908) * np.exp((1j) * (t21881 + t21879)) + (t21904 - t21907) * np.exp((-1*1j) * (t21878 + t21880)) + (t21906 - t21909) * np.exp((-1*1j) * (t21877 + t21880)) + (t21904 + t21907) * np.exp((1j) * (t21878 + t21879)) + (t21906 + t21909) * np.exp((1j) * (t21877 + t21879)))

        if Bindx == 486:
            t21941 = np.cos(phi)
            t21940 = t21941 ** 2
            t21950 = t21940 ** 2
            t21949 = t21941 * t21940
            t21952 = t21949 ** 2
            t21954 = t21950 ** 2
            t21951 = t21941 * t21950
            t21956 = t21951 ** 2
            t21958 = t21952 ** 2
            t21953 = t21941 * t21952
            t21960 = t21953 ** 2
            t21962 = t21954 ** 2
            t21955 = t21941 * t21954
            t21964 = t21955 ** 2
            t21966 = t21956 ** 2
            t21977 = 464 * t21940 + 6104 * t21950 - 97344 * t21952 + 447856 * t21954 - 984864 * t21956 + 1129456 * t21958 - 599104 * t21960 + 8344 * t21962 + 128464 * t21964 - 39368 * t21966 - 8
            t21921 = t21941 * t21966
            t21923 = t21941 * t21964
            t21925 = t21941 * t21962
            t21927 = t21941 * t21960
            t21929 = t21941 * t21958
            t21931 = t21941 * t21956
            t21976 = 7030 * t21921 + 47804 * t21923 - 357946 * t21925 + 798480 * t21927 - 779924 * t21929 + 217896 * t21931 + 574 * t21941 - 11396 * t21949 + 76510 * t21951 - 218224 * t21953 + 219196 * t21955
            t21975 = -282310 * t21940 + 1835015 * t21950 - 3387720 * t21952 + 282310 * t21954 + 7340060 * t21956 - 11010090 * t21958 + 6936760 * t21960 - 1552705 * t21962 - 282310 * t21964 + 141155 * t21966 - 20165
            t21974 = 20165 * t21921 + 282310 * t21923 - 1835015 * t21925 + 3387720 * t21927 - 282310 * t21929 - 7340060 * t21931 - 141155 * t21941 + 282310 * t21949 + 1552705 * t21951 - 6936760 * t21953 + 11010090 * t21955
            t21973 = 146718 * t21940 - 2721411 * t21950 + 19400040 * t21952 - 67397022 * t21954 + 117228276 * t21956 - 72578286 * t21958 - 74423448 * t21960 + 160987365 * t21962 - 105487074 * t21964 + 24846129 * t21966 - 1287
            t21972 = 5915745 * t21921 + 7098894 * t21923 - 124826427 * t21925 + 328185000 * t21927 - 414649422 * t21929 + 295342740 * t21931 - 4455 * t21941 + 205326 * t21949 - 3543507 * t21951 + 28770984 * t21953 - 122494878 * t21955
            t21971 = -441056 * t21940 + 12924912 * t21950 - 162207360 * t21952 + 1082246496 * t21954 - 4198585664 * t21956 + 9892998752 * t21958 - 14329570944 * t21960 + 12452588400 * t21962 - 5953278688 * t21964 + 1203322288 * t21966 + 2864
            t21970 = 5943420 * t21940 - 175014630 * t21950 + 2007326160 * t21952 - 11752927740 * t21954 + 39756741480 * t21956 - 82370425500 * t21958 + 106254248400 * t21960 - 83294336790 * t21962 + 36337166460 * t21964 - 6768687870 * t21966 - 33390
            t21969 = 429757960 * t21921 - 1203322288 * t21923 - 228511416 * t21925 + 4938487488 * t21927 - 8409763824 * t21929 + 7028184800 * t21931 - 176920 * t21941 + 9028432 * t21949 - 134866200 * t21951 + 915102912 * t21953 - 3343920944 * t21955
            t21968 = 4834777050 * t21921 - 25140840660 * t21923 + 55688653890 * t21925 - 68586436080 * t21927 + 51464423700 * t21929 - 24277332600 * t21931 + 105930 * t21941 - 6596820 * t21949 + 132331410 * t21951 - 1294014960 * t21953 + 7184929140 * t21955
            t21948 = 4 * phi1
            t21947 = 8 * phi1
            t21946 = -7 * phi2
            t21945 = 7 * phi2
            t21944 = 12 * phi1
            t21943 = 16 * phi1
            t21942 = 20 * phi1
            tfunc[..., c] = (0.41e2 / 0.43889197056e11*1j) * np.sqrt(0.3e1) * np.sqrt(0.13e2) * np.sqrt(0.109e3) * np.sqrt(0.19e2) * np.sqrt(0.31e2) * np.sqrt(0.7e1) * np.sqrt(0.17e2) * np.sqrt(0.29e2) * ((1 + t21941) ** (-0.1e1 / 0.2e1)) * ((1 - t21941) ** (-0.1e1 / 0.2e1)) * ((10603579140 * t21921 - 63621474840 * t21923 + 164212185060 * t21925 - 238109715360 * t21927 + 212480987400 * t21929 - 120174777360 * t21931 + 42759965160 * t21955 - 9179771040 * t21953 + 1087358580 * t21951 - 59293080 * t21949 + 956340 * t21941) * np.exp((7*1j) * phi2) + (t21968 + t21970) * np.exp((-1*1j) * (t21948 + t21946)) + (t21969 - t21971) * np.exp((-1*1j) * (t21947 + t21946)) + (t21968 - t21970) * np.exp((1j) * (t21948 + t21945)) + (t21969 + t21971) * np.exp((1j) * (t21947 + t21945)) + (t21972 - t21973) * np.exp((-1*1j) * (t21944 + t21946)) + (t21976 + t21977) * np.exp((-1*1j) * (t21943 + t21946)) + (t21974 - t21975) * np.exp((-1*1j) * (t21942 + t21946)) + (t21972 + t21973) * np.exp((1j) * (t21944 + t21945)) + (t21976 - t21977) * np.exp((1j) * (t21943 + t21945)) + (t21974 + t21975) * np.exp((1j) * (t21942 + t21945)))

        if Bindx == 487:
            t22006 = np.cos(phi)
            t22005 = t22006 ** 2
            t22012 = t22005 ** 2
            t22016 = t22012 ** 2
            t22017 = t22006 * t22016
            t22026 = t22017 ** 2
            t21988 = t22006 * t22026
            t22024 = t22016 ** 2
            t21990 = t22006 * t22024
            t22011 = t22006 * t22005
            t22014 = t22011 ** 2
            t22015 = t22006 * t22014
            t22022 = t22015 ** 2
            t21992 = t22006 * t22022
            t22020 = t22014 ** 2
            t21994 = t22006 * t22020
            t22013 = t22006 * t22012
            t22018 = t22013 ** 2
            t21996 = t22006 * t22018
            t22036 = -4469482784 * t21988 + 5518996960 * t21990 + 32123154304 * t21992 - 93990694528 * t21994 + 99981630528 * t21996 + 76781792 * t22006 - 1108689952 * t22011 + 3969178496 * t22013 + 3178864000 * t22015 - 45279738816 * t22017
            t22035 = -205596208064 * t21988 + 866500617792 * t21990 - 1490443153152 * t21992 + 1335232658688 * t21994 - 653207934080 * t21996 - 6395840 * t22006 + 260106816 * t22011 - 1549821696 * t22013 - 13196262144 * t22015 + 162000362368 * t22017
            t22034 = 80450690112 * t21988 - 239180661696 * t21990 + 128864299776 * t21992 + 328470952704 * t21994 - 592143826560 * t21996 + 73358400 * t22006 - 2644181952 * t22011 + 29618842368 * t22013 - 154676790528 * t22015 + 421167317376 * t22017
            t22033 = -670422417600 * t21988 + 3324969480000 * t21990 - 6962885894400 * t21992 + 8000984928000 * t21994 - 5485007568000 * t21996 + 80289600 * t22006 - 4524945600 * t22011 + 74629881600 * t22013 - 559935648000 * t22015 + 2282111894400 * t22017
            t21987 = t22018 ** 2
            t22032 = 698356685 * t21987 - 170405450 * t22005 + 3063737161 * t22012 - 18756887032 * t22014 + 49407096362 * t22016 - 54365726844 * t22018 + 1253664490 * t22020 + 49327533064 * t22022 - 38862544663 * t22024 + 8401768118 * t22026 + 3408109
            t22031 = 16760560440 * t21987 - 253863216 * t22005 + 3225763032 * t22012 - 5935126080 * t22014 - 63671336976 * t22016 + 364476204768 * t22018 - 813602005008 * t22020 + 905744427456 * t22022 - 478430647080 * t22024 + 71683627728 * t22026 + 2394936
            t22030 = -419014011000 * t21987 - 31314000 * t22005 + 444589800 * t22012 + 4656628800 * t22014 - 104400946800 * t22016 + 663656532000 * t22018 - 2085595494000 * t22020 + 3655082280000 * t22022 - 3635816530200 * t22024 + 1921018081200 * t22026 + 184200
            t22029 = 64248815020 * t21987 + 335517928 * t22005 - 8089245636 * t22012 + 75846732000 * t22014 - 359292079848 * t22016 + 954498269296 * t22018 - 1455389683176 * t22020 + 1198381355232 * t22022 - 389479002180 * t22024 - 81052351256 * t22026 - 2298068
            t22010 = 2 * phi1
            t22009 = 3 * phi1
            t22008 = -2 * phi2
            t22007 = 2 * phi2
            tfunc[..., c] = (0.41e2 / 0.3657433088e10) * np.sqrt(0.109e3) * np.sqrt(0.2e1) * np.sqrt(0.11e2) * ((674612557710 * t21987 - 3840102251580 * t22026 + 9308531279670 * t22024 - 12510486517200 * t22022 + 10168276597500 * t22020 - 5114405604840 * t22018 + 1564267921020 * t22016 - 274188937680 * t22014 + 24323363190 * t22012 - 833088060 * t22005 + 4680270) * np.exp((8*1j) * phi2) + (t22029 + t22035) * np.exp((-8*1j) * (phi1 - phi2)) + (t22032 + t22036) * np.exp((-8*1j) * (t22010 - phi2)) + (t22030 - t22033) * np.exp((-4*1j) * (phi1 + t22008)) + (t22031 - t22034) * np.exp((-4*1j) * (t22009 + t22008)) + (t22030 + t22033) * np.exp((4*1j) * (phi1 + t22007)) + (t22031 + t22034) * np.exp((4*1j) * (t22009 + t22007)) + (t22029 - t22035) * np.exp((8*1j) * (phi1 + phi2)) + (t22032 - t22036) * np.exp((8*1j) * (t22010 + phi2)))

        if Bindx == 488:
            t22067 = np.cos(phi)
            t22066 = t22067 ** 2
            t22074 = t22066 ** 2
            t22075 = t22067 * t22074
            t22080 = t22075 ** 2
            t22048 = t22080 ** 2
            t22073 = t22067 * t22066
            t22076 = t22073 ** 2
            t22078 = t22074 ** 2
            t22082 = t22076 ** 2
            t22077 = t22067 * t22076
            t22084 = t22077 ** 2
            t22086 = t22078 ** 2
            t22079 = t22067 * t22078
            t22088 = t22079 ** 2
            t22100 = 91390 * t22048 - 22300 * t22066 + 400934 * t22074 - 2454608 * t22076 + 6465628 * t22078 - 7114536 * t22080 + 164060 * t22082 + 6455216 * t22084 - 5085722 * t22086 + 1099492 * t22088 + 446
            t22049 = t22067 * t22088
            t22051 = t22067 * t22086
            t22053 = t22067 * t22084
            t22055 = t22067 * t22082
            t22057 = t22067 * t22080
            t22099 = -584896 * t22049 + 722240 * t22051 + 4203776 * t22053 - 12300032 * t22055 + 13084032 * t22057 + 10048 * t22067 - 145088 * t22073 + 519424 * t22075 + 416000 * t22077 - 5925504 * t22079
            t22098 = 41943200 * t22053 - 92275040 * t22055 + 54526160 * t22057 + 41943200 * t22075 - 92275040 * t22077 + 54526160 * t22079 - 2097160 * t22049 - 2097160 * t22051 - 2097160 * t22067 - 2097160 * t22073
            t22097 = -369142488 * t22049 + 1097464104 * t22051 - 591285024 * t22053 - 1507166496 * t22055 + 2717011440 * t22057 - 336600 * t22067 + 12132648 * t22073 - 135904032 * t22075 + 709723872 * t22077 - 1932497424 * t22079
            t22096 = 262145 * t22048 + 5767190 * t22066 - 21758035 * t22074 + 88605010 * t22078 - 149946940 * t22080 + 88605010 * t22082 - 21758035 * t22086 + 5767190 * t22088 + 262145 + 2097160 * t22076 + 2097160 * t22084
            t22095 = 76904685 * t22048 - 1164834 * t22066 + 14801193 * t22074 - 27232920 * t22076 - 292151574 * t22078 + 1672374132 * t22080 - 3733157142 * t22082 + 4155946344 * t22084 - 2195246295 * t22086 + 328915422 * t22088 + 10989
            t22094 = -17877931136 * t22049 + 75347879808 * t22051 - 129603752448 * t22053 + 116107187712 * t22055 - 56800689920 * t22057 - 556160 * t22067 + 22617984 * t22073 - 134767104 * t22075 - 1147501056 * t22077 + 14086988032 * t22079
            t22093 = -100563362640 * t22049 + 498745422000 * t22051 - 1044432884160 * t22053 + 1200147739200 * t22055 - 822751135200 * t22057 + 12043440 * t22067 - 678741840 * t22073 + 11194482240 * t22075 - 83990347200 * t22077 + 342316784160 * t22079
            t22092 = 62852101650 * t22048 + 4697100 * t22066 - 66688470 * t22074 - 698494320 * t22076 + 15660142020 * t22078 - 99548479800 * t22080 + 312839324100 * t22082 - 548262342000 * t22084 + 545372479530 * t22086 - 288152712180 * t22088 - 27630
            t22091 = 5586853480 * t22048 + 29175472 * t22066 - 703412664 * t22074 + 6595368000 * t22076 - 31242789552 * t22078 + 82999849504 * t22080 - 126555624624 * t22082 + 104207074368 * t22084 - 33867739320 * t22086 - 7048030544 * t22088 - 199832
            t22072 = 2 * phi1
            t22071 = 3 * phi1
            t22070 = 5 * phi1
            t22069 = -2 * phi2
            t22068 = 2 * phi2
            tfunc[..., c] = (0.41e2 / 0.87778394112e11) * np.sqrt(0.3e1) * np.sqrt(0.109e3) * np.sqrt(0.31e2) * np.sqrt(0.17e2) * np.sqrt(0.19e2) * np.sqrt(0.29e2) * ((956340 + 137846528820 * t22048 - 784664856360 * t22088 + 1902052831140 * t22086 - 2556322322400 * t22084 + 2077728345000 * t22082 - 1045048823280 * t22080 + 319633692840 * t22078 - 56026222560 * t22076 + 4970098980 * t22074 - 170228520 * t22066) * np.exp((8*1j) * phi2) + (t22091 + t22094) * np.exp((-8*1j) * (phi1 - phi2)) + (t22099 + t22100) * np.exp((-8*1j) * (t22072 - phi2)) + (t22092 + t22093) * np.exp((-4*1j) * (phi1 + t22069)) + (t22095 + t22097) * np.exp((-4*1j) * (t22071 + t22069)) + (t22096 + t22098) * np.exp((-4*1j) * (t22070 + t22069)) + (t22092 - t22093) * np.exp((4*1j) * (phi1 + t22068)) + (t22095 - t22097) * np.exp((4*1j) * (t22071 + t22068)) + (t22096 - t22098) * np.exp((4*1j) * (t22070 + t22068)) + (t22091 - t22094) * np.exp((8*1j) * (phi1 + phi2)) + (-t22099 + t22100) * np.exp((8*1j) * (t22072 + phi2)))

        if Bindx == 489:
            t22130 = np.cos(phi)
            t22129 = t22130 ** 2
            t22137 = t22129 ** 2
            t22136 = t22130 * t22129
            t22139 = t22136 ** 2
            t22141 = t22137 ** 2
            t22138 = t22130 * t22137
            t22143 = t22138 ** 2
            t22145 = t22139 ** 2
            t22140 = t22130 * t22139
            t22147 = t22140 ** 2
            t22149 = t22141 ** 2
            t22142 = t22130 * t22141
            t22151 = t22142 ** 2
            t22153 = t22143 ** 2
            t22162 = 15847944 * t22129 - 181960452 * t22137 + 764225888 * t22139 - 1109697576 * t22141 - 790879440 * t22143 + 4315417496 * t22145 - 5002992288 * t22147 + 2163332892 * t22149 + 467976 * t22151 - 173385108 * t22153 - 377332
            t22161 = 9826704 * t22129 - 204490056 * t22137 + 1464800448 * t22139 - 4107843792 * t22141 + 829593440 * t22143 + 22053249712 * t22145 - 55878619968 * t22147 + 63355691256 * t22149 - 35497851504 * t22151 + 7975714968 * t22153 - 71208
            t22160 = 12565168 * t22129 - 276333752 * t22137 + 2651320384 * t22139 - 12643348016 * t22141 + 32495585824 * t22143 - 45430396336 * t22145 + 30397481024 * t22147 - 2221397752 * t22149 - 8106280272 * t22151 + 3120931944 * t22153 - 128216
            t22110 = t22130 * t22153
            t22112 = t22130 * t22151
            t22114 = t22130 * t22149
            t22116 = t22130 * t22147
            t22118 = t22130 * t22145
            t22120 = t22130 * t22143
            t22159 = 24081265 * t22110 + 406788138 * t22112 - 1581713031 * t22114 + 1160331736 * t22116 + 2351380194 * t22118 - 4952533092 * t22120 - 2629203 * t22130 + 18696906 * t22136 + 105688269 * t22138 - 1174151784 * t22140 + 3644060602 * t22142
            t22158 = 37033200 * t22129 - 1002144600 * t22137 + 10673236800 * t22139 - 58611135600 * t22141 + 187562704800 * t22143 - 370144278000 * t22145 + 457093512000 * t22147 - 344275714200 * t22149 + 144674780400 * t22151 - 26007766200 * t22153 - 228600
            t22157 = 577950360 * t22110 + 3870785488 * t22112 - 22953788552 * t22114 + 42056691136 * t22116 - 34463156816 * t22118 + 9731179744 * t22120 + 3933528 * t22130 - 123879472 * t22136 + 1086591416 * t22138 - 3835863616 * t22140 + 4049556784 * t22142
            t22156 = 2215476380 * t22110 - 1295201576 * t22112 - 24680731716 * t22114 + 72831889056 * t22116 - 95634364872 * t22118 + 70687747728 * t22120 - 1728404 * t22130 + 81215576 * t22136 - 1179094356 * t22138 + 8127049632 * t22140 - 31152257448 * t22142
            t22155 = -14448759000 * t22110 + 71576929200 * t22112 - 144726953400 * t22114 + 150149467200 * t22116 - 79050558000 * t22118 + 12685140000 * t22120 + 1098600 * t22130 - 56581200 * t22136 + 772417800 * t22138 - 4062782400 * t22140 + 7160581200 * t22142
            t22135 = 4 * phi1
            t22134 = 8 * phi1
            t22133 = -9 * phi2
            t22132 = 9 * phi2
            t22131 = 16 * phi1
            tfunc[..., c] = (0.41e2 / 0.1828716544e10*1j) * np.sqrt(0.109e3) * np.sqrt(0.3e1) * np.sqrt(0.29e2) * np.sqrt(0.11e2) * np.sqrt(0.2e1) * ((1 + t22130) ** (-0.1e1 / 0.2e1)) * ((1 - t22130) ** (-0.1e1 / 0.2e1)) * ((23262501990 * t22110 - 149118602500 * t22112 + 412615203350 * t22114 - 643676493040 * t22116 + 620172177100 * t22118 - 380023363160 * t22120 + 146965678300 * t22142 - 34384383600 * t22140 + 4447816590 * t22138 - 265215300 * t22136 + 4680270 * t22130) * np.exp((9*1j) * phi2) + (t22157 - t22160) * np.exp((-3*1j) * (t22135 - 3 * phi2)) + (t22155 - t22158) * np.exp((-1*1j) * (t22135 + t22133)) + (t22156 - t22161) * np.exp((-1*1j) * (t22134 + t22133)) + (t22155 + t22158) * np.exp((1j) * (t22135 + t22132)) + (t22156 + t22161) * np.exp((1j) * (t22134 + t22132)) + (t22157 + t22160) * np.exp((3*1j) * (t22135 + 3 * phi2)) + (t22159 + t22162) * np.exp((-1*1j) * (t22131 + t22133)) + (t22159 - t22162) * np.exp((1j) * (t22131 + t22132)))

        if Bindx == 490:
            t22194 = np.cos(phi)
            t22193 = t22194 ** 2
            t22202 = t22193 ** 2
            t22201 = t22194 * t22193
            t22204 = t22201 ** 2
            t22206 = t22202 ** 2
            t22203 = t22194 * t22202
            t22208 = t22203 ** 2
            t22210 = t22204 ** 2
            t22205 = t22194 * t22204
            t22212 = t22205 ** 2
            t22214 = t22206 ** 2
            t22207 = t22194 * t22206
            t22216 = t22207 ** 2
            t22218 = t22208 ** 2
            t22229 = 60144 * t22193 - 690552 * t22202 + 2900288 * t22204 - 4211376 * t22206 - 3001440 * t22208 + 16377296 * t22210 - 18986688 * t22212 + 8209992 * t22214 + 1776 * t22216 - 658008 * t22218 - 1432
            t22174 = t22194 * t22218
            t22176 = t22194 * t22216
            t22178 = t22194 * t22214
            t22180 = t22194 * t22212
            t22182 = t22194 * t22210
            t22184 = t22194 * t22208
            t22228 = 91390 * t22174 + 1543788 * t22176 - 6002706 * t22178 + 4403536 * t22180 + 8923644 * t22182 - 18795192 * t22184 - 9978 * t22194 + 70956 * t22201 + 401094 * t22203 - 4455984 * t22205 + 13829452 * t22207
            t22227 = -7864350 * t22193 + 19660875 * t22202 + 39846040 * t22204 - 180880050 * t22206 + 204473100 * t22208 - 34078850 * t22210 - 94372200 * t22212 + 63701235 * t22214 - 7864350 * t22216 - 2359305 * t22218 - 262145
            t22226 = -1671978 * t22193 + 36770217 * t22202 - 352796664 * t22204 + 1682380986 * t22206 - 4324009404 * t22208 + 6045173706 * t22210 - 4044826104 * t22212 + 295589217 * t22214 + 1078658262 * t22216 - 415285299 * t22218 + 17061
            t22225 = 262145 * t22174 + 7864350 * t22176 - 19660875 * t22178 - 39846040 * t22180 + 180880050 * t22182 - 204473100 * t22184 + 2359305 * t22194 + 7864350 * t22201 - 63701235 * t22203 + 94372200 * t22205 + 34078850 * t22207
            t22224 = -24780384 * t22193 + 515670576 * t22202 - 3693844608 * t22204 + 10358910432 * t22206 - 2092018240 * t22208 - 55612542752 * t22210 + 140911302528 * t22212 - 159766525776 * t22214 + 89516321184 * t22216 - 20112672528 * t22218 + 179568
            t22223 = 76904685 * t22174 + 515064198 * t22176 - 3054334767 * t22178 + 5596253256 * t22180 - 4585823286 * t22182 + 1294874724 * t22184 + 523413 * t22194 - 16483962 * t22201 + 144586761 * t22203 - 510417336 * t22205 + 538852314 * t22207
            t22222 = 161094420 * t22193 - 4359329010 * t22202 + 46428580080 * t22204 - 254958439860 * t22206 + 815897765880 * t22208 - 1610127609300 * t22210 + 1988356777200 * t22212 - 1497599356770 * t22214 + 629335294740 * t22216 - 113133782970 * t22218 - 994410
            t22221 = 5586853480 * t22174 - 3266160496 * t22176 - 62238366936 * t22178 + 183663024576 * t22180 - 241164920112 * t22182 + 178256059488 * t22184 - 4358584 * t22194 + 204804496 * t22201 - 2973368376 * t22203 + 20494299072 * t22205 - 78557866608 * t22207
            t22220 = 62852101650 * t22174 - 311359642020 * t22176 + 629562247290 * t22178 - 653150182320 * t22180 + 343869927300 * t22182 - 55180359000 * t22184 - 4778910 * t22194 + 246128220 * t22201 - 3360017430 * t22203 + 17673103440 * t22205 - 31148528220 * t22207
            t22200 = 4 * phi1
            t22199 = 8 * phi1
            t22198 = -9 * phi2
            t22197 = 9 * phi2
            t22196 = 16 * phi1
            t22195 = 20 * phi1
            tfunc[..., c] = (0.41e2 / 0.14629732352e11*1j) * np.sqrt(0.109e3) * np.sqrt(0.19e2) * np.sqrt(0.17e2) * np.sqrt(0.31e2) * ((1 + t22194) ** (-0.1e1 / 0.2e1)) * ((1 - t22194) ** (-0.1e1 / 0.2e1)) * ((137846528820 * t22174 - 883631595000 * t22176 + 2445032505300 * t22178 - 3814231602720 * t22180 + 3674952157800 * t22182 - 2251903148880 * t22184 + 870874019400 * t22207 - 203751424800 * t22205 + 26356411620 * t22203 - 1571585400 * t22201 + 27733860 * t22194) * np.exp((9*1j) * phi2) + (t22223 + t22226) * np.exp((-3*1j) * (t22200 - 3 * phi2)) + (t22220 + t22222) * np.exp((-1*1j) * (t22200 + t22198)) + (t22221 + t22224) * np.exp((-1*1j) * (t22199 + t22198)) + (t22220 - t22222) * np.exp((1j) * (t22200 + t22197)) + (t22221 - t22224) * np.exp((1j) * (t22199 + t22197)) + (t22223 - t22226) * np.exp((3*1j) * (t22200 + 3 * phi2)) + (t22228 + t22229) * np.exp((-1*1j) * (t22196 + t22198)) + (t22225 + t22227) * np.exp((-1*1j) * (t22195 + t22198)) + (t22228 - t22229) * np.exp((1j) * (t22196 + t22197)) + (t22225 - t22227) * np.exp((1j) * (t22195 + t22197)))

        if Bindx == 491:
            t22258 = np.cos(phi)
            t22257 = t22258 ** 2
            t22266 = t22257 ** 2
            t22270 = t22266 ** 2
            t22271 = t22258 * t22270
            t22280 = t22271 ** 2
            t22240 = t22258 * t22280
            t22278 = t22270 ** 2
            t22242 = t22258 * t22278
            t22265 = t22258 * t22257
            t22268 = t22265 ** 2
            t22269 = t22258 * t22268
            t22276 = t22269 ** 2
            t22244 = t22258 * t22276
            t22274 = t22268 ** 2
            t22246 = t22258 * t22274
            t22267 = t22258 * t22266
            t22272 = t22267 ** 2
            t22248 = t22258 * t22272
            t22290 = -423830264 * t22240 - 1031263112 * t22242 + 6624533344 * t22244 - 8013587296 * t22246 + 196541488 * t22248 - 2828936 * t22258 - 63210488 * t22265 + 973710496 * t22267 - 3947710624 * t22269 + 5687645392 * t22271
            t22289 = -7628944752 * t22240 + 8534946288 * t22242 + 37107107136 * t22244 - 95255409216 * t22246 + 90741272544 * t22248 + 4670832 * t22258 - 91677168 * t22265 - 333841728 * t22267 + 8568386112 * t22269 - 41646510048 * t22271
            t22288 = -19496192144 * t22240 + 71275552656 * t22242 - 93054371520 * t22244 + 37855713984 * t22246 + 25589261984 * t22248 - 6553712 * t22258 + 271260528 * t22265 - 3127662912 * t22267 + 15276326208 * t22269 - 34583335072 * t22271
            t22287 = -63574539600 * t22240 + 329197717200 * t22242 - 720543912000 * t22244 + 866932756800 * t22246 - 624227234400 * t22248 + 13477200 * t22258 - 683720400 * t22265 + 10303656000 * t22267 - 71685345600 * t22269 + 274267144800 * t22271
            t22239 = t22272 ** 2
            t22286 = 52978783 * t22239 + 55465696 * t22257 - 394943813 * t22266 + 512454800 * t22268 + 2816240570 * t22270 - 9881334320 * t22272 + 11032096790 * t22274 - 2907311440 * t22276 - 2522802227 * t22278 + 1238888464 * t22280 - 1733303
            t22285 = 4874048036 * t22239 + 29663744 * t22257 - 708544716 * t22266 + 7146549696 * t22268 - 37478733864 * t22270 + 110476510144 * t22272 - 187595587608 * t22274 + 177686490432 * t22276 - 80428992468 * t22278 + 5998828352 * t22280 - 231748
            t22284 = 1271490792 * t22239 - 96309312 * t22257 + 1480051848 * t22266 - 9166734720 * t22268 + 26164984560 * t22270 - 29605914624 * t22272 - 12123407088 * t22274 + 61770605952 * t22276 - 52997611656 * t22278 + 13301749824 * t22280 + 1094424
            t22283 = -31787269800 * t22239 - 61195200 * t22257 + 1433724600 * t22266 - 12020342400 * t22268 + 45319942800 * t22270 - 75390796800 * t22272 + 12656146800 * t22274 + 144860073600 * t22276 - 221940463800 * t22278 + 136929777600 * t22280 + 402600
            t22264 = 2 * phi1
            t22263 = 4 * phi1
            t22262 = 6 * phi1
            t22261 = 8 * phi1
            t22260 = -5 * phi2
            t22259 = 5 * phi2
            tfunc[..., c] = (0.41e2 / 0.1828716544e10) * np.sqrt(0.109e3) * np.sqrt(0.29e2) * np.sqrt(0.5e1) * ((51177504378 * t22239 - 314938488480 * t22280 + 829373485710 * t22278 - 1217194698720 * t22276 + 1085938086660 * t22274 - 602514246432 * t22272 + 204144016860 * t22270 - 39763573920 * t22268 + 3926746530 * t22266 - 149768640 * t22257 + 936054) * np.exp((10*1j) * phi2) + (t22283 - t22287) * np.exp((-2*1j) * (t22264 + t22260)) + (t22285 + t22288) * np.exp((-2*1j) * (t22263 + t22260)) + (t22284 + t22289) * np.exp((-2*1j) * (t22262 + t22260)) + (t22286 + t22290) * np.exp((-2*1j) * (t22261 + t22260)) + (t22283 + t22287) * np.exp((2*1j) * (t22264 + t22259)) + (t22285 - t22288) * np.exp((2*1j) * (t22263 + t22259)) + (t22284 - t22289) * np.exp((2*1j) * (t22262 + t22259)) + (t22286 - t22290) * np.exp((2*1j) * (t22261 + t22259)))

        if Bindx == 492:
            t22321 = np.cos(phi)
            t22320 = t22321 ** 2
            t22329 = t22320 ** 2
            t22333 = t22329 ** 2
            t22334 = t22321 * t22333
            t22343 = t22334 ** 2
            t22303 = t22321 * t22343
            t22341 = t22333 ** 2
            t22305 = t22321 * t22341
            t22328 = t22321 * t22320
            t22331 = t22328 ** 2
            t22332 = t22321 * t22331
            t22339 = t22332 ** 2
            t22307 = t22321 * t22339
            t22337 = t22331 ** 2
            t22309 = t22321 * t22337
            t22330 = t22321 * t22329
            t22335 = t22330 ** 2
            t22311 = t22321 * t22335
            t22355 = -146224 * t22303 - 355792 * t22305 + 2285504 * t22307 - 2764736 * t22309 + 67808 * t22311 - 976 * t22321 - 21808 * t22328 + 335936 * t22330 - 1361984 * t22332 + 1962272 * t22334
            t22302 = t22335 ** 2
            t22354 = 52429 * t22302 + 262145 * t22329 + 20971600 * t22331 - 34078850 * t22333 + 34078850 * t22337 - 20971600 * t22339 - 262145 * t22341 - 52429 - 2097160 * t22320 + 2097160 * t22343
            t22353 = 18278 * t22302 + 19136 * t22320 - 136258 * t22329 + 176800 * t22331 + 971620 * t22333 - 3409120 * t22335 + 3806140 * t22337 - 1003040 * t22339 - 870382 * t22341 + 427424 * t22343 - 598
            t22352 = -92285622 * t22303 + 103245318 * t22305 + 448876296 * t22307 - 1152283176 * t22309 + 1097676684 * t22311 + 56502 * t22321 - 1108998 * t22328 - 4038408 * t22330 + 103649832 * t22332 - 503788428 * t22334
            t22351 = -524290 * t22303 - 3670030 * t22305 + 13002392 * t22307 - 40894620 * t22311 + 524290 * t22321 + 3670030 * t22328 - 13002392 * t22330 + 40894620 * t22334 + 2097160 * t22309 - 2097160 * t22332
            t22350 = 15380937 * t22302 - 1165032 * t22320 + 17903853 * t22329 - 110887920 * t22331 + 316511910 * t22333 - 358136064 * t22335 - 146654118 * t22337 + 747225072 * t22339 - 641100141 * t22341 + 160908264 * t22343 + 13239
            t22349 = -4469482784 * t22303 + 16339850016 * t22305 - 21332622720 * t22307 + 8678385024 * t22309 + 5866313024 * t22311 - 1502432 * t22321 + 62186208 * t22328 - 717013632 * t22330 + 3502082688 * t22332 - 7928195392 * t22334
            t22348 = -25140840660 * t22303 + 130182733620 * t22305 - 284942365200 * t22307 + 342832499280 * t22309 - 246853497240 * t22311 + 5329620 * t22321 - 270380340 * t22328 + 4074627600 * t22330 - 28348295760 * t22332 + 108460189080 * t22334
            t22347 = 1117370696 * t22302 + 6800384 * t22320 - 162433176 * t22329 + 1638339456 * t22331 - 8591962704 * t22333 + 25326630784 * t22335 - 43006103088 * t22337 + 40734452352 * t22339 - 18438267048 * t22341 + 1375225472 * t22343 - 53128
            t22346 = 12570420330 * t22302 + 24199920 * t22320 - 566972910 * t22329 + 4753499040 * t22331 - 17921977380 * t22333 + 29813633280 * t22335 - 5004930780 * t22337 - 57285574560 * t22339 + 87767365230 * t22341 - 54149502960 * t22343 - 159210
            t22327 = 2 * phi1
            t22326 = 4 * phi1
            t22325 = 6 * phi1
            t22324 = 8 * phi1
            t22323 = -5 * phi2
            t22322 = 5 * phi2
            tfunc[..., c] = (0.41e2 / 0.87778394112e11) * np.sqrt(0.2e1) * np.sqrt(0.5e1) * np.sqrt(0.3e1) * np.sqrt(0.109e3) * np.sqrt(0.31e2) * np.sqrt(0.11e2) * np.sqrt(0.17e2) * np.sqrt(0.19e2) * ((504252 + 27569305764 * t22302 - 169657266240 * t22343 + 446783239980 * t22341 - 655702407360 * t22339 + 584994511080 * t22337 - 324574238016 * t22335 + 109972318680 * t22333 - 21420624960 * t22331 + 2115337140 * t22329 - 80680320 * t22320) * np.exp((10*1j) * phi2) + (t22351 + t22354) * np.exp((-10*1j) * (t22327 - phi2)) + (-t22351 + t22354) * np.exp((10*1j) * (t22327 + phi2)) + (t22346 + t22348) * np.exp((-2*1j) * (t22327 + t22323)) + (t22347 + t22349) * np.exp((-2*1j) * (t22326 + t22323)) + (t22350 + t22352) * np.exp((-2*1j) * (t22325 + t22323)) + (t22353 + t22355) * np.exp((-2*1j) * (t22324 + t22323)) + (t22346 - t22348) * np.exp((2*1j) * (t22327 + t22322)) + (t22347 - t22349) * np.exp((2*1j) * (t22326 + t22322)) + (t22350 - t22352) * np.exp((2*1j) * (t22325 + t22322)) + (t22353 - t22355) * np.exp((2*1j) * (t22324 + t22322)))

        if Bindx == 493:
            t22385 = np.cos(phi)
            t22384 = t22385 ** 2
            t22393 = t22384 ** 2
            t22392 = t22385 * t22384
            t22395 = t22392 ** 2
            t22397 = t22393 ** 2
            t22394 = t22385 * t22393
            t22399 = t22394 ** 2
            t22401 = t22395 ** 2
            t22396 = t22385 * t22395
            t22403 = t22396 ** 2
            t22405 = t22397 ** 2
            t22398 = t22385 * t22397
            t22407 = t22398 ** 2
            t22409 = t22399 ** 2
            t22418 = 10844504 * t22384 - 30532612 * t22393 - 234937824 * t22395 + 1361379448 * t22397 - 2423415280 * t22399 + 1163554392 * t22401 + 1240189984 * t22403 - 1468047988 * t22405 + 306262616 * t22407 + 75195692 * t22409 - 492932
            t22365 = t22385 * t22409
            t22367 = t22385 * t22407
            t22369 = t22385 * t22405
            t22371 = t22385 * t22403
            t22373 = t22385 * t22401
            t22375 = t22385 * t22399
            t22417 = -786136780 * t22365 - 1717406504 * t22367 + 18721891716 * t22369 - 44226529248 * t22371 + 51058834728 * t22373 - 33006983152 * t22375 + 73876 * t22385 - 6883624 * t22392 + 219463332 * t22394 - 2403759072 * t22396 + 12147434728 * t22398
            t22416 = 22398480 * t22384 - 249188280 * t22393 + 833731008 * t22395 + 566671248 * t22397 - 9697363104 * t22399 + 23782943184 * t22401 - 25542259776 * t22403 + 10909883688 * t22405 + 726993168 * t22407 - 1353522456 * t22409 - 287160
            t22415 = 16001744 * t22384 - 313029816 * t22393 + 2394651072 * t22395 - 9116950128 * t22397 + 18237268192 * t22399 - 16681123888 * t22401 - 1417593408 * t22403 + 16669746984 * t22405 - 13247836976 * t22407 + 3459001832 * t22409 - 135608
            t22414 = -8544965 * t22365 - 252142198 * t22367 + 337687031 * t22369 + 1246079736 * t22371 - 3080386298 * t22373 + 2185964924 * t22375 + 779603 * t22385 - 34635766 * t22392 + 262652159 * t22394 - 622316552 * t22396 - 35137674 * t22398
            t22413 = 27178800 * t22384 - 661247400 * t22393 + 6487060800 * t22395 - 33420459600 * t22397 + 101462407200 * t22399 - 191027878800 * t22401 + 225619310400 * t22403 - 162691009800 * t22405 + 65484183600 * t22407 - 11279353800 * t22409 - 191400
            t22412 = -205079160 * t22365 - 2782766448 * t22367 + 10642524552 * t22369 - 10479982656 * t22371 - 4097251824 * t22373 + 15216361056 * t22375 - 2026200 * t22385 + 65316240 * t22392 - 808487064 * t22394 + 4443122112 * t22396 - 11991730608 * t22398
            t22411 = 5126979000 * t22365 - 23820733200 * t22367 + 39993353400 * t22369 - 20134065600 * t22371 - 23629069200 * t22373 + 42722301600 * t22375 - 2778600 * t22385 + 128713200 * t22392 - 1689263400 * t22394 + 9697089600 * t22396 - 28392526800 * t22398
            t22391 = 4 * phi1
            t22390 = 8 * phi1
            t22389 = 12 * phi1
            t22388 = 16 * phi1
            t22387 = -11 * phi2
            t22386 = 11 * phi2
            tfunc[..., c] = (-0.41e2 / 0.1828716544e10*1j) * np.sqrt(0.109e3) * np.sqrt(0.31e2) * np.sqrt(0.29e2) * np.sqrt(0.2e1) * ((-8254436190 * t22365 + 57146096700 * t22367 - 171695704950 * t22369 + 292560557520 * t22371 - 309880676700 * t22373 + 210181565160 * t22375 - 90594426300 * t22398 + 23775771600 * t22396 - 3468080070 * t22394 + 234013500 * t22392 - 4680270 * t22385) * np.exp((11*1j) * phi2) + (t22411 + t22413) * np.exp((-1*1j) * (t22391 + t22387)) + (t22415 + t22417) * np.exp((-1*1j) * (t22390 + t22387)) + (t22411 - t22413) * np.exp((1j) * (t22391 + t22386)) + (-t22415 + t22417) * np.exp((1j) * (t22390 + t22386)) + (t22412 - t22416) * np.exp((-1*1j) * (t22389 + t22387)) + (t22414 + t22418) * np.exp((-1*1j) * (t22388 + t22387)) + (t22412 + t22416) * np.exp((1j) * (t22389 + t22386)) + (t22414 - t22418) * np.exp((1j) * (t22388 + t22386))) * ((1 + t22385) ** (-0.1e1 / 0.2e1)) * ((1 - t22385) ** (-0.1e1 / 0.2e1))

        if Bindx == 494:
            t22450 = np.cos(phi)
            t22449 = t22450 ** 2
            t22459 = t22449 ** 2
            t22460 = t22450 * t22459
            t22465 = t22460 ** 2
            t22475 = t22465 ** 2
            t22430 = t22450 * t22475
            t22463 = t22459 ** 2
            t22464 = t22450 * t22463
            t22473 = t22464 ** 2
            t22432 = t22450 * t22473
            t22471 = t22463 ** 2
            t22434 = t22450 * t22471
            t22458 = t22450 * t22449
            t22461 = t22458 ** 2
            t22462 = t22450 * t22461
            t22469 = t22462 ** 2
            t22436 = t22450 * t22469
            t22467 = t22461 ** 2
            t22438 = t22450 * t22467
            t22440 = t22450 * t22465
            t22486 = 91390 * t22430 + 2696708 * t22432 - 3611626 * t22434 - 13327056 * t22436 + 32945308 * t22438 - 23379304 * t22440 - 8338 * t22450 + 370436 * t22458 - 2809114 * t22460 + 6655792 * t22462 + 375804 * t22464
            t22485 = -115984 * t22449 + 326552 * t22459 + 2512704 * t22461 - 14560208 * t22463 + 25918880 * t22465 - 12444432 * t22467 - 13264064 * t22469 + 15701048 * t22471 - 3275536 * t22473 - 804232 * t22475 + 5272
            t22484 = -13107250 * t22449 - 17039425 * t22459 + 169869960 * t22461 - 159908450 * t22463 - 204473100 * t22465 + 374867350 * t22467 - 115343800 * t22469 - 66322685 * t22471 + 28835950 * t22473 + 2883595 * t22475 - 262145
            t22483 = -8399430 * t22449 + 93445605 * t22459 - 312649128 * t22461 - 212501718 * t22463 + 3636511164 * t22465 - 8918603694 * t22467 + 9578347416 * t22469 - 4091206383 * t22471 - 272622438 * t22473 + 507570921 * t22475 + 107685
            t22482 = 262145 * t22430 + 13107250 * t22432 + 17039425 * t22434 - 169869960 * t22436 + 159908450 * t22438 + 204473100 * t22440 - 2883595 * t22450 - 28835950 * t22458 + 66322685 * t22460 + 115343800 * t22462 - 374867350 * t22464
            t22481 = 76904685 * t22430 + 1043537418 * t22432 - 3990946707 * t22434 + 3929993496 * t22436 + 1536469434 * t22438 - 5706135396 * t22440 + 759825 * t22450 - 24493590 * t22458 + 303182649 * t22460 - 1666170792 * t22462 + 4496898978 * t22464
            t22480 = 113719904 * t22449 - 2224615056 * t22459 + 17018113152 * t22461 - 64791606048 * t22463 + 129607147072 * t22465 - 118548066208 * t22467 - 10074438528 * t22469 + 118467213744 * t22471 - 94148659616 * t22473 + 24582155312 * t22475 - 963728
            t22479 = 333187380 * t22449 - 8106291990 * t22459 + 79525468080 * t22461 - 409704452460 * t22463 + 1243836873720 * t22465 - 2341828132380 * t22467 + 2765887637040 * t22469 - 1994443879230 * t22471 + 802776559860 * t22473 - 138274623630 * t22475 - 2346390
            t22478 = 5586853480 * t22430 + 12205126064 * t22432 - 133051230456 * t22434 + 314305531968 * t22436 - 362860809648 * t22438 + 234571366432 * t22440 - 525016 * t22450 + 48919984 * t22458 - 1559664312 * t22460 + 17082841152 * t22462 - 86328409648 * t22464
            t22477 = 62852101650 * t22430 - 292020533820 * t22432 + 490282155090 * t22434 - 246825340560 * t22436 - 289670907420 * t22438 + 523736579160 * t22440 - 34063110 * t22450 + 1577906820 * t22458 - 20708833590 * t22460 + 118877502960 * t22462 - 348066567180 * t22464
            t22457 = 4 * phi1
            t22456 = 8 * phi1
            t22455 = 12 * phi1
            t22454 = 16 * phi1
            t22453 = 20 * phi1
            t22452 = -11 * phi2
            t22451 = 11 * phi2
            tfunc[..., c] = (0.41e2 / 0.43889197056e11*1j) * np.sqrt(0.3e1) * np.sqrt(0.109e3) * np.sqrt(0.11e2) * np.sqrt(0.17e2) * np.sqrt(0.19e2) * ((1 + t22450) ** (-0.1e1 / 0.2e1)) * ((1 - t22450) ** (-0.1e1 / 0.2e1)) * ((137846528820 * t22430 - 954322122600 * t22432 + 2867265116100 * t22434 - 4885670734560 * t22436 + 5174911362600 * t22438 - 3509967066480 * t22440 + 1512898871400 * t22464 - 397048024800 * t22462 + 57915863460 * t22460 - 3907953000 * t22458 + 78159060 * t22450) * np.exp((11*1j) * phi2) + (t22477 + t22479) * np.exp((-1*1j) * (t22457 + t22452)) + (t22478 - t22480) * np.exp((-1*1j) * (t22456 + t22452)) + (t22477 - t22479) * np.exp((1j) * (t22457 + t22451)) + (t22478 + t22480) * np.exp((1j) * (t22456 + t22451)) + (t22481 - t22483) * np.exp((-1*1j) * (t22455 + t22452)) + (t22485 + t22486) * np.exp((-1*1j) * (t22454 + t22452)) + (t22482 - t22484) * np.exp((-1*1j) * (t22453 + t22452)) + (t22481 + t22483) * np.exp((1j) * (t22455 + t22451)) + (-t22485 + t22486) * np.exp((1j) * (t22454 + t22451)) + (t22482 + t22484) * np.exp((1j) * (t22453 + t22451)))

        if Bindx == 495:
            t22515 = np.cos(phi)
            t22514 = t22515 ** 2
            t22521 = t22514 ** 2
            t22525 = t22521 ** 2
            t22526 = t22515 * t22525
            t22535 = t22526 ** 2
            t22497 = t22515 * t22535
            t22533 = t22525 ** 2
            t22499 = t22515 * t22533
            t22520 = t22515 * t22514
            t22523 = t22520 ** 2
            t22524 = t22515 * t22523
            t22531 = t22524 ** 2
            t22501 = t22515 * t22531
            t22529 = t22523 ** 2
            t22503 = t22515 * t22529
            t22522 = t22515 * t22521
            t22527 = t22522 ** 2
            t22505 = t22515 * t22527
            t22545 = 246094992 * t22497 + 1702074000 * t22499 - 3893896512 * t22501 - 1883272512 * t22503 + 8757901152 * t22505 + 9415824 * t22515 - 179870064 * t22520 + 669645504 * t22522 + 511093440 * t22524 - 5939185824 * t22526
            t22544 = 4429709856 * t22497 + 5083306272 * t22499 - 47671344512 * t22501 + 69462805632 * t22503 - 33345399360 * t22505 - 21888480 * t22515 + 496965920 * t22520 - 3739942272 * t22522 + 10853960832 * t22524 - 5543979584 * t22526
            t22543 = 11320369632 * t22497 - 33655565856 * t22499 + 18132740736 * t22501 + 46219772544 * t22503 - 83321684160 * t22505 + 10322400 * t22515 - 372067872 * t22520 + 4167723648 * t22522 - 21764865408 * t22524 + 59263254336 * t22526
            t22542 = -36914248800 * t22497 + 201010788000 * t22499 - 462140131200 * t22501 + 582803548800 * t22503 - 438581140800 * t22505 + 13648800 * t22515 - 605800800 * t22520 + 8352643200 * t22522 - 54865008000 * t22524 + 200925700800 * t22526
            t22496 = t22527 ** 2
            t22541 = 25634895 * t22496 - 23691030 * t22514 - 194696733 * t22521 + 1897521912 * t22523 - 4220561202 * t22525 + 724253244 * t22527 + 7138315470 * t22529 - 6733225224 * t22531 + 428883939 * t22533 + 955195626 * t22535 + 2369103
            t22540 = 615237480 * t22496 + 31233840 * t22514 + 186010440 * t22521 - 4959880640 * t22523 + 25876792656 * t22525 - 56714253024 * t22527 + 51100157264 * t22529 - 34719168 * t22531 - 27182806200 * t22533 + 11086894896 * t22535 - 473240
            t22539 = 2358410340 * t22496 - 35721576 * t22514 + 453903252 * t22521 - 835142880 * t22523 - 8959314936 * t22525 + 51286140048 * t22527 - 114483485688 * t22529 + 127449021216 * t22531 - 67320886380 * t22533 + 10086739608 * t22535 + 336996
            t22538 = -15380937000 * t22496 - 153582000 * t22514 + 3157380600 * t22521 - 24176961600 * t22523 + 89399415600 * t22525 - 174139706400 * t22527 + 168715998000 * t22529 - 39315777600 * t22531 - 69157499400 * t22533 + 61050488400 * t22535 + 1181400
            t22519 = 2 * phi1
            t22518 = 4 * phi1
            t22517 = -3 * phi2
            t22516 = 3 * phi2
            tfunc[..., c] = (0.41e2 / 0.7314866176e10) * np.sqrt(0.109e3) * np.sqrt(0.31e2) * np.sqrt(0.29e2) * ((24763308570 * t22496 - 166358637060 * t22535 + 481726150290 * t22533 - 783776735280 * t22531 + 782319611220 * t22529 - 490436132760 * t22527 + 189635179860 * t22525 - 42521813040 * t22523 + 4862800530 * t22521 - 215292420 * t22514 + 1560090) * np.exp((12*1j) * phi2) + (t22538 - t22542) * np.exp((-4*1j) * (phi1 + t22517)) + (t22539 - t22543) * np.exp((-4*1j) * (t22519 + t22517)) + (t22541 - t22545) * np.exp((-4*1j) * (t22518 + t22517)) + (t22538 + t22542) * np.exp((4*1j) * (phi1 + t22516)) + (t22539 + t22543) * np.exp((4*1j) * (t22519 + t22516)) + (t22541 + t22545) * np.exp((4*1j) * (t22518 + t22516)) + (t22540 - t22544) * np.exp((-12*1j) * (phi1 - phi2)) + (t22540 + t22544) * np.exp((12*1j) * (phi1 + phi2)))

        if Bindx == 496:
            t22576 = np.cos(phi)
            t22575 = t22576 ** 2
            t22583 = t22575 ** 2
            t22584 = t22576 * t22583
            t22589 = t22584 ** 2
            t22557 = t22589 ** 2
            t22582 = t22576 * t22575
            t22585 = t22582 ** 2
            t22587 = t22583 ** 2
            t22591 = t22585 ** 2
            t22586 = t22576 * t22585
            t22593 = t22586 ** 2
            t22595 = t22587 ** 2
            t22588 = t22576 * t22587
            t22597 = t22588 ** 2
            t22609 = 91390 * t22557 - 84460 * t22575 - 694106 * t22583 + 6764784 * t22585 - 15046564 * t22587 + 2582008 * t22589 + 25448540 * t22591 - 24004368 * t22593 + 1528998 * t22595 + 3405332 * t22597 + 8446
            t22558 = t22576 * t22597
            t22560 = t22576 * t22595
            t22562 = t22576 * t22593
            t22564 = t22576 * t22591
            t22566 = t22576 * t22589
            t22608 = -877344 * t22558 - 6068000 * t22560 + 13881984 * t22562 + 6713984 * t22564 - 31222464 * t22566 - 33568 * t22576 + 641248 * t22582 - 2387328 * t22584 - 1822080 * t22586 + 21173568 * t22588
            t22607 = 289408080 * t22564 + 289408080 * t22586 - 245367720 * t22566 - 245367720 * t22588 - 45088940 * t22560 - 45088940 * t22582 + 4194320 * t22562 + 4194320 * t22584 - 3145740 * t22558 - 3145740 * t22576
            t22606 = -553713732 * t22558 - 635413284 * t22560 + 5958918064 * t22562 - 8682850704 * t22564 + 4168174920 * t22566 + 2736060 * t22576 - 62120740 * t22582 + 467492784 * t22584 - 1356745104 * t22586 + 692997448 * t22588
            t22605 = 76904685 * t22557 + 3904230 * t22575 + 23251305 * t22583 - 619985080 * t22585 + 3234599082 * t22587 - 7089281628 * t22589 + 6387519658 * t22591 - 4339896 * t22593 - 3397850775 * t22595 + 1385861862 * t22597 - 59155
            t22604 = 262145 * t22557 + 16252990 * t22575 + 62128365 * t22583 - 174064280 * t22585 - 129499630 * t22587 + 449840820 * t22589 - 129499630 * t22591 - 174064280 * t22593 + 62128365 * t22595 + 16252990 * t22597 + 262145
            t22603 = -26816896704 * t22558 + 79726887232 * t22560 - 42954766592 * t22562 - 109490317568 * t22564 + 197381275520 * t22566 - 24452800 * t22576 + 881393984 * t22582 - 9872947456 * t22584 + 51558930176 * t22586 - 140389105792 * t22588
            t22602 = -150845043960 * t22558 + 821403174600 * t22560 - 1888472627040 * t22562 + 2381547228960 * t22564 - 1792202025360 * t22566 + 55773960 * t22576 - 2475522360 * t22582 + 34131937440 * t22584 - 224198373600 * t22586 + 821055477360 * t22588
            t22601 = 5586853480 * t22557 - 84621072 * t22575 + 1075254344 * t22583 - 1978375360 * t22585 - 21223778992 * t22587 + 121492068256 * t22589 - 271200668336 * t22591 + 301914809152 * t22593 - 159476882360 * t22595 + 23894542576 * t22597 + 798312
            t22600 = 62852101650 * t22557 + 627591900 * t22575 - 12902205270 * t22583 + 98795856720 * t22585 - 365318521020 * t22587 + 711598163880 * t22589 - 689434919100 * t22591 + 160658563920 * t22593 + 282602690730 * t22595 - 249474495780 * t22597 - 4827630
            t22581 = 2 * phi1
            t22580 = 4 * phi1
            t22579 = 5 * phi1
            t22578 = -3 * phi2
            t22577 = 3 * phi2
            tfunc[..., c] = (0.41e2 / 0.117037858816e12) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.109e3) * np.sqrt(0.11e2) * np.sqrt(0.17e2) * np.sqrt(0.19e2) * ((8684340 + 137846528820 * t22557 - 926045911560 * t22597 + 2681559189540 * t22595 - 4362942941280 * t22593 + 4354831767720 * t22591 - 2730043859760 * t22589 + 1055616264360 * t22587 - 236700371040 * t22585 + 27069087780 * t22583 - 1198438920 * t22575) * np.exp((12*1j) * phi2) + (t22600 + t22602) * np.exp((-4*1j) * (phi1 + t22578)) + (t22601 + t22603) * np.exp((-4*1j) * (t22581 + t22578)) + (t22608 + t22609) * np.exp((-4*1j) * (t22580 + t22578)) + (t22604 + t22607) * np.exp((-4*1j) * (t22579 + t22578)) + (t22600 - t22602) * np.exp((4*1j) * (phi1 + t22577)) + (t22601 - t22603) * np.exp((4*1j) * (t22581 + t22577)) + (-t22608 + t22609) * np.exp((4*1j) * (t22580 + t22577)) + (t22604 - t22607) * np.exp((4*1j) * (t22579 + t22577)) + (t22605 + t22606) * np.exp((-12*1j) * (phi1 - phi2)) + (t22605 - t22606) * np.exp((12*1j) * (phi1 + phi2)))

        if Bindx == 497:
            t22639 = np.cos(phi)
            t22638 = t22639 ** 2
            t22647 = t22638 ** 2
            t22646 = t22639 * t22638
            t22649 = t22646 ** 2
            t22651 = t22647 ** 2
            t22648 = t22639 * t22647
            t22653 = t22648 ** 2
            t22655 = t22649 ** 2
            t22650 = t22639 * t22649
            t22657 = t22650 ** 2
            t22659 = t22651 ** 2
            t22652 = t22639 * t22651
            t22661 = t22652 ** 2
            t22663 = t22653 ** 2
            t22672 = -215832 * t22638 + 18350548 * t22647 - 83693856 * t22649 + 62999144 * t22651 + 253527664 * t22653 - 492188216 * t22655 + 193963744 * t22657 + 127859108 * t22659 - 72415512 * t22661 - 8078876 * t22663 - 107916
            t22671 = 3315600 * t22638 - 62345240 * t22647 + 414078400 * t22649 - 1159649712 * t22651 + 1125529184 * t22653 + 971474192 * t22655 - 2970137664 * t22657 + 2104636040 * t22659 - 281419632 * t22661 - 145419768 * t22663 - 61400
            t22670 = 2715472 * t22638 - 52495384 * t22647 + 441283520 * t22649 - 1879619248 * t22651 + 4352416224 * t22653 - 5429557744 * t22655 + 3006897088 * t22657 + 333241480 * t22659 - 1146480816 * t22661 + 371628296 * t22663 - 28888
            t22669 = 3988400 * t22638 - 89702600 * t22647 + 866964800 * t22649 - 4456093200 * t22651 + 13352487200 * t22653 - 24481064400 * t22655 + 27869857600 * t22657 - 19243309800 * t22659 + 7388737200 * t22661 - 1211831400 * t22663 - 33800
            t22619 = t22639 * t22663
            t22621 = t22639 * t22661
            t22623 = t22639 * t22659
            t22625 = t22639 * t22657
            t22627 = t22639 * t22655
            t22629 = t22639 * t22653
            t22668 = 776815 * t22619 + 34681802 * t22621 + 44527267 * t22623 - 312995976 * t22625 + 242927246 * t22627 + 200826236 * t22629 + 642447 * t22639 - 7053878 * t22646 + 3358979 * t22648 + 115745656 * t22650 - 323436594 * t22652
            t22667 = 71466980 * t22619 + 393618136 * t22621 - 2727611308 * t22623 + 5595053600 * t22625 - 5358061048 * t22627 + 2290363920 * t22629 + 568100 * t22639 - 16799016 * t22646 + 131520532 * t22648 - 369066464 * t22650 - 11053432 * t22652
            t22666 = 18643560 * t22619 + 406716432 * t22621 - 936725976 * t22623 - 519699520 * t22625 + 3159241424 * t22627 - 3408780960 * t22629 - 1210040 * t22639 + 18587920 * t22646 - 62909496 * t22648 - 178058816 * t22650 + 1504195472 * t22652
            t22665 = -466089000 * t22619 + 1993426800 * t22621 - 2164756200 * t22623 - 3108606400 * t22625 + 10915284400 * t22627 - 12994837600 * t22629 + 1316600 * t22639 - 51200400 * t22646 + 580353400 * t22648 - 2990884800 * t22650 + 8285993200 * t22652
            t22645 = 4 * phi1
            t22644 = 8 * phi1
            t22643 = 12 * phi1
            t22642 = 16 * phi1
            t22641 = -13 * phi2
            t22640 = 13 * phi2
            tfunc[..., c] = (0.41e2 / 0.3657433088e10*1j) * np.sqrt(0.109e3) * np.sqrt(0.3e1) * np.sqrt(0.31e2) * np.sqrt(0.29e2) * np.sqrt(0.11e2) * np.sqrt(0.2e1) * ((1 + t22639) ** (-0.1e1 / 0.2e1)) * ((1 - t22639) ** (-0.1e1 / 0.2e1)) * ((750403290 * t22619 - 5656886340 * t22621 + 18641515410 * t22623 - 35133226800 * t22625 + 41563917780 * t22627 - 31844557080 * t22629 + 15703865940 * t22652 - 4780115760 * t22650 + 819047250 * t22648 - 65523780 * t22646 + 1560090 * t22639) * np.exp((13*1j) * phi2) + (t22665 - t22669) * np.exp((-1*1j) * (t22645 + t22641)) + (t22667 - t22670) * np.exp((-1*1j) * (t22644 + t22641)) + (t22665 + t22669) * np.exp((1j) * (t22645 + t22640)) + (t22667 + t22670) * np.exp((1j) * (t22644 + t22640)) + (t22666 + t22671) * np.exp((-1*1j) * (t22643 + t22641)) + (t22668 + t22672) * np.exp((-1*1j) * (t22642 + t22641)) + (t22666 - t22671) * np.exp((1j) * (t22643 + t22640)) + (t22668 - t22672) * np.exp((1j) * (t22642 + t22640)))

        if Bindx == 498:
            t22704 = np.cos(phi)
            t22703 = t22704 ** 2
            t22713 = t22703 ** 2
            t22712 = t22704 * t22703
            t22715 = t22712 ** 2
            t22717 = t22713 ** 2
            t22714 = t22704 * t22713
            t22719 = t22714 ** 2
            t22721 = t22715 ** 2
            t22716 = t22704 * t22715
            t22723 = t22716 ** 2
            t22725 = t22717 ** 2
            t22718 = t22704 * t22717
            t22727 = t22718 ** 2
            t22729 = t22719 ** 2
            t22740 = -25392 * t22703 + 2158888 * t22713 - 9846336 * t22715 + 7411664 * t22717 + 29826784 * t22719 - 57904496 * t22721 + 22819264 * t22723 + 15042248 * t22725 - 8519472 * t22727 - 950456 * t22729 - 12696
            t22684 = t22704 * t22729
            t22686 = t22704 * t22727
            t22688 = t22704 * t22725
            t22690 = t22704 * t22723
            t22692 = t22704 * t22721
            t22694 = t22704 * t22719
            t22739 = 91390 * t22684 + 4080212 * t22686 + 5238502 * t22688 - 36823056 * t22690 + 28579676 * t22692 + 23626616 * t22694 + 75582 * t22704 - 829868 * t22712 + 395174 * t22714 + 13617136 * t22716 - 38051364 * t22718
            t22738 = -19398730 * t22703 - 107217305 * t22713 + 178258600 * t22715 + 418907710 * t22717 - 695208540 * t22719 - 115868090 * t22721 + 463472360 * t22723 - 57934045 * t22725 - 61341930 * t22727 - 3407885 * t22729 - 262145
            t22737 = 13676850 * t22703 - 257174115 * t22713 + 1708073400 * t22715 - 4783555062 * t22717 + 4642807884 * t22719 + 4007331042 * t22721 - 12251817864 * t22723 + 8681623665 * t22725 - 1160855982 * t22727 - 599856543 * t22729 - 253275
            t22736 = 262145 * t22684 + 19398730 * t22686 + 107217305 * t22688 - 178258600 * t22690 - 418907710 * t22692 + 695208540 * t22694 + 3407885 * t22704 + 61341930 * t22712 + 57934045 * t22714 - 463472360 * t22716 + 115868090 * t22718
            t22735 = 76904685 * t22684 + 1677705282 * t22686 - 3863994651 * t22688 - 2143760520 * t22690 + 13031870874 * t22692 - 14061221460 * t22694 - 4991415 * t22704 + 76675170 * t22712 - 259501671 * t22714 - 734492616 * t22716 + 6204806322 * t22718
            t22734 = -212279072 * t22703 + 4103769584 * t22713 - 34496859520 * t22715 + 146937191648 * t22717 - 340245407424 * t22719 + 424449774944 * t22721 - 235060911488 * t22723 - 26050790480 * t22725 + 89624891616 * t22727 - 29051638096 * t22729 + 2258288
            t22733 = 537835740 * t22703 - 12096395610 * t22713 + 116910203280 * t22715 - 600904168020 * t22717 + 1800582898920 * t22719 - 3301271534340 * t22721 + 3758250297360 * t22723 - 2594960326530 * t22725 + 996371211420 * t22727 - 163415464290 * t22729 - 4557930
            t22732 = 5586853480 * t22684 + 30770669936 * t22686 - 213228049208 * t22688 + 437387233600 * t22690 - 418860598448 * t22692 + 179046709920 * t22694 + 44410600 * t22704 - 1313244816 * t22712 + 10281474632 * t22714 - 28851369664 * t22716 - 864090032 * t22718
            t22731 = 62852101650 * t22684 - 268813603980 * t22686 + 291917373570 * t22688 + 419195573040 * t22690 - 1471926101340 * t22692 + 1752353850360 * t22694 - 177543510 * t22704 + 6904373940 * t22712 - 78260655990 * t22714 + 403320815280 * t22716 - 1117366183020 * t22718
            t22711 = 4 * phi1
            t22710 = 8 * phi1
            t22709 = 12 * phi1
            t22708 = 16 * phi1
            t22707 = 20 * phi1
            t22706 = -13 * phi2
            t22705 = 13 * phi2
            tfunc[..., c] = (0.41e2 / 0.29259464704e11*1j) * np.sqrt(0.109e3) * np.sqrt(0.17e2) * np.sqrt(0.19e2) * ((1 + t22704) ** (-0.1e1 / 0.2e1)) * ((1 - t22704) ** (-0.1e1 / 0.2e1)) * ((286583220 * t22704 + 137846528820 * t22684 - 1039150755720 * t22686 + 3424382895780 * t22688 - 6453854114400 * t22690 + 7635150147240 * t22692 - 5849736686640 * t22694 + 2884746692520 * t22718 - 878090986080 * t22716 + 150456190500 * t22714 - 12036495240 * t22712) * np.exp((13*1j) * phi2) + (t22731 + t22733) * np.exp((-1*1j) * (t22711 + t22706)) + (t22732 + t22734) * np.exp((-1*1j) * (t22710 + t22706)) + (t22731 - t22733) * np.exp((1j) * (t22711 + t22705)) + (t22732 - t22734) * np.exp((1j) * (t22710 + t22705)) + (t22735 + t22737) * np.exp((-1*1j) * (t22709 + t22706)) + (t22739 + t22740) * np.exp((-1*1j) * (t22708 + t22706)) + (t22736 + t22738) * np.exp((-1*1j) * (t22707 + t22706)) + (t22735 - t22737) * np.exp((1j) * (t22709 + t22705)) + (t22739 - t22740) * np.exp((1j) * (t22708 + t22705)) + (t22736 - t22738) * np.exp((1j) * (t22707 + t22705)))

        if Bindx == 499:
            t22769 = np.cos(phi)
            t22768 = t22769 ** 2
            t22777 = t22768 ** 2
            t22781 = t22777 ** 2
            t22782 = t22769 * t22781
            t22791 = t22782 ** 2
            t22751 = t22769 * t22791
            t22789 = t22781 ** 2
            t22753 = t22769 * t22789
            t22776 = t22769 * t22768
            t22779 = t22776 ** 2
            t22780 = t22769 * t22779
            t22787 = t22780 ** 2
            t22755 = t22769 * t22787
            t22785 = t22779 ** 2
            t22757 = t22769 * t22785
            t22778 = t22769 * t22777
            t22783 = t22778 ** 2
            t22759 = t22769 * t22783
            t22801 = 9212112 * t22751 + 35244720 * t22753 - 137154752 * t22755 + 93414848 * t22757 + 78893152 * t22759 + 73520 * t22769 - 39600 * t22776 - 9334592 * t22778 + 58743360 * t22780 - 129052768 * t22782
            t22800 = 511784 * t22751 + 6251224 * t22753 - 864416 * t22755 - 25756768 * t22757 + 21452912 * t22759 - 70056 * t22769 + 283304 * t22776 + 2509472 * t22778 - 11661728 * t22780 + 7344272 * t22782
            t22799 = 23542064 * t22751 - 50991920 * t22753 - 55342784 * t22755 + 275989696 * t22757 - 346715616 * t22759 + 4048 * t22769 - 357328 * t22776 + 8639168 * t22778 - 63244480 * t22780 + 208477152 * t22782
            t22750 = t22783 ** 2
            t22798 = 45695 * t22750 - 145776 * t22768 + 1810619 * t22777 - 2379728 * t22779 - 11562278 * t22781 + 27499472 * t22783 - 7075978 * t22785 - 18408688 * t22787 + 7773709 * t22789 + 2452064 * t22791 - 9111
            t22797 = -76767600 * t22751 + 442268400 * t22753 - 1071537600 * t22755 + 1411307200 * t22757 - 1089152800 * t22759 + 18800 * t22769 - 873200 * t22776 + 15793600 * t22778 - 124958400 * t22780 + 493901600 * t22782
            t22796 = 4203940 * t22750 - 537280 * t22768 + 6965044 * t22777 - 34463936 * t22779 + 69351256 * t22781 - 11998272 * t22783 - 174580120 * t22785 + 283508672 * t22787 - 175570132 * t22789 + 33114112 * t22791 + 6716
            t22795 = 1096680 * t22750 + 654400 * t22768 - 6557560 * t22777 + 19966336 * t22779 + 6315504 * t22781 - 132081664 * t22783 + 225073680 * t22785 - 113396096 * t22787 - 30614664 * t22789 + 29559744 * t22791 - 16360
            t22794 = -27417000 * t22750 - 1268800 * t22768 + 21398200 * t22777 - 139785600 * t22779 + 460736400 * t22781 - 841139200 * t22783 + 846578800 * t22785 - 390339200 * t22787 - 26633400 * t22789 + 97857600 * t22791 + 12200
            t22775 = 2 * phi1
            t22774 = 4 * phi1
            t22773 = 6 * phi1
            t22772 = 8 * phi1
            t22771 = -7 * phi2
            t22770 = 7 * phi2
            tfunc[..., c] = (0.41e2 / 0.3657433088e10) * np.sqrt(0.7e1) * np.sqrt(0.17e2) * np.sqrt(0.109e3) * np.sqrt(0.3e1) * np.sqrt(0.31e2) * np.sqrt(0.29e2) * np.sqrt(0.11e2) * ((44141370 * t22750 - 325967040 * t22791 + 1047187470 * t22789 - 1911123360 * t22787 + 2168158020 * t22785 - 1569634080 * t22783 + 714154140 * t22781 - 192349920 * t22779 + 26888610 * t22777 - 1468320 * t22768 + 13110) * np.exp((14*1j) * phi2) + (t22794 - t22797) * np.exp((-2*1j) * (t22775 + t22771)) + (t22796 - t22799) * np.exp((-2*1j) * (t22774 + t22771)) + (t22795 - t22801) * np.exp((-2*1j) * (t22773 + t22771)) + (t22798 - t22800) * np.exp((-2*1j) * (t22772 + t22771)) + (t22794 + t22797) * np.exp((2*1j) * (t22775 + t22770)) + (t22796 + t22799) * np.exp((2*1j) * (t22774 + t22770)) + (t22795 + t22801) * np.exp((2*1j) * (t22773 + t22770)) + (t22798 + t22800) * np.exp((2*1j) * (t22772 + t22770)))

        if Bindx == 500:
            t22832 = np.cos(phi)
            t22831 = t22832 ** 2
            t22841 = t22831 ** 2
            t22842 = t22832 * t22841
            t22847 = t22842 ** 2
            t22813 = t22847 ** 2
            t22840 = t22832 * t22831
            t22843 = t22840 ** 2
            t22845 = t22841 ** 2
            t22849 = t22843 ** 2
            t22844 = t22832 * t22843
            t22851 = t22844 ** 2
            t22853 = t22845 ** 2
            t22846 = t22832 * t22845
            t22855 = t22846 ** 2
            t22867 = 91390 * t22813 - 291552 * t22831 + 3621238 * t22841 - 4759456 * t22843 - 23124556 * t22845 + 54998944 * t22847 - 14151956 * t22849 - 36817376 * t22851 + 15547418 * t22853 + 4904128 * t22855 - 18222
            t22866 = 262145 * t22813 - 262145 - 811076630 * t22849 + 811076630 * t22845 + 191627995 * t22853 - 191627995 * t22841 + 71303440 * t22851 - 71303440 * t22843 + 23068760 * t22855 - 23068760 * t22831
            t22814 = t22832 * t22855
            t22816 = t22832 * t22853
            t22818 = t22832 * t22851
            t22820 = t22832 * t22849
            t22822 = t22832 * t22847
            t22865 = -1023568 * t22814 - 12502448 * t22816 + 1728832 * t22818 + 51513536 * t22820 - 42905824 * t22822 + 140112 * t22832 - 566608 * t22840 - 5018944 * t22842 + 23323456 * t22844 - 14688544 * t22846
            t22864 = 695208540 * t22822 - 695208540 * t22846 + 392168920 * t22820 - 392168920 * t22844 - 249562040 * t22818 + 249562040 * t22842 - 84410690 * t22816 + 84410690 * t22840 - 3670030 * t22814 + 3670030 * t22832
            t22863 = -645999354 * t22814 - 2471535990 * t22816 + 9617976984 * t22818 - 6550716216 * t22820 - 5532382284 * t22822 - 5155590 * t22832 + 2776950 * t22840 + 654588264 * t22842 - 4119378120 * t22844 + 9049825356 * t22846
            t22862 = -31286379488 * t22814 + 67766044640 * t22816 + 73548153728 * t22818 - 366778306432 * t22820 + 460769979072 * t22822 - 5379616 * t22832 + 474873376 * t22840 - 11481078656 * t22842 + 84049164160 * t22844 - 277057070784 * t22846
            t22861 = 76904685 * t22813 + 45889800 * t22831 - 459848895 * t22841 + 1400139312 * t22843 + 442874718 * t22845 - 9262226688 * t22847 + 15783291810 * t22849 - 7951901232 * t22851 - 2146853313 * t22853 + 2072877048 * t22855 - 1147245
            t22860 = -175985884620 * t22814 + 1013878193580 * t22816 - 2456446371120 * t22818 + 3235351190640 * t22820 - 2496828336360 * t22822 + 43098060 * t22832 - 2001767340 * t22840 + 36206038320 * t22842 - 286460884080 * t22844 + 1132244722920 * t22846
            t22859 = 5586853480 * t22813 - 714021760 * t22831 + 9256240648 * t22841 - 45801072512 * t22843 + 92164803952 * t22845 - 15945181824 * t22847 - 232009389040 * t22849 + 376770698624 * t22851 - 233325071944 * t22853 + 44007215104 * t22855 + 8925272
            t22858 = 62852101650 * t22813 + 2908660560 * t22831 - 49054303590 * t22841 + 320451498720 * t22843 - 1056215160180 * t22845 + 1928269559040 * t22847 - 1940739570060 * t22849 + 894833099040 * t22851 + 61055737830 * t22853 - 224333655120 * t22855 - 27967890
            t22839 = 2 * phi1
            t22838 = 4 * phi1
            t22837 = 6 * phi1
            t22836 = 8 * phi1
            t22835 = -7 * phi2
            t22834 = 7 * phi2
            t22833 = 10 * phi1
            tfunc[..., c] = (0.41e2 / 0.58518929408e11) * np.sqrt(0.2e1) * np.sqrt(0.109e3) * np.sqrt(0.7e1) * np.sqrt(0.19e2) * ((40940460 + 137846528820 * t22813 - 1017943597440 * t22855 + 3270201123420 * t22853 - 5968136496960 * t22851 + 6770815155720 * t22849 - 4901719394880 * t22847 + 2230190618040 * t22845 - 600678429120 * t22843 + 83968883460 * t22841 - 4585331520 * t22831) * np.exp((14*1j) * phi2) + (t22864 + t22866) * np.exp((-2*1j) * (t22833 + t22835)) + (-t22864 + t22866) * np.exp((2*1j) * (t22833 + t22834)) + (t22858 + t22860) * np.exp((-2*1j) * (t22839 + t22835)) + (t22859 + t22862) * np.exp((-2*1j) * (t22838 + t22835)) + (t22861 + t22863) * np.exp((-2*1j) * (t22837 + t22835)) + (t22865 + t22867) * np.exp((-2*1j) * (t22836 + t22835)) + (t22858 - t22860) * np.exp((2*1j) * (t22839 + t22834)) + (t22859 - t22862) * np.exp((2*1j) * (t22838 + t22834)) + (t22861 - t22863) * np.exp((2*1j) * (t22837 + t22834)) + (-t22865 + t22867) * np.exp((2*1j) * (t22836 + t22834)))

        if Bindx == 501:
            t22897 = np.cos(phi)
            t22896 = t22897 ** 2
            t22904 = t22896 ** 2
            t22905 = t22897 * t22904
            t22910 = t22905 ** 2
            t22920 = t22910 ** 2
            t22877 = t22897 * t22920
            t22908 = t22904 ** 2
            t22909 = t22897 * t22908
            t22918 = t22909 ** 2
            t22879 = t22897 * t22918
            t22916 = t22908 ** 2
            t22881 = t22897 * t22916
            t22903 = t22897 * t22896
            t22906 = t22903 ** 2
            t22907 = t22897 * t22906
            t22914 = t22907 ** 2
            t22883 = t22897 * t22914
            t22912 = t22906 ** 2
            t22885 = t22897 * t22912
            t22887 = t22897 * t22910
            t22929 = 27417 * t22877 + 1708290 * t22879 + 7142985 * t22881 - 13821000 * t22883 - 14023470 * t22885 + 31816044 * t22887 - 70179 * t22897 - 96030 * t22903 + 3632373 * t22905 - 7505160 * t22907 - 8811270 * t22909
            t22928 = 227160 * t22896 - 1330620 * t22904 - 2097120 * t22906 + 16946280 * t22908 - 16728816 * t22910 - 15726360 * t22912 + 25581600 * t22914 - 1724412 * t22916 - 4826280 * t22918 - 329004 * t22920 + 7572
            t22927 = -327888 * t22896 + 1645512 * t22904 + 8924736 * t22906 - 87877296 * t22908 + 267549984 * t22910 - 394436016 * t22912 + 282222144 * t22914 - 59304120 * t22916 - 33536208 * t22918 + 15134184 * t22920 + 4968
            t22926 = -701584 * t22896 + 3158216 * t22904 + 8759616 * t22906 - 82605744 * t22908 + 180754080 * t22910 - 124981168 * t22912 - 60315328 * t22914 + 110369096 * t22916 - 28542096 * t22918 - 5922072 * t22920 + 26984
            t22925 = -270000 * t22896 + 1623000 * t22904 + 17342400 * t22906 - 172746000 * t22908 + 614661600 * t22910 - 1169322000 * t22912 + 1310040000 * t22914 - 869663400 * t22916 + 317682000 * t22918 - 49350600 * t22920 + 3000
            t22924 = 658008 * t22877 + 20685072 * t22879 - 17036808 * t22881 - 115602240 * t22883 + 225837616 * t22885 - 122583968 * t22887 - 19752 * t22897 + 1790224 * t22903 - 16623752 * t22905 + 49466560 * t22907 - 26570960 * t22909
            t22923 = 2522364 * t22877 + 23671416 * t22879 - 135512964 * t22881 + 236637984 * t22883 - 141204360 * t22885 - 63077040 * t22887 + 101292 * t22897 - 2427144 * t22903 + 20624652 * t22905 - 78505440 * t22907 + 137169240 * t22909
            t22922 = -16450200 * t22877 + 63270000 * t22879 - 4563000 * t22881 - 386001600 * t22883 + 941682000 * t22885 - 1115100000 * t22887 + 244200 * t22897 - 7386000 * t22903 + 68790600 * t22905 - 306744000 * t22907 + 762258000 * t22909
            t22902 = 4 * phi1
            t22901 = 8 * phi1
            t22900 = 16 * phi1
            t22899 = -15 * phi2
            t22898 = 15 * phi2
            tfunc[..., c] = (0.41e2 / 0.3657433088e10*1j) * np.sqrt(0.11e2) * np.sqrt(0.5e1) * np.sqrt(0.2e1) * np.sqrt(0.29e2) * np.sqrt(0.31e2) * np.sqrt(0.109e3) * np.sqrt(0.17e2) * ((1 + t22897) ** (-0.1e1 / 0.2e1)) * ((1 - t22897) ** (-0.1e1 / 0.2e1)) * ((26484822 * t22877 - 218669556 * t22879 + 796178166 * t22881 - 1675499952 * t22883 + 2241941100 * t22885 - 1973935992 * t22887 + 1141141596 * t22909 - 417443376 * t22907 + 88521342 * t22905 - 8993460 * t22903 + 275310 * t22897) * np.exp((15*1j) * phi2) + (t22924 + t22926) * np.exp((-3*1j) * (t22902 - 5 * phi2)) + (t22924 - t22926) * np.exp((3*1j) * (t22902 + 5 * phi2)) + (t22922 - t22925) * np.exp((-1*1j) * (t22902 + t22899)) + (t22923 - t22927) * np.exp((-1*1j) * (t22901 + t22899)) + (t22922 + t22925) * np.exp((1j) * (t22902 + t22898)) + (t22923 + t22927) * np.exp((1j) * (t22901 + t22898)) + (t22928 + t22929) * np.exp((-1*1j) * (t22900 + t22899)) + (-t22928 + t22929) * np.exp((1j) * (t22900 + t22898)))

        if Bindx == 502:
            t22961 = np.cos(phi)
            t22960 = t22961 ** 2
            t22968 = t22960 ** 2
            t22969 = t22961 * t22968
            t22974 = t22969 ** 2
            t22984 = t22974 ** 2
            t22941 = t22961 * t22984
            t22972 = t22968 ** 2
            t22973 = t22961 * t22972
            t22982 = t22973 ** 2
            t22943 = t22961 * t22982
            t22980 = t22972 ** 2
            t22945 = t22961 * t22980
            t22967 = t22961 * t22960
            t22970 = t22967 ** 2
            t22971 = t22961 * t22970
            t22978 = t22971 ** 2
            t22947 = t22961 * t22978
            t22976 = t22970 ** 2
            t22949 = t22961 * t22976
            t22951 = t22961 * t22974
            t22995 = 18278 * t22941 + 1138860 * t22943 + 4761990 * t22945 - 9214000 * t22947 - 9348980 * t22949 + 21210696 * t22951 - 46786 * t22961 - 64020 * t22967 + 2421582 * t22969 - 5003440 * t22971 - 5874180 * t22973
            t22994 = 151440 * t22960 - 887080 * t22968 - 1398080 * t22970 + 11297520 * t22972 - 11152544 * t22974 - 10484240 * t22976 + 17054400 * t22978 - 1149608 * t22980 - 3217520 * t22982 - 219336 * t22984 + 5048
            t22993 = -5347758 * t22960 - 55207737 * t22968 - 64173096 * t22970 + 240649110 * t22972 + 139041708 * t22974 - 301257034 * t22976 - 64173096 * t22978 + 88238007 * t22980 + 21495890 * t22982 + 786435 * t22984 - 52429
            t22992 = 52429 * t22941 + 5347758 * t22943 + 55207737 * t22945 + 64173096 * t22947 - 240649110 * t22949 - 139041708 * t22951 - 786435 * t22961 - 21495890 * t22967 - 88238007 * t22969 + 64173096 * t22971 + 301257034 * t22973
            t22991 = -16399526 * t22960 + 73823299 * t22968 + 204756024 * t22970 - 1930909266 * t22972 + 4225126620 * t22974 - 2921434802 * t22976 - 1409870792 * t22978 + 2579877619 * t22980 - 667171494 * t22982 - 138428433 * t22984 + 630751
            t22990 = 15380937 * t22941 + 483513558 * t22943 - 398235387 * t22945 - 2702202360 * t22947 + 5278954274 * t22949 - 2865400252 * t22951 - 461703 * t22961 + 41846486 * t22967 - 388580203 * t22969 + 1156280840 * t22971 - 621096190 * t22973
            t22989 = 145249632 * t22960 - 728937968 * t22968 - 3953528704 * t22970 + 38928368544 * t22972 - 118520765376 * t22974 + 174729438624 * t22976 - 125020319616 * t22978 + 26270865680 * t22980 + 14856054112 * t22982 - 6704224176 * t22984 - 2200752
            t22988 = -206320500 * t22960 + 1240215450 * t22968 + 13252194960 * t22970 - 132003855900 * t22972 + 469693661640 * t22974 - 893537406300 * t22976 + 1001067066000 * t22978 - 664553287110 * t22980 + 242756700300 * t22982 - 37711260990 * t22984 + 2292450
            t22987 = 1117370696 * t22941 + 10486094224 * t22943 - 60030279096 * t22945 + 104827197376 * t22947 - 62551485040 * t22949 - 27942214560 * t22951 + 44870888 * t22961 - 1075189616 * t22967 + 9136421928 * t22969 - 34776772160 * t22971 + 60763985360 * t22973
            t22986 = 12570420330 * t22941 - 48347770500 * t22943 + 3486816450 * t22945 + 294963122640 * t22947 - 719586300300 * t22949 + 852103665000 * t22951 - 186605430 * t22961 + 5644011900 * t22967 - 52566336990 * t22969 + 234398427600 * t22971 - 582479450700 * t22973
            t22966 = 4 * phi1
            t22965 = 8 * phi1
            t22964 = 16 * phi1
            t22963 = -15 * phi2
            t22962 = 15 * phi2
            tfunc[..., c] = (0.41e2 / 0.29259464704e11*1j) * np.sqrt(0.19e2) * np.sqrt(0.109e3) * np.sqrt(0.3e1) * np.sqrt(0.5e1) * ((1 + t22961) ** (-0.1e1 / 0.2e1)) * ((1 - t22961) ** (-0.1e1 / 0.2e1)) * ((27569305764 * t22941 - 227623498872 * t22943 + 828779566692 * t22945 - 1744107265824 * t22947 + 2333742688200 * t22949 - 2054763476304 * t22951 + 1187868341352 * t22973 - 434536583712 * t22971 + 92146058004 * t22969 - 9361718520 * t22967 + 286583220 * t22961) * np.exp((15*1j) * phi2) + (t22992 - t22993) * np.exp((-5*1j) * (t22966 - 3 * phi2)) + (t22990 + t22991) * np.exp((-3*1j) * (t22966 - 5 * phi2)) + (t22990 - t22991) * np.exp((3*1j) * (t22966 + 5 * phi2)) + (t22992 + t22993) * np.exp((5*1j) * (t22966 + 3 * phi2)) + (t22986 + t22988) * np.exp((-1*1j) * (t22966 + t22963)) + (t22987 + t22989) * np.exp((-1*1j) * (t22965 + t22963)) + (t22986 - t22988) * np.exp((1j) * (t22966 + t22962)) + (t22987 - t22989) * np.exp((1j) * (t22965 + t22962)) + (t22994 + t22995) * np.exp((-1*1j) * (t22964 + t22963)) + (-t22994 + t22995) * np.exp((1j) * (t22964 + t22962)))

        if Bindx == 503:
            t23024 = np.cos(phi)
            t23023 = t23024 ** 2
            t23029 = t23023 ** 2
            t23030 = t23024 * t23029
            t23035 = t23030 ** 2
            t23005 = t23035 ** 2
            t23028 = t23024 * t23023
            t23031 = t23028 ** 2
            t23033 = t23029 ** 2
            t23037 = t23031 ** 2
            t23032 = t23024 * t23031
            t23039 = t23032 ** 2
            t23041 = t23033 ** 2
            t23034 = t23024 * t23033
            t23043 = t23034 ** 2
            t23053 = 45695 * t23005 + 781586 * t23023 - 677229 * t23029 - 16055208 * t23031 + 25375662 * t23033 + 32254508 * t23035 - 59361042 * t23037 - 6054312 * t23039 + 20618739 * t23041 + 3316754 * t23043 + 16991
            t23006 = t23024 * t23043
            t23008 = t23024 * t23041
            t23010 = t23024 * t23039
            t23012 = t23024 * t23037
            t23014 = t23024 * t23035
            t23052 = 584896 * t23006 + 10719936 * t23008 + 19858176 * t23010 - 45996288 * t23012 - 22375808 * t23014 + 182464 * t23024 + 1408704 * t23028 - 8447232 * t23030 - 6619392 * t23032 + 50946688 * t23034
            t23051 = 10528128 * t23006 + 72816000 * t23008 - 166583808 * t23010 - 80567808 * t23012 + 374669568 * t23014 + 402816 * t23024 - 7694976 * t23028 + 28647936 * t23030 + 21864960 * t23032 - 254082816 * t23034
            t23050 = -26905216 * t23006 + 33223040 * t23008 + 193373696 * t23010 - 565801472 * t23012 + 601865472 * t23014 + 462208 * t23024 - 6674048 * t23028 + 23893504 * t23030 + 19136000 * t23032 - 272573184 * t23034
            t23049 = 87734400 * t23006 - 537417600 * t23008 + 1374758400 * t23010 - 1875417600 * t23012 + 1423430400 * t23014 + 489600 * t23024 - 10262400 * t23028 + 40281600 * t23030 + 34137600 * t23032 - 537734400 * t23034
            t23048 = 4203940 * t23005 - 1025800 * t23023 + 18442964 * t23029 - 112911968 * t23031 + 297418888 * t23033 - 327268656 * t23035 + 7546760 * t23037 + 296939936 * t23039 - 233943212 * t23041 + 50576632 * t23043 + 20516
            t23047 = -27417000 * t23005 - 5727600 * t23023 + 74753400 * t23029 - 411873600 * t23031 + 1184996400 * t23033 - 1944650400 * t23035 + 1836567600 * t23037 - 898478400 * t23039 + 106548600 * t23041 + 85203600 * t23043 + 77400
            t23046 = 1096680 * t23005 - 1013520 * t23023 - 8329272 * t23029 + 81177408 * t23031 - 180558768 * t23033 + 30984096 * t23035 + 305382480 * t23037 - 288052416 * t23039 + 18347976 * t23041 + 40863984 * t23043 + 101352
            t23027 = 3 * phi1
            t23026 = -4 * phi2
            t23025 = 4 * phi2
            tfunc[..., c] = (0.41e2 / 0.7314866176e10) * np.sqrt(0.17e2) * np.sqrt(0.109e3) * np.sqrt(0.2e1) * np.sqrt(0.31e2) * np.sqrt(0.11e2) * np.sqrt(0.29e2) * ((44141370 * t23005 - 359921940 * t23043 + 1290377970 * t23041 - 2662798320 * t23039 + 3472760340 * t23037 - 2952424440 * t23035 + 1622677140 * t23033 - 548417520 * t23031 + 101038770 * t23029 - 7525140 * t23023 + 91770) * np.exp((16*1j) * phi2) + (t23048 + t23050) * np.exp((-8*1j) * (phi1 - 2 * phi2)) + (t23047 + t23049) * np.exp((-4*1j) * (phi1 + t23026)) + (t23046 - t23051) * np.exp((-4*1j) * (t23027 + t23026)) + (t23047 - t23049) * np.exp((4*1j) * (phi1 + t23025)) + (t23046 + t23051) * np.exp((4*1j) * (t23027 + t23025)) + (t23048 - t23050) * np.exp((8*1j) * (phi1 + 2 * phi2)) + (-t23052 + t23053) * np.exp((-16*1j) * (phi1 - phi2)) + (t23052 + t23053) * np.exp((16*1j) * (phi1 + phi2)))

        if Bindx == 504:
            t23084 = np.cos(phi)
            t23083 = t23084 ** 2
            t23090 = t23083 ** 2
            t23091 = t23084 * t23090
            t23096 = t23091 ** 2
            t23065 = t23096 ** 2
            t23089 = t23084 * t23083
            t23092 = t23089 ** 2
            t23094 = t23090 ** 2
            t23098 = t23092 ** 2
            t23093 = t23084 * t23092
            t23100 = t23093 ** 2
            t23102 = t23094 ** 2
            t23095 = t23084 * t23094
            t23104 = t23095 ** 2
            t23116 = 91390 * t23065 + 1563172 * t23083 - 1354458 * t23090 - 32110416 * t23092 + 50751324 * t23094 + 64509016 * t23096 - 118722084 * t23098 - 12108624 * t23100 + 41237478 * t23102 + 6633508 * t23104 + 33982
            t23066 = t23084 * t23104
            t23068 = t23084 * t23102
            t23070 = t23084 * t23100
            t23072 = t23084 * t23098
            t23074 = t23084 * t23096
            t23115 = 1169792 * t23066 + 21439872 * t23068 + 39716352 * t23070 - 91992576 * t23072 - 44751616 * t23074 + 364928 * t23084 + 2817408 * t23089 - 16894464 * t23091 - 13238784 * t23093 + 101893376 * t23095
            t23114 = 1853889440 * t23074 + 1853889440 * t23095 - 138412560 * t23068 - 138412560 * t23089 - 4194320 * t23066 - 4194320 * t23084 - 855641280 * t23070 - 855641280 * t23072 - 855641280 * t23093 - 855641280 * t23091
            t23113 = -738284976 * t23066 - 5106222000 * t23068 + 11681689536 * t23070 + 5649817536 * t23072 - 26273703456 * t23074 - 28247472 * t23084 + 539610192 * t23089 - 2008936512 * t23091 - 1533280320 * t23093 + 17817557472 * t23095
            t23112 = 262145 * t23065 + 30933110 * t23083 + 414451245 * t23090 + 1176506760 * t23092 - 347604270 * t23094 - 2549097980 * t23096 - 347604270 * t23098 + 1176506760 * t23100 + 414451245 * t23102 + 30933110 * t23104 + 262145
            t23111 = 35755862272 * t23066 - 44151975680 * t23068 - 256985234432 * t23070 + 751925556224 * t23072 - 799853044224 * t23074 - 614254336 * t23084 + 8869519616 * t23089 - 31753427968 * t23091 - 25430912000 * t23093 + 362237910528 * t23095
            t23110 = 76904685 * t23065 - 71073090 * t23083 - 584090199 * t23090 + 5692565736 * t23092 - 12661683606 * t23094 + 2172759732 * t23096 + 21414946410 * t23098 - 20199675672 * t23100 + 1286651817 * t23102 + 2865586878 * t23104 + 7107309
            t23109 = -201126725280 * t23066 + 1232002977120 * t23068 - 3151564894080 * t23070 + 4299301077120 * t23072 - 3263143020480 * t23074 - 1122383520 * t23084 + 23526038880 * t23089 - 92343553920 * t23091 - 78258741120 * t23093 + 1232729225280 * t23095
            t23108 = 5586853480 * t23065 - 1363243600 * t23083 + 24509897288 * t23090 - 150055096256 * t23092 + 395256770896 * t23094 - 434925814752 * t23096 + 10029315920 * t23098 + 394620264512 * t23100 - 310900357304 * t23102 + 67214144944 * t23104 + 27264872
            t23107 = 62852101650 * t23065 + 13130236620 * t23083 - 171368431830 * t23090 + 944199634320 * t23092 - 2716544997180 * t23094 + 4458013809480 * t23096 - 4210239394620 * t23098 + 2059716808080 * t23100 - 244257338070 * t23102 - 195324992820 * t23104 - 177435630
            t23088 = 3 * phi1
            t23087 = 5 * phi1
            t23086 = -4 * phi2
            t23085 = 4 * phi2
            tfunc[..., c] = (0.41e2 / 0.175556788224e12) * np.sqrt(0.3e1) * np.sqrt(0.109e3) * np.sqrt(0.19e2) * ((286583220 + 137846528820 * t23065 - 1123979388840 * t23104 + 4029646656420 * t23102 - 8315498711520 * t23100 + 10844882211240 * t23098 - 9219955353840 * t23096 + 5067364496040 * t23094 - 1712621322720 * t23092 + 315528125220 * t23090 - 23499824040 * t23083) * np.exp((16*1j) * phi2) + (t23108 - t23111) * np.exp((-8*1j) * (phi1 - 2 * phi2)) + (t23107 + t23109) * np.exp((-4*1j) * (phi1 + t23086)) + (t23110 + t23113) * np.exp((-4*1j) * (t23088 + t23086)) + (t23112 + t23114) * np.exp((-4*1j) * (t23087 + t23086)) + (t23107 - t23109) * np.exp((4*1j) * (phi1 + t23085)) + (t23110 - t23113) * np.exp((4*1j) * (t23088 + t23085)) + (t23112 - t23114) * np.exp((4*1j) * (t23087 + t23085)) + (t23108 + t23111) * np.exp((8*1j) * (phi1 + 2 * phi2)) + (-t23115 + t23116) * np.exp((-16*1j) * (phi1 - phi2)) + (t23115 + t23116) * np.exp((16*1j) * (phi1 + phi2)))

        if Bindx == 505:
            t23145 = np.cos(phi)
            t23144 = t23145 ** 2
            t23153 = t23144 ** 2
            t23154 = t23145 * t23153
            t23159 = t23154 ** 2
            t23126 = t23159 ** 2
            t23173 = 1235 * t23126
            t23172 = 29640 * t23126
            t23171 = 113620 * t23126
            t23170 = 741000 * t23126
            t23157 = t23153 ** 2
            t23158 = t23145 * t23157
            t23167 = t23158 ** 2
            t23165 = t23157 ** 2
            t23152 = t23145 * t23144
            t23155 = t23152 ** 2
            t23156 = t23145 * t23155
            t23163 = t23156 ** 2
            t23161 = t23155 ** 2
            t23151 = 4 * phi1
            t23150 = 8 * phi1
            t23149 = 12 * phi1
            t23148 = 16 * phi1
            t23147 = -17 * phi2
            t23146 = 17 * phi2
            t23135 = t23145 * t23159
            t23133 = t23145 * t23161
            t23131 = t23145 * t23163
            t23129 = t23145 * t23165
            t23127 = t23145 * t23167
            tfunc[..., c] = (-0.41e2 / 0.3657433088e10*1j) * np.sqrt(0.11e2) * np.sqrt(0.37e2) * np.sqrt(0.2e1) * np.sqrt(0.29e2) * np.sqrt(0.31e2) * np.sqrt(0.109e3) * np.sqrt(0.17e2) * np.sqrt((1 - t23145)) * ((1 + t23145) ** (-0.1e1 / 0.2e1)) * (91770 * (-t23144 - t23145 + 966 * t23161 + 966 * t23135 - 798 * t23159 - 798 * t23158 - 756 * t23163 - 756 * t23133 + 420 * t23157 + 420 * t23156 + 372 * t23165 + 372 * t23131 - 132 * t23155 - 132 * t23154 - 105 * t23167 - 105 * t23129 + 21 * t23153 + 21 * t23152 + 13 * t23126 + 13 * t23127) * np.exp((17*1j) * phi2) + (1778400 * t23127 - 12933600 * t23129 + 40790400 * t23131 - 72777600 * t23133 + 80270400 * t23135 - 363600 * t23144 - 50400 * t23145 + 837600 * t23152 + 3317400 * t23153 - 6230400 * t23154 - 12753600 * t23155 + 24393600 * t23156 + 25796400 * t23157 - 56078400 * t23158 - 28274400 * t23159 + 13263600 * t23161 + 4257600 * t23163 - 8771400 * t23165 + 4263600 * t23167 + 5400 - t23170) * np.exp((-1*1j) * (t23151 + t23147)) + (-658996 * t23127 + 1855364 * t23129 + 1431152 * t23131 - 11923568 * t23133 + 19324968 * t23135 - 126316 * t23144 + 17572 * t23145 - 85652 * t23152 + 1132244 * t23153 - 658352 * t23154 - 4080752 * t23155 + 5401136 * t23156 + 6066112 * t23157 - 14703624 * t23158 - 552552 * t23159 - 9632584 * t23161 + 12256976 * t23163 - 6091688 * t23165 + 910708 * t23167 + 4232 + t23171) * np.exp((-1*1j) * (t23150 + t23147)) + (-3260400 * t23127 + 16422000 * t23129 - 28977600 * t23131 + 11524800 * t23133 + 30559200 * t23135 + 252000 * t23144 - 61200 * t23145 + 1453200 * t23152 - 1026600 * t23153 - 10574400 * t23154 - 4051200 * t23155 + 33096000 * t23156 + 31693200 * t23157 - 50181600 * t23158 - 77985600 * t23159 + 97566000 * t23161 - 65510400 * t23163 + 20584200 * t23165 - 775200 * t23167 - 5400 - t23170) * np.exp((1j) * (t23151 + t23146)) + (886236 * t23127 + 1511284 * t23129 - 13958608 * t23131 + 21047760 * t23133 - 5618808 * t23135 + 152996 * t23144 + 9108 * t23145 + 193660 * t23152 - 1024236 * t23153 - 2814832 * t23154 + 607568 * t23155 + 10089456 * t23156 + 9424480 * t23157 - 11345256 * t23158 - 25496328 * t23159 + 23338744 * t23161 - 3132784 * t23163 - 6435768 * t23165 + 2455940 * t23167 - 4232 + t23171) * np.exp((1j) * (t23150 + t23146)) + (5496 - 368448 * t23154 - 661272 * t23153 + 306000 * t23152 + 3072 * t23144 - 29904 * t23145 - 1468752 * t23129 - 534696 * t23165 + 5216064 * t23131 - 6381696 * t23163 - 1542720 * t23133 + 10919376 * t23161 - 8260512 * t23135 - 3898752 * t23159 + 9418656 * t23158 - 3516240 * t23157 - 2997696 * t23156 + 3050112 * t23155 + t23172 - 272688 * t23127 + 984960 * t23167) * np.exp((-1*1j) * (t23149 + t23147)) + (604 + 229908 * t23154 + 22491 * t23153 - 65937 * t23152 + 30725 * t23144 - 6723 * t23145 - 269595 * t23129 + 485928 * t23165 - 377604 * t23131 - 378012 * t23163 + 1356804 * t23133 - 1438710 * t23161 + 182546 * t23135 + 1268982 * t23159 - 1471418 * t23158 + 485316 * t23157 + 437580 * t23156 - 564876 * t23155 + t23173 - 15561 * t23127 + 86317 * t23167) * np.exp((-1*1j) * (t23148 + t23147)) + (-5496 + 1196328 * t23153 + 229056 * t23152 - 73872 * t23144 - 40896 * t23145 + 4977384 * t23165 - 773376 * t23131 - 12371136 * t23163 - 17210112 * t23133 - 4748016 * t23161 + 14431872 * t23135 + 18793632 * t23159 + 5476224 * t23158 - 7458672 * t23157 - 7977216 * t23156 - 1929408 * t23155 + 1489152 * t23154 + t23172 + 331968 * t23127 + 1589616 * t23167 + 4043328 * t23129) * np.exp((1j) * (t23149 + t23146)) + (-604 - 230469 * t23153 - 142041 * t23152 - 45379 * t23144 - 7931 * t23145 + 1231344 * t23165 + 2094876 * t23131 + 2094468 * t23163 + 359652 * t23133 - 2435862 * t23161 - 4057118 * t23135 - 2970682 * t23159 - 230282 * t23158 + 1726452 * t23157 + 1774188 * t23156 + 771732 * t23155 - 23052 * t23154 + t23173 + 18031 * t23127 + 119909 * t23167 + 475821 * t23129) * np.exp((1j) * (t23148 + t23146)))

        if Bindx == 506:
            t23204 = np.cos(phi)
            t23203 = t23204 ** 2
            t23213 = t23203 ** 2
            t23214 = t23204 * t23213
            t23219 = t23214 ** 2
            t23185 = t23219 ** 2
            t23234 = 2470 * t23185
            t23233 = 7085 * t23185
            t23232 = 2078505 * t23185
            t23231 = 150996040 * t23185
            t23230 = 1698705450 * t23185
            t23217 = t23213 ** 2
            t23218 = t23204 * t23217
            t23227 = t23218 ** 2
            t23225 = t23217 ** 2
            t23212 = t23204 * t23203
            t23215 = t23212 ** 2
            t23216 = t23204 * t23215
            t23223 = t23216 ** 2
            t23221 = t23215 ** 2
            t23211 = 4 * phi1
            t23210 = 8 * phi1
            t23209 = 12 * phi1
            t23208 = 16 * phi1
            t23207 = 20 * phi1
            t23206 = -17 * phi2
            t23205 = 17 * phi2
            t23194 = t23204 * t23219
            t23192 = t23204 * t23221
            t23190 = t23204 * t23223
            t23188 = t23204 * t23225
            t23186 = t23204 * t23227
            tfunc[..., c] = (-0.41e2 / 0.87778394112e11*1j) * np.sqrt(0.19e2) * np.sqrt(0.109e3) * np.sqrt(0.37e2) * np.sqrt(0.3e1) * np.sqrt((1 - t23204)) * ((1 + t23204) ** (-0.1e1 / 0.2e1)) * (286583220 * (966 * t23221 + 966 * t23194 - 798 * t23219 - 798 * t23218 - 756 * t23223 - 756 * t23192 + 420 * t23217 + 420 * t23216 + 372 * t23225 + 372 * t23190 - 132 * t23215 - 132 * t23214 - 105 * t23227 - 105 * t23188 + 21 * t23213 + 21 * t23212 + 13 * t23185 + 13 * t23186 - t23203 - t23204) * np.exp((17*1j) * phi2) + (t23233 - 7085 + 178499490 * t23221 - 178499490 * t23217 + 164768760 * t23192 - 164768760 * t23216 + 118999660 * t23194 - 118999660 * t23218 + 109845840 * t23223 - 109845840 * t23215 + 54922920 * t23190 - 54922920 * t23214 + 20596095 * t23225 - 20596095 * t23213 + 5653830 * t23188 - 5653830 * t23212 + 1076920 * t23227 - 1076920 * t23203 + 127530 * t23186 - 127530 * t23204) * np.exp((1j) * (t23207 + t23205)) + (-4076893080 * t23186 + 29649631320 * t23188 - 93509952480 * t23190 + 166839009120 * t23192 - 184015878480 * t23194 + 833534820 * t23203 + 115539480 * t23204 - 1920156120 * t23212 - 7604973630 * t23213 + 14282880480 * t23214 + 29236990320 * t23215 - 55921108320 * t23216 - 59136957180 * t23217 + 128556928080 * t23218 + 64817648280 * t23219 - 30406139820 * t23221 - 9760335120 * t23223 + 20107995930 * t23225 - 9774089820 * t23227 - 12379230 + t23230) * np.exp((-1*1j) * (t23211 + t23206)) + (-875777032 * t23186 + 2465698088 * t23188 + 1901938784 * t23190 - 15845903456 * t23192 + 25682042256 * t23194 - 167868472 * t23203 + 23352424 * t23204 - 113827784 * t23212 + 1504703048 * t23213 - 874921184 * t23214 - 5423141984 * t23215 + 7177874912 * t23216 + 8061599104 * t23217 - 19540477008 * t23218 - 734317584 * t23219 - 12801285328 * t23221 + 16288988192 * t23223 - 8095588496 * t23225 + 1210291336 * t23227 + 5624144 + t23231) * np.exp((-1*1j) * (t23210 + t23206)) + (7474303980 * t23186 - 37646613900 * t23188 + 66429699120 * t23190 - 26420027760 * t23192 - 70055438040 * t23194 - 577697400 * t23203 + 140297940 * t23204 - 3331388340 * t23212 + 2353429170 * t23213 + 24241283280 * t23214 + 9287173440 * t23215 - 75870925200 * t23216 - 72655076340 * t23217 + 115038808920 * t23218 + 178778088720 * t23219 - 223665176700 * t23221 + 150179316480 * t23223 - 47188249290 * t23225 + 1777107240 * t23227 + 12379230 + t23230) * np.exp((1j) * (t23211 + t23205)) + (1177769112 * t23186 + 2008430728 * t23188 - 18550383136 * t23190 + 27971557920 * t23192 - 7467151536 * t23194 + 203325032 * t23203 + 12104136 * t23204 + 257365720 * t23212 - 1361165112 * t23213 - 3740789344 * t23214 + 807431456 * t23215 + 13408448352 * t23216 + 12524724160 * t23217 - 15077351952 * t23218 - 33883511376 * t23219 + 31016176048 * t23221 - 4163333728 * t23223 - 8552855856 * t23225 + 3263837480 * t23227 - 5624144 + t23231) * np.exp((1j) * (t23210 + t23205)) + (-19122246 * t23186 - 102996234 * t23188 + 365776488 * t23190 - 108183240 * t23192 - 579268404 * t23194 + 215424 * t23203 - 2097018 * t23204 + 21458250 * t23212 - 46371699 * t23213 - 25837416 * t23214 + 213889104 * t23215 - 210213432 * t23216 - 246576330 * t23217 + 660483252 * t23218 - 273399984 * t23219 + 765721242 * t23221 - 447516432 * t23223 - 37495557 * t23225 + 69070320 * t23227 + 385407 + t23232) * np.exp((-1*1j) * (t23209 + t23206)) + (1208 + t23234 - 31122 * t23186 + 172634 * t23227 - 539190 * t23188 + 971856 * t23225 - 755208 * t23190 - 756024 * t23223 + 2713608 * t23192 - 2877420 * t23221 + 365092 * t23194 + 2537964 * t23219 - 2942836 * t23218 + 970632 * t23217 + 875160 * t23216 - 1129752 * t23215 + 459816 * t23214 + 44982 * t23213 - 131874 * t23212 + 61450 * t23203 - 13446 * t23204) * np.exp((-1*1j) * (t23208 + t23206)) + (t23233 - 68894540 * t23219 + 7085 + 50105120 * t23194 + 50105120 * t23218 + 31797480 * t23223 + 31797480 * t23215 + 11201385 * t23225 + 11201385 * t23213 - 9394710 * t23221 - 9394710 * t23217 - 3740880 * t23188 - 3740880 * t23212 + 836030 * t23227 + 836030 * t23203 - 113360 * t23186 - 113360 * t23204 - 23125440 * t23190 - 23125440 * t23192 - 23125440 * t23216 - 23125440 * t23214) * np.exp((-1*1j) * (t23207 + t23206)) + (23279256 * t23186 + 283538376 * t23188 - 54232992 * t23190 - 1206859104 * t23192 + 1012035024 * t23194 - 5180274 * t23203 - 2867832 * t23204 + 16062552 * t23212 + 83892501 * t23213 + 104426784 * t23214 - 135299736 * t23215 - 559402272 * t23216 - 523039374 * t23217 + 384020208 * t23218 + 1317903444 * t23219 - 332954622 * t23221 - 867525912 * t23223 + 349039053 * t23225 + 111471822 * t23227 - 385407 + t23232) * np.exp((1j) * (t23209 + t23205)) + (-1208 + t23234 + 36062 * t23186 + 239818 * t23227 + 951642 * t23188 + 2462688 * t23225 + 4189752 * t23190 + 4188936 * t23223 + 719304 * t23192 - 4871724 * t23221 - 8114236 * t23194 - 5941364 * t23219 - 460564 * t23218 + 3452904 * t23217 + 3548376 * t23216 + 1543464 * t23215 - 46104 * t23214 - 460938 * t23213 - 284082 * t23212 - 90758 * t23203 - 15862 * t23204) * np.exp((1j) * (t23208 + t23205)))

        if Bindx == 507:
            t23263 = np.cos(phi)
            t23262 = t23263 ** 2
            t23270 = t23262 ** 2
            t23274 = t23270 ** 2
            t23275 = t23263 * t23274
            t23284 = t23275 ** 2
            t23245 = t23263 * t23284
            t23282 = t23274 ** 2
            t23247 = t23263 * t23282
            t23269 = t23263 * t23262
            t23272 = t23269 ** 2
            t23273 = t23263 * t23272
            t23280 = t23273 ** 2
            t23249 = t23263 * t23280
            t23278 = t23272 ** 2
            t23251 = t23263 * t23278
            t23271 = t23263 * t23270
            t23276 = t23271 ** 2
            t23253 = t23263 * t23276
            t23294 = 936 * t23245 + 23640 * t23247 + 93024 * t23249 - 27744 * t23251 - 215696 * t23253 - 552 * t23263 - 10968 * t23269 - 14688 * t23271 + 106080 * t23273 + 45968 * t23275
            t23244 = t23276 ** 2
            t23293 = 65 * t23244 - 3280 * t23262 - 20859 * t23270 + 31824 * t23272 + 133926 * t23274 - 116688 * t23276 - 165750 * t23278 + 75888 * t23280 + 58803 * t23282 + 6112 * t23284 - 41
            t23292 = 1560 * t23244 - 12864 * t23262 + 85368 * t23270 + 41600 * t23272 - 724464 * t23274 + 878592 * t23276 + 218608 * t23278 - 721536 * t23280 + 157320 * t23282 + 76352 * t23284 - 536
            t23291 = -43056 * t23245 + 7728 * t23247 + 560832 * t23249 - 1373376 * t23251 + 1196000 * t23253 + 1840 * t23263 - 48944 * t23269 + 263488 * t23271 - 440128 * t23273 - 124384 * t23275
            t23290 = -16848 * t23245 - 175536 * t23247 + 200896 * t23249 + 688704 * t23251 - 1104480 * t23253 + 4560 * t23263 - 592 * t23269 - 184512 * t23271 + 441792 * t23273 + 146016 * t23275
            t23289 = 5980 * t23244 + 13248 * t23262 - 11316 * t23270 - 287040 * t23272 + 1069224 * t23274 - 1473472 * t23276 + 672152 * t23278 + 328256 * t23280 - 416300 * t23282 + 100096 * t23284 - 828
            t23288 = -39000 * t23244 - 24000 * t23262 + 323400 * t23270 - 1603200 * t23272 + 4057200 * t23274 - 5913600 * t23276 + 5082000 * t23278 - 2390400 * t23280 + 406200 * t23282 + 100800 * t23284 + 600
            t23287 = 140400 * t23245 - 918000 * t23247 + 2481600 * t23249 - 3460800 * t23251 + 2368800 * t23253 + 13200 * t23263 - 157200 * t23269 + 590400 * t23271 - 840000 * t23273 - 218400 * t23275
            t23268 = 2 * phi1
            t23267 = 4 * phi1
            t23266 = 8 * phi1
            t23265 = -9 * phi2
            t23264 = 9 * phi2
            tfunc[..., c] = (0.41e2 / 0.3657433088e10) * np.sqrt(0.17e2) * np.sqrt(0.19e2) * np.sqrt(0.109e3) * np.sqrt(0.3e1) * np.sqrt(0.11e2) * np.sqrt(0.31e2) * np.sqrt(0.29e2) * np.sqrt(0.37e2) * ((-77280 * t23262 - 8114400 * t23276 + 5477220 * t23274 - 2395680 * t23272 + 623070 * t23270 - 566720 * t23284 + 2274930 * t23282 - 5332320 * t23280 + 8046780 * t23278 + 62790 * t23244 + 1610) * np.exp((18*1j) * phi2) + (t23290 + t23292) * np.exp((-6*1j) * (t23268 - 3 * phi2)) + (t23287 + t23288) * np.exp((-2*1j) * (t23268 + t23265)) + (t23289 + t23291) * np.exp((-2*1j) * (t23267 + t23265)) + (t23293 - t23294) * np.exp((-2*1j) * (t23266 + t23265)) + (-t23287 + t23288) * np.exp((2*1j) * (t23268 + t23264)) + (t23289 - t23291) * np.exp((2*1j) * (t23267 + t23264)) + (t23293 + t23294) * np.exp((2*1j) * (t23266 + t23264)) + (-t23290 + t23292) * np.exp((6*1j) * (t23268 + 3 * phi2)))

        if Bindx == 508:
            t23325 = np.cos(phi)
            t23324 = t23325 ** 2
            t23333 = t23324 ** 2
            t23337 = t23333 ** 2
            t23338 = t23325 * t23337
            t23347 = t23338 ** 2
            t23307 = t23325 * t23347
            t23345 = t23337 ** 2
            t23309 = t23325 * t23345
            t23332 = t23325 * t23324
            t23335 = t23332 ** 2
            t23336 = t23325 * t23335
            t23343 = t23336 ** 2
            t23311 = t23325 * t23343
            t23341 = t23335 ** 2
            t23313 = t23325 * t23341
            t23334 = t23325 * t23333
            t23339 = t23334 ** 2
            t23315 = t23325 * t23339
            t23359 = -35568 * t23307 - 898320 * t23309 - 3534912 * t23311 + 1054272 * t23313 + 8196448 * t23315 + 20976 * t23325 + 416784 * t23332 + 558144 * t23334 - 4031040 * t23336 - 1746784 * t23338
            t23306 = t23339 ** 2
            t23358 = 7085 * t23306 - 7085 + 178499490 * t23341 - 178499490 * t23337 + 109845840 * t23343 - 109845840 * t23335 + 20596095 * t23345 - 20596095 * t23333 + 1076920 * t23347 - 1076920 * t23324
            t23357 = 2470 * t23306 - 124640 * t23324 - 792642 * t23333 + 1209312 * t23335 + 5089188 * t23337 - 4434144 * t23339 - 6298500 * t23341 + 2883744 * t23343 + 2234514 * t23345 + 232256 * t23347 - 1558
            t23356 = -164768760 * t23313 + 164768760 * t23336 - 118999660 * t23315 + 118999660 * t23338 - 54922920 * t23311 + 54922920 * t23334 - 5653830 * t23309 + 5653830 * t23332 - 127530 * t23307 + 127530 * t23325
            t23355 = -22447854 * t23307 - 233879778 * t23309 + 267668808 * t23311 + 917611992 * t23313 - 1471581540 * t23315 + 6075630 * t23325 - 788766 * t23332 - 245839176 * t23334 + 588632616 * t23336 + 194548068 * t23338
            t23354 = -1087171488 * t23307 + 195133344 * t23309 + 14161105536 * t23311 - 34677982848 * t23313 + 30199208000 * t23315 + 46460320 * t23325 - 1235844512 * t23332 + 6653117824 * t23334 - 11113308544 * t23336 - 3140717632 * t23338
            t23353 = 2078505 * t23306 - 17139672 * t23324 + 113742189 * t23333 + 55426800 * t23335 - 965257722 * t23337 + 1170614016 * t23339 + 291267834 * t23341 - 961356528 * t23343 + 209609235 * t23345 + 101729496 * t23347 - 714153
            t23352 = -6115339620 * t23307 + 39984912900 * t23309 - 108089934480 * t23311 + 150740508240 * t23313 - 103176755640 * t23315 - 574946460 * t23325 + 6847089660 * t23332 - 25715787120 * t23334 + 36587502000 * t23336 + 9512750520 * t23338
            t23351 = 150996040 * t23306 + 334514304 * t23324 - 285730968 * t23333 - 7247809920 * t23335 + 26998091952 * t23337 - 37205424256 * t23339 + 16971954896 * t23341 + 8288521088 * t23343 - 10511647400 * t23345 + 2527441408 * t23347 - 20907144
            t23350 = 1698705450 * t23306 + 1045357200 * t23324 - 14086188270 * t23333 + 69829860960 * t23335 - 176717634660 * t23337 + 257576014080 * t23339 - 221354387100 * t23341 + 104117577120 * t23343 - 17692670610 * t23345 - 4390500240 * t23347 - 26133930
            t23331 = 2 * phi1
            t23330 = 4 * phi1
            t23329 = 8 * phi1
            t23328 = -9 * phi2
            t23327 = 9 * phi2
            t23326 = 10 * phi1
            tfunc[..., c] = (0.41e2 / 0.58518929408e11) * np.sqrt(0.2e1) * np.sqrt(0.37e2) * np.sqrt(0.109e3) * ((95527740 - 33625764480 * t23347 + 134980696620 * t23345 - 316387874880 * t23343 + 477447644520 * t23341 - 481459809600 * t23339 + 324985371480 * t23337 - 142145277120 * t23335 + 36969235380 * t23333 - 4585331520 * t23324 + 3725581860 * t23306) * np.exp((18*1j) * phi2) + (t23356 + t23358) * np.exp((-2*1j) * (t23326 + t23328)) + (-t23356 + t23358) * np.exp((2*1j) * (t23326 + t23327)) + (t23353 + t23355) * np.exp((-6*1j) * (t23331 - 3 * phi2)) + (t23350 + t23352) * np.exp((-2*1j) * (t23331 + t23328)) + (t23351 + t23354) * np.exp((-2*1j) * (t23330 + t23328)) + (t23357 + t23359) * np.exp((-2*1j) * (t23329 + t23328)) + (t23350 - t23352) * np.exp((2*1j) * (t23331 + t23327)) + (t23351 - t23354) * np.exp((2*1j) * (t23330 + t23327)) + (t23357 - t23359) * np.exp((2*1j) * (t23329 + t23327)) + (t23353 - t23355) * np.exp((6*1j) * (t23331 + 3 * phi2)))

        if Bindx == 509:
            t23387 = np.cos(phi)
            t23386 = t23387 ** 2
            t23395 = t23386 ** 2
            t23399 = t23395 ** 2
            t23400 = t23387 * t23399
            t23409 = t23400 ** 2
            t23369 = t23387 * t23409
            t23414 = 5 * t23369
            t23413 = 120 * t23369
            t23412 = 460 * t23369
            t23411 = -3000 * t23369
            t23407 = t23399 ** 2
            t23394 = t23387 * t23386
            t23397 = t23394 ** 2
            t23398 = t23387 * t23397
            t23405 = t23398 ** 2
            t23403 = t23397 ** 2
            t23396 = t23387 * t23395
            t23401 = t23396 ** 2
            t23393 = 4 * phi1
            t23392 = 8 * phi1
            t23391 = 12 * phi1
            t23390 = 16 * phi1
            t23389 = -19 * phi2
            t23388 = 19 * phi2
            t23377 = t23387 * t23401
            t23375 = t23387 * t23403
            t23373 = t23387 * t23405
            t23371 = t23387 * t23407
            tfunc[..., c] = (0.41e2 / 0.3657433088e10*1j) * np.sqrt(0.2e1) * np.sqrt(0.11e2) * np.sqrt(0.29e2) * np.sqrt(0.31e2) * np.sqrt(0.481e3) * np.sqrt(0.109e3) * np.sqrt(0.19e2) * np.sqrt(0.17e2) * ((1 - t23387) ** (0.3e1 / 0.2e1)) * ((1 + t23387) ** (-0.1e1 / 0.2e1)) * (4830 * (t23369 + 2 * t23409 - 7 * t23371 - 16 * t23407 + 20 * t23373 + 14 * t23377 + 140 * t23401 + 14 * t23400 + 20 * t23396 - 16 * t23395 - 7 * t23394 + 2 * t23386 + t23387 - 112 * t23403 - 112 * t23399 + 56 * t23405 + 56 * t23397 - 28 * t23375 - 28 * t23398) * np.exp((19*1j) * phi2) + (184 + t23412 - 2576 * t23409 + 3036 * t23371 + 9016 * t23407 - 24656 * t23373 + 32384 * t23397 - 23184 * t23396 - 3680 * t23395 + 7084 * t23394 - 1104 * t23386 - 644 * t23387 + 57776 * t23375 - 44896 * t23403 - 56856 * t23377 + 89056 * t23401 + 10120 * t23400 - 78384 * t23399 + 26864 * t23398) * np.exp((-1*1j) * (t23392 + t23389)) + (-600 + t23411 + 5400 * t23409 + 22200 * t23371 - 43800 * t23407 - 69600 * t23373 + 184800 * t23397 - 26400 * t23396 - 60000 * t23395 + 11400 * t23394 + 10200 * t23386 - 1800 * t23387 + 156000 * t23405 + 117600 * t23375 - 319200 * t23403 - 109200 * t23377 + 411600 * t23401 + 42000 * t23400 - 344400 * t23399 + 16800 * t23398) * np.exp((-1*1j) * (t23393 + t23389)) + (t23411 - 17400 * t23409 - 23400 * t23371 + 53400 * t23407 + 170400 * t23373 + 36000 * t23405 + 284400 * t23377 + 620400 * t23401 + 66000 * t23400 - 471600 * t23399 - 261600 * t23398 + 141600 * t23397 + 165600 * t23396 + 12000 * t23395 - 36600 * t23394 - 12600 * t23386 + 600 * t23387 + 600 - 362400 * t23375 - 362400 * t23403) * np.exp((1j) * (t23393 + t23388)) + (-184 + t23412 + 4416 * t23409 + 17020 * t23371 + 29256 * t23407 + 1840 * t23373 + 47472 * t23396 + 30176 * t23395 + 4140 * t23394 - 2944 * t23386 - 1380 * t23387 - 83904 * t23405 - 136528 * t23375 - 28704 * t23403 + 169832 * t23377 + 210496 * t23401 + 26312 * t23400 - 148304 * t23399 - 129168 * t23398 - 10304 * t23397) * np.exp((1j) * (t23392 + t23388)) + (72 + t23413 - 1128 * t23409 + 4200 * t23371 - 6648 * t23407 - 1440 * t23373 + 16416 * t23396 - 7008 * t23395 - 840 * t23394 + 1752 * t23386 - 600 * t23387 + 22752 * t23405 - 31584 * t23375 - 1248 * t23403 + 49296 * t23377 - 48048 * t23401 - 6864 * t23400 + 45552 * t23399 - 28704 * t23398 - 6048 * t23397) * np.exp((-1*1j) * (t23391 + t23389)) + (4 + t23414 - 66 * t23409 + 389 * t23371 - 1324 * t23407 + 2756 * t23373 - 1052 * t23396 + 1600 * t23395 - 899 * t23394 + 286 * t23386 - 51 * t23387 - 3160 * t23405 + 308 * t23375 + 5408 * t23403 - 9178 * t23377 + 6292 * t23401 + 1430 * t23400 - 6968 * t23399 + 6292 * t23398 - 2072 * t23397) * np.exp((-1*1j) * (t23390 + t23389)) + (-72 + t23413 + 1608 * t23409 + 9672 * t23371 + 33912 * t23407 + 74208 * t23373 + 5664 * t23396 - 18720 * t23395 - 13512 * t23394 - 4728 * t23386 - 888 * t23387 + 95520 * t23405 + 38304 * t23375 - 103584 * t23403 - 225264 * t23377 - 199056 * t23401 - 34320 * t23400 + 119184 * t23399 + 146016 * t23398 + 75936 * t23397) * np.exp((1j) * (t23391 + t23388)) + (-4 + t23414 + 86 * t23409 + 693 * t23371 + 3468 * t23407 + 12036 * t23373 + 30600 * t23405 - 18972 * t23396 - 8160 * t23395 - 2499 * t23394 - 522 * t23386 - 67 * t23387 + 58548 * t23375 + 84864 * t23403 + 91494 * t23377 + 68068 * t23401 + 24310 * t23400 - 15912 * t23399 - 34476 * t23398 - 31416 * t23397) * np.exp((1j) * (t23390 + t23388)))

        if Bindx == 510:
            t23445 = np.cos(phi)
            t23444 = t23445 ** 2
            t23454 = t23444 ** 2
            t23455 = t23445 * t23454
            t23460 = t23455 ** 2
            t23426 = t23460 ** 2
            t23475 = 190 * t23426
            t23474 = 545 * t23426
            t23473 = 159885 * t23426
            t23472 = 11615080 * t23426
            t23471 = 130669650 * t23426
            t23458 = t23454 ** 2
            t23459 = t23445 * t23458
            t23468 = t23459 ** 2
            t23466 = t23458 ** 2
            t23453 = t23445 * t23444
            t23456 = t23453 ** 2
            t23457 = t23445 * t23456
            t23464 = t23457 ** 2
            t23462 = t23456 ** 2
            t23452 = 4 * phi1
            t23451 = 8 * phi1
            t23450 = 12 * phi1
            t23449 = 16 * phi1
            t23448 = 20 * phi1
            t23447 = -19 * phi2
            t23446 = 19 * phi2
            t23435 = t23445 * t23460
            t23433 = t23445 * t23462
            t23431 = t23445 * t23464
            t23429 = t23445 * t23466
            t23427 = t23445 * t23468
            tfunc[..., c] = (-0.41e2 / 0.87778394112e11*1j) * np.sqrt(0.109e3) * np.sqrt(0.13e2) * np.sqrt(0.37e2) * np.sqrt(0.3e1) * np.sqrt((1 - t23445)) * ((1 + t23445) ** (-0.1e1 / 0.2e1)) * ((627214320 * t23427 - 3345143040 * t23429 + 5854000320 * t23431 - 14635000800 * t23435 - 574946460 * t23444 - 1045357200 * t23453 + 2116848330 * t23454 + 6690286080 * t23455 - 1045357200 * t23456 - 17562000960 * t23457 - 9146875500 * t23458 + 23416001280 * t23459 + 24147751320 * t23460 - 28172376540 * t23462 + 17352929520 * t23464 - 5096116350 * t23466 + 261339300 * t23468 + t23471 + 26133930) * np.exp((1j) * (t23452 + t23446)) + 286583220 * (126 * t23462 + 126 * t23435 - 126 * t23460 - 126 * t23459 - 84 * t23464 - 84 * t23433 + 84 * t23458 + 84 * t23457 + 36 * t23466 + 36 * t23431 - 36 * t23456 - 36 * t23455 - 9 * t23468 - 9 * t23429 + 9 * t23454 + 9 * t23453 + t23426 + t23427 - t23444 - t23445) * np.exp((19*1j) * phi2) + (-9810 * t23427 - 434910 * t23429 - 4224840 * t23431 - 12674520 * t23433 - 9153820 * t23435 - 82840 * t23444 + 9810 * t23445 + 434910 * t23453 - 1584315 * t23454 + 4224840 * t23455 + 12674520 * t23457 - 13730730 * t23458 + 9153820 * t23459 + 13730730 * t23462 + 1584315 * t23466 + 82840 * t23468 + t23474 - 545 + 8449680 * t23464 - 8449680 * t23456) * np.exp((-1*1j) * (t23448 + t23447)) + (-365875020 * t23427 + 2874732300 * t23429 - 9826357680 * t23431 + 19025501040 * t23433 - 22684251240 * t23435 + 522678600 * t23444 - 52267860 * t23445 + 52267860 * t23453 - 3109937670 * t23454 + 1463500080 * t23455 + 9199143360 * t23456 - 7317500400 * t23457 - 15732625860 * t23458 + 16830250920 * t23459 + 16098500880 * t23460 - 9146875500 * t23462 + 1672571520 * t23464 + 1123758990 * t23466 - 731750040 * t23468 + t23471 - 26133930) * np.exp((-1*1j) * (t23452 + t23447)) + (-76659528 * t23427 + 150996040 * t23429 + 622568288 * t23431 - 2592485856 * t23433 + 3684303376 * t23435 + 11615080 * t23444 + 20907144 * t23445 - 206748424 * t23453 + 271792872 * t23454 + 492479392 * t23455 - 1403101664 * t23456 + 139380960 * t23457 + 2657530304 * t23458 - 2234741392 * t23459 - 1993147728 * t23460 - 301992080 * t23462 + 1458854048 * t23464 - 850223856 * t23466 + 141703976 * t23468 + t23472 - 4646032) * np.exp((-1*1j) * (t23451 + t23447)) + (99889688 * t23427 + 308961128 * t23429 - 2165050912 * t23431 + 2722574752 * t23433 + 1026773072 * t23435 + 39491272 * t23444 + 30199208 * t23445 - 178872232 * t23453 - 657413528 * t23454 - 436727008 * t23455 + 1458854048 * t23456 + 3001336672 * t23457 + 483187328 * t23458 - 4409084368 * t23459 - 4650678032 * t23460 + 5013068528 * t23462 - 1328765152 * t23464 - 692258768 * t23466 + 318253192 * t23468 + t23472 + 4646032) * np.exp((1j) * (t23451 + t23446)) + (-1662804 * t23427 - 14453604 * t23429 + 32232816 * t23431 + 40418928 * t23433 - 129698712 * t23435 - 3133746 * t23444 + 895356 * t23445 + 3453516 * t23453 + 8218089 * t23454 - 31209552 * t23455 + 29930472 * t23456 + 30186288 * t23457 - 98936838 * t23458 + 69837768 * t23459 + 54872532 * t23460 + 67343562 * t23462 - 72395928 * t23464 + 6939009 * t23466 + 7098894 * t23468 + t23473 - 95931) * np.exp((-1*1j) * (t23450 + t23447)) + (-94962 * t23454 + 45030 * t23453 - 12806 * t23444 + 2090 * t23445 + 503880 * t23458 - 317832 * t23457 + 38760 * t23456 + 100776 * t23455 - 184756 * t23460 - 319124 * t23459 + 155040 * t23466 - 224808 * t23431 + 131784 * t23464 + 193800 * t23433 - 554268 * t23462 + 587860 * t23435 + t23475 - 2698 * t23427 + 17290 * t23468 - 65094 * t23429 - 152) * np.exp((-1*1j) * (t23449 + t23447)) + (1982574 * t23427 + 32296770 * t23429 + 28395576 * t23431 - 189048024 * t23433 + 34918884 * t23435 + 5116320 * t23444 + 1087218 * t23445 + 11703582 * t23453 + 6939009 * t23454 - 32488632 * t23455 - 93628656 * t23456 - 93372840 * t23457 + 35750286 * t23458 + 204524892 * t23459 + 219490128 * t23460 - 162123390 * t23462 - 76233168 * t23464 + 53689383 * t23466 + 10744272 * t23468 + t23473 + 95931) * np.exp((1j) * (t23450 + t23446)) + (3078 * t23427 + 105450 * t23429 + 705432 * t23431 + 1000008 * t23433 - 890188 * t23435 + 17290 * t23444 + 2394 * t23445 + 75126 * t23453 + 215118 * t23454 + 410856 * t23455 + 472872 * t23456 + 116280 * t23457 - 705432 * t23458 - 1528436 * t23459 - 1662804 * t23460 + 251940 * t23462 + 1062024 * t23464 + 325584 * t23466 + 23066 * t23468 + t23475 + 152) * np.exp((1j) * (t23449 + t23446)) + (10900 * t23427 + 621300 * t23429 + 42248400 * t23433 + 91538200 * t23435 + 103550 * t23444 + 10900 * t23445 + 621300 * t23453 + 2640525 * t23454 + 21124200 * t23456 + 42248400 * t23457 + 68653650 * t23458 + 91538200 * t23459 + 100692020 * t23460 + 68653650 * t23462 + 21124200 * t23464 + 2640525 * t23466 + 103550 * t23468 + t23474 + 545 + 8449680 * t23431 + 8449680 * t23455) * np.exp((1j) * (t23448 + t23446)))

        if Bindx == 511:
            t23504 = np.cos(phi)
            t23503 = t23504 ** 2
            t23511 = t23503 ** 2
            t23515 = t23511 ** 2
            t23516 = t23504 * t23515
            t23525 = t23516 ** 2
            t23486 = t23504 * t23525
            t23537 = t23486 + t23504
            t23510 = t23504 * t23503
            t23513 = t23510 ** 2
            t23514 = t23504 * t23513
            t23521 = t23514 ** 2
            t23490 = t23504 * t23521
            t23512 = t23504 * t23511
            t23536 = -20 * t23490 - 20 * t23512
            t23523 = t23515 ** 2
            t23488 = t23504 * t23523
            t23519 = t23513 ** 2
            t23492 = t23504 * t23519
            t23517 = t23512 ** 2
            t23494 = t23504 * t23517
            t23535 = 528 * t23488 + 3264 * t23490 + 3264 * t23492 - 7072 * t23494 + 528 * t23510 + 3264 * t23512 + 3264 * t23514 - 7072 * t23516 + 16 * t23537
            t23485 = t23517 ** 2
            t23534 = -1 - t23485 - 118 * t23503 - 1581 * t23511 - 4488 * t23513 + 1326 * t23515 + 9724 * t23517 + 1326 * t23519 - 4488 * t23521 - 1581 * t23523 - 118 * t23525
            t23533 = -288 * t23486 - 4128 * t23488 + 384 * t23490 + 26496 * t23492 - 22464 * t23494 - 288 * t23504 - 4128 * t23510 + 384 * t23512 + 26496 * t23514 - 22464 * t23516
            t23532 = 736 * t23488 + 32384 * t23492 - 19136 * t23494 + 736 * t23510 + 32384 * t23514 - 19136 * t23516 + 736 * t23536 + 736 * t23537
            t23531 = -92 - 92 * t23485 - 2024 * t23503 + 7636 * t23511 - 736 * t23513 - 31096 * t23515 + 52624 * t23517 - 31096 * t23519 - 736 * t23521 + 7636 * t23523 - 2024 * t23525
            t23530 = 16800 * t23488 + 67200 * t23492 - 33600 * t23494 + 16800 * t23510 + 67200 * t23514 - 33600 * t23516 + 2400 * t23536 - 2400 * t23537
            t23529 = -24 - 24 * t23485 - 1488 * t23503 - 5688 * t23511 + 15936 * t23513 + 11856 * t23515 - 41184 * t23517 + 11856 * t23519 + 15936 * t23521 - 5688 * t23523 - 1488 * t23525
            t23528 = 600 * t23485 - 1200 * t23503 - 11400 * t23511 + 62400 * t23513 - 142800 * t23515 + 184800 * t23517 - 142800 * t23519 + 62400 * t23521 - 11400 * t23523 - 1200 * t23525 + 600
            t23509 = 2 * phi1
            t23508 = 3 * phi1
            t23507 = 4 * phi1
            t23506 = -5 * phi2
            t23505 = 5 * phi2
            tfunc[..., c] = -(0.41e2 / 0.7314866176e10) * np.sqrt(0.17e2) * np.sqrt(0.19e2) * np.sqrt(0.109e3) * np.sqrt(0.5e1) * np.sqrt(0.31e2) * np.sqrt(0.29e2) * np.sqrt(0.481e3) * np.sqrt(0.11e2) * ((-966 * t23485 + 9660 * t23525 - 43470 * t23523 + 243432 * t23517 - 43470 * t23511 + 9660 * t23503 - 966 - 202860 * t23519 - 202860 * t23515 + 115920 * t23521 + 115920 * t23513) * np.exp((20*1j) * phi2) + (t23534 + t23535) * np.exp((-4*1j) * (t23507 + t23506)) + (t23534 - t23535) * np.exp((4*1j) * (t23507 + t23505)) + (t23528 + t23530) * np.exp((-4*1j) * (phi1 + t23506)) + (t23531 + t23532) * np.exp((-4*1j) * (t23509 + t23506)) + (t23529 - t23533) * np.exp((-4*1j) * (t23508 + t23506)) + (t23528 - t23530) * np.exp((4*1j) * (phi1 + t23505)) + (t23531 - t23532) * np.exp((4*1j) * (t23509 + t23505)) + (t23529 + t23533) * np.exp((4*1j) * (t23508 + t23505)))

        if Bindx == 512:
            t23568 = np.cos(phi)
            t23567 = t23568 ** 2
            t23575 = t23567 ** 2
            t23576 = t23568 * t23575
            t23581 = t23576 ** 2
            t23549 = t23581 ** 2
            t23611 = t23549 + 1
            t23579 = t23575 ** 2
            t23580 = t23568 * t23579
            t23589 = t23580 ** 2
            t23550 = t23568 * t23589
            t23602 = -t23550 - t23568
            t23587 = t23579 ** 2
            t23552 = t23568 * t23587
            t23574 = t23568 * t23567
            t23610 = -t23552 - t23574
            t23577 = t23574 ** 2
            t23578 = t23568 * t23577
            t23585 = t23578 ** 2
            t23554 = t23568 * t23585
            t23609 = t23554 + t23576
            t23583 = t23577 ** 2
            t23556 = t23568 * t23583
            t23608 = t23556 + t23578
            t23558 = t23568 * t23581
            t23607 = t23558 + t23580
            t23606 = t23583 + t23579
            t23605 = t23585 + t23577
            t23604 = t23587 + t23575
            t23603 = t23589 + t23567
            t23601 = 38 * t23549 + 4484 * t23567 + 60078 * t23575 - 50388 * t23579 - 369512 * t23581 - 50388 * t23583 + 60078 * t23587 + 4484 * t23589 + 170544 * t23605 + 38
            t23600 = -20064 * t23552 - 20064 * t23574 + 268736 * t23558 + 268736 * t23580 - 124032 * t23554 - 124032 * t23556 - 124032 * t23578 - 124032 * t23576 + 608 * t23602
            t23599 = 109 * t23549 + 20710 * t23567 + 20138404 * t23581 + 20710 * t23589 + 528105 * t23604 + 4224840 * t23605 + 13730730 * t23606 + 109
            t23598 = -2180 * t23550 - 2180 * t23568 - 18307640 * t23607 - 8449680 * t23608 - 1689936 * t23609 + 124260 * t23610
            t23597 = 31977 * t23549 + 54872532 * t23581 + 1982574 * t23603 + 7578549 * t23604 - 21232728 * t23605 - 15796638 * t23606 + 31977
            t23596 = 383724 * t23602 - 29930472 * t23607 + 35302608 * t23608 + 511632 * t23609 + 5500044 * t23610
            t23595 = 18584128 * t23602 + 483187328 * t23607 - 817701632 * t23608 + 371682560 * t23609 + 18584128 * t23610
            t23594 = 2927000160 * t23556 + 2927000160 * t23578 - 2090714400 * t23554 - 2090714400 * t23576 - 1463500080 * t23558 - 1463500080 * t23580 + 731750040 * t23552 + 731750040 * t23574 + 104535720 * t23602
            t23593 = -1328765152 * t23581 + 51106352 * t23603 - 192810328 * t23604 + 18584128 * t23605 + 785179408 * t23606 + 2323016 * t23611
            t23592 = 8049250440 * t23581 - 52267860 * t23603 - 496544670 * t23604 + 2717928720 * t23605 - 6219875340 * t23606 + 26133930 * t23611
            t23573 = 2 * phi1
            t23572 = 3 * phi1
            t23571 = 4 * phi1
            t23570 = -5 * phi2
            t23569 = 5 * phi2
            tfunc[..., c] = (0.41e2 / 0.351113576448e12) * np.sqrt(0.2e1) * np.sqrt(0.5e1) * np.sqrt(0.3e1) * np.sqrt(0.37e2) * np.sqrt(0.13e2) * np.sqrt(0.109e3) * ((-14443794288 * t23581 + 57316644 * t23549 + 57316644 + 12036495240 * t23583 + 12036495240 * t23579 - 6877997280 * t23585 - 6877997280 * t23577 + 2579248980 * t23587 + 2579248980 * t23575 - 573166440 * t23589 - 573166440 * t23567) * np.exp((20*1j) * phi2) + (t23592 + t23594) * np.exp((-4*1j) * (phi1 + t23570)) + (t23593 + t23595) * np.exp((-4*1j) * (t23573 + t23570)) + (t23596 + t23597) * np.exp((-4*1j) * (t23572 + t23570)) + (t23600 + t23601) * np.exp((-4*1j) * (t23571 + t23570)) + (t23592 - t23594) * np.exp((4*1j) * (phi1 + t23569)) + (t23593 - t23595) * np.exp((4*1j) * (t23573 + t23569)) + (-t23596 + t23597) * np.exp((4*1j) * (t23572 + t23569)) + (-t23600 + t23601) * np.exp((4*1j) * (t23571 + t23569)) + (t23598 + t23599) * np.exp((-20*1j) * (phi1 - phi2)) + (-t23598 + t23599) * np.exp((20*1j) * (phi1 + phi2)))

        if Bindx == 513:
            t23639 = np.cos(phi)
            t23638 = t23639 ** 2
            t23646 = t23638 ** 2
            t23650 = t23646 ** 2
            t23651 = t23639 * t23650
            t23660 = t23651 ** 2
            t23621 = t23639 * t23660
            t23672 = t23621 + t23639
            t23645 = t23639 * t23638
            t23648 = t23645 ** 2
            t23649 = t23639 * t23648
            t23656 = t23649 ** 2
            t23625 = t23639 * t23656
            t23647 = t23639 * t23646
            t23671 = -20 * t23625 - 20 * t23647
            t23658 = t23650 ** 2
            t23623 = t23639 * t23658
            t23654 = t23648 ** 2
            t23627 = t23639 * t23654
            t23652 = t23647 ** 2
            t23629 = t23639 * t23652
            t23670 = 528 * t23623 + 3264 * t23625 + 3264 * t23627 - 7072 * t23629 + 528 * t23645 + 3264 * t23647 + 3264 * t23649 - 7072 * t23651 + 16 * t23672
            t23620 = t23652 ** 2
            t23669 = -1 - t23620 - 118 * t23638 - 1581 * t23646 - 4488 * t23648 + 1326 * t23650 + 9724 * t23652 + 1326 * t23654 - 4488 * t23656 - 1581 * t23658 - 118 * t23660
            t23668 = -456 * t23621 - 6536 * t23623 + 608 * t23625 + 41952 * t23627 - 35568 * t23629 - 456 * t23639 - 6536 * t23645 + 608 * t23647 + 41952 * t23649 - 35568 * t23651
            t23667 = 4872 * t23623 + 19488 * t23627 - 9744 * t23629 + 4872 * t23645 + 19488 * t23649 - 9744 * t23651 + 696 * t23671 - 696 * t23672
            t23666 = 1136 * t23623 + 49984 * t23627 - 29536 * t23629 + 1136 * t23645 + 49984 * t23649 - 29536 * t23651 + 1136 * t23671 + 1136 * t23672
            t23665 = -174 - 174 * t23620 + 348 * t23638 + 3306 * t23646 - 18096 * t23648 + 41412 * t23650 - 53592 * t23652 + 41412 * t23654 - 18096 * t23656 + 3306 * t23658 + 348 * t23660
            t23664 = -38 - 38 * t23620 - 2356 * t23638 - 9006 * t23646 + 25232 * t23648 + 18772 * t23650 - 65208 * t23652 + 18772 * t23654 + 25232 * t23656 - 9006 * t23658 - 2356 * t23660
            t23663 = -142 - 142 * t23620 - 3124 * t23638 + 11786 * t23646 - 1136 * t23648 - 47996 * t23650 + 81224 * t23652 - 47996 * t23654 - 1136 * t23656 + 11786 * t23658 - 3124 * t23660
            t23644 = 4 * phi1
            t23643 = 8 * phi1
            t23642 = 16 * phi1
            t23641 = -21 * phi2
            t23640 = 21 * phi2
            tfunc[..., c] = (-0.43e2 / 0.57864617984e11*1j) * np.sqrt((1 - t23639)) * np.sqrt((1 + t23639)) * np.sqrt(0.5e1) * np.sqrt(0.17e2) * np.sqrt(0.3449e4) * np.sqrt(0.3e1) * np.sqrt(0.13e2) * np.sqrt(0.31e2) * np.sqrt(0.37e2) * np.sqrt(0.5453e4) * ((-t23669 + t23670) * np.exp((-1*1j) * (t23642 + t23640)) + (t23669 + t23670) * np.exp((1j) * (t23642 + t23641)) + (t23664 + t23668) * np.exp((-3*1j) * (t23644 + 7 * phi2)) + (-t23664 + t23668) * np.exp((3*1j) * (t23644 - 7 * phi2)) + (t23665 + t23667) * np.exp((-1*1j) * (t23644 + t23640)) + (-t23663 + t23666) * np.exp((-1*1j) * (t23643 + t23640)) + (-t23665 + t23667) * np.exp((1j) * (t23644 + t23641)) + (t23663 + t23666) * np.exp((1j) * (t23643 + t23641)))

        if Bindx == 514:
            t23703 = np.cos(phi)
            t23702 = t23703 ** 2
            t23711 = t23702 ** 2
            t23712 = t23703 * t23711
            t23717 = t23712 ** 2
            t23727 = t23717 ** 2
            t23683 = t23703 * t23727
            t23734 = -t23683 + 1
            t23733 = 3449 - 3449 * t23683
            t23732 = 4264 - 4264 * t23683
            t23731 = 1676285 * t23734
            t23730 = 63956720 * t23734
            t23729 = 319125222 * t23734
            t23715 = t23711 ** 2
            t23716 = t23703 * t23715
            t23725 = t23716 ** 2
            t23723 = t23715 ** 2
            t23710 = t23703 * t23702
            t23713 = t23710 ** 2
            t23714 = t23703 * t23713
            t23721 = t23714 ** 2
            t23719 = t23713 ** 2
            t23709 = 4 * phi1
            t23708 = 8 * phi1
            t23707 = 16 * phi1
            t23706 = 20 * phi1
            t23705 = -21 * phi2
            t23704 = 21 * phi2
            t23693 = t23703 * t23717
            t23691 = t23703 * t23719
            t23689 = t23703 * t23721
            t23687 = t23703 * t23723
            t23685 = t23703 * t23725
            tfunc[..., c] = (0.43e2 / 0.1851667775488e13*1j) * np.sqrt(0.19e2) * np.sqrt(0.3449e4) * np.sqrt(0.7e1) * np.sqrt((1 + t23703)) * ((83814250 * t23685 + 108958525 * t23687 - 1086232680 * t23689 + 1022533850 * t23691 + 1307502300 * t23693 - 83814250 * t23702 - 18439135 * t23703 - 184391350 * t23710 - 108958525 * t23711 + 424100105 * t23712 + 1086232680 * t23713 + 737565400 * t23714 - 1022533850 * t23715 - 2397087550 * t23716 - 1307502300 * t23717 + 2397087550 * t23719 - 737565400 * t23721 - 424100105 * t23723 + 184391350 * t23725 + 18439135 * t23727 - t23731) * np.exp((-3*1j) * (t23709 + 7 * phi2)) + (-124045090 * t23685 - 685600565 * t23687 + 1139873800 * t23689 + 2678703430 * t23691 - 4445507820 * t23693 + 124045090 * t23702 - 21791705 * t23703 - 392250690 * t23710 + 685600565 * t23711 - 370458985 * t23712 - 1139873800 * t23713 + 2963671880 * t23714 - 2678703430 * t23715 - 740917970 * t23716 + 4445507820 * t23717 + 740917970 * t23719 - 2963671880 * t23721 + 370458985 * t23723 + 392250690 * t23725 + 21791705 * t23727 + t23731) * np.exp((3*1j) * (t23709 - 7 * phi2)) + (-1914751332 * t23685 + 2872126998 * t23687 + 7659005328 * t23689 - 40209777972 * t23691 + 80419555944 * t23693 + 1914751332 * t23702 - 957375666 * t23703 + 8297255772 * t23710 - 2872126998 * t23711 - 31593396978 * t23712 - 7659005328 * t23713 + 68931047952 * t23714 + 40209777972 * t23715 - 93822815268 * t23716 - 80419555944 * t23717 + 93822815268 * t23719 - 68931047952 * t23721 + 31593396978 * t23723 - 8297255772 * t23725 + 957375666 * t23727 - t23729) * np.exp((-1*1j) * (t23709 + t23704)) + (895394080 * t23685 - 5820061520 * t23687 + 10744728960 * t23689 - 895394080 * t23691 - 23280246080 * t23693 - 895394080 * t23702 - 447697040 * t23703 + 895394080 * t23710 + 5820061520 * t23711 + 4924667440 * t23712 - 10744728960 * t23713 - 22001111680 * t23714 + 895394080 * t23715 + 34920369120 * t23716 + 23280246080 * t23717 - 34920369120 * t23719 + 22001111680 * t23721 - 4924667440 * t23723 - 895394080 * t23725 + 447697040 * t23727 - t23730) * np.exp((-1*1j) * (t23708 + t23704)) + (-638250444 * t23685 + 14998885434 * t23687 - 58719040848 * t23689 + 111693827700 * t23691 - 116161580808 * t23693 + 638250444 * t23702 - 1595626110 * t23703 + 9573756660 * t23710 - 14998885434 * t23711 - 19466638542 * t23712 + 58719040848 * t23713 + 2553001776 * t23714 - 111693827700 * t23715 + 58080790404 * t23716 + 116161580808 * t23717 - 58080790404 * t23719 - 2553001776 * t23721 + 19466638542 * t23723 - 9573756660 * t23725 + 1595626110 * t23727 + t23729) * np.exp((1j) * (t23709 + t23705)) + (-1918701600 * t23685 + 4796754000 * t23687 + 9721421440 * t23689 - 44130136800 * t23691 + 49886241600 * t23693 + 1918701600 * t23702 - 575610480 * t23703 - 1918701600 * t23710 - 4796754000 * t23711 + 15541482960 * t23712 - 9721421440 * t23713 - 23024419200 * t23714 + 44130136800 * t23715 - 8314373600 * t23716 - 49886241600 * t23717 + 8314373600 * t23719 + 23024419200 * t23721 - 15541482960 * t23723 + 1918701600 * t23725 + 575610480 * t23727 + t23730) * np.exp((1j) * (t23708 + t23705)) + (63960 * t23727 - 63960 * t23703 - 24500944 * t23719 + 24500944 * t23716 - 19571760 * t23691 + 19571760 * t23715 - 11308128 * t23693 + 11308128 * t23717 + 7176312 * t23723 - 7176312 * t23712 + 4489992 * t23687 - 4489992 * t23711 + 1748240 * t23725 - 1748240 * t23710 + 434928 * t23685 - 434928 * t23702 + 5219136 * t23689 - 5219136 * t23721 + 5219136 * t23714 - 5219136 * t23713 - t23732) * np.exp((-1*1j) * (t23707 + t23704)) + (-65531 * t23727 + 65531 * t23703 - 167104050 * t23691 + 167104050 * t23715 - 144823510 * t23719 + 144823510 * t23716 - 133683240 * t23721 + 133683240 * t23714 - 80209944 * t23689 + 80209944 * t23713 - 57929404 * t23693 + 57929404 * t23717 - 36762891 * t23723 + 36762891 * t23712 - 12778545 * t23687 + 12778545 * t23711 - 3276550 * t23725 + 3276550 * t23710 - 586330 * t23685 + 586330 * t23702 + t23733) * np.exp((-1*1j) * (t23706 + t23704)) + (72488 * t23727 - 72488 * t23703 + 71618144 * t23693 - 71618144 * t23717 - 35809072 * t23719 + 35809072 * t23716 + 20659080 * t23723 - 20659080 * t23712 - 8992776 * t23687 + 8992776 * t23711 - 8263632 * t23691 + 8263632 * t23715 + 2754544 * t23725 - 2754544 * t23710 - 571376 * t23685 + 571376 * t23702 - 33054528 * t23689 + 33054528 * t23721 - 33054528 * t23714 + 33054528 * t23713 + t23732) * np.exp((1j) * (t23707 + t23705)) + (-72429 * t23727 + 72429 * t23703 + 1216517484 * t23693 - 1216517484 * t23717 - 1013764570 * t23719 + 1013764570 * t23716 + 701837010 * t23691 - 701837010 * t23715 - 401049720 * t23721 + 401049720 * t23714 + 187156536 * t23689 - 187156536 * t23713 - 70183701 * t23723 + 70183701 * t23712 + 20642265 * t23687 - 20642265 * t23711 - 4587170 * t23725 + 4587170 * t23710 + 724290 * t23685 - 724290 * t23702 - t23733) * np.exp((1j) * (t23706 + t23705))) * ((1 - t23703) ** (-0.1e1 / 0.2e1))

        if Bindx == 515:
            t23763 = np.cos(phi)
            t23762 = t23763 ** 2
            t23770 = t23762 ** 2
            t23771 = t23763 * t23770
            t23776 = t23771 ** 2
            t23786 = t23776 ** 2
            t23743 = t23763 * t23786
            t23774 = t23770 ** 2
            t23775 = t23763 * t23774
            t23784 = t23775 ** 2
            t23745 = t23763 * t23784
            t23782 = t23774 ** 2
            t23747 = t23763 * t23782
            t23769 = t23763 * t23762
            t23772 = t23769 ** 2
            t23773 = t23763 * t23772
            t23780 = t23773 ** 2
            t23749 = t23763 * t23780
            t23778 = t23772 ** 2
            t23751 = t23763 * t23778
            t23753 = t23763 * t23776
            t23795 = -21 * t23743 - 2222 * t23745 - 24753 * t23747 - 42024 * t23749 + 80070 * t23751 + 91052 * t23753 + 235 * t23763 + 5970 * t23769 + 19023 * t23771 - 42024 * t23773 - 85306 * t23775
            t23794 = 1552 * t23762 + 14208 * t23770 + 3264 * t23772 - 89760 * t23774 - 7072 * t23776 + 127296 * t23778 + 3264 * t23780 - 43248 * t23782 - 9200 * t23784 - 320 * t23786 + 16
            t23793 = 16008 * t23762 - 89088 * t23770 + 219936 * t23772 - 243600 * t23774 - 9744 * t23776 + 370272 * t23778 - 481632 * t23780 + 305544 * t23782 - 100920 * t23784 + 13920 * t23786 - 696
            t23792 = -18696 * t23762 + 29184 * t23770 + 290016 * t23772 - 655728 * t23774 - 35568 * t23776 + 972192 * t23778 - 578208 * t23780 - 120840 * t23782 + 108984 * t23784 + 9120 * t23786 - 456
            t23791 = 1136 * t23762 - 118144 * t23770 + 486208 * t23772 - 665696 * t23774 - 29536 * t23776 + 1004224 * t23778 - 1040576 * t23780 + 382832 * t23782 + 1136 * t23784 - 22720 * t23786 + 1136
            t23790 = 798 * t23743 + 44004 * t23745 + 110694 * t23747 - 522576 * t23749 + 109212 * t23751 + 942552 * t23753 - 4674 * t23763 - 28956 * t23769 + 196422 * t23771 - 26448 * t23773 - 821028 * t23775
            t23789 = -3654 * t23743 + 10092 * t23745 + 49938 * t23747 - 324336 * t23749 + 791700 * t23751 - 1086456 * t23753 - 870 * t23763 - 12180 * t23769 + 125106 * t23771 - 457968 * t23773 + 908628 * t23775
            t23788 = -2982 * t23743 - 56516 * t23745 + 256594 * t23747 - 205616 * t23749 - 608044 * t23751 + 1469416 * t23753 + 6106 * t23763 - 56516 * t23769 + 65746 * t23771 + 376016 * t23773 - 1244204 * t23775
            t23768 = 2 * phi1
            t23767 = 3 * phi1
            t23766 = 4 * phi1
            t23765 = -5 * phi2
            t23764 = 5 * phi2
            tfunc[..., c] = -(0.43e2 / 0.57864617984e11) * np.sqrt(0.5e1) * np.sqrt(0.17e2) * np.sqrt(0.3449e4) * np.sqrt(0.2e1) * np.sqrt(0.13e2) * np.sqrt(0.31e2) * np.sqrt(0.37e2) * np.sqrt(0.779e3) * ((-t23789 + t23793) * np.exp((-4*1j) * (phi1 + t23764)) + (t23788 + t23791) * np.exp((-4*1j) * (t23768 + t23764)) + (t23790 + t23792) * np.exp((-4*1j) * (t23767 + t23764)) + (t23794 + t23795) * np.exp((-4*1j) * (t23766 + t23764)) + (t23789 + t23793) * np.exp((4*1j) * (phi1 + t23765)) + (-t23788 + t23791) * np.exp((4*1j) * (t23768 + t23765)) + (-t23790 + t23792) * np.exp((4*1j) * (t23767 + t23765)) + (t23794 - t23795) * np.exp((4*1j) * (t23766 + t23765)))

        if Bindx == 516:
            t23826 = np.cos(phi)
            t23825 = t23826 ** 2
            t23833 = t23825 ** 2
            t23832 = t23826 * t23825
            t23835 = t23832 ** 2
            t23837 = t23833 ** 2
            t23834 = t23826 * t23833
            t23839 = t23834 ** 2
            t23841 = t23835 ** 2
            t23836 = t23826 * t23835
            t23843 = t23836 ** 2
            t23845 = t23837 ** 2
            t23838 = t23826 * t23837
            t23847 = t23838 ** 2
            t23849 = t23839 ** 2
            t23860 = -6617728 * t23825 - 60582912 * t23833 - 13917696 * t23835 + 382736640 * t23837 + 30155008 * t23839 - 542790144 * t23841 - 13917696 * t23843 + 184409472 * t23845 + 39228800 * t23847 + 1364480 * t23849 - 68224
            t23806 = t23826 * t23849
            t23808 = t23826 * t23847
            t23810 = t23826 * t23845
            t23812 = t23826 * t23843
            t23814 = t23826 * t23841
            t23816 = t23826 * t23839
            t23859 = -89544 * t23806 - 9474608 * t23808 - 105546792 * t23810 - 179190336 * t23812 + 341418480 * t23814 + 388245728 * t23816 + 1002040 * t23826 + 25456080 * t23832 + 81114072 * t23834 - 179190336 * t23836 - 363744784 * t23838
            t23858 = 11657620 * t23825 + 251639040 * t23833 + 1550725584 * t23835 + 3074714520 * t23837 + 579294040 * t23839 - 3475764240 * t23841 - 2941031280 * t23843 - 788731116 * t23845 - 69462860 * t23847 - 1379600 * t23849 + 68980
            t23857 = -72429 * t23806 - 12381910 * t23808 - 272281305 * t23810 - 1737882120 * t23812 - 3776551530 * t23814 - 1795811524 * t23816 + 1307171 * t23826 + 64875690 * t23832 + 718547415 * t23834 + 2539981560 * t23836 + 2461999670 * t23838
            t23856 = -824732220 * t23825 + 1287386880 * t23833 + 12793407120 * t23835 - 28925973960 * t23837 - 1569002760 * t23839 + 42886075440 * t23841 - 25506352560 * t23843 - 5330586300 * t23845 + 4807585380 * t23847 + 402308400 * t23849 - 20115420
            t23855 = -511653760 * t23825 + 53211991040 * t23833 - 218987809280 * t23835 + 299829103360 * t23837 + 13302997760 * t23839 - 452301923840 * t23841 + 468674844160 * t23843 - 172427317120 * t23845 - 511653760 * t23847 + 10233075200 * t23849 - 511653760
            t23854 = -35201985 * t23806 - 1941138030 * t23808 - 4883018205 * t23810 + 23052271320 * t23812 - 4817643090 * t23814 - 41578573140 * t23816 + 206183055 * t23826 + 1277329170 * t23832 - 8664717165 * t23834 + 1166694360 * t23836 + 36217813710 * t23838
            t23853 = 29359520424 * t23825 - 163392113664 * t23833 + 403374280608 * t23835 - 446775310800 * t23837 - 17871012432 * t23839 + 679098472416 * t23841 - 883338614496 * t23843 + 560383889832 * t23845 - 185092628760 * t23847 + 25530017760 * t23849 - 1276500888
            t23852 = -1343091120 * t23806 - 25454774560 * t23808 + 115569793040 * t23810 - 92609330560 * t23812 - 273862675040 * t23814 + 661824138560 * t23816 + 2750138960 * t23826 - 25454774560 * t23832 + 29611961360 * t23834 + 169357394560 * t23836 - 560388780640 * t23838
            t23851 = 6701629662 * t23806 - 18509262876 * t23808 - 91588938714 * t23810 + 594849413808 * t23812 - 1452019760100 * t23814 + 1992617886168 * t23816 + 1595626110 * t23826 + 22338765540 * t23832 - 229451034618 * t23834 + 839937584304 * t23836 - 1666471909284 * t23838
            t23831 = 2 * phi1
            t23830 = 3 * phi1
            t23829 = 4 * phi1
            t23828 = -5 * phi2
            t23827 = 5 * phi2
            tfunc[..., c] = (0.43e2 / 0.5555003326464e13) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.19e2) * np.sqrt(0.3449e4) * ((t23851 + t23853) * np.exp((-4*1j) * (phi1 + t23827)) + (-t23852 + t23855) * np.exp((-4*1j) * (t23831 + t23827)) + (-t23854 + t23856) * np.exp((-4*1j) * (t23830 + t23827)) + (-t23859 + t23860) * np.exp((-4*1j) * (t23829 + t23827)) + (-t23851 + t23853) * np.exp((4*1j) * (phi1 + t23828)) + (t23852 + t23855) * np.exp((4*1j) * (t23831 + t23828)) + (t23854 + t23856) * np.exp((4*1j) * (t23830 + t23828)) + (t23859 + t23860) * np.exp((4*1j) * (t23829 + t23828)) + (t23857 + t23858) * np.exp((-20*1j) * (phi1 + phi2)) + (-t23857 + t23858) * np.exp((20*1j) * (phi1 - phi2)))

        if Bindx == 517:
            t23888 = np.cos(phi)
            t23887 = t23888 ** 2
            t23896 = t23887 ** 2
            t23897 = t23888 * t23896
            t23902 = t23897 ** 2
            t23869 = t23902 ** 2
            t23916 = -491 - 861 * t23869
            t23915 = -10146 - 32718 * t23869
            t23914 = -149814 * t23869 - 1914
            t23913 = -122262 * t23869 - 15194
            t23900 = t23896 ** 2
            t23901 = t23888 * t23900
            t23910 = t23901 ** 2
            t23908 = t23900 ** 2
            t23895 = t23888 * t23887
            t23898 = t23895 ** 2
            t23899 = t23888 * t23898
            t23906 = t23899 ** 2
            t23904 = t23898 ** 2
            t23894 = 4 * phi1
            t23893 = 8 * phi1
            t23892 = 12 * phi1
            t23891 = 16 * phi1
            t23890 = -19 * phi2
            t23889 = 19 * phi2
            t23878 = t23888 * t23902
            t23876 = t23888 * t23904
            t23874 = t23888 * t23906
            t23872 = t23888 * t23908
            t23870 = t23888 * t23910
            tfunc[..., c] = (-0.43e2 / 0.57864617984e11*1j) * np.sqrt(0.19e2) * np.sqrt(0.37e2) * np.sqrt(0.31e2) * np.sqrt(0.13e2) * np.sqrt(0.3449e4) * np.sqrt(0.17e2) * np.sqrt(0.5e1) * ((1 + t23888) ** (0.3e1 / 0.2e1)) * ((242556 * t23870 - 1993692 * t23872 + 7217520 * t23874 - 15073968 * t23876 + 19960584 * t23878 + 22272 * t23887 - 53244 * t23888 + 668508 * t23895 - 97266 * t23896 - 3431280 * t23897 - 253344 * t23898 + 9773232 * t23899 + 2224068 * t23900 - 17310216 * t23901 - 5865888 * t23902 + 8435868 * t23904 - 7352544 * t23906 + 3896034 * t23908 - 1160928 * t23910 - t23914) * np.exp((-1*1j) * (t23894 + t23889)) + (-640420 * t23870 + 2703396 * t23872 - 2411728 * t23874 - 6435440 * t23876 + 18561672 * t23878 + 299904 * t23887 + 1988 * t23888 + 347900 * t23895 - 1679150 * t23896 - 3268272 * t23897 + 3337568 * t23898 + 11551984 * t23899 + 234300 * t23900 - 20411080 * t23901 - 11421344 * t23902 + 19720676 * t23904 - 15506400 * t23906 + 5708542 * t23908 - 556640 * t23910 + t23913) * np.exp((-1*1j) * (t23893 + t23889)) + (841812 * t23870 - 2899188 * t23872 - 201840 * t23874 + 14906928 * t23876 - 28916712 * t23878 + 175392 * t23887 - 45588 * t23888 + 354612 * t23895 - 2146638 * t23896 + 981360 * t23897 + 7397088 * t23898 - 9940272 * t23899 - 9033732 * t23900 + 24918888 * t23901 - 2541792 * t23902 + 17884068 * t23904 - 18633312 * t23906 + 8058462 * t23908 - 1007808 * t23910 + t23914) * np.exp((1j) * (t23894 + t23890)) + (-1129468 * t23870 - 6113668 * t23872 + 22677968 * t23874 - 5924240 * t23876 - 40132040 * t23878 - 186304 * t23887 - 58788 * t23888 + 1381092 * t23895 - 1892434 * t23896 - 3874896 * t23897 + 14520352 * t23898 - 10206960 * t23899 - 20782268 * t23900 + 43381000 * t23901 - 13970528 * t23902 + 48811932 * t23904 - 28306848 * t23906 - 2427774 * t23908 + 4096416 * t23910 - t23913) * np.exp((1j) * (t23893 + t23890)) + (289788 * t23870 + 977664 * t23910 + 1185828 * t23872 - 1397526 * t23908 - 6031056 * t23874 - 5262240 * t23906 + 5100816 * t23876 + 13441740 * t23904 + 5910216 * t23878 - 9129120 * t23902 - 11695944 * t23901 - 1230060 * t23900 + 6003696 * t23899 + 3766560 * t23898 - 433200 * t23897 - 1284666 * t23896 - 394212 * t23895 + 74784 * t23887 + 64068 * t23888 - t23915) * np.exp((-1*1j) * (t23892 + t23889)) + (-10742 * t23870 - 58752 * t23910 - 179402 * t23872 - 308887 * t23908 - 198104 * t23874 + 347024 * t23906 + 979384 * t23876 + 914654 * t23904 - 62036 * t23878 - 1045616 * t23902 - 1043276 * t23901 - 230126 * t23900 + 425864 * t23899 + 447664 * t23898 + 154136 * t23897 - 38417 * t23896 - 60262 * t23895 - 26192 * t23887 - 5562 * t23888 + t23916) * np.exp((-1*1j) * (t23891 + t23889)) + (420660 * t23870 - 2398560 * t23910 + 7807404 * t23872 - 15168042 * t23908 + 14888400 * t23874 + 4113120 * t23906 - 34569360 * t23876 + 46644468 * t23904 - 20825064 * t23878 - 21127392 * t23902 + 39035880 * t23901 - 23193300 * t23900 - 801648 * t23899 + 10252704 * t23898 - 6600144 * t23897 + 1332090 * t23896 + 539220 * t23895 - 412224 * t23887 + 104652 * t23888 + t23915) * np.exp((1j) * (t23892 + t23890)) + (-14186 * t23870 + 108608 * t23910 - 510678 * t23872 + 1639191 * t23908 - 3762984 * t23874 + 6244848 * t23906 - 7251384 * t23876 + 5037474 * t23904 - 76908 * t23878 - 4628624 * t23902 + 6137612 * t23901 - 4284306 * t23900 + 1353336 * t23899 + 508368 * t23898 - 894744 * t23897 + 563601 * t23896 - 215418 * t23895 + 52368 * t23887 - 7526 * t23888 - t23916) * np.exp((1j) * (t23891 + t23890))) * ((1 - t23888) ** (-0.1e1 / 0.2e1))

        if Bindx == 518:
            t23948 = np.cos(phi)
            t23947 = t23948 ** 2
            t23957 = t23947 ** 2
            t23958 = t23948 * t23957
            t23963 = t23958 ** 2
            t23964 = t23948 * t23963
            t23927 = t23964 ** 2
            t23956 = t23948 * t23947
            t23959 = t23956 ** 2
            t23961 = t23957 ** 2
            t23965 = t23959 ** 2
            t23960 = t23948 * t23959
            t23967 = t23960 ** 2
            t23969 = t23961 ** 2
            t23962 = t23948 * t23961
            t23971 = t23962 ** 2
            t23973 = t23963 ** 2
            t23985 = -89544 * t23927 - 3931928 * t23947 - 19253832 * t23957 + 74621976 * t23959 + 111203664 * t23961 - 349678576 * t23963 - 26523536 * t23965 + 334926384 * t23967 - 37239384 * t23969 - 75550072 * t23971 - 8434088 * t23973 - 51064
            t23984 = -72429 * t23927 - 9764119 * t23947 - 173984805 * t23957 - 751968225 * t23959 - 367628910 * t23961 + 1940635034 * t23963 + 1535129206 * t23965 - 969203490 * t23967 - 985913895 * t23969 - 206094995 * t23971 - 11067841 * t23973 - 65531
            t23928 = t23948 * t23973
            t23930 = t23948 * t23971
            t23932 = t23948 * t23969
            t23934 = t23948 * t23967
            t23936 = t23948 * t23965
            t23983 = -1296256 * t23928 - 31995392 * t23930 - 103509120 * t23932 + 153434112 * t23934 + 285652224 * t23936 - 680576 * t23948 - 12293632 * t23956 + 1772160 * t23958 + 153434112 * t23960 - 112077056 * t23962 - 332440576 * t23964
            t23982 = 1310620 * t23928 + 57667280 * t23930 + 529228356 * t23932 + 1283359104 * t23934 - 133683240 * t23936 + 1172660 * t23948 + 49941520 * t23956 + 430145484 * t23958 + 855572736 * t23960 - 757538360 * t23962 - 2317176160 * t23964
            t23981 = -382192980 * t23928 - 3691424880 * t23930 + 8220338100 * t23932 + 12324374400 * t23934 - 40771503240 * t23936 - 90764700 * t23948 + 194285520 * t23956 + 3654628380 * t23958 - 14098456320 * t23960 + 8771304360 * t23962 + 25869411360 * t23964
            t23980 = -9721421440 * t23928 + 10432744960 * t23930 + 128624763520 * t23932 - 437875783680 * t23934 + 566488067840 * t23936 - 311984000 * t23948 + 10432744960 * t23956 - 68973422720 * t23958 + 164328212480 * t23960 - 92172552960 * t23962 - 271251368960 * t23964
            t23979 = -24253516872 * t23928 + 182197151136 * t23930 - 582240075768 * t23932 + 1009245189888 * t23934 - 973316360016 * t23936 + 2210525928 * t23948 - 29515191264 * t23956 + 132289079832 * t23958 - 261028864512 * t23960 + 138173437584 * t23962 + 406238624064 * t23964
            t23978 = -35201985 * t23927 - 229242195 * t23947 + 2150019495 * t23957 - 1738144005 * t23959 - 15648079590 * t23961 + 36313484610 * t23963 - 17357890290 * t23965 - 19776646890 * t23967 + 20143262685 * t23969 - 2099976255 * t23971 - 1710669285 * t23973 - 10916295
            t23977 = -1343091120 * t23927 + 3171317360 * t23947 - 7507894960 * t23957 - 53587931760 * t23959 + 293043451360 * t23961 - 571339419040 * t23963 + 498984089760 * t23965 - 95095843040 * t23967 - 160620282640 * t23969 + 115990971440 * t23971 - 21528455920 * t23973 - 166911440
            t23976 = -6701629662 * t23927 + 3681615366 * t23947 - 56454030126 * t23957 + 322666733610 * t23959 - 962528370804 * t23961 + 1711585318716 * t23963 - 1900756523484 * t23965 + 1300147288596 * t23967 - 491102582490 * t23969 + 56018151774 * t23971 + 23529647466 * t23973 - 85618962
            t23955 = 4 * phi1
            t23954 = 8 * phi1
            t23953 = 12 * phi1
            t23952 = 16 * phi1
            t23951 = 20 * phi1
            t23950 = -19 * phi2
            t23949 = 19 * phi2
            tfunc[..., c] = (-0.43e2 / 0.5555003326464e13*1j) * np.sqrt(0.41e2) * np.sqrt(0.3449e4) * np.sqrt(0.19e2) * np.sqrt(0.3e1) * ((1 + t23948) ** (-0.1e1 / 0.2e1)) * ((1 - t23948) ** (-0.1e1 / 0.2e1)) * ((t23976 + t23979) * np.exp((-1*1j) * (t23955 + t23949)) + (t23977 + t23980) * np.exp((-1*1j) * (t23954 + t23949)) + (-t23976 + t23979) * np.exp((1j) * (t23955 + t23950)) + (-t23977 + t23980) * np.exp((1j) * (t23954 + t23950)) + (t23978 + t23981) * np.exp((-1*1j) * (t23953 + t23949)) + (t23983 + t23985) * np.exp((-1*1j) * (t23952 + t23949)) + (t23982 - t23984) * np.exp((-1*1j) * (t23951 + t23949)) + (-t23978 + t23981) * np.exp((1j) * (t23953 + t23950)) + (t23983 - t23985) * np.exp((1j) * (t23952 + t23950)) + (t23982 + t23984) * np.exp((1j) * (t23951 + t23950)))

        if Bindx == 519:
            t24014 = np.cos(phi)
            t24013 = t24014 ** 2
            t24021 = t24013 ** 2
            t24020 = t24014 * t24013
            t24023 = t24020 ** 2
            t24025 = t24021 ** 2
            t24022 = t24014 * t24021
            t24027 = t24022 ** 2
            t24029 = t24023 ** 2
            t24024 = t24014 * t24023
            t24031 = t24024 ** 2
            t24033 = t24025 ** 2
            t24026 = t24014 * t24025
            t24035 = t24026 ** 2
            t24037 = t24027 ** 2
            t24046 = 35400 * t24013 + 51840 * t24021 - 840480 * t24023 + 387600 * t24025 + 2881840 * t24027 - 2298400 * t24029 - 1819680 * t24031 + 1152600 * t24033 + 429000 * t24035 + 19680 * t24037 + 600
            t23994 = t24014 * t24037
            t23996 = t24014 * t24035
            t23998 = t24014 * t24033
            t24000 = t24014 * t24031
            t24002 = t24014 * t24029
            t24004 = t24014 * t24027
            t24045 = 1435 * t23994 + 120740 * t23996 + 937725 * t23998 + 236640 * t24000 - 3312450 * t24002 + 716040 * t24004 + 7145 * t24014 + 85300 * t24020 - 275145 * t24022 - 897600 * t24024 + 2380170 * t24026
            t24044 = -54530 * t23994 - 2364360 * t23996 - 2251614 * t23998 + 21914752 * t24000 - 20802036 * t24002 - 11298768 * t24004 - 52326 * t24014 + 548568 * t24020 + 11286 * t24022 - 9772992 * t24024 + 24122020 * t24026
            t24043 = -25764 * t24013 + 1523040 * t24021 - 6361808 * t24023 + 3072984 * t24025 + 21797256 * t24027 - 35848592 * t24029 + 11067120 * t24031 + 10089684 * t24033 - 4744452 * t24035 - 560880 * t24037 - 8588
            t24042 = 203770 * t23994 + 2899640 * t23996 - 14254954 * t23998 + 18280512 * t24000 + 6788452 * t24002 - 37850384 * t24004 - 25986 * t24014 + 11928 * t24020 + 2697858 * t24022 - 16058496 * t24024 + 37307660 * t24026
            t24041 = -106140 * t24013 + 876960 * t24021 - 2456880 * t24023 + 1193640 * t24025 + 8258040 * t24027 - 21582960 * t24029 + 25466640 * t24031 - 16604820 * t24033 + 5809860 * t24035 - 856080 * t24037 + 1740
            t24040 = -231176 * t24013 + 2135680 * t24021 - 6618336 * t24023 + 3218288 * t24025 + 22432592 * t24027 - 50477024 * t24029 + 43929120 * t24031 - 14298264 * t24033 - 1494408 * t24035 + 1397280 * t24037 + 6248
            t24039 = 249690 * t23994 - 810840 * t23996 - 1572090 * t23998 + 12750720 * t24000 - 29560860 * t24002 + 36881040 * t24004 - 16530 * t24014 + 372360 * t24020 - 3080670 * t24022 + 12277440 * t24024 - 27490260 * t24026
            t24019 = 2 * phi1
            t24018 = 4 * phi1
            t24017 = 8 * phi1
            t24016 = -9 * phi2
            t24015 = 9 * phi2
            tfunc[..., c] = (0.43e2 / 0.28932308992e11) * np.sqrt(0.17e2) * np.sqrt(0.3449e4) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.13e2) * np.sqrt(0.31e2) * np.sqrt(0.37e2) * np.sqrt(0.19e2) * ((t24043 + t24044) * np.exp((-6*1j) * (t24019 + 3 * phi2)) + (-t24039 + t24041) * np.exp((-2*1j) * (t24019 + t24015)) + (t24040 + t24042) * np.exp((-2*1j) * (t24018 + t24015)) + (t24045 + t24046) * np.exp((-2*1j) * (t24017 + t24015)) + (t24039 + t24041) * np.exp((2*1j) * (t24019 + t24016)) + (t24040 - t24042) * np.exp((2*1j) * (t24018 + t24016)) + (-t24045 + t24046) * np.exp((2*1j) * (t24017 + t24016)) + (t24043 - t24044) * np.exp((6*1j) * (t24019 - 3 * phi2)))

        if Bindx == 520:
            t24077 = np.cos(phi)
            t24076 = t24077 ** 2
            t24085 = t24076 ** 2
            t24084 = t24077 * t24076
            t24087 = t24084 ** 2
            t24089 = t24085 ** 2
            t24086 = t24077 * t24085
            t24091 = t24086 ** 2
            t24093 = t24087 ** 2
            t24088 = t24077 * t24087
            t24095 = t24088 ** 2
            t24097 = t24089 ** 2
            t24090 = t24077 * t24089
            t24099 = t24090 ** 2
            t24101 = t24091 ** 2
            t24112 = -736320 * t24076 - 1078272 * t24085 + 17481984 * t24087 - 8062080 * t24089 - 59942272 * t24091 + 47806720 * t24093 + 37849344 * t24095 - 23974080 * t24097 - 8923200 * t24099 - 409344 * t24101 - 12480
            t24057 = t24077 * t24101
            t24059 = t24077 * t24099
            t24061 = t24077 * t24097
            t24063 = t24077 * t24095
            t24065 = t24077 * t24093
            t24067 = t24077 * t24091
            t24111 = -29848 * t24057 - 2511392 * t24059 - 19504680 * t24061 - 4922112 * t24063 + 68898960 * t24065 - 14893632 * t24067 - 148616 * t24077 - 1774240 * t24084 + 5723016 * t24086 + 18670080 * t24088 - 49507536 * t24090
            t24110 = 2710914 * t24076 + 40891344 * t24085 + 133683240 * t24087 - 40104972 * t24089 - 405505828 * t24091 - 115858808 * t24093 + 240629832 * t24095 + 126999078 * t24097 + 16120626 * t24099 + 413880 * t24101 + 20694
            t24109 = -24143 * t24057 - 3297244 * t24059 - 53669889 * t24061 - 213893184 * t24063 - 126999078 * t24065 + 347576424 * t24067 - 348349 * t24077 - 12844076 * t24084 - 90236187 * t24086 - 106946592 * t24088 + 260682318 * t24090
            t24108 = -5544006 * t24076 + 327734160 * t24085 - 1368960632 * t24087 + 661257636 * t24089 + 4690425324 * t24091 - 7714050968 * t24093 + 2381469480 * t24095 + 2171140686 * t24097 - 1020931158 * t24099 - 120692520 * t24101 - 1848002
            t24107 = 507909952 * t24076 - 4692239360 * t24085 + 14540950272 * t24087 - 7070805376 * t24089 - 49285984384 * t24091 + 110901576448 * t24093 - 96515370240 * t24095 + 31414292928 * t24097 + 3283319616 * t24099 - 3069922560 * t24101 - 13727296
            t24106 = -11733995 * t24057 - 508772940 * t24059 - 484511781 * t24061 + 4715708608 * t24063 - 4476269694 * t24065 - 2431316472 * t24067 - 11259729 * t24077 + 118043172 * t24084 + 2428569 * t24086 - 2102993568 * t24088 + 5190677830 * t24090
            t24105 = -949592124 * t24076 + 7845810336 * t24085 - 21980722608 * t24087 + 10679019624 * t24089 + 73881380664 * t24091 - 193094109936 * t24093 + 227839841424 * t24095 - 148556682612 * t24097 + 51978493476 * t24099 - 7659005328 * t24101 + 15567084
            t24104 = -447697040 * t24057 - 6370713280 * t24059 + 31319137808 * t24061 - 40163572224 * t24063 - 14914707104 * t24065 + 83159959168 * t24067 + 57093072 * t24077 - 26206656 * t24084 - 5927384016 * t24086 + 35281646592 * t24088 - 81967556320 * t24090
            t24103 = -2233876554 * t24057 + 7254261144 * t24059 + 14064860394 * t24061 - 114075591552 * t24063 + 264469190076 * t24065 - 329959912464 * t24067 + 147887298 * t24077 - 3331355976 * t24084 + 27561522222 * t24086 - 109841344704 * t24088 + 245944360116 * t24090
            t24083 = 2 * phi1
            t24082 = 4 * phi1
            t24081 = 8 * phi1
            t24080 = -9 * phi2
            t24079 = 9 * phi2
            t24078 = 10 * phi1
            tfunc[..., c] = -(0.43e2 / 0.925833887744e12) * np.sqrt(0.2e1) * np.sqrt(0.19e2) * np.sqrt(0.3449e4) * np.sqrt(0.5e1) * np.sqrt(0.41e2) * ((t24106 + t24108) * np.exp((-6*1j) * (t24083 + 3 * phi2)) + (t24103 + t24105) * np.exp((-2*1j) * (t24083 + t24079)) + (t24104 + t24107) * np.exp((-2*1j) * (t24082 + t24079)) + (t24111 + t24112) * np.exp((-2*1j) * (t24081 + t24079)) + (-t24103 + t24105) * np.exp((2*1j) * (t24083 + t24080)) + (-t24104 + t24107) * np.exp((2*1j) * (t24082 + t24080)) + (-t24111 + t24112) * np.exp((2*1j) * (t24081 + t24080)) + (-t24106 + t24108) * np.exp((6*1j) * (t24083 - 3 * phi2)) + (-t24109 + t24110) * np.exp((-2*1j) * (t24078 + t24079)) + (t24109 + t24110) * np.exp((2*1j) * (t24078 + t24080)))

        if Bindx == 521:
            t24141 = np.cos(phi)
            t24140 = t24141 ** 2
            t24149 = t24140 ** 2
            t24150 = t24141 * t24149
            t24155 = t24150 ** 2
            t24165 = t24155 ** 2
            t24121 = t24141 * t24165
            t24170 = 16745 - 55965 * t24121
            t24169 = -7947030 * t24121 + 23998
            t24168 = -9737910 * t24121 - 23490
            t24167 = -2126670 * t24121 + 155382
            t24153 = t24149 ** 2
            t24154 = t24141 * t24153
            t24163 = t24154 ** 2
            t24161 = t24153 ** 2
            t24148 = t24141 * t24140
            t24151 = t24148 ** 2
            t24152 = t24141 * t24151
            t24159 = t24152 ** 2
            t24157 = t24151 ** 2
            t24147 = 4 * phi1
            t24146 = 8 * phi1
            t24145 = 12 * phi1
            t24144 = 16 * phi1
            t24143 = -17 * phi2
            t24142 = 17 * phi2
            t24131 = t24141 * t24155
            t24129 = t24141 * t24157
            t24127 = t24141 * t24159
            t24125 = t24141 * t24161
            t24123 = t24141 * t24163
            tfunc[..., c] = (0.43e2 / 0.57864617984e11*1j) * np.sqrt(0.19e2) * np.sqrt(0.2e1) * np.sqrt(0.31e2) * np.sqrt(0.37e2) * np.sqrt(0.3449e4) * np.sqrt(0.17e2) * np.sqrt((1 + t24141)) * ((1 - t24141) ** (-0.1e1 / 0.2e1)) * ((60463260 * t24123 - 146192190 * t24125 + 148157520 * t24127 + 22325940 * t24129 - 222918360 * t24131 + 1654740 * t24140 + 200970 * t24141 - 5795940 * t24148 - 20934810 * t24149 + 42646530 * t24150 + 123978480 * t24151 - 143382960 * t24152 - 415739940 * t24153 + 254233140 * t24154 + 860663160 * t24155 - 1144591140 * t24157 + 983454960 * t24159 - 529237530 * t24161 + 162569940 * t24163 - 21794370 * t24165 + t24168) * np.exp((-1*1j) * (t24147 + t24142)) + (48309820 * t24123 - 388810058 * t24125 + 916369168 * t24127 - 987089428 * t24129 + 414441768 * t24131 + 513188 * t24140 + 806702 * t24141 - 13774852 * t24148 - 16549390 * t24149 + 81661502 * t24150 + 145745392 * t24151 - 201863792 * t24152 - 561113852 * t24153 + 122002140 * t24154 + 1122198168 * t24155 - 1196536588 * t24157 + 571890800 * t24159 + 43608058 * t24161 - 153251228 * t24163 + 43519450 * t24165 - t24169) * np.exp((-1*1j) * (t24146 + t24142)) + (2601300 * t24123 - 236809650 * t24125 + 819700080 * t24127 - 1317693300 * t24129 + 1172081400 * t24131 - 2009700 * t24140 + 153990 * t24141 - 2131500 * t24148 + 28862250 * t24149 - 7150530 * t24150 - 159474480 * t24151 + 140070000 * t24152 + 419052900 * t24153 - 580559700 * t24154 - 534336600 * t24155 + 195428100 * t24157 + 311912400 * t24159 - 438620070 * t24161 + 220431900 * t24163 - 41270190 * t24165 - t24168) * np.exp((1j) * (t24147 + t24143)) + (-151242780 * t24123 + 495759914 * t24125 - 119015312 * t24127 - 1192076652 * t24129 + 1773644184 * t24131 - 2078596 * t24140 + 758706 * t24141 - 11183068 * t24148 + 41507310 * t24149 + 23604802 * t24150 - 251011696 * t24151 + 194893296 * t24152 + 568084348 * t24153 - 1007196060 * t24154 - 237004248 * t24155 - 991549364 * t24157 + 1607275280 * t24159 - 840961914 * t24161 + 46301372 * t24163 + 59413510 * t24165 + t24169) * np.exp((1j) * (t24146 + t24143)) + (-61073220 * t24123 + 93186906 * t24125 + 278106192 * t24127 - 758019516 * t24129 + 595698792 * t24131 - 2700204 * t24140 + 369474 * t24141 - 10490052 * t24148 + 3677070 * t24149 + 67865226 * t24150 + 77146992 * t24151 - 137138352 * t24152 - 361160436 * t24153 - 66378780 * t24154 + 580392696 * t24155 - 222753492 * t24157 - 348370320 * t24159 + 362281854 * t24161 - 70137132 * t24163 - 18532410 * t24165 + t24167) * np.exp((-1*1j) * (t24145 + t24142)) + (5489640 * t24151 + 7912905 * t24150 + 2672775 * t24149 - 335190 * t24148 - 528970 * t24140 - 157575 * t24141 - 51418200 * t24159 - 25702470 * t24129 + 35225190 * t24157 + 65376220 * t24131 + 31439460 * t24155 - 21160750 * t24154 - 35662770 * t24153 - 14400360 * t24152 + 668915 * t24165 + 3453450 * t24123 + 9665110 * t24163 + 13997205 * t24125 + 2465595 * t24161 - 29039400 * t24127 - t24170) * np.exp((-1*1j) * (t24144 + t24142)) + (102391380 * t24123 + 210551958 * t24125 - 885304848 * t24127 + 291349116 * t24129 + 899176824 * t24131 + 1650492 * t24140 + 680238 * t24141 - 14840748 * t24148 + 21653730 * t24149 + 49888566 * t24150 - 194900784 * t24151 + 134909424 * t24152 + 363389364 * t24153 - 790928580 * t24154 + 276914664 * t24155 - 1272122124 * t24157 + 815040720 * t24159 + 244916802 * t24161 - 233601732 * t24163 - 22785750 * t24165 - t24167) * np.exp((1j) * (t24145 + t24143)) + (-24584040 * t24151 + 11181495 * t24150 - 595815 * t24149 - 1741770 * t24148 + 877610 * t24140 - 191065 * t24141 - 48884520 * t24159 + 126005190 * t24129 - 116482470 * t24157 + 15881060 * t24131 + 80934620 * t24155 - 91213330 * t24154 + 34389810 * t24153 + 15673320 * t24152 + 780845 * t24165 - 4903210 * t24123 + 18021770 * t24163 - 41684085 * t24125 + 58146885 * t24161 - 31573080 * t24127 + t24170) * np.exp((1j) * (t24144 + t24143)))

        if Bindx == 522:
            t24202 = np.cos(phi)
            t24201 = t24202 ** 2
            t24211 = t24201 ** 2
            t24212 = t24202 * t24211
            t24217 = t24212 ** 2
            t24218 = t24202 * t24217
            t24181 = t24218 ** 2
            t24210 = t24202 * t24201
            t24213 = t24210 ** 2
            t24215 = t24211 ** 2
            t24219 = t24213 ** 2
            t24214 = t24202 * t24213
            t24221 = t24214 ** 2
            t24223 = t24215 ** 2
            t24216 = t24202 * t24215
            t24225 = t24216 ** 2
            t24227 = t24217 ** 2
            t24239 = 89544 * t24181 - 1098472 * t24201 + 3740136 * t24211 + 21444072 * t24213 - 80101008 * t24215 + 16445936 * t24217 + 160962256 * t24219 - 123393072 * t24221 - 42518088 * t24223 + 37859704 * t24225 + 6595784 * t24227 - 26792
            t24238 = 72429 * t24181 - 6625529 * t24201 - 76867863 * t24211 - 103604511 * t24213 + 447838854 * t24215 + 376541126 * t24217 - 724117550 * t24219 - 314155614 * t24221 + 277392723 * t24223 + 114875843 * t24225 + 8708725 * t24227 - 58633
            t24182 = t24202 * t24227
            t24184 = t24202 * t24225
            t24186 = t24202 * t24223
            t24188 = t24202 * t24221
            t24190 = t24202 * t24219
            t24237 = -1159808 * t24182 - 20989696 * t24184 - 26340480 * t24186 + 128732160 * t24188 - 15236352 * t24190 + 278912 * t24202 + 1382656 * t24210 - 16937088 * t24212 + 14257152 * t24214 + 90917632 * t24216 - 154905088 * t24218
            t24236 = 1172660 * t24182 + 38932312 * t24184 + 227261508 * t24186 + 106946592 * t24188 - 721889496 * t24190 - 924332 * t24202 - 28171432 * t24210 - 131324124 * t24212 + 106946592 * t24214 + 632767336 * t24216 - 231717616 * t24218
            t24235 = -341962140 * t24182 - 2171876616 * t24184 + 7539206580 * t24186 - 1163056224 * t24188 - 16234374264 * t24190 + 8687748 * t24202 - 218333448 * t24210 + 1184213268 * t24212 - 993014880 * t24214 - 7076899128 * t24216 + 19467409104 * t24218
            t24234 = -8698113920 * t24182 + 17735666432 * t24184 + 58341008000 * t24186 - 251523996672 * t24188 + 369044625664 * t24190 - 132281216 * t24202 + 2241293056 * t24210 - 11004299648 * t24212 + 9484313600 * t24214 + 74212258048 * t24216 - 259700473344 * t24218
            t24233 = -35201985 * t24181 - 38579715 * t24201 - 112772781 * t24211 + 2400333819 * t24213 - 8248156254 * t24215 + 8508282978 * t24217 + 6173226150 * t24219 - 18313663338 * t24221 + 10600107393 * t24223 + 381534417 * t24225 - 1317682665 * t24227 + 2571981
            t24232 = -21700515096 * t24182 + 153491448240 * t24184 - 464830733304 * t24186 + 778775708736 * t24188 - 772342910640 * t24190 + 122141736 * t24202 - 2849973840 * t24210 + 14942005704 * t24212 - 13354163136 * t24214 - 111148979760 * t24216 + 438895971360 * t24218
            t24231 = 1343091120 * t24181 + 223068560 * t24201 - 5124961168 * t24211 + 38432996976 * t24213 - 128947354976 * t24215 + 210276592032 * t24217 - 132178261280 * t24219 - 70170817312 * t24221 + 162241351504 * t24223 - 91611293744 * t24225 + 15519644080 * t24227 - 4055792
            t24230 = 6701629662 * t24181 - 1277099622 * t24201 + 18396102150 * t24211 - 114671331882 * t24213 + 384788379780 * t24215 - 767271633660 * t24217 + 941120037900 * t24219 - 692178415380 * t24221 + 262259262882 * t24223 - 11271167550 * t24225 - 26611930098 * t24227 + 16165818
            t24209 = 4 * phi1
            t24208 = 8 * phi1
            t24207 = 12 * phi1
            t24206 = 16 * phi1
            t24205 = 20 * phi1
            t24204 = -17 * phi2
            t24203 = 17 * phi2
            tfunc[..., c] = (-0.43e2 / 0.5555003326464e13*1j) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.19e2) * np.sqrt(0.3449e4) * np.sqrt(0.5e1) * np.sqrt(0.13e2) * np.sqrt(0.41e2) * ((1 + t24202) ** (-0.1e1 / 0.2e1)) * ((1 - t24202) ** (-0.1e1 / 0.2e1)) * ((-t24230 + t24232) * np.exp((-1*1j) * (t24209 + t24203)) + (-t24231 + t24234) * np.exp((-1*1j) * (t24208 + t24203)) + (t24230 + t24232) * np.exp((1j) * (t24209 + t24204)) + (t24231 + t24234) * np.exp((1j) * (t24208 + t24204)) + (t24233 + t24235) * np.exp((-1*1j) * (t24207 + t24203)) + (t24237 - t24239) * np.exp((-1*1j) * (t24206 + t24203)) + (t24236 + t24238) * np.exp((-1*1j) * (t24205 + t24203)) + (-t24233 + t24235) * np.exp((1j) * (t24207 + t24204)) + (t24237 + t24239) * np.exp((1j) * (t24206 + t24204)) + (t24236 - t24238) * np.exp((1j) * (t24205 + t24204)))

        if Bindx == 523:
            t24268 = np.cos(phi)
            t24267 = t24268 ** 2
            t24273 = t24267 ** 2
            t24272 = t24268 * t24267
            t24275 = t24272 ** 2
            t24277 = t24273 ** 2
            t24274 = t24268 * t24273
            t24279 = t24274 ** 2
            t24281 = t24275 ** 2
            t24276 = t24268 * t24275
            t24283 = t24276 ** 2
            t24285 = t24277 ** 2
            t24278 = t24268 * t24277
            t24287 = t24278 ** 2
            t24289 = t24279 ** 2
            t24298 = 1105600 * t24267 - 9569280 * t24273 - 2545920 * t24275 + 108201600 * t24277 - 156800384 * t24279 - 68739840 * t24281 + 202955520 * t24283 - 31931712 * t24285 - 40389440 * t24287 - 2592512 * t24289 + 44224
            t24297 = 793440 * t24267 - 7238400 * t24273 - 14710656 * t24275 + 309664320 * t24277 - 1241580480 * t24279 + 2486279040 * t24281 - 2868021120 * t24283 + 1940640096 * t24285 - 718592160 * t24287 + 112774272 * t24289 - 8352
            t24296 = 4194112 * t24267 - 29299712 * t24273 - 35206912 * t24275 + 841303424 * t24277 - 2942140032 * t24279 + 4671177472 * t24281 - 3561569024 * t24283 + 870898496 * t24285 + 364769600 * t24287 - 184068352 * t24289 - 59072
            t24248 = t24268 * t24289
            t24250 = t24268 * t24287
            t24252 = t24268 * t24285
            t24254 = t24268 * t24283
            t24256 = t24268 * t24281
            t24258 = t24268 * t24279
            t24295 = -8081346 * t24248 - 265192044 * t24250 + 129840870 * t24252 + 1591030512 * t24254 - 2668442916 * t24256 + 1101677304 * t24258 - 84930 * t24268 - 14443116 * t24272 + 172040934 * t24274 - 617614608 * t24276 + 579269340 * t24278
            t24294 = 7407264 * t24267 - 45249792 * t24273 - 27031680 * t24275 + 817732032 * t24277 - 2161633344 * t24279 + 1841284224 * t24281 + 430106496 * t24283 - 1330474848 * t24285 + 394212000 * t24287 + 73886592 * t24289 - 238944
            t24293 = -212667 * t24248 - 13770250 * t24250 - 64987695 * t24252 + 88981128 * t24254 + 149092890 * t24256 - 225323644 * t24258 + 389429 * t24268 - 398730 * t24272 - 20702175 * t24274 + 63091080 * t24276 + 23578490 * t24278
            t24292 = -37004058 * t24248 + 136240260 * t24250 + 25373550 * t24252 - 953390544 * t24254 + 2221035180 * t24256 - 2567178600 * t24258 + 479718 * t24268 - 15209340 * t24272 + 146911854 * t24274 - 674723280 * t24276 + 1717465260 * t24278
            t24291 = -30198714 * t24248 - 302127436 * t24250 + 1640586350 * t24252 - 2683212688 * t24254 + 1288954732 * t24256 + 1150641336 * t24258 - 928538 * t24268 + 24186292 * t24272 - 224996018 * t24274 + 930575984 * t24276 - 1793481300 * t24278
            t24271 = 3 * phi1
            t24270 = -4 * phi2
            t24269 = 4 * phi2
            tfunc[..., c] = -(0.43e2 / 0.28932308992e11) * np.sqrt(0.5e1) * np.sqrt(0.17e2) * np.sqrt(0.3449e4) * np.sqrt(0.37e2) * np.sqrt(0.31e2) * ((t24291 + t24296) * np.exp((-8*1j) * (phi1 + 2 * phi2)) + (-t24292 + t24297) * np.exp((-4*1j) * (phi1 + t24269)) + (t24294 - t24295) * np.exp((-4*1j) * (t24271 + t24269)) + (t24292 + t24297) * np.exp((4*1j) * (phi1 + t24270)) + (t24294 + t24295) * np.exp((4*1j) * (t24271 + t24270)) + (-t24291 + t24296) * np.exp((8*1j) * (phi1 - 2 * phi2)) + (t24293 + t24298) * np.exp((-16*1j) * (phi1 + phi2)) + (-t24293 + t24298) * np.exp((16*1j) * (phi1 - phi2)))

        if Bindx == 524:
            t24329 = np.cos(phi)
            t24328 = t24329 ** 2
            t24335 = t24328 ** 2
            t24334 = t24329 * t24328
            t24337 = t24334 ** 2
            t24339 = t24335 ** 2
            t24336 = t24329 * t24335
            t24341 = t24336 ** 2
            t24343 = t24337 ** 2
            t24338 = t24329 * t24337
            t24345 = t24338 ** 2
            t24347 = t24339 ** 2
            t24340 = t24329 * t24339
            t24349 = t24340 ** 2
            t24351 = t24341 ** 2
            t24362 = -8844800 * t24328 + 76554240 * t24335 + 20367360 * t24337 - 865612800 * t24339 + 1254403072 * t24341 + 549918720 * t24343 - 1623644160 * t24345 + 255453696 * t24347 + 323115520 * t24349 + 20740096 * t24351 - 353792
            t24361 = 101704112 * t24328 + 931064448 * t24335 + 213893184 * t24337 - 5882062560 * t24339 - 463435232 * t24341 + 8341834176 * t24343 + 213893184 * t24345 - 2834084688 * t24347 - 602885200 * t24349 - 20969920 * t24351 + 1048496
            t24309 = t24329 * t24351
            t24311 = t24329 * t24349
            t24313 = t24329 * t24347
            t24315 = t24329 * t24345
            t24317 = t24329 * t24343
            t24319 = t24329 * t24341
            t24360 = -1701336 * t24309 - 110162000 * t24311 - 519901560 * t24313 + 711849024 * t24315 + 1192743120 * t24317 - 1802589152 * t24319 + 3115432 * t24329 - 3189840 * t24334 - 165617400 * t24336 + 504728640 * t24338 + 188627920 * t24340
            t24359 = -1376151 * t24309 - 145609882 * t24311 - 1622088843 * t24313 - 2753874744 * t24315 + 5247067170 * t24317 + 5966728612 * t24319 + 15399785 * t24329 + 391220070 * t24334 + 1246596213 * t24336 - 2753874744 * t24338 - 5590187486 * t24340
            t24358 = 613048560 * t24328 - 3745015680 * t24335 - 2237227200 * t24337 + 67678085280 * t24339 - 178903601760 * t24341 + 152390496960 * t24343 + 35596971840 * t24345 - 110114299920 * t24347 + 32626230000 * t24349 + 6115087680 * t24351 - 19775760
            t24357 = -3544138240 * t24328 + 24759050240 * t24335 + 29750794240 * t24337 - 710924180480 * t24339 + 2486188016640 * t24341 - 3947271485440 * t24343 + 3009622292480 * t24345 - 735932817920 * t24347 - 308240192000 * t24349 + 155542743040 * t24351 + 49917440
            t24356 = -668837715 * t24309 - 21948131010 * t24311 + 10746040425 * t24313 + 131678709480 * t24315 - 220848762390 * t24317 + 91178292660 * t24319 - 7029075 * t24329 - 1195357890 * t24334 + 14238650985 * t24336 - 51115735320 * t24338 + 47942159850 * t24340
            t24355 = 2730227040 * t24328 - 24907334400 * t24335 - 50619367296 * t24337 + 1065554925120 * t24339 - 4272278431680 * t24341 + 8555286176640 * t24343 - 9868860673920 * t24345 + 6677742570336 * t24347 - 2472675622560 * t24349 + 388056269952 * t24351 - 28739232
            t24354 = -25518731280 * t24309 - 255305866720 * t24311 + 1386339902000 * t24313 - 2267387397760 * t24315 + 1089201660640 * t24317 + 972323094720 * t24319 - 784639760 * t24329 + 20438071840 * t24334 - 190127729360 * t24336 + 786361911680 * t24338 - 1515540276000 * t24340
            t24353 = -127330963578 * t24309 + 468802734660 * t24311 + 87310385550 * t24313 - 3280616861904 * t24315 + 7642582054380 * t24317 - 8833661562600 * t24319 + 1650709638 * t24329 - 52335338940 * t24334 + 505523689614 * t24336 - 2321722806480 * t24338 + 5909797959660 * t24340
            t24333 = 3 * phi1
            t24332 = 5 * phi1
            t24331 = -4 * phi2
            t24330 = 4 * phi2
            tfunc[..., c] = (0.43e2 / 0.2777501663232e13) * np.sqrt(0.3e1) * np.sqrt(0.3449e4) * np.sqrt(0.41e2) * np.sqrt(0.13e2) * ((-t24354 + t24357) * np.exp((-8*1j) * (phi1 + 2 * phi2)) + (-t24353 + t24355) * np.exp((-4*1j) * (phi1 + t24330)) + (-t24356 + t24358) * np.exp((-4*1j) * (t24333 + t24330)) + (t24359 + t24361) * np.exp((-4*1j) * (t24332 + t24330)) + (t24353 + t24355) * np.exp((4*1j) * (phi1 + t24331)) + (t24356 + t24358) * np.exp((4*1j) * (t24333 + t24331)) + (-t24359 + t24361) * np.exp((4*1j) * (t24332 + t24331)) + (t24354 + t24357) * np.exp((8*1j) * (phi1 - 2 * phi2)) + (-t24360 + t24362) * np.exp((-16*1j) * (phi1 + phi2)) + (t24360 + t24362) * np.exp((16*1j) * (phi1 - phi2)))

        if Bindx == 525:
            t24392 = np.cos(phi)
            t24391 = t24392 ** 2
            t24399 = t24391 ** 2
            t24400 = t24392 * t24399
            t24405 = t24400 ** 2
            t24415 = t24405 ** 2
            t24372 = t24392 * t24415
            t24403 = t24399 ** 2
            t24404 = t24392 * t24403
            t24413 = t24404 ** 2
            t24374 = t24392 * t24413
            t24411 = t24403 ** 2
            t24376 = t24392 * t24411
            t24398 = t24392 * t24391
            t24401 = t24398 ** 2
            t24402 = t24392 * t24401
            t24409 = t24402 ** 2
            t24378 = t24392 * t24409
            t24407 = t24401 ** 2
            t24380 = t24392 * t24407
            t24406 = t24392 * t24405
            t24425 = -1303952520 * t24372 + 8714219280 * t24374 - 25045545384 * t24376 + 40301479104 * t24378 - 39550749840 * t24380 - 66120 * t24392 + 5867280 * t24398 - 177047784 * t24400 + 1833280704 * t24402 - 8905869840 * t24404 + 24128385120 * t24406
            t24424 = 29975920 * t24372 + 367022240 * t24374 - 248332752 * t24376 - 1725291648 * t24378 + 2383859680 * t24380 + 2578160 * t24392 - 21519200 * t24398 - 51708240 * t24400 + 643693440 * t24402 - 1262528800 * t24404 - 117748800 * t24406
            t24423 = 2128290320 * t24372 - 6166850976 * t24374 - 2726069424 * t24376 + 33105248384 * t24378 - 56781099232 * t24380 + 635024 * t24392 + 265824 * t24398 - 475071792 * t24400 + 4983195776 * t24402 - 21320177632 * t24404 + 47251633728 * t24406
            t24422 = -854313720 * t24372 - 2914390544 * t24374 + 16037640232 * t24376 - 17761052864 * t24378 - 4504384112 * t24380 + 6552264 * t24392 - 47004176 * t24398 - 440561816 * t24400 + 4849309504 * t24402 - 16064378096 * t24404 + 21692583328 * t24406
            t24371 = t24406 ** 2
            t24421 = 2622893 * t24371 + 3291039 * t24391 - 83014495 * t24399 + 278549505 * t24401 + 164112390 * t24403 - 1858942826 * t24405 + 2307369506 * t24407 + 86103810 * t24409 - 1458037725 * t24411 + 412242715 * t24413 + 145337517 * t24415 + 365671
            t24420 = -99669934 * t24371 + 43590902 * t24391 - 559207126 * t24399 + 2537260570 * t24401 - 3201925220 * t24403 - 7858772324 * t24405 + 28843485268 * t24407 - 32029674764 * t24409 + 10382984302 * t24411 + 4684647182 * t24413 - 2741791390 * t24415 - 927466
            t24419 = -456383382 * t24371 + 18985662 * t24391 - 350830110 * t24399 + 2583123090 * t24401 - 9912388500 * t24403 + 22069758060 * t24405 - 29414054460 * t24407 + 22412931300 * t24409 - 7407965610 * t24411 - 1541868810 * t24413 + 1998863802 * t24415 - 171042
            t24418 = 372450806 * t24371 + 40632306 * t24391 - 606305778 * t24399 + 3652430990 * t24401 - 10271383980 * t24403 + 11318988980 * t24405 + 7686171740 * t24407 - 35373476580 * t24409 + 39345583082 * t24411 - 18987204678 * t24413 + 2822580150 * t24415 - 467038
            t24397 = 4 * phi1
            t24396 = 8 * phi1
            t24395 = 16 * phi1
            t24394 = -15 * phi2
            t24393 = 15 * phi2
            tfunc[..., c] = (0.43e2 / 0.57864617984e11*1j) * np.sqrt(0.3e1) * np.sqrt(0.2e1) * np.sqrt(0.31e2) * np.sqrt(0.3449e4) * np.sqrt(0.17e2) * np.sqrt(0.5e1) * ((1 + t24392) ** (-0.1e1 / 0.2e1)) * ((1 - t24392) ** (-0.1e1 / 0.2e1)) * ((t24420 + t24422) * np.exp((-3*1j) * (t24397 + 5 * phi2)) + (-t24420 + t24422) * np.exp((3*1j) * (t24397 - 5 * phi2)) + (t24419 + t24425) * np.exp((-1*1j) * (t24397 + t24393)) + (t24418 + t24423) * np.exp((-1*1j) * (t24396 + t24393)) + (-t24419 + t24425) * np.exp((1j) * (t24397 + t24394)) + (-t24418 + t24423) * np.exp((1j) * (t24396 + t24394)) + (t24421 + t24424) * np.exp((-1*1j) * (t24395 + t24393)) + (-t24421 + t24424) * np.exp((1j) * (t24395 + t24394)))

        if Bindx == 526:
            t24457 = np.cos(phi)
            t24456 = t24457 ** 2
            t24464 = t24456 ** 2
            t24465 = t24457 * t24464
            t24470 = t24465 ** 2
            t24480 = t24470 ** 2
            t24437 = t24457 * t24480
            t24468 = t24464 ** 2
            t24469 = t24457 * t24468
            t24478 = t24469 ** 2
            t24439 = t24457 * t24478
            t24476 = t24468 ** 2
            t24441 = t24457 * t24476
            t24463 = t24457 * t24456
            t24466 = t24463 ** 2
            t24467 = t24457 * t24466
            t24474 = t24467 ** 2
            t24443 = t24457 * t24474
            t24472 = t24466 ** 2
            t24445 = t24457 * t24472
            t24471 = t24457 * t24470
            t24492 = -6481280 * t24437 - 79356160 * t24439 + 53693568 * t24441 + 373036032 * t24443 - 515429120 * t24445 - 557440 * t24457 + 4652800 * t24463 + 11180160 * t24465 - 139176960 * t24467 + 272979200 * t24469 + 25459200 * t24471
            t24491 = 6553100 * t24437 + 154653160 * t24439 + 426999996 * t24441 - 962519328 * t24443 - 1131851432 * t24445 + 4456108 * t24457 + 87549416 * t24463 + 68414364 * t24465 - 962519328 * t24467 + 222805400 * t24469 + 2085458544 * t24471
            t24436 = t24471 ** 2
            t24490 = 567112 * t24436 + 711576 * t24456 - 17949080 * t24464 + 60226920 * t24466 + 35483760 * t24468 - 401933584 * t24470 + 498890704 * t24472 + 18617040 * t24474 - 315251400 * t24476 + 89133560 * t24478 + 31424328 * t24480 + 79064
            t24489 = -458717 * t24436 - 26540055 * t24456 - 156946745 * t24464 + 370970991 * t24466 + 942466842 * t24468 - 1766846822 * t24470 - 666188146 * t24472 + 1704461310 * t24474 - 10026243 * t24476 - 348690451 * t24478 - 41874309 * t24480 - 327655
            t24488 = -1910964900 * t24437 - 6519031480 * t24439 + 35873668940 * t24441 - 39728670880 * t24443 - 10075596040 * t24445 + 14656380 * t24457 - 105140920 * t24463 - 985467220 * t24465 + 10847139680 * t24467 - 35933477320 * t24469 + 48522883760 * t24471
            t24487 = -48607107200 * t24437 + 140842056960 * t24439 + 62259527040 * t24441 - 756076528640 * t24443 + 1296799102720 * t24445 - 14503040 * t24457 - 6071040 * t24463 + 10849960320 * t24465 - 113809064960 * t24467 + 486922366720 * t24469 - 1079159738880 * t24471
            t24486 = -121267584360 * t24437 + 810422393040 * t24439 - 2329235720712 * t24441 + 3748037556672 * t24443 - 3678219735120 * t24445 - 6149160 * t24457 + 545657040 * t24463 - 16465443912 * t24465 + 170495105472 * t24467 - 828245895120 * t24469 + 2243939816160 * t24471
            t24485 = 222945905 * t24436 - 97505965 * t24456 + 1250858045 * t24464 - 5675451275 * t24466 + 7162201150 * t24468 + 17578832830 * t24470 - 64518322310 * t24472 + 71645325130 * t24474 - 23225096465 * t24476 - 10478816065 * t24478 + 6132954425 * t24480 + 2074595
            t24484 = 8506243760 * t24436 + 927983760 * t24456 - 13847156880 * t24464 + 83416300400 * t24466 - 234583720800 * t24468 + 258509520800 * t24470 + 175541170400 * t24472 - 807879616800 * t24474 + 898596848720 * t24476 - 433640600880 * t24478 + 64463694000 * t24480 - 10666480
            t24483 = -42443654526 * t24436 + 1765666566 * t24456 - 32627200230 * t24464 + 240230447370 * t24466 - 921852130500 * t24468 + 2052487499580 * t24470 - 2735507064780 * t24472 + 2084402610900 * t24474 - 688940801730 * t24476 - 143393799330 * t24478 + 185894333586 * t24480 - 15906906
            t24462 = 4 * phi1
            t24461 = 8 * phi1
            t24460 = 16 * phi1
            t24459 = -15 * phi2
            t24458 = 15 * phi2
            tfunc[..., c] = (-0.43e2 / 0.1851667775488e13*1j) * np.sqrt(0.2e1) * np.sqrt(0.3449e4) * np.sqrt(0.13e2) * np.sqrt(0.41e2) * np.sqrt(0.37e2) * ((1 + t24457) ** (-0.1e1 / 0.2e1)) * ((1 - t24457) ** (-0.1e1 / 0.2e1)) * ((-t24489 + t24491) * np.exp((-5*1j) * (t24462 + 3 * phi2)) + (-t24485 + t24488) * np.exp((-3*1j) * (t24462 + 5 * phi2)) + (t24485 + t24488) * np.exp((3*1j) * (t24462 - 5 * phi2)) + (t24489 + t24491) * np.exp((5*1j) * (t24462 - 3 * phi2)) + (t24483 + t24486) * np.exp((-1*1j) * (t24462 + t24458)) + (-t24484 + t24487) * np.exp((-1*1j) * (t24461 + t24458)) + (-t24483 + t24486) * np.exp((1j) * (t24462 + t24459)) + (t24484 + t24487) * np.exp((1j) * (t24461 + t24459)) + (-t24490 + t24492) * np.exp((-1*1j) * (t24460 + t24458)) + (t24490 + t24492) * np.exp((1j) * (t24460 + t24459)))

        if Bindx == 527:
            t24521 = np.cos(phi)
            t24520 = t24521 ** 2
            t24529 = t24520 ** 2
            t24528 = t24521 * t24520
            t24531 = t24528 ** 2
            t24533 = t24529 ** 2
            t24530 = t24521 * t24529
            t24535 = t24530 ** 2
            t24537 = t24531 ** 2
            t24532 = t24521 * t24531
            t24539 = t24532 ** 2
            t24541 = t24533 ** 2
            t24534 = t24521 * t24533
            t24543 = t24534 ** 2
            t24545 = t24535 ** 2
            t24554 = 3324012 * t24520 - 93273888 * t24529 + 772951920 * t24531 - 2617976712 * t24533 + 3498616680 * t24535 + 465881520 * t24537 - 5833565136 * t24539 + 5027223300 * t24541 - 881401716 * t24543 - 341725488 * t24545 - 54492
            t24553 = 1116500 * t24520 - 27315680 * t24529 + 288510096 * t24531 - 1596028920 * t24533 + 5053093400 * t24535 - 9649592240 * t24537 + 11327123920 * t24539 - 8007983556 * t24541 + 3132666420 * t24543 - 521581008 * t24545 - 8932
            t24552 = 3728920 * t24520 - 82346368 * t24529 + 788227232 * t24531 - 3720103504 * t24533 + 9383277072 * t24535 - 12735243872 * t24537 + 8058572704 * t24539 - 175126328 * t24541 - 2372265064 * t24543 + 851316128 * t24545 - 36920
            t24551 = -501720 * t24520 - 15036800 * t24529 + 103357280 * t24531 - 161577520 * t24533 - 185388944 * t24535 + 658084960 * t24537 - 399842720 * t24539 - 132185608 * t24541 + 121000360 * t24543 + 11990368 * t24545 + 100344
            t24501 = t24521 * t24545
            t24503 = t24521 * t24543
            t24505 = t24521 * t24541
            t24507 = t24521 * t24539
            t24509 = t24521 * t24537
            t24511 = t24521 * t24535
            t24550 = -1124097 * t24501 - 53554540 * t24503 - 106086215 * t24505 + 455677792 * t24507 - 179371930 * t24509 - 425138584 * t24511 - 508491 * t24521 + 8170340 * t24528 - 19665685 * t24530 - 91582400 * t24532 + 413183810 * t24534
            t24549 = -195592878 * t24501 + 795093000 * t24503 - 683168370 * t24505 - 1805824896 * t24507 + 5157075220 * t24509 - 5799394480 * t24511 + 477398 * t24521 - 19565720 * t24528 + 231690106 * t24530 - 1240077120 * t24532 + 3559287740 * t24534
            t24548 = -42715686 * t24501 - 1004339544 * t24503 + 1849436934 * t24505 + 2262701184 * t24507 - 7854275100 * t24509 + 7055232912 * t24511 + 2128494 * t24521 - 39518328 * t24528 + 198607266 * t24530 - 17689152 * t24532 - 2409568980 * t24534
            t24547 = -159621774 * t24501 - 1001853736 * t24503 + 6316090846 * t24505 - 12064215488 * t24507 + 10374220948 * t24509 - 3308135376 * t24511 - 1105754 * t24521 + 35480120 * t24528 - 310085542 * t24530 + 1063177856 * t24532 - 943952100 * t24534
            t24527 = 2 * phi1
            t24526 = 4 * phi1
            t24525 = 6 * phi1
            t24524 = 8 * phi1
            t24523 = -7 * phi2
            t24522 = 7 * phi2
            tfunc[..., c] = (0.43e2 / 0.28932308992e11) * np.sqrt(0.5e1) * np.sqrt(0.17e2) * np.sqrt(0.3449e4) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.31e2) * np.sqrt(0.7e1) * ((t24549 + t24553) * np.exp((-2*1j) * (t24527 + t24522)) + (-t24547 + t24552) * np.exp((-2*1j) * (t24526 + t24522)) + (t24548 + t24554) * np.exp((-2*1j) * (t24525 + t24522)) + (-t24550 + t24551) * np.exp((-2*1j) * (t24524 + t24522)) + (-t24549 + t24553) * np.exp((2*1j) * (t24527 + t24523)) + (t24547 + t24552) * np.exp((2*1j) * (t24526 + t24523)) + (-t24548 + t24554) * np.exp((2*1j) * (t24525 + t24523)) + (t24550 + t24551) * np.exp((2*1j) * (t24524 + t24523)))

        if Bindx == 528:
            t24585 = np.cos(phi)
            t24584 = t24585 ** 2
            t24594 = t24584 ** 2
            t24593 = t24585 * t24584
            t24596 = t24593 ** 2
            t24598 = t24594 ** 2
            t24595 = t24585 * t24594
            t24600 = t24595 ** 2
            t24602 = t24596 ** 2
            t24597 = t24585 * t24596
            t24604 = t24597 ** 2
            t24606 = t24598 ** 2
            t24599 = t24585 * t24598
            t24608 = t24599 ** 2
            t24610 = t24600 ** 2
            t24621 = 108480 * t24584 + 3251200 * t24594 - 22347520 * t24596 + 34935680 * t24598 + 40084096 * t24600 - 142288640 * t24602 + 86452480 * t24604 + 28580672 * t24606 - 26162240 * t24608 - 2592512 * t24610 - 21696
            t24620 = 8781154 * t24584 + 32503376 * t24594 - 151507672 * t24596 - 111402700 * t24598 + 521364636 * t24600 - 115858808 * t24602 - 329751992 * t24604 + 91350214 * t24606 + 51769490 * t24608 + 2621240 * t24610 + 131062
            t24565 = t24585 * t24610
            t24567 = t24585 * t24608
            t24569 = t24585 * t24606
            t24571 = t24585 * t24604
            t24573 = t24585 * t24602
            t24575 = t24585 * t24600
            t24619 = -243048 * t24565 - 11579360 * t24567 - 22937560 * t24569 + 98524928 * t24571 - 38783120 * t24573 - 91921856 * t24575 - 109944 * t24585 + 1766560 * t24593 - 4252040 * t24595 - 19801600 * t24597 + 89337040 * t24599
            t24618 = 7435290 * t24584 - 208638960 * t24594 + 1728971400 * t24596 - 5856000540 * t24598 + 7825853100 * t24600 + 1042103400 * t24602 - 13048764120 * t24604 + 11245104750 * t24606 - 1971556470 * t24608 - 764385960 * t24610 - 121890
            t24617 = 196593 * t24565 + 15465316 * t24567 + 101507519 * t24569 - 71297728 * t24571 - 412189990 * t24573 + 347576424 * t24575 + 1638275 * t24585 + 24901780 * t24593 - 18938459 * t24595 - 249542048 * t24597 + 260682318 * t24599
            t24616 = -85163200 * t24584 + 1880673280 * t24594 - 18001982720 * t24596 + 84961843840 * t24598 - 214300629120 * t24600 + 290854757120 * t24602 - 184046275840 * t24604 + 3999634880 * t24606 + 54179141440 * t24608 - 19442842880 * t24610 + 843200
            t24615 = 95548245 * t24565 + 2246548980 * t24567 - 4136898405 * t24569 - 5061305280 * t24571 + 17568773250 * t24573 - 15781442040 * t24575 - 4761105 * t24585 + 88396260 * t24593 - 444253095 * t24595 + 39567840 * t24597 + 5389825350 * t24599
            t24614 = 103834500 * t24584 - 2540358240 * t24594 + 26831438928 * t24596 - 148430689560 * t24598 + 469937686200 * t24600 - 897412078320 * t24602 + 1053422524560 * t24604 - 744742470708 * t24606 + 291337977060 * t24608 - 48507033744 * t24610 - 830676
            t24613 = -3645533040 * t24565 - 22880906560 * t24567 + 144250482160 * t24569 - 275529428480 * t24571 + 236932370080 * t24573 - 75553080960 * t24575 - 25253840 * t24585 + 810315200 * t24593 - 7081910320 * t24595 + 24281461760 * t24597 - 21558516000 * t24599
            t24612 = 18190137654 * t24565 - 73943649000 * t24567 + 63534658410 * t24569 + 167941715328 * t24571 - 479607995460 * t24573 + 539343686640 * t24575 - 44398014 * t24585 + 1819611960 * t24593 - 21547179858 * t24595 + 115327172160 * t24597 - 331013759820 * t24599
            t24592 = 2 * phi1
            t24591 = 4 * phi1
            t24590 = 6 * phi1
            t24589 = 8 * phi1
            t24588 = -7 * phi2
            t24587 = 7 * phi2
            t24586 = 10 * phi1
            tfunc[..., c] = -(0.43e2 / 0.925833887744e12) * np.sqrt(0.2e1) * np.sqrt(0.3449e4) * np.sqrt(0.37e2) * np.sqrt(0.41e2) * np.sqrt(0.13e2) * np.sqrt(0.7e1) * ((-t24612 + t24614) * np.exp((-2*1j) * (t24592 + t24587)) + (t24613 + t24616) * np.exp((-2*1j) * (t24591 + t24587)) + (-t24615 + t24618) * np.exp((-2*1j) * (t24590 + t24587)) + (t24619 + t24621) * np.exp((-2*1j) * (t24589 + t24587)) + (t24612 + t24614) * np.exp((2*1j) * (t24592 + t24588)) + (-t24613 + t24616) * np.exp((2*1j) * (t24591 + t24588)) + (t24615 + t24618) * np.exp((2*1j) * (t24590 + t24588)) + (-t24619 + t24621) * np.exp((2*1j) * (t24589 + t24588)) + (t24617 + t24620) * np.exp((-2*1j) * (t24586 + t24587)) + (-t24617 + t24620) * np.exp((2*1j) * (t24586 + t24588)))

        if Bindx == 529:
            t24651 = np.cos(phi)
            t24650 = t24651 ** 2
            t24659 = t24650 ** 2
            t24660 = t24651 * t24659
            t24665 = t24660 ** 2
            t24675 = t24665 ** 2
            t24631 = t24651 * t24675
            t24663 = t24659 ** 2
            t24664 = t24651 * t24663
            t24673 = t24664 ** 2
            t24633 = t24651 * t24673
            t24671 = t24663 ** 2
            t24635 = t24651 * t24671
            t24658 = t24651 * t24650
            t24661 = t24658 ** 2
            t24662 = t24651 * t24661
            t24669 = t24662 ** 2
            t24637 = t24651 * t24669
            t24667 = t24661 ** 2
            t24639 = t24651 * t24667
            t24666 = t24651 * t24665
            t24685 = 389686960 * t24631 + 2775331520 * t24633 - 7840954160 * t24635 - 1789781760 * t24637 + 19838056160 * t24639 - 5727600 * t24651 + 182845120 * t24658 - 1205457040 * t24660 + 1894447360 * t24662 + 4910124960 * t24664 - 19148571520 * t24666
            t24684 = -11106078360 * t24631 - 9318270624 * t24633 + 144488686680 * t24635 - 270927810816 * t24637 + 188034132624 * t24639 - 32952840 * t24651 + 900499680 * t24658 - 8699928696 * t24660 + 36615121920 * t24662 - 63666826704 * t24664 - 6286572864 * t24666
            t24683 = -16951382760 * t24631 + 107496573600 * t24633 - 293894828760 * t24635 + 452510506240 * t24637 - 430097434000 * t24639 - 4267640 * t24651 + 205389600 * t24658 - 3149503240 * t24660 + 23498741760 * t24662 - 99880721200 * t24664 + 260266926400 * t24666
            t24682 = 27667774160 * t24631 - 100953634496 * t24633 + 87975708080 * t24635 + 131928333056 * t24637 - 360942590944 * t24639 - 16820752 * t24651 + 672889152 * t24658 - 8692282352 * t24660 + 54030795520 * t24662 - 183226664608 * t24664 + 351556493184 * t24666
            t24630 = t24666 ** 2
            t24681 = 39343395 * t24630 + 40165905 * t24650 + 3364595 * t24659 - 1921145265 * t24661 + 8227125010 * t24663 - 11213528950 * t24665 - 2232729850 * t24667 + 18075692510 * t24669 - 12903151895 * t24671 + 335130645 * t24673 + 1551847895 * t24675 - 2113995
            t24680 = 6845750730 * t24630 - 61392130 * t24650 + 1381805050 * t24659 - 11928611470 * t24661 + 51691093500 * t24663 - 125444583700 * t24665 + 173428470900 * t24667 - 121019908700 * t24669 + 8723125470 * t24671 + 48815652150 * t24673 - 32431843470 * t24675 + 441670
            t24679 = -5586762090 * t24630 - 93195310 * t24650 + 1494818806 * t24659 - 7028052434 * t24661 + 1061475844 * t24663 + 89744807412 * t24665 - 319450207700 * t24667 + 525535779548 * t24669 - 458636804158 * t24671 + 195855916698 * t24673 - 22898587010 * t24675 + 810394
            t24678 = -1495049010 * t24630 + 110594250 * t24650 - 545561250 * t24659 - 5378060922 * t24661 + 52730369172 * t24663 - 175011048732 * t24665 + 272895820860 * t24667 - 176003163828 * t24669 - 26148773142 * t24671 + 86991816882 * t24673 - 28145469690 * t24675 - 1474590
            t24657 = 4 * phi1
            t24656 = 8 * phi1
            t24655 = 12 * phi1
            t24654 = 16 * phi1
            t24653 = -13 * phi2
            t24652 = 13 * phi2
            tfunc[..., c] = (0.43e2 / 0.57864617984e11*1j) * np.sqrt(0.17e2) * np.sqrt(0.3449e4) * np.sqrt(0.3e1) * np.sqrt(0.31e2) * ((-t24680 + t24683) * np.exp((-1*1j) * (t24657 + t24652)) + (-t24679 + t24682) * np.exp((-1*1j) * (t24656 + t24652)) + (t24680 + t24683) * np.exp((1j) * (t24657 + t24653)) + (t24679 + t24682) * np.exp((1j) * (t24656 + t24653)) + (t24678 + t24684) * np.exp((-1*1j) * (t24655 + t24652)) + (t24681 + t24685) * np.exp((-1*1j) * (t24654 + t24652)) + (-t24678 + t24684) * np.exp((1j) * (t24655 + t24653)) + (-t24681 + t24685) * np.exp((1j) * (t24654 + t24653))) * ((1 + t24651) ** (-0.1e1 / 0.2e1)) * ((1 - t24651) ** (-0.1e1 / 0.2e1))

        if Bindx == 530:
            t24717 = np.cos(phi)
            t24716 = t24717 ** 2
            t24726 = t24716 ** 2
            t24727 = t24717 * t24726
            t24732 = t24727 ** 2
            t24742 = t24732 ** 2
            t24697 = t24717 * t24742
            t24730 = t24726 ** 2
            t24731 = t24717 * t24730
            t24740 = t24731 ** 2
            t24699 = t24717 * t24740
            t24738 = t24730 ** 2
            t24701 = t24717 * t24738
            t24725 = t24717 * t24716
            t24728 = t24725 ** 2
            t24729 = t24717 * t24728
            t24736 = t24729 ** 2
            t24703 = t24717 * t24736
            t24734 = t24728 ** 2
            t24705 = t24717 * t24734
            t24733 = t24717 * t24732
            t24754 = 16851328 * t24697 + 120014336 * t24699 - 339068288 * t24701 - 77395968 * t24703 + 857861888 * t24705 - 247680 * t24717 + 7906816 * t24725 - 52127872 * t24727 + 81922048 * t24729 + 212329728 * t24731 - 828046336 * t24733
            t24696 = t24733 ** 2
            t24753 = -1701336 * t24696 - 1736904 * t24716 - 145496 * t24726 + 83076552 * t24728 - 355767568 * t24730 + 484909360 * t24732 + 96550480 * t24734 - 781651568 * t24736 + 557974136 * t24738 - 14492136 * t24740 - 67106936 * t24742 + 91416
            t24752 = -17038060 * t24697 - 258978512 * t24699 + 44298956 * t24701 + 1853740928 * t24703 - 1969599736 * t24705 + 9698588 * t24717 + 97510128 * t24725 - 374575196 * t24727 - 570381824 * t24729 + 2575630424 * t24731 - 1390305696 * t24733
            t24751 = 4968508740 * t24697 + 4168700016 * t24699 - 64639675620 * t24701 + 121204546944 * t24703 - 84120533016 * t24705 + 14742060 * t24717 - 402855120 * t24725 + 3892073364 * t24727 - 16380449280 * t24729 + 28482527736 * t24731 + 2812414176 * t24733
            t24750 = -1376151 * t24696 + 45150859 * t24716 + 26408993 * t24726 - 883423411 * t24728 + 1071693974 * t24730 + 1650988014 * t24732 - 3273011326 * t24734 + 692924794 * t24736 + 1124053243 * t24738 - 363500457 * t24740 - 90760435 * t24742 + 851903
            t24749 = 126378478720 * t24697 - 461127327232 * t24699 + 401847871360 * t24701 + 602610890752 * t24703 - 1648682517248 * t24705 - 76832384 * t24717 + 3073565184 * t24725 - 39703859584 * t24727 + 246797219840 * t24729 - 836926996736 * t24731 + 1605809507328 * t24733
            t24748 = -668837715 * t24696 + 49476375 * t24716 - 244066875 * t24726 - 2405974623 * t24728 + 23589901998 * t24730 - 78294416538 * t24732 + 122084972490 * t24734 - 78738257502 * t24736 - 11698135353 * t24738 + 38917391763 * t24740 - 12591394335 * t24742 - 659685
            t24747 = 315295719336 * t24697 - 1999436268960 * t24699 + 5466443814936 * t24701 - 8416695416064 * t24703 + 7999812272400 * t24705 + 79378104 * t24717 - 3820246560 * t24725 + 58580760264 * t24727 - 437076596736 * t24729 + 1857781414320 * t24731 - 4840964831040 * t24733
            t24746 = -25518731280 * t24696 - 425689520 * t24716 + 6827904752 * t24726 - 32102133328 * t24728 + 4848518048 * t24730 + 409928611104 * t24732 - 1459157178400 * t24734 + 2400497125216 * t24736 - 2094921740336 * t24738 + 894613808016 * t24740 - 104594195920 * t24742 + 3701648
            t24745 = -127330963578 * t24696 + 1141893618 * t24716 - 25701573930 * t24726 + 221872173342 * t24728 - 961454339100 * t24730 + 2333269256820 * t24732 - 3225769558740 * t24734 + 2250970301820 * t24736 - 162250133742 * t24738 - 907971129990 * t24740 + 603232288542 * t24742 - 8215062
            t24724 = 4 * phi1
            t24723 = 8 * phi1
            t24722 = 12 * phi1
            t24721 = 16 * phi1
            t24720 = 20 * phi1
            t24719 = -13 * phi2
            t24718 = 13 * phi2
            tfunc[..., c] = (0.43e2 / 0.1851667775488e13*1j) * np.sqrt(0.3449e4) * np.sqrt(0.5e1) * np.sqrt(0.13e2) * np.sqrt(0.37e2) * np.sqrt(0.41e2) * ((-t24745 + t24747) * np.exp((-1*1j) * (t24724 + t24718)) + (-t24746 + t24749) * np.exp((-1*1j) * (t24723 + t24718)) + (t24745 + t24747) * np.exp((1j) * (t24724 + t24719)) + (t24746 + t24749) * np.exp((1j) * (t24723 + t24719)) + (-t24748 + t24751) * np.exp((-1*1j) * (t24722 + t24718)) + (-t24753 + t24754) * np.exp((-1*1j) * (t24721 + t24718)) + (t24750 + t24752) * np.exp((-1*1j) * (t24720 + t24718)) + (t24748 + t24751) * np.exp((1j) * (t24722 + t24719)) + (t24753 + t24754) * np.exp((1j) * (t24721 + t24719)) + (-t24750 + t24752) * np.exp((1j) * (t24720 + t24719))) * ((1 + t24717) ** (-0.1e1 / 0.2e1)) * ((1 - t24717) ** (-0.1e1 / 0.2e1))

        if Bindx == 531:
            t24783 = np.cos(phi)
            t24782 = t24783 ** 2
            t24789 = t24782 ** 2
            t24788 = t24783 * t24782
            t24791 = t24788 ** 2
            t24793 = t24789 ** 2
            t24790 = t24783 * t24789
            t24795 = t24790 ** 2
            t24797 = t24791 ** 2
            t24792 = t24783 * t24791
            t24799 = t24792 ** 2
            t24801 = t24793 ** 2
            t24794 = t24783 * t24793
            t24803 = t24794 ** 2
            t24805 = t24795 ** 2
            t24814 = 204349520 * t24782 - 1248338560 * t24789 - 745742400 * t24791 + 22559361760 * t24793 - 59634533920 * t24795 + 50796832320 * t24797 + 11865657280 * t24799 - 36704766640 * t24801 + 10875410000 * t24803 + 2038362560 * t24805 - 6591920
            t24813 = 734394840 * t24782 - 9857917440 * t24789 + 46753400928 * t24791 - 59233986864 * t24793 - 197947574448 * t24795 + 779349883936 * t24797 - 1033451523360 * t24799 + 542810691288 * t24801 - 11075517544 * t24803 - 58093332960 * t24805 - 8441320
            t24812 = 493265968 * t24782 - 10425617280 * t24789 + 86609180736 * t24791 - 360743636448 * t24793 + 805410183968 * t24795 - 898331710016 * t24797 + 234702212160 * t24799 + 501804958512 * t24801 - 504238695376 * t24803 + 144723741760 * t24805 - 3883984
            t24811 = 151863720 * t24782 - 3907399680 * t24789 + 40383799200 * t24791 - 218310693840 * t24793 + 692057584560 * t24795 - 1353129054240 * t24797 + 1650899792160 * t24799 - 1223914917720 * t24801 + 504438802920 * t24803 - 88668771360 * t24805 - 1005720
            t24763 = t24783 * t24805
            t24765 = t24783 * t24803
            t24767 = t24783 * t24801
            t24769 = t24783 * t24799
            t24771 = t24783 * t24797
            t24773 = t24783 * t24795
            t24810 = -222945905 * t24763 - 7316043670 * t24765 + 3582013475 * t24767 + 43892903160 * t24769 - 73616254130 * t24771 + 30392764220 * t24773 - 2343025 * t24783 - 398452630 * t24788 + 4746216995 * t24790 - 17038578440 * t24792 + 15980719950 * t24794
            t24809 = 38792587470 * t24763 - 170579252220 * t24765 + 253269535830 * t24767 - 48399387600 * t24769 - 294406989060 * t24771 + 394955058840 * t24773 - 18502290 * t24783 + 909022980 * t24788 - 12604733130 * t24790 + 76436731440 * t24792 - 238354072260 * t24794
            t24808 = -31658318510 * t24763 - 96408956020 * t24765 + 824594404842 * t24767 - 1785977487216 * t24769 + 1890280145988 * t24771 - 1095027625016 * t24773 - 10258222 * t24783 + 306557836 * t24788 + 882031722 * t24790 - 48659570544 * t24792 + 341679075140 * t24794
            t24807 = -8471944390 * t24763 - 130887112980 * t24765 + 416526744978 * t24767 - 255453687024 * t24769 - 406548380268 * t24771 + 719640686856 * t24773 - 26091750 * t24783 + 1153146860 * t24788 - 20169941454 * t24790 + 139501644048 * t24792 - 455284987820 * t24794
            t24787 = 2 * phi1
            t24786 = 4 * phi1
            t24785 = -3 * phi2
            t24784 = 3 * phi2
            tfunc[..., c] = (0.43e2 / 0.57864617984e11) * np.sqrt(0.3449e4) * np.sqrt(0.2e1) * np.sqrt(0.31e2) * np.sqrt(0.3e1) * ((-t24809 + t24811) * np.exp((-4*1j) * (phi1 + t24784)) + (-t24808 + t24812) * np.exp((-4*1j) * (t24787 + t24784)) + (-t24810 + t24814) * np.exp((-4*1j) * (t24786 + t24784)) + (t24809 + t24811) * np.exp((4*1j) * (phi1 + t24785)) + (t24808 + t24812) * np.exp((4*1j) * (t24787 + t24785)) + (t24810 + t24814) * np.exp((4*1j) * (t24786 + t24785)) + (t24807 + t24813) * np.exp((-12*1j) * (phi1 + phi2)) + (-t24807 + t24813) * np.exp((12*1j) * (phi1 - phi2)))

        if Bindx == 532:
            t24845 = np.cos(phi)
            t24844 = t24845 ** 2
            t24852 = t24844 ** 2
            t24851 = t24845 * t24844
            t24854 = t24851 ** 2
            t24856 = t24852 ** 2
            t24853 = t24845 * t24852
            t24858 = t24853 ** 2
            t24860 = t24854 ** 2
            t24855 = t24845 * t24854
            t24862 = t24855 ** 2
            t24864 = t24856 ** 2
            t24857 = t24845 * t24856
            t24866 = t24857 ** 2
            t24868 = t24858 ** 2
            t24879 = -519808 * t24844 + 3175424 * t24852 + 1896960 * t24854 - 57384704 * t24856 + 151693568 * t24858 - 129212928 * t24860 - 30182912 * t24862 + 93366656 * t24864 - 27664000 * t24866 - 5185024 * t24868 + 16768
            t24825 = t24845 * t24868
            t24827 = t24845 * t24866
            t24829 = t24845 * t24864
            t24831 = t24845 * t24862
            t24833 = t24845 * t24860
            t24835 = t24845 * t24858
            t24878 = -567112 * t24825 - 18609968 * t24827 + 9111640 * t24829 + 111651264 * t24831 - 187259152 * t24833 + 77310688 * t24835 - 5960 * t24845 - 1013552 * t24851 + 12073048 * t24853 - 43341376 * t24855 + 40650480 * t24857
            t24877 = -10747084 * t24844 + 16775936 * t24852 + 166710864 * t24854 - 376934312 * t24856 - 20445672 * t24858 + 558848368 * t24860 - 332373232 * t24862 - 69462860 * t24864 + 62647636 * t24866 + 5242480 * t24868 - 262124
            t24876 = -458717 * t24825 - 25294966 * t24827 - 63630601 * t24829 + 300394104 * t24831 - 62778698 * t24833 - 541810308 * t24835 + 2686771 * t24845 + 16644874 * t24851 - 112909913 * t24853 + 15203192 * t24855 + 471954262 * t24857
            t24875 = 19326180 * t24844 - 259418880 * t24852 + 1230352656 * t24854 - 1558789128 * t24856 - 5209146696 * t24858 + 20509207472 * t24860 - 27196092720 * t24862 + 14284491876 * t24864 - 291460988 * t24866 - 1528771920 * t24868 - 222140
            t24874 = -132535168 * t24844 + 2801249280 * t24852 - 23270939136 * t24854 + 96927867648 * t24856 - 216404903168 * t24858 + 241371900416 * t24860 - 63061916160 * t24862 - 134829501312 * t24864 + 135483419776 * t24866 - 38885685760 * t24868 + 1043584
            t24873 = 222945905 * t24825 + 3444397710 * t24827 - 10961230131 * t24829 + 6722465448 * t24831 + 10698641586 * t24833 - 18937912812 * t24835 + 686625 * t24845 - 30345970 * t24851 + 530787933 * t24853 - 3671095896 * t24855 + 11981183890 * t24857
            t24872 = 166156776 * t24844 - 4275154944 * t24852 + 44184627360 * t24854 - 238857582672 * t24856 + 757192416048 * t24858 - 1480482376992 * t24860 + 1806278596128 * t24862 - 1339106909976 * t24864 + 551915396136 * t24866 - 97014067488 * t24868 - 1100376
            t24871 = -8506243760 * t24825 - 25904031520 * t24827 + 221559493392 * t24829 - 479872607616 * t24831 + 507897590688 * t24833 - 294221940416 * t24835 - 2756272 * t24845 + 82368736 * t24851 + 236992272 * t24853 - 13074294144 * t24855 + 91805428640 * t24857
            t24870 = 42443654526 * t24825 - 186633770076 * t24827 + 277106668614 * t24829 - 52954624080 * t24831 - 322115882148 * t24833 + 432127299672 * t24835 - 20243682 * t24845 + 994578084 * t24851 - 13791060954 * t24853 + 83630776752 * t24855 - 260787396708 * t24857
            t24850 = 2 * phi1
            t24849 = 4 * phi1
            t24848 = 5 * phi1
            t24847 = -3 * phi2
            t24846 = 3 * phi2
            tfunc[..., c] = -(0.43e2 / 0.1851667775488e13) * np.sqrt(0.2e1) * np.sqrt(0.3449e4) * np.sqrt(0.41e2) * np.sqrt(0.13e2) * np.sqrt(0.5e1) * np.sqrt(0.17e2) * np.sqrt(0.37e2) * ((-t24870 + t24872) * np.exp((-4*1j) * (phi1 + t24846)) + (t24871 + t24874) * np.exp((-4*1j) * (t24850 + t24846)) + (t24878 + t24879) * np.exp((-4*1j) * (t24849 + t24846)) + (-t24876 + t24877) * np.exp((-4*1j) * (t24848 + t24846)) + (t24870 + t24872) * np.exp((4*1j) * (phi1 + t24847)) + (-t24871 + t24874) * np.exp((4*1j) * (t24850 + t24847)) + (-t24878 + t24879) * np.exp((4*1j) * (t24849 + t24847)) + (t24876 + t24877) * np.exp((4*1j) * (t24848 + t24847)) + (-t24873 + t24875) * np.exp((-12*1j) * (phi1 + phi2)) + (t24873 + t24875) * np.exp((12*1j) * (phi1 - phi2)))

        if Bindx == 533:
            t24909 = np.cos(phi)
            t24908 = t24909 ** 2
            t24917 = t24908 ** 2
            t24918 = t24909 * t24917
            t24923 = t24918 ** 2
            t24933 = t24923 ** 2
            t24889 = t24909 * t24933
            t24921 = t24917 ** 2
            t24922 = t24909 * t24921
            t24931 = t24922 ** 2
            t24891 = t24909 * t24931
            t24929 = t24921 ** 2
            t24893 = t24909 * t24929
            t24916 = t24909 * t24908
            t24919 = t24916 ** 2
            t24920 = t24909 * t24919
            t24927 = t24920 ** 2
            t24895 = t24909 * t24927
            t24925 = t24919 ** 2
            t24897 = t24909 * t24925
            t24924 = t24909 * t24923
            t24943 = -1121099408 * t24889 - 3062515456 * t24891 + 21203247824 * t24893 - 29055814656 * t24895 + 2270096224 * t24897 + 9550736 * t24909 - 26891008 * t24916 - 1098918352 * t24918 + 8482100224 * t24920 - 23694983520 * t24922 + 26095227392 * t24924
            t24942 = 31951333128 * t24889 - 43640845248 * t24891 - 189086140584 * t24893 + 590713934976 * t24895 - 691841801904 * t24897 + 22854264 * t24909 - 652280640 * t24916 + 3567414312 * t24918 + 6519756672 * t24920 - 113785742928 * t24922 + 406231517952 * t24924
            t24941 = 48767824248 * t24889 - 294985863744 * t24891 + 769753418280 * t24893 - 1132953376896 * t24895 + 1032096769968 * t24897 + 7087368 * t24909 - 388941504 * t24916 + 6458911320 * t24918 - 50529833856 * t24920 + 222549200208 * t24922 - 600775195392 * t24924
            t24940 = -79598057968 * t24889 + 341689224448 * t24891 - 540428919888 * t24893 + 294808031232 * t24895 + 176791833504 * t24897 + 20276464 * t24909 - 928375552 * t24916 + 12352885584 * t24918 - 73738868736 * t24920 + 227918944864 * t24922 - 358886973952 * t24924
            t24888 = t24924 ** 2
            t24939 = -133767543 * t24888 + 80627107 * t24908 - 903296207 * t24917 + 3418615629 * t24919 - 1938357850 * t24921 - 17325051458 * t24923 + 44887167234 * t24925 - 41980897894 * t24927 + 9762507091 * t24929 + 7579814191 * t24931 - 3445485251 * t24933 - 1875049
            t24938 = -23275552482 * t24888 + 42911706 * t24908 - 1109625666 * t24917 + 10687316118 * t24919 - 49531668588 * t24921 + 119667469572 * t24923 - 136340745348 * t24925 + 556086252 * t24927 + 191055004458 * t24929 - 229155955326 * t24931 + 117405022566 * t24933 - 263262
            t24937 = -5083166634 * t24888 - 229297662 * t24908 + 4298943990 * t24917 - 34189842258 * t24919 + 135616435812 * t24921 - 274575661932 * t24923 + 226993929708 * t24925 + 110354801436 * t24927 - 372580591086 * t24929 + 267255217482 * t24931 - 57863084994 * t24933 + 2316138
            t24936 = -18994991106 * t24888 + 52601770 * t24908 - 1513031442 * t24917 + 19063363254 * t24919 - 125192592876 * t24921 + 466615380452 * t24923 - 1035380562788 * t24925 + 1380441521004 * t24927 - 1058637406710 * t24929 + 394747242578 * t24931 - 21201145706 * t24933 - 378430
            t24915 = 4 * phi1
            t24914 = 8 * phi1
            t24913 = 12 * phi1
            t24912 = 16 * phi1
            t24911 = -11 * phi2
            t24910 = 11 * phi2
            tfunc[..., c] = (-0.43e2 / 0.57864617984e11*1j) * np.sqrt(0.5e1) * np.sqrt(0.3449e4) * np.sqrt(0.11e2) * np.sqrt(0.31e2) * ((1 + t24909) ** (-0.1e1 / 0.2e1)) * ((1 - t24909) ** (-0.1e1 / 0.2e1)) * ((-t24938 + t24941) * np.exp((-1*1j) * (t24915 + t24910)) + (t24936 + t24940) * np.exp((-1*1j) * (t24914 + t24910)) + (t24938 + t24941) * np.exp((1j) * (t24915 + t24911)) + (-t24936 + t24940) * np.exp((1j) * (t24914 + t24911)) + (-t24937 + t24942) * np.exp((-1*1j) * (t24913 + t24910)) + (t24939 + t24943) * np.exp((-1*1j) * (t24912 + t24910)) + (t24937 + t24942) * np.exp((1j) * (t24913 + t24911)) + (-t24939 + t24943) * np.exp((1j) * (t24912 + t24911)))

        if Bindx == 534:
            t24975 = np.cos(phi)
            t24974 = t24975 ** 2
            t24984 = t24974 ** 2
            t24985 = t24975 * t24984
            t24990 = t24985 ** 2
            t25000 = t24990 ** 2
            t24955 = t24975 * t25000
            t24988 = t24984 ** 2
            t24989 = t24975 * t24988
            t24998 = t24989 ** 2
            t24957 = t24975 * t24998
            t24996 = t24988 ** 2
            t24959 = t24975 * t24996
            t24983 = t24975 * t24974
            t24986 = t24983 ** 2
            t24987 = t24975 * t24986
            t24994 = t24987 ** 2
            t24961 = t24975 * t24994
            t24992 = t24986 ** 2
            t24963 = t24975 * t24992
            t24991 = t24975 * t24990
            t25012 = 14258816 * t24955 + 38950912 * t24957 - 269675648 * t24959 + 369549312 * t24961 - 28872448 * t24963 - 121472 * t24975 + 342016 * t24983 + 13976704 * t24985 - 107880448 * t24987 + 301367040 * t24989 - 331894784 * t24991
            t25011 = -14416820 * t24955 - 115334560 * t24957 + 395020868 * t24959 + 138401472 * t24961 - 1528182920 * t24963 - 6553100 * t24975 - 10484960 * t24983 + 271822588 * t24985 - 574575808 * t24987 - 191350520 * t24989 + 1635653760 * t24991
            t24954 = t24991 ** 2
            t25010 = -1701336 * t24954 + 1025464 * t24974 - 11488664 * t24984 + 43480008 * t24986 - 24653200 * t24988 - 220350416 * t24990 + 570901968 * t24992 - 533938288 * t24994 + 124165432 * t24996 + 96404632 * t24998 - 43821752 * t25000 - 23848
            t25009 = 4204122780 * t24955 - 5742216480 * t24957 - 24879755340 * t24959 + 77725517760 * t24961 - 91031816040 * t24963 + 3007140 * t24975 - 85826400 * t24983 + 469396620 * t24985 + 857862720 * t24987 - 14971808280 * t24989 + 53451515520 * t24991
            t25008 = 1376151 * t24954 + 20904389 * t24974 - 104521945 * t24984 - 118938765 * t24986 + 1045219450 * t24988 - 1405639950 * t24990 + 42595150 * t24992 + 1156622150 * t24994 - 709373075 * t24996 + 10157305 * t24998 + 60878299 * t25000 + 720841
            t25007 = 106935635840 * t24955 - 459040778240 * t24957 + 726036685440 * t24959 - 396058460160 * t24961 - 237510155520 * t24963 - 27240320 * t24975 + 1247221760 * t24983 - 16595425920 * t24985 + 99064135680 * t24987 - 306196632320 * t24989 + 482145013760 * t24991
            t25006 = -668837715 * t24954 - 30170745 * t24974 + 565650525 * t24984 - 4498663455 * t24986 + 17844267870 * t24988 - 36128376570 * t24990 + 29867622330 * t24992 + 14520368610 * t24994 - 49023761985 * t24996 + 35165160195 * t24998 - 7613563815 * t25000 + 304755
            t25005 = 266788685592 * t24955 - 1613746195776 * t24957 + 4211003994120 * t24959 - 6197921414784 * t24961 + 5646176447472 * t24963 + 38772072 * t24975 - 2127738816 * t24983 + 35334044280 * t24985 - 276427914624 * t24987 + 1217475036432 * t24989 - 3286593715968 * t24991
            t25004 = 25518731280 * t24954 - 70667600 * t24974 + 2032674960 * t24984 - 25610585520 * t24986 + 168189398880 * t24988 - 626872233760 * t24990 + 1390977137440 * t24992 - 1854547655520 * t24994 + 1422221434800 * t24996 - 530321322640 * t24998 + 28482579280 * t25000 + 508400
            t25003 = 127330963578 * t24954 - 234752274 * t24974 + 6070305114 * t24984 - 58465905822 * t24986 + 270967363452 * t24988 - 654651451188 * t24990 + 745864077492 * t24992 - 3042118908 * t24994 - 1045183259682 * t24996 + 1253617873254 * t24998 - 642274535214 * t25000 + 1440198
            t24982 = 4 * phi1
            t24981 = 8 * phi1
            t24980 = 12 * phi1
            t24979 = 16 * phi1
            t24978 = 20 * phi1
            t24977 = -11 * phi2
            t24976 = 11 * phi2
            tfunc[..., c] = (0.43e2 / 0.5555003326464e13*1j) * np.sqrt(0.3e1) * np.sqrt(0.3449e4) * np.sqrt(0.17e2) * np.sqrt(0.11e2) * np.sqrt(0.41e2) * np.sqrt(0.13e2) * np.sqrt(0.37e2) * ((t25003 + t25005) * np.exp((-1*1j) * (t24982 + t24976)) + (t25004 + t25007) * np.exp((-1*1j) * (t24981 + t24976)) + (-t25003 + t25005) * np.exp((1j) * (t24982 + t24977)) + (-t25004 + t25007) * np.exp((1j) * (t24981 + t24977)) + (-t25006 + t25009) * np.exp((-1*1j) * (t24980 + t24976)) + (-t25010 + t25012) * np.exp((-1*1j) * (t24979 + t24976)) + (-t25008 + t25011) * np.exp((-1*1j) * (t24978 + t24976)) + (t25006 + t25009) * np.exp((1j) * (t24980 + t24977)) + (t25010 + t25012) * np.exp((1j) * (t24979 + t24977)) + (t25008 + t25011) * np.exp((1j) * (t24978 + t24977))) * ((1 + t24975) ** (-0.1e1 / 0.2e1)) * ((1 - t24975) ** (-0.1e1 / 0.2e1))

        if Bindx == 535:
            t25041 = np.cos(phi)
            t25040 = t25041 ** 2
            t25049 = t25040 ** 2
            t25048 = t25041 * t25040
            t25051 = t25048 ** 2
            t25053 = t25049 ** 2
            t25050 = t25041 * t25049
            t25055 = t25050 ** 2
            t25057 = t25051 ** 2
            t25052 = t25041 * t25051
            t25059 = t25052 ** 2
            t25061 = t25053 ** 2
            t25054 = t25041 * t25053
            t25063 = t25054 ** 2
            t25065 = t25055 ** 2
            t25074 = 33870392 * t25040 - 578559232 * t25049 + 3501325984 * t25051 - 8638182800 * t25053 + 5738422352 * t25055 + 11979239584 * t25057 - 24262754144 * t25059 + 14582580008 * t25061 - 1336121800 * t25063 - 1019181280 * t25065 - 639064
            t25073 = 16824804 * t25040 - 772881696 * t25049 + 11802280464 * t25051 - 74519743896 * t25053 + 235648498488 * t25055 - 397124390832 * t25057 + 335651010768 * t25059 - 86578541460 * t25061 - 53169568764 * t25063 + 29046666480 * t25065 - 154356
            t25072 = -80315768 * t25040 + 1848717312 * t25049 - 15306234528 * t25051 + 56671594512 * t25053 - 85368831184 * t25055 - 36872712864 * t25057 + 319359801696 * t25059 - 462721188072 * t25061 + 294830500744 * t25063 - 72361870880 * t25065 + 539032
            t25071 = -44009124 * t25040 + 1261906464 * t25049 - 14155023888 * t25051 + 81472371480 * t25053 - 272141123256 * t25055 + 558449504688 * t25057 - 714511454928 * t25059 + 555657998676 * t25061 - 240324810180 * t25063 + 44334385680 * t25065 + 254388
            t25021 = t25041 * t25065
            t25023 = t25041 * t25063
            t25025 = t25041 * t25061
            t25027 = t25041 * t25059
            t25029 = t25041 * t25057
            t25031 = t25041 * t25055
            t25070 = 133767543 * t25021 + 2711395076 * t25023 - 7605628351 * t25025 - 672395968 * t25027 + 21166623670 * t25029 - 26924898520 * t25031 - 10400515 * t25041 + 146192180 * t25048 - 340531165 * t25050 - 2387684000 * t25052 + 13783560050 * t25054
            t25069 = -23275552482 * t25021 + 108889576536 * t25023 - 201873256446 * t25025 + 178478336832 * t25027 - 58251272820 * t25029 - 23216726736 * t25031 + 1878330 * t25041 - 104299080 * t25048 + 1577670006 * t25050 - 9832675968 * t25052 + 27606321828 * t25054
            t25068 = -5083166634 * t25021 - 43853381832 * t25023 + 209794044618 * t25025 - 314166048192 * t25027 + 176408074044 * t25029 + 24745499376 * t25031 - 23625246 * t25041 + 844334616 * t25048 - 8784829170 * t25050 + 39769292160 * t25052 - 79650193740 * t25054
            t25067 = 18994991106 * t25021 + 5912494328 * t25023 - 267319752882 * t25025 + 679761234048 * t25027 - 811186602252 * t25029 + 548778658480 * t25031 - 8474986 * t25041 + 432473496 * t25048 - 6892079766 * t25050 + 52372467264 * t25052 - 220845408836 * t25054
            t25047 = 2 * phi1
            t25046 = 4 * phi1
            t25045 = 6 * phi1
            t25044 = 8 * phi1
            t25043 = -5 * phi2
            t25042 = 5 * phi2
            tfunc[..., c] = -(0.43e2 / 0.14466154496e11) * np.sqrt(0.5e1) * np.sqrt(0.3449e4) * np.sqrt(0.2e1) * np.sqrt(0.31e2) * ((-t25069 + t25071) * np.exp((-2*1j) * (t25047 + t25042)) + (-t25067 + t25072) * np.exp((-2*1j) * (t25046 + t25042)) + (-t25068 + t25073) * np.exp((-2*1j) * (t25045 + t25042)) + (-t25070 + t25074) * np.exp((-2*1j) * (t25044 + t25042)) + (t25069 + t25071) * np.exp((2*1j) * (t25047 + t25043)) + (t25067 + t25072) * np.exp((2*1j) * (t25046 + t25043)) + (t25068 + t25073) * np.exp((2*1j) * (t25045 + t25043)) + (t25070 + t25074) * np.exp((2*1j) * (t25044 + t25043)))

        if Bindx == 536:
            t25105 = np.cos(phi)
            t25104 = t25105 ** 2
            t25113 = t25104 ** 2
            t25112 = t25105 * t25104
            t25115 = t25112 ** 2
            t25117 = t25113 ** 2
            t25114 = t25105 * t25113
            t25119 = t25114 ** 2
            t25121 = t25115 ** 2
            t25116 = t25105 * t25115
            t25123 = t25116 ** 2
            t25125 = t25117 ** 2
            t25118 = t25105 * t25117
            t25127 = t25118 ** 2
            t25129 = t25119 ** 2
            t25140 = 430784 * t25104 - 7358464 * t25113 + 44531968 * t25115 - 109865600 * t25117 + 72984704 * t25119 + 152359168 * t25121 - 308588288 * t25123 + 185470016 * t25125 - 16993600 * t25127 - 12962560 * t25129 - 8128
            t25139 = 12450890 * t25104 - 99607120 * t25113 + 79161448 * t25115 + 480997540 * t25117 - 1073397780 * t25119 + 647446280 * t25121 + 207077960 * t25123 - 338008898 * t25125 + 70118170 * t25127 + 13106200 * t25129 + 655310
            t25138 = -2213790 * t25104 + 101694960 * t25113 - 1552931640 * t25115 + 9805229460 * t25117 - 31006381380 * t25119 + 52253209320 * t25121 - 44164606680 * t25123 + 11391913350 * t25125 + 6995995890 * t25127 - 3821929800 * t25129 + 20310
            t25085 = t25105 * t25129
            t25087 = t25105 * t25127
            t25089 = t25105 * t25125
            t25091 = t25105 * t25123
            t25093 = t25105 * t25121
            t25095 = t25105 * t25119
            t25137 = -1701336 * t25085 - 34485152 * t25087 + 96732952 * t25089 + 8551936 * t25091 - 269209840 * t25093 + 342447040 * t25095 + 132280 * t25105 - 1859360 * t25112 + 4331080 * t25114 + 30368000 * t25116 - 175307600 * t25118
            t25136 = -1376151 * t25085 - 48492940 * t25087 + 52752455 * t25089 + 387943520 * t25091 - 920710550 * t25093 + 511141800 * t25095 - 5176949 * t25105 + 9174340 * t25112 + 155636125 * t25114 - 524248000 * t25116 + 383356350 * t25118
            t25135 = -107899840 * t25104 + 2483650560 * t25113 - 20563088640 * t25115 + 76135186560 * t25117 - 114688353920 * t25119 - 49536472320 * t25121 + 429042420480 * t25123 - 621640599360 * t25125 + 396088646720 * t25127 - 97214214400 * t25129 + 724160
            t25134 = -668837715 * t25085 - 5770181820 * t25087 + 27604479555 * t25089 - 41337637920 * t25091 + 23211588690 * t25093 + 3255986760 * t25095 - 3108585 * t25105 + 111096660 * t25112 - 1155898575 * t25114 + 5232801600 * t25116 - 10480288650 * t25118
            t25133 = 240755796 * t25104 - 6903370656 * t25113 + 77436307152 * t25115 - 445701796920 * t25117 + 1488772027224 * t25119 - 3055047290352 * t25121 + 3908797959312 * t25123 - 3039776110404 * t25125 + 1314718079220 * t25127 - 242535168720 * t25129 - 1391652
            t25132 = -25518731280 * t25085 - 7943112640 * t25087 + 359129462160 * t25089 - 913222026240 * t25091 + 1089784817760 * t25093 - 737254102400 * t25095 + 11385680 * t25105 - 581004480 * t25112 + 9259132080 * t25114 - 70359544320 * t25116 + 296693723680 * t25118
            t25131 = -127330963578 * t25085 + 595690036344 * t25087 - 1104365461734 * t25089 + 976381489728 * t25091 - 318668727780 * t25093 - 127009152144 * t25095 + 10275570 * t25105 - 570577320 * t25112 + 8630782974 * t25114 - 53790521472 * t25116 + 151022819412 * t25118
            t25111 = 2 * phi1
            t25110 = 4 * phi1
            t25109 = 6 * phi1
            t25108 = 8 * phi1
            t25107 = -5 * phi2
            t25106 = 5 * phi2
            tfunc[..., c] = -(0.43e2 / 0.1388750831616e13) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.3449e4) * np.sqrt(0.41e2) * np.sqrt(0.13e2) * np.sqrt(0.37e2) * np.sqrt(0.17e2) * ((t25131 + t25133) * np.exp((-2*1j) * (t25111 + t25106)) + (t25132 + t25135) * np.exp((-2*1j) * (t25110 + t25106)) + (t25134 + t25138) * np.exp((-2*1j) * (t25109 + t25106)) + (t25137 + t25140) * np.exp((-2*1j) * (t25108 + t25106)) + (-t25131 + t25133) * np.exp((2*1j) * (t25111 + t25107)) + (-t25132 + t25135) * np.exp((2*1j) * (t25110 + t25107)) + (-t25134 + t25138) * np.exp((2*1j) * (t25109 + t25107)) + (-t25137 + t25140) * np.exp((2*1j) * (t25108 + t25107)) + (-t25136 + t25139) * np.exp((-10*1j) * (t25111 + phi2)) + (t25136 + t25139) * np.exp((10*1j) * (t25111 - phi2)))

        if Bindx == 537:
            t25170 = np.cos(phi)
            t25169 = t25170 ** 2
            t25177 = t25169 ** 2
            t25178 = t25170 * t25177
            t25183 = t25178 ** 2
            t25193 = t25183 ** 2
            t25150 = t25170 * t25193
            t25181 = t25177 ** 2
            t25182 = t25170 * t25181
            t25191 = t25182 ** 2
            t25152 = t25170 * t25191
            t25189 = t25181 ** 2
            t25154 = t25170 * t25189
            t25176 = t25170 * t25169
            t25179 = t25176 ** 2
            t25180 = t25170 * t25179
            t25187 = t25180 ** 2
            t25156 = t25170 * t25187
            t25185 = t25179 ** 2
            t25158 = t25170 * t25185
            t25184 = t25170 * t25183
            t25203 = 9478385904 * t25150 - 8784845472 * t25152 - 93835739664 * t25154 + 275461905024 * t25156 - 313962602528 * t25158 + 80179888 * t25170 - 1686585504 * t25176 + 11518761264 * t25178 - 28974578048 * t25180 - 2555148960 * t25182 + 153260268096 * t25184
            t25149 = t25184 ** 2
            t25202 = -1382264611 * t25149 + 3685311 * t25169 + 1884597849 * t25177 - 22542345423 * t25179 + 100951197750 * t25181 - 216625427434 * t25183 + 216307047762 * t25185 - 36238072542 * t25187 - 115269020965 * t25189 + 92748806907 * t25191 - 19838146107 * t25193 - 58497
            t25201 = 672965399184 * t25150 - 3249930464352 * t25152 + 6492085975440 * t25154 - 6835421374080 * t25156 + 3923909908256 * t25158 - 32740656 * t25170 + 1632956832 * t25176 - 20860937136 * t25178 + 93097590144 * t25180 - 35671247456 * t25182 - 1041775066176 * t25184
            t25200 = -270133998264 * t25150 + 865307278992 * t25152 - 407846231736 * t25154 - 1890296114496 * t25156 + 3772984620176 * t25158 + 106232040 * t25170 - 4475146608 * t25176 + 62350658856 * t25178 - 420741981504 * t25180 + 1551214233296 * t25182 - 3258469550752 * t25184
            t25199 = -412309786824 * t25150 + 2393408030832 * t25152 - 5988487174344 * t25154 + 8441629849920 * t25156 - 7352014793616 * t25158 - 32691816 * t25170 + 1997643888 * t25176 - 36302504616 * t25178 + 305863352640 * t25180 - 1432779735504 * t25182 + 4079027809440 * t25184
            t25198 = -240514042314 * t25149 + 52507458 * t25169 - 1398870738 * t25177 + 11957895438 * t25179 - 29907633996 * t25181 - 102886794732 * t25183 + 834504434652 * t25185 - 2291666715684 * t25187 + 3372145258362 * t25189 - 2826926372982 * t25191 + 1274640621462 * t25193 - 286926
            t25197 = -52526055218 * t25149 - 863661302 * t25169 + 15208638502 * t25177 - 89510039034 * t25179 + 166230927876 * t25181 + 347409269220 * t25183 - 2179714055220 * t25185 + 4265896185036 * t25187 - 4153197486942 * t25189 + 1953206211442 * t25191 - 272147192018 * t25193 + 7257658
            t25196 = -196281574762 * t25149 + 677723826 * t25169 - 18290764258 * t25177 + 197479447854 * t25179 - 1110437793036 * t25181 + 3638526220212 * t25183 - 7258265318148 * t25185 + 8766277316316 * t25187 - 5945565715206 * t25189 + 1657108904698 * t25191 + 268775814918 * t25193 - 4262414
            t25175 = 4 * phi1
            t25174 = 8 * phi1
            t25173 = -9 * phi2
            t25172 = 9 * phi2
            t25171 = 16 * phi1
            tfunc[..., c] = (0.43e2 / 0.28932308992e11*1j) * np.sqrt(0.5e1) * np.sqrt(0.3449e4) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * ((t25197 + t25200) * np.exp((-3*1j) * (t25175 + 3 * phi2)) + (t25198 + t25199) * np.exp((-1*1j) * (t25175 + t25172)) + (-t25196 + t25201) * np.exp((-1*1j) * (t25174 + t25172)) + (-t25198 + t25199) * np.exp((1j) * (t25175 + t25173)) + (t25196 + t25201) * np.exp((1j) * (t25174 + t25173)) + (-t25197 + t25200) * np.exp((3*1j) * (t25175 - 3 * phi2)) + (-t25202 + t25203) * np.exp((-1*1j) * (t25171 + t25172)) + (t25202 + t25203) * np.exp((1j) * (t25171 + t25173))) * ((1 + t25170) ** (-0.1e1 / 0.2e1)) * ((1 - t25170) ** (-0.1e1 / 0.2e1))

        if Bindx == 538:
            t25235 = np.cos(phi)
            t25234 = t25235 ** 2
            t25243 = t25234 ** 2
            t25244 = t25235 * t25243
            t25249 = t25244 ** 2
            t25259 = t25249 ** 2
            t25215 = t25235 * t25259
            t25247 = t25243 ** 2
            t25248 = t25235 * t25247
            t25257 = t25248 ** 2
            t25217 = t25235 * t25257
            t25255 = t25247 ** 2
            t25219 = t25235 * t25255
            t25242 = t25235 * t25234
            t25245 = t25242 ** 2
            t25246 = t25235 * t25245
            t25253 = t25246 ** 2
            t25221 = t25235 * t25253
            t25251 = t25245 ** 2
            t25223 = t25235 * t25251
            t25250 = t25235 * t25249
            t25271 = 3888768 * t25215 - 3604224 * t25217 - 38498688 * t25219 + 113015808 * t25221 - 128811776 * t25223 + 32896 * t25235 - 691968 * t25242 + 4725888 * t25244 - 11887616 * t25246 - 1048320 * t25248 + 62879232 * t25250
            t25214 = t25250 ** 2
            t25270 = 567112 * t25214 - 1512 * t25234 - 773208 * t25243 + 9248616 * t25245 - 41418000 * t25247 + 88876528 * t25249 - 88745904 * t25251 + 14867664 * t25253 + 47292280 * t25255 - 38052744 * t25257 + 8139144 * t25259 + 24
            t25269 = -3931860 * t25215 - 7863720 * t25217 + 96723756 * t25219 - 195020256 * t25221 + 76015960 * t25223 + 1310620 * t25235 - 7863720 * t25242 - 13368324 * t25244 + 140498464 * t25246 - 290957640 * t25248 + 204456720 * t25250
            t25268 = -458717 * t25214 + 1769337 * t25234 - 28505985 * t25243 + 81586095 * t25245 - 29488950 * t25247 - 212975750 * t25249 + 383356350 * t25251 - 245741250 * t25253 + 21952885 * t25255 + 40301565 * t25257 - 11992173 * t25259 + 196593
            t25267 = 1146578940 * t25215 - 3672781320 * t25217 + 1731096060 * t25219 + 8023328160 * t25221 - 16014365960 * t25223 - 450900 * t25235 + 18994680 * t25242 - 264646260 * t25244 + 1785831840 * t25246 - 6584101160 * t25248 + 13830515920 * t25250
            t25266 = 222945905 * t25214 + 3665795 * t25234 - 64552795 * t25243 + 379923765 * t25245 - 705564210 * t25247 - 1474572450 * t25249 + 9251757450 * t25251 - 18106520310 * t25253 + 17628172695 * t25255 - 8290348945 * t25257 + 1155123905 * t25259 - 30805
            t25265 = 29164264320 * t25215 - 140842056960 * t25217 + 281347171200 * t25219 - 296226278400 * t25221 + 170050266880 * t25223 - 1418880 * t25235 + 70767360 * t25242 - 904049280 * t25244 + 4034565120 * t25246 - 1545882880 * t25248 - 45147348480 * t25250
            t25264 = 72760550616 * t25215 - 422366123088 * t25217 + 1056791854296 * t25219 - 1489699385280 * t25221 + 1297414375344 * t25223 + 5769144 * t25235 - 352525392 * t25242 + 6406324344 * t25244 - 53975885760 * t25246 + 252843482736 * t25248 - 719828436960 * t25250
            t25263 = -42443654526 * t25214 + 9266022 * t25234 - 246859542 * t25243 + 2110216842 * t25245 - 5277817764 * t25247 - 18156493188 * t25249 + 147265488468 * t25251 - 404411773356 * t25253 + 595084457358 * t25255 - 498869359938 * t25257 + 224936580258 * t25259 - 50634
            t25262 = -8506243760 * t25214 + 29370480 * t25234 - 792665840 * t25243 + 8558155920 * t25245 - 48122981280 * t25247 + 157682609760 * t25249 - 314551043040 * t25251 + 379903675680 * t25253 - 257662652880 * t25255 + 71814037040 * t25257 + 11647922640 * t25259 - 184720
            t25241 = 4 * phi1
            t25240 = 8 * phi1
            t25239 = -9 * phi2
            t25238 = 9 * phi2
            t25237 = 16 * phi1
            t25236 = 20 * phi1
            tfunc[..., c] = (0.43e2 / 0.925833887744e12*1j) * np.sqrt(0.2e1) * np.sqrt(0.3449e4) * np.sqrt(0.13e2) * np.sqrt(0.41e2) * np.sqrt(0.37e2) * np.sqrt(0.31e2) * np.sqrt(0.17e2) * ((t25266 + t25267) * np.exp((-3*1j) * (t25241 + 3 * phi2)) + (-t25263 + t25264) * np.exp((-1*1j) * (t25241 + t25238)) + (-t25262 + t25265) * np.exp((-1*1j) * (t25240 + t25238)) + (t25263 + t25264) * np.exp((1j) * (t25241 + t25239)) + (t25262 + t25265) * np.exp((1j) * (t25240 + t25239)) + (-t25266 + t25267) * np.exp((3*1j) * (t25241 - 3 * phi2)) + (t25270 + t25271) * np.exp((-1*1j) * (t25237 + t25238)) + (t25268 + t25269) * np.exp((-1*1j) * (t25236 + t25238)) + (-t25270 + t25271) * np.exp((1j) * (t25237 + t25239)) + (-t25268 + t25269) * np.exp((1j) * (t25236 + t25239))) * ((1 + t25235) ** (-0.1e1 / 0.2e1)) * ((1 - t25235) ** (-0.1e1 / 0.2e1))

        if Bindx == 539:
            t25300 = np.cos(phi)
            t25299 = t25300 ** 2
            t25306 = t25299 ** 2
            t25305 = t25300 * t25299
            t25308 = t25305 ** 2
            t25310 = t25306 ** 2
            t25307 = t25300 * t25306
            t25312 = t25307 ** 2
            t25314 = t25308 ** 2
            t25309 = t25300 * t25308
            t25316 = t25309 ** 2
            t25318 = t25310 ** 2
            t25311 = t25300 * t25310
            t25320 = t25311 ** 2
            t25322 = t25312 ** 2
            t25331 = 8726752 * t25299 - 916615680 * t25306 + 24351086976 * t25308 - 251264192448 * t25310 + 1285709818432 * t25312 - 3670854705024 * t25314 + 6139285572480 * t25316 - 5981663616288 * t25318 + 3145555593184 * t25320 - 690220922240 * t25322 - 52256
            t25330 = 221508640 * t25299 - 1547440640 * t25306 - 1859424640 * t25308 + 44432761280 * t25310 - 155386751040 * t25312 + 246704467840 * t25314 - 188101393280 * t25316 + 45995801120 * t25318 + 19265012000 * t25320 - 9721421440 * t25322 - 3119840
            t25329 = 944313072 * t25299 - 19958901120 * t25306 + 165805441344 * t25308 - 690611056992 * t25310 + 1541884935072 * t25312 - 1719774790464 * t25314 + 449316152640 * t25316 + 960660196848 * t25318 - 965319365904 * t25320 + 277060511040 * t25322 - 7435536
            t25328 = -248590320 * t25299 + 7793028480 * t25306 - 94545725760 * t25308 + 582477291360 * t25310 - 2064254025120 * t25312 + 4464196088640 * t25314 - 5991576663360 * t25316 + 4872776701200 * t25318 - 2199501239280 * t25320 + 422881832640 * t25322 + 1301520
            t25280 = t25300 * t25322
            t25282 = t25300 * t25320
            t25284 = t25300 * t25318
            t25286 = t25300 * t25316
            t25288 = t25300 * t25314
            t25290 = t25300 * t25312
            t25327 = -1594920705 * t25280 - 15956616670 * t25282 + 86646243875 * t25284 - 141711712360 * t25286 + 68075103790 * t25288 + 60770193420 * t25290 - 49039985 * t25300 + 1277379490 * t25305 - 11882983085 * t25307 + 49147619480 * t25309 - 94721267250 * t25311
            t25326 = -277516202670 * t25280 + 1362117854220 * t25282 - 2813517924630 * t25284 + 3177640137360 * t25286 - 2135341065660 * t25288 + 871639006920 * t25290 - 902190 * t25300 + 71021580 * t25305 - 2108832150 * t25307 + 29305852560 * t25309 - 212288945340 * t25311
            t25325 = -60606986790 * t25280 - 184566224580 * t25282 + 1578611390418 * t25284 - 3419092329264 * t25286 + 3618770333652 * t25288 - 2096331325464 * t25290 - 19638438 * t25300 + 586877244 * t25305 + 1688569938 * t25307 - 93154345776 * t25309 + 654113679060 * t25311
            t25324 = 226478740110 * t25280 - 436122823580 * t25282 - 886502497002 * t25284 + 3751376335536 * t25286 - 5221846026372 * t25288 + 3874381263064 * t25290 - 63518162 * t25300 + 3513556836 * t25305 - 56919264522 * t25307 + 419734402224 * t25309 - 1674020862020 * t25311
            t25304 = 2 * phi1
            t25303 = 3 * phi1
            t25302 = -2 * phi2
            t25301 = 2 * phi2
            tfunc[..., c] = -(0.43e2 / 0.14466154496e11) * np.sqrt(0.3449e4) * np.sqrt(0.13e2) * ((-t25324 + t25331) * np.exp((-8*1j) * (phi1 + phi2)) + (t25327 + t25330) * np.exp((-8*1j) * (t25304 + phi2)) + (-t25326 + t25328) * np.exp((-4*1j) * (phi1 + t25301)) + (-t25325 + t25329) * np.exp((-4*1j) * (t25303 + t25301)) + (t25326 + t25328) * np.exp((4*1j) * (phi1 + t25302)) + (t25325 + t25329) * np.exp((4*1j) * (t25303 + t25302)) + (t25324 + t25331) * np.exp((8*1j) * (phi1 - phi2)) + (-t25327 + t25330) * np.exp((8*1j) * (t25304 - phi2)))

        if Bindx == 540:
            t25362 = np.cos(phi)
            t25361 = t25362 ** 2
            t25369 = t25361 ** 2
            t25368 = t25362 * t25361
            t25371 = t25368 ** 2
            t25373 = t25369 ** 2
            t25370 = t25362 * t25369
            t25375 = t25370 ** 2
            t25377 = t25371 ** 2
            t25372 = t25362 * t25371
            t25379 = t25372 ** 2
            t25381 = t25373 ** 2
            t25374 = t25362 * t25373
            t25383 = t25374 ** 2
            t25385 = t25375 ** 2
            t25396 = 236288 * t25361 - 1650688 * t25369 - 1983488 * t25371 + 47397376 * t25373 - 165754368 * t25375 + 263164928 * t25377 - 200651776 * t25379 + 49064704 * t25381 + 20550400 * t25383 - 10370048 * t25385 - 3328
            t25342 = t25362 * t25385
            t25344 = t25362 * t25383
            t25346 = t25362 * t25381
            t25348 = t25362 * t25379
            t25350 = t25362 * t25377
            t25352 = t25362 * t25375
            t25395 = -1701336 * t25342 - 17021264 * t25344 + 92427400 * t25346 - 151166912 * t25348 + 72617168 * t25350 + 64824864 * t25352 - 52312 * t25362 + 1362608 * t25368 - 12675832 * t25370 + 52426816 * t25372 - 101041200 * t25374
            t25394 = -524248 * t25361 + 54521792 * t25369 - 224378144 * t25371 + 307209328 * t25373 + 13630448 * t25375 - 463435232 * t25377 + 480211168 * t25379 - 176671576 * t25381 - 524248 * t25383 + 10484960 * t25385 - 524248
            t25393 = -10421112 * t25361 + 220259520 * t25369 - 1829771424 * t25371 + 7621344432 * t25373 - 17015708112 * t25375 + 18978838944 * t25377 - 4958497440 * t25379 - 10601513208 * t25381 + 10652930184 * t25383 - 3057543840 * t25385 + 82056
            t25392 = 983296 * t25361 - 103280640 * t25369 + 2743784448 * t25371 - 28311458304 * t25373 + 144868711936 * t25375 - 413617431552 * t25377 + 691750487040 * t25379 - 673990266624 * t25381 + 354428799232 * t25383 - 77771371520 * t25385 - 5888
            t25391 = -1376151 * t25342 - 26081338 * t25344 + 118414517 * t25346 - 94888888 * t25348 - 280603742 * t25350 + 678114788 * t25352 + 2817833 * t25362 - 26081338 * t25368 + 30340853 * t25370 + 173526088 * t25372 - 574182622 * t25374
            t25390 = -668837715 * t25342 - 2036808930 * t25344 + 17421008553 * t25346 - 37731918744 * t25348 + 39935496042 * t25350 - 23134386444 * t25352 - 216723 * t25362 + 6476574 * t25368 + 18634473 * t25370 - 1028019096 * t25372 + 7218572010 * t25374
            t25389 = 114059088 * t25361 - 3575624832 * t25369 + 43379803584 * t25371 - 267254286624 * t25373 + 947128317408 * t25375 - 2048278205376 * t25377 + 2749076351424 * t25379 - 2235744604080 * t25381 + 1009182921552 * t25383 - 194028134976 * t25385 - 597168
            t25388 = -25518731280 * t25342 + 49140599840 * t25344 + 99887605296 * t25346 - 422690291328 * t25348 + 588377017056 * t25350 - 436550001472 * t25352 + 7156976 * t25362 - 395893728 * t25368 + 6413438256 * t25370 - 47294017152 * t25372 + 188622068960 * t25374
            t25387 = -127330963578 * t25342 + 624971721348 * t25344 - 1290908224242 * t25346 + 1457976063024 * t25348 - 979744724244 * t25350 + 399928485528 * t25352 - 413946 * t25362 + 32586372 * t25368 - 967581810 * t25370 + 13446214704 * t25372 - 97403163156 * t25374
            t25367 = 2 * phi1
            t25366 = 3 * phi1
            t25365 = 5 * phi1
            t25364 = -2 * phi2
            t25363 = 2 * phi2
            tfunc[..., c] = -(0.43e2 / 0.1388750831616e13) * np.sqrt(0.3e1) * np.sqrt(0.3449e4) * np.sqrt(0.41e2) * np.sqrt(0.37e2) * np.sqrt(0.31e2) * np.sqrt(0.17e2) * np.sqrt(0.5e1) * ((t25388 + t25392) * np.exp((-8*1j) * (phi1 + phi2)) + (t25395 + t25396) * np.exp((-8*1j) * (t25367 + phi2)) + (t25387 + t25389) * np.exp((-4*1j) * (phi1 + t25363)) + (t25390 + t25393) * np.exp((-4*1j) * (t25366 + t25363)) + (-t25391 + t25394) * np.exp((-4*1j) * (t25365 + t25363)) + (-t25387 + t25389) * np.exp((4*1j) * (phi1 + t25364)) + (-t25390 + t25393) * np.exp((4*1j) * (t25366 + t25364)) + (t25391 + t25394) * np.exp((4*1j) * (t25365 + t25364)) + (-t25388 + t25392) * np.exp((8*1j) * (phi1 - phi2)) + (-t25395 + t25396) * np.exp((8*1j) * (t25367 - phi2)))

        if Bindx == 541:
            t25426 = np.cos(phi)
            t25425 = t25426 ** 2
            t25434 = t25425 ** 2
            t25435 = t25426 * t25434
            t25440 = t25435 ** 2
            t25450 = t25440 ** 2
            t25406 = t25426 * t25450
            t25438 = t25434 ** 2
            t25439 = t25426 * t25438
            t25448 = t25439 ** 2
            t25408 = t25426 * t25448
            t25446 = t25438 ** 2
            t25410 = t25426 * t25446
            t25433 = t25426 * t25425
            t25436 = t25433 ** 2
            t25437 = t25426 * t25436
            t25444 = t25437 ** 2
            t25412 = t25426 * t25444
            t25442 = t25436 ** 2
            t25414 = t25426 * t25442
            t25441 = t25426 * t25440
            t25460 = 1215177680 * t25406 - 4682879840 * t25408 + 3099561040 * t25410 + 12841261440 * t25412 - 31912843360 * t25414 - 1559920 * t25426 + 59276960 * t25433 - 900073840 * t25435 + 5752984960 * t25437 - 18622324960 * t25439 + 33151419840 * t25441
            t25459 = -34632563880 * t25406 + 161843883888 * t25408 - 292487339880 * t25410 + 229136530752 * t25412 - 13494197328 * t25414 + 10757496 * t25426 - 474488976 * t25433 + 5980673016 * t25435 - 33144396480 * t25437 + 91720503024 * t25439 - 114459361632 * t25441
            t25458 = -52860229080 * t25406 + 296532992400 * t25408 - 715682716440 * t25410 + 970781050560 * t25412 - 810958772400 * t25414 - 2482680 * t25426 + 164403600 * t25433 - 3213573240 * t25435 + 28897709760 * t25437 - 143413897200 * t25439 + 429755514720 * t25441
            t25457 = 86277615280 * t25406 - 453693996448 * t25408 + 1021044076080 * t25410 - 1284639956352 * t25412 + 990846602592 * t25414 + 2591216 * t25426 - 156956576 * t25433 + 3017044464 * t25435 - 28122679680 * t25437 + 149110798816 * t25439 - 483685139392 * t25441
            t25405 = t25441 ** 2
            t25456 = -227845815 * t25405 - 38510525 * t25425 + 483867685 * t25434 - 2309169075 * t25436 + 4328972990 * t25438 + 1021942590 * t25440 - 18116325910 * t25442 + 32339286490 * t25444 - 26937381025 * t25446 + 10645771535 * t25448 - 1191096415 * t25450 + 487475
            t25455 = -39645171810 * t25405 - 5987910 * t25425 + 209347350 * t25434 - 3008564970 * t25436 + 23054667300 * t25438 - 105684518460 * t25440 + 306292410540 * t25442 - 573758970900 * t25444 + 691658298930 * t25446 - 517321144350 * t25448 + 218209604190 * t25450 + 30090
            t25454 = -8658140970 * t25405 + 46277730 * t25425 - 1189625682 * t25434 + 13121660718 * t25436 - 76707738828 * t25438 + 259518208596 * t25440 - 529613827620 * t25442 + 653558402844 * t25444 - 462796033734 * t25446 + 154621727274 * t25448 - 1900567530 * t25450 - 342798
            t25453 = -32354105730 * t25405 + 54396650 * t25425 - 1556219322 * t25434 + 17159027382 * t25436 - 95330493852 * t25438 + 299462413796 * t25440 - 552366525620 * t25442 + 575443975404 * t25444 - 263541326286 * t25446 - 55606975214 * t25448 + 108636143630 * t25450 - 310838
            t25432 = 4 * phi1
            t25431 = 8 * phi1
            t25430 = -7 * phi2
            t25429 = 7 * phi2
            t25428 = 12 * phi1
            t25427 = 16 * phi1
            tfunc[..., c] = (0.43e2 / 0.28932308992e11*1j) * np.sqrt(0.29e2) * np.sqrt(0.3449e4) * np.sqrt(0.2e1) * np.sqrt(0.13e2) * np.sqrt(0.7e1) * ((1 + t25426) ** (-0.1e1 / 0.2e1)) * ((1 - t25426) ** (-0.1e1 / 0.2e1)) * ((t25455 + t25458) * np.exp((-1*1j) * (t25432 + t25429)) + (-t25453 + t25457) * np.exp((-1*1j) * (t25431 + t25429)) + (-t25455 + t25458) * np.exp((1j) * (t25432 + t25430)) + (t25453 + t25457) * np.exp((1j) * (t25431 + t25430)) + (t25454 + t25459) * np.exp((-1*1j) * (t25428 + t25429)) + (-t25456 + t25460) * np.exp((-1*1j) * (t25427 + t25429)) + (-t25454 + t25459) * np.exp((1j) * (t25428 + t25430)) + (t25456 + t25460) * np.exp((1j) * (t25427 + t25430)))

        if Bindx == 542:
            t25492 = np.cos(phi)
            t25491 = t25492 ** 2
            t25501 = t25491 ** 2
            t25502 = t25492 * t25501
            t25507 = t25502 ** 2
            t25517 = t25507 ** 2
            t25472 = t25492 * t25517
            t25505 = t25501 ** 2
            t25506 = t25492 * t25505
            t25515 = t25506 ** 2
            t25474 = t25492 * t25515
            t25513 = t25505 ** 2
            t25476 = t25492 * t25513
            t25500 = t25492 * t25491
            t25503 = t25500 ** 2
            t25504 = t25492 * t25503
            t25511 = t25504 ** 2
            t25478 = t25492 * t25511
            t25509 = t25503 ** 2
            t25480 = t25492 * t25509
            t25508 = t25492 * t25507
            t25529 = 1296256 * t25472 - 4995328 * t25474 + 3306368 * t25476 + 13698048 * t25478 - 34042112 * t25480 - 1664 * t25492 + 63232 * t25500 - 960128 * t25502 + 6136832 * t25504 - 19864832 * t25506 + 35363328 * t25508
            t25471 = t25508 ** 2
            t25528 = 243048 * t25471 + 41080 * t25491 - 516152 * t25501 + 2463240 * t25503 - 4617808 * t25505 - 1090128 * t25507 + 19325072 * t25509 - 34497008 * t25511 + 28734680 * t25513 - 11356072 * t25515 + 1270568 * t25517 - 520
            t25527 = -1310620 * t25472 + 3669736 * t25474 + 9174340 * t25476 - 56618784 * t25478 + 106422344 * t25480 - 262124 * t25492 + 3669736 * t25500 - 12844076 * t25502 + 10484960 * t25504 + 33027624 * t25506 - 95413136 * t25508
            t25526 = -196593 * t25471 + 458717 * t25491 + 3211019 * t25501 - 26146869 * t25503 + 68545426 * t25505 - 83486494 * t25507 + 35779926 * t25509 + 25294966 * t25511 - 38073511 * t25513 + 16972529 * t25515 - 2293585 * t25517 - 65531
            t25525 = 382192980 * t25472 - 1786053048 * t25474 + 3227788980 * t25476 - 2528671392 * t25478 + 148917288 * t25480 - 118716 * t25492 + 5236296 * t25500 - 66000636 * t25502 + 365770080 * t25504 - 1012195704 * t25506 + 1263133872 * t25508
            t25524 = -95548245 * t25471 + 510705 * t25491 - 13128297 * t25501 + 144806103 * t25503 - 846520038 * t25505 + 2863953066 * t25507 - 5844634770 * t25509 + 7212444174 * t25511 - 5107256739 * t25513 + 1706351829 * t25515 - 20974005 * t25517 - 3783
            t25523 = 9721421440 * t25472 - 51120450304 * t25474 + 115047219840 * t25476 - 144748164096 * t25478 + 111644687616 * t25480 + 291968 * t25492 - 17685248 * t25500 + 339948672 * t25502 - 3168752640 * t25504 + 16801216768 * t25506 - 54499734016 * t25508
            t25522 = 24253516872 * t25472 - 136056314160 * t25474 + 328372069896 * t25476 - 445417187904 * t25478 + 372086966160 * t25480 + 1139112 * t25492 - 75432240 * t25500 + 1474463016 * t25502 - 13258949184 * t25504 + 65801670480 * t25506 - 197181942048 * t25508
            t25521 = -3645533040 * t25471 + 6129200 * t25491 - 175348656 * t25501 + 1933411536 * t25503 - 10741464096 * t25505 + 33742243808 * t25507 - 62238481760 * t25509 + 64838757792 * t25511 - 29694797328 * t25513 - 6265574672 * t25515 + 12240692240 * t25517 - 35024
            t25520 = 18190137654 * t25471 + 2747394 * t25491 - 96053490 * t25501 + 1380400398 * t25503 - 10578023820 * t25505 + 48490543764 * t25507 - 140534164836 * t25509 + 263254116060 * t25511 - 317349101862 * t25513 + 237359113290 * t25515 - 100119700746 * t25517 - 13806
            t25499 = 4 * phi1
            t25498 = 8 * phi1
            t25497 = -7 * phi2
            t25496 = 7 * phi2
            t25495 = 12 * phi1
            t25494 = 16 * phi1
            t25493 = 20 * phi1
            tfunc[..., c] = (0.43e2 / 0.2777501663232e13*1j) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.3449e4) * np.sqrt(0.29e2) * np.sqrt(0.31e2) * np.sqrt(0.7e1) * np.sqrt(0.41e2) * np.sqrt(0.37e2) * np.sqrt(0.17e2) * np.sqrt(0.5e1) * ((t25520 + t25522) * np.exp((-1*1j) * (t25499 + t25496)) + (-t25521 + t25523) * np.exp((-1*1j) * (t25498 + t25496)) + (-t25520 + t25522) * np.exp((1j) * (t25499 + t25497)) + (t25521 + t25523) * np.exp((1j) * (t25498 + t25497)) + (-t25524 + t25525) * np.exp((-1*1j) * (t25495 + t25496)) + (t25528 + t25529) * np.exp((-1*1j) * (t25494 + t25496)) + (t25526 + t25527) * np.exp((-1*1j) * (t25493 + t25496)) + (t25524 + t25525) * np.exp((1j) * (t25495 + t25497)) + (-t25528 + t25529) * np.exp((1j) * (t25494 + t25497)) + (-t25526 + t25527) * np.exp((1j) * (t25493 + t25497))) * ((1 + t25492) ** (-0.1e1 / 0.2e1)) * ((1 - t25492) ** (-0.1e1 / 0.2e1))

        if Bindx == 543:
            t25558 = np.cos(phi)
            t25557 = t25558 ** 2
            t25565 = t25557 ** 2
            t25564 = t25558 * t25557
            t25567 = t25564 ** 2
            t25569 = t25565 ** 2
            t25566 = t25558 * t25565
            t25571 = t25566 ** 2
            t25573 = t25567 ** 2
            t25568 = t25558 * t25567
            t25575 = t25568 ** 2
            t25577 = t25569 ** 2
            t25570 = t25558 * t25569
            t25579 = t25570 ** 2
            t25581 = t25571 ** 2
            t25590 = 13259320 * t25557 - 199669760 * t25565 + 1252303776 * t25567 - 3941917840 * t25569 + 6518905680 * t25571 - 4957425760 * t25573 - 265186400 * t25575 + 3301882664 * t25577 - 2208066760 * t25579 + 486071072 * t25581 - 155992
            t25589 = 8071260 * t25557 - 270430560 * t25565 + 3489553008 * t25567 - 22746724200 * t25569 + 84849626568 * t25571 - 192202675920 * t25573 + 269045599920 * t25575 - 227393984172 * t25577 + 106365095100 * t25579 - 21144091632 * t25581 - 39372
            t25588 = -15318392 * t25557 + 467141376 * t25565 - 5654833056 * t25567 + 35515766544 * t25569 - 130365863888 * t25571 + 295010559584 * t25573 - 416643383712 * t25575 + 357415266072 * t25577 - 170240465272 * t25579 + 34511046112 * t25581 + 84632
            t25587 = -15613212 * t25557 + 316024416 * t25565 - 2022946416 * t25567 + 3574867176 * t25569 + 11564166840 * t25571 - 64852188976 * t25573 + 127416786768 * t25575 - 128211618708 * t25577 + 66083436932 * t25579 - 13853025552 * t25581 + 110732
            t25538 = t25558 * t25581
            t25540 = t25558 * t25579
            t25542 = t25558 * t25577
            t25544 = t25558 * t25575
            t25546 = t25558 * t25573
            t25548 = t25558 * t25571
            t25586 = -106328047 * t25538 - 214878980 * t25540 + 3191693815 * t25542 - 9052527744 * t25544 + 12334872410 * t25546 - 9155950440 * t25548 - 916453 * t25558 + 20668940 * t25564 - 50872891 * t25566 - 545972000 * t25568 + 3580211390 * t25570
            t25585 = -15098582674 * t25538 + 55343933704 * t25540 - 63603437118 * t25542 - 7413954048 * t25544 + 83393063916 * t25546 - 84474274352 * t25548 + 1498810 * t25558 - 88574488 * t25564 + 1484425542 * t25566 - 10908421824 * t25568 + 41364322532 * t25570
            t25584 = -18501080178 * t25538 + 94116993240 * t25540 - 205316865390 * t25542 + 251199701952 * t25544 - 189214238100 * t25546 + 90614496432 * t25548 - 368118 * t25558 + 25347000 * t25564 - 524638938 * t25566 + 5077543680 * t25568 - 27476891580 * t25570
            t25583 = -4040465786 * t25538 + 5237119416 * t25540 + 35350556058 * t25542 - 122230373184 * t25544 + 173207397276 * t25546 - 135474872208 * t25548 + 3728370 * t25558 - 176648168 * t25564 + 2529923454 * t25566 - 16950986496 * t25568 + 62544621268 * t25570
            t25563 = 2 * phi1
            t25562 = 4 * phi1
            t25561 = 8 * phi1
            t25560 = -3 * phi2
            t25559 = 3 * phi2
            tfunc[..., c] = (0.43e2 / 0.14466154496e11) * np.sqrt(0.5e1) * np.sqrt(0.29e2) * np.sqrt(0.3449e4) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.13e2) * ((t25583 + t25587) * np.exp((-6*1j) * (t25563 + phi2)) + (t25584 + t25589) * np.exp((-2*1j) * (t25563 + t25559)) + (-t25585 + t25588) * np.exp((-2*1j) * (t25562 + t25559)) + (-t25586 + t25590) * np.exp((-2*1j) * (t25561 + t25559)) + (-t25584 + t25589) * np.exp((2*1j) * (t25563 + t25560)) + (t25585 + t25588) * np.exp((2*1j) * (t25562 + t25560)) + (t25586 + t25590) * np.exp((2*1j) * (t25561 + t25560)) + (-t25583 + t25587) * np.exp((6*1j) * (t25563 - phi2)))

        if Bindx == 544:
            t25621 = np.cos(phi)
            t25620 = t25621 ** 2
            t25629 = t25620 ** 2
            t25628 = t25621 * t25620
            t25631 = t25628 ** 2
            t25633 = t25629 ** 2
            t25630 = t25621 * t25629
            t25635 = t25630 ** 2
            t25637 = t25631 ** 2
            t25632 = t25621 * t25631
            t25639 = t25632 ** 2
            t25641 = t25633 ** 2
            t25634 = t25621 * t25633
            t25643 = t25634 ** 2
            t25645 = t25635 ** 2
            t25656 = -70720 * t25620 + 1064960 * t25629 - 6679296 * t25631 + 21024640 * t25633 - 34769280 * t25635 + 26440960 * t25637 + 1414400 * t25639 - 17610944 * t25641 + 11776960 * t25643 - 2592512 * t25645 + 832
            t25601 = t25621 * t25645
            t25603 = t25621 * t25643
            t25605 = t25621 * t25641
            t25607 = t25621 * t25639
            t25609 = t25621 * t25637
            t25611 = t25621 * t25635
            t25655 = -567112 * t25601 - 1146080 * t25603 + 17023240 * t25605 - 48282624 * t25607 + 65789360 * t25609 - 48834240 * t25611 - 4888 * t25621 + 110240 * t25628 - 271336 * t25630 - 2912000 * t25632 + 19095440 * t25634
            t25654 = -1703806 * t25620 + 1048496 * t25629 + 26736648 * t25631 - 100917740 * t25633 + 166972988 * t25635 - 143119704 * t25637 + 53997544 * t25639 + 5373542 * t25641 - 11140270 * t25643 + 2621240 * t25645 + 131062
            t25653 = -861510 * t25620 + 17437680 * t25629 - 111622680 * t25631 + 197254980 * t25633 + 638090700 * t25635 - 3578431480 * t25637 + 7030637640 * t25639 - 7074495090 * t25641 + 3646369610 * t25643 - 764385960 * t25645 + 6110
            t25652 = -458717 * t25601 - 2883364 * t25603 + 28768109 * t25605 - 81782688 * t25607 + 105504910 * t25609 - 47706568 * t25611 - 327655 * t25621 + 6553100 * t25628 - 30602977 * t25630 + 58715776 * t25632 - 35779926 * t25634
            t25651 = 8630080 * t25620 - 263178240 * t25629 + 3185821440 * t25631 - 20008882560 * t25633 + 73445557120 * t25635 - 166203132160 * t25637 + 234728666880 * t25639 - 201360713280 * t25641 + 95910121280 * t25643 - 19442842880 * t25645 - 47680
            t25650 = 18516420 * t25620 - 620399520 * t25629 + 8005445136 * t25631 - 52183661400 * t25633 + 194655025656 * t25635 - 440935550640 * t25637 + 617222258640 * t25639 - 521668551924 * t25641 + 244014041700 * t25643 - 48507033744 * t25645 - 90324
            t25649 = -222945905 * t25601 + 288975180 * t25603 + 1950582465 * t25605 - 6744460320 * t25607 + 9557284230 * t25609 - 7475268840 * t25611 + 205725 * t25621 - 9747140 * t25628 + 139596795 * t25630 - 935326080 * t25632 + 3451103890 * t25634
            t25648 = -8506243760 * t25601 + 31179680960 * t25603 - 35832922320 * t25605 - 4176875520 * t25607 + 46982007840 * t25609 - 47591140480 * t25611 + 844400 * t25621 - 49901120 * t25628 + 836296080 * t25630 - 6145589760 * t25632 + 23303843680 * t25634
            t25647 = -42443654526 * t25601 + 215915455080 * t25603 - 471021044130 * t25605 + 576281669184 * t25607 - 434079722700 * t25609 + 207880315344 * t25611 - 844506 * t25621 + 58149000 * t25628 - 1203583446 * t25630 + 11648482560 * t25632 - 63035221860 * t25634
            t25627 = 2 * phi1
            t25626 = 4 * phi1
            t25625 = 8 * phi1
            t25624 = -3 * phi2
            t25623 = 3 * phi2
            t25622 = 10 * phi1
            tfunc[..., c] = -(0.43e2 / 0.462916943872e12) * np.sqrt(0.2e1) * np.sqrt(0.3449e4) * np.sqrt(0.41e2) * np.sqrt(0.17e2) * np.sqrt(0.29e2) * np.sqrt(0.31e2) * np.sqrt(0.37e2) * ((t25649 + t25653) * np.exp((-6*1j) * (t25627 + phi2)) + (t25647 + t25650) * np.exp((-2*1j) * (t25627 + t25623)) + (t25648 + t25651) * np.exp((-2*1j) * (t25626 + t25623)) + (t25655 + t25656) * np.exp((-2*1j) * (t25625 + t25623)) + (-t25647 + t25650) * np.exp((2*1j) * (t25627 + t25624)) + (-t25648 + t25651) * np.exp((2*1j) * (t25626 + t25624)) + (-t25655 + t25656) * np.exp((2*1j) * (t25625 + t25624)) + (-t25649 + t25653) * np.exp((6*1j) * (t25627 - phi2)) + (-t25652 + t25654) * np.exp((-2*1j) * (t25622 + t25623)) + (t25652 + t25654) * np.exp((2*1j) * (t25622 + t25624)))

        if Bindx == 545:
            t25686 = np.cos(phi)
            t25685 = t25686 ** 2
            t25694 = t25685 ** 2
            t25695 = t25686 * t25694
            t25700 = t25695 ** 2
            t25710 = t25700 ** 2
            t25666 = t25686 * t25710
            t25698 = t25694 ** 2
            t25699 = t25686 * t25698
            t25708 = t25699 ** 2
            t25668 = t25686 * t25708
            t25706 = t25698 ** 2
            t25670 = t25686 * t25706
            t25693 = t25686 * t25685
            t25696 = t25693 ** 2
            t25697 = t25686 * t25696
            t25704 = t25697 ** 2
            t25672 = t25686 * t25704
            t25702 = t25696 ** 2
            t25674 = t25686 * t25702
            t25701 = t25686 * t25700
            t25720 = 3645533040 * t25666 - 22051029120 * t25668 + 54484573776 * t25670 - 67658098176 * t25672 + 37278968160 * t25674 - 14039280 * t25686 + 411818880 * t25693 - 3441495504 * t25695 + 12609145344 * t25697 - 21030841440 * t25699 + 5765464320 * t25701
            t25719 = -103897691640 * t25666 + 600072521472 * t25668 - 1478121383016 * t25670 + 2022162037632 * t25672 - 1676554394544 * t25674 - 4283208 * t25686 + 243591552 * t25693 - 5020386264 * t25695 + 50179181184 * t25697 - 272042994384 * t25699 + 862983801216 * t25701
            t25718 = -158580687240 * t25666 + 866392047360 * t25668 - 2031990634008 * t25670 + 2671472312448 * t25672 - 2156476537680 * t25674 - 4968760 * t25686 + 348301440 * t25693 - 7181022632 * t25695 + 67846084992 * t25697 - 352347612720 * t25699 + 1100522716800 * t25701
            t25717 = 258832845840 * t25666 - 1444413539712 * t25668 + 3472878910512 * t25670 - 4703607854592 * t25672 + 3936780651936 * t25674 + 14378352 * t25686 - 899902848 * t25693 + 16825272144 * t25695 - 146417167872 * t25697 + 710597983584 * t25699 - 2100591577344 * t25701
            t25665 = t25701 ** 2
            t25716 = -956952423 * t25665 + 47909043 * t25685 - 918110415 * t25694 + 7766354205 * t25696 - 34130074650 * t25698 + 86240372190 * t25700 - 131774436990 * t25702 + 121969169850 * t25704 - 63843918285 * t25706 + 14054196735 * t25708 + 1546017213 * t25710 - 526473
            t25715 = -135887244066 * t25665 + 51222666 * t25685 - 1494055698 * t25694 + 15816323094 * t25696 - 76654084716 * t25698 + 168918314916 * t25700 - 53362672740 * t25702 - 545823181524 * t25704 + 1261629174858 * t25706 - 1292112505422 * t25708 + 658918982550 * t25710 - 273918
            t25714 = -36364192074 * t25665 + 247800546 * t25685 - 6010581258 * t25694 + 56920473486 * t25696 - 275387607324 * t25698 + 763207637076 * t25700 - 1258847574804 * t25702 + 1198464901596 * t25704 - 543085955118 * t25706 - 26481240918 * t25708 + 127338024510 * t25710 - 1685718
            t25713 = -166509721602 * t25665 - 36967622 * t25685 + 1311013310 * t25694 - 18424015370 * t25696 + 134762329620 * t25698 - 582770446908 * t25700 + 1589680746108 * t25702 - 2813082817620 * t25704 + 3225052129770 * t25706 - 2311990385310 * t25708 + 942007960422 * t25710 + 175202
            t25692 = 4 * phi1
            t25691 = 8 * phi1
            t25690 = -5 * phi2
            t25689 = 5 * phi2
            t25688 = 12 * phi1
            t25687 = 16 * phi1
            tfunc[..., c] = (0.43e2 / 0.57864617984e11*1j) * np.sqrt(0.5e1) * np.sqrt(0.29e2) * np.sqrt(0.3449e4) * np.sqrt(0.2e1) * np.sqrt(0.13e2) * ((1 + t25686) ** (-0.1e1 / 0.2e1)) * ((1 - t25686) ** (-0.1e1 / 0.2e1)) * ((t25713 + t25718) * np.exp((-1*1j) * (t25692 + t25689)) + (-t25715 + t25717) * np.exp((-1*1j) * (t25691 + t25689)) + (-t25713 + t25718) * np.exp((1j) * (t25692 + t25690)) + (t25715 + t25717) * np.exp((1j) * (t25691 + t25690)) + (t25714 + t25719) * np.exp((-1*1j) * (t25688 + t25689)) + (-t25716 + t25720) * np.exp((-1*1j) * (t25687 + t25689)) + (-t25714 + t25719) * np.exp((1j) * (t25688 + t25690)) + (t25716 + t25720) * np.exp((1j) * (t25687 + t25690)))

        if Bindx == 546:
            t25752 = np.cos(phi)
            t25751 = t25752 ** 2
            t25760 = t25751 ** 2
            t25761 = t25752 * t25760
            t25766 = t25761 ** 2
            t25776 = t25766 ** 2
            t25732 = t25752 * t25776
            t25764 = t25760 ** 2
            t25765 = t25752 * t25764
            t25774 = t25765 ** 2
            t25734 = t25752 * t25774
            t25772 = t25764 ** 2
            t25736 = t25752 * t25772
            t25759 = t25752 * t25751
            t25762 = t25759 ** 2
            t25763 = t25752 * t25762
            t25770 = t25763 ** 2
            t25738 = t25752 * t25770
            t25768 = t25762 ** 2
            t25740 = t25752 * t25768
            t25767 = t25752 * t25766
            t25788 = 6481280 * t25732 - 39203840 * t25734 + 96866432 * t25736 - 120287232 * t25738 + 66277120 * t25740 - 24960 * t25752 + 732160 * t25759 - 6118528 * t25761 + 22417408 * t25763 - 37390080 * t25765 + 10250240 * t25767
            t25731 = t25767 ** 2
            t25787 = -1701336 * t25731 + 85176 * t25751 - 1632280 * t25760 + 13807560 * t25762 - 60678800 * t25764 + 153324080 * t25766 - 234277680 * t25768 + 216845200 * t25770 - 113506120 * t25772 + 24986520 * t25774 + 2748616 * t25776 - 936
            t25786 = 1910964900 * t25732 - 11036987520 * t25734 + 27186726060 * t25736 - 37193133120 * t25738 + 30836456040 * t25740 + 78780 * t25752 - 4480320 * t25759 + 92338740 * t25761 - 922933440 * t25763 + 5003620440 * t25765 - 15872650560 * t25767
            t25785 = -6553100 * t25732 + 41939840 * t25734 - 99344996 * t25736 + 71297728 * t25738 + 135780232 * t25740 + 262124 * t25752 - 12581952 * t25759 + 84666052 * t25761 - 255833024 * t25763 + 422019640 * t25765 - 381652544 * t25767
            t25784 = -1376151 * t25731 - 6225445 * t25751 + 25884745 * t25760 - 23656691 * t25762 - 103670042 * t25764 + 369725902 * t25766 - 560552174 * t25768 + 479031610 * t25770 - 233224829 * t25772 + 54849447 * t25774 - 1114027 * t25776 + 327655
            t25783 = 668837715 * t25731 - 4557735 * t25751 + 110551155 * t25760 - 1046924385 * t25762 + 5065137090 * t25764 - 14037491910 * t25766 + 23153676390 * t25768 - 22043072610 * t25770 + 9988847505 * t25772 + 487063005 * t25774 - 2342097225 * t25776 + 31005
            t25782 = 48607107200 * t25732 - 271251368960 * t25734 + 652183832960 * t25736 - 883306639360 * t25738 + 739301530880 * t25740 + 2700160 * t25752 - 168995840 * t25759 + 3159675520 * t25761 - 27496181760 * t25763 + 133445630720 * t25765 - 394477291520 * t25767
            t25781 = 121267584360 * t25732 - 662535095040 * t25734 + 1553875190712 * t25736 - 2042890591872 * t25738 + 1649070293520 * t25740 + 3799640 * t25752 - 266348160 * t25759 + 5491370248 * t25761 - 51882300288 * t25763 + 269442292080 * t25765 - 841576195200 * t25767
            t25780 = 25518731280 * t25731 - 9619280 * t25751 + 280573840 * t25760 - 2970201520 * t25762 + 14395133280 * t25764 - 31721749280 * t25766 + 10021159200 * t25768 + 102502005920 * t25770 - 236925666640 * t25772 + 242650235760 * t25774 - 123740654000 * t25776 + 51440
            t25779 = 127330963578 * t25731 + 28269358 * t25751 - 1002539590 * t25760 + 14088952930 * t25762 - 103053546180 * t25764 + 445647988812 * t25766 - 1215638217612 * t25768 + 2151180978180 * t25770 - 2466216334530 * t25772 + 1767992647590 * t25774 - 720359028558 * t25776 - 133978
            t25758 = 4 * phi1
            t25757 = 8 * phi1
            t25756 = -5 * phi2
            t25755 = 5 * phi2
            t25754 = 12 * phi1
            t25753 = 16 * phi1
            tfunc[..., c] = (0.43e2 / 0.1851667775488e13*1j) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.3449e4) * np.sqrt(0.29e2) * np.sqrt(0.41e2) * np.sqrt(0.37e2) * np.sqrt(0.31e2) * np.sqrt(0.17e2) * ((1 + t25752) ** (-0.1e1 / 0.2e1)) * ((1 - t25752) ** (-0.1e1 / 0.2e1)) * ((t25784 + t25785) * np.exp((-5*1j) * (t25758 + phi2)) + (t25779 + t25781) * np.exp((-1*1j) * (t25758 + t25755)) + (t25780 + t25782) * np.exp((-1*1j) * (t25757 + t25755)) + (-t25779 + t25781) * np.exp((1j) * (t25758 + t25756)) + (-t25780 + t25782) * np.exp((1j) * (t25757 + t25756)) + (-t25784 + t25785) * np.exp((5*1j) * (t25758 - phi2)) + (t25783 + t25786) * np.exp((-1*1j) * (t25754 + t25755)) + (-t25787 + t25788) * np.exp((-1*1j) * (t25753 + t25755)) + (-t25783 + t25786) * np.exp((1j) * (t25754 + t25756)) + (t25787 + t25788) * np.exp((1j) * (t25753 + t25756)))

        if Bindx == 547:
            t25817 = np.cos(phi)
            t25816 = t25817 ** 2
            t25822 = t25816 ** 2
            t25821 = t25817 * t25816
            t25824 = t25821 ** 2
            t25826 = t25822 ** 2
            t25823 = t25817 * t25822
            t25828 = t25823 ** 2
            t25830 = t25824 ** 2
            t25825 = t25817 * t25824
            t25832 = t25825 ** 2
            t25834 = t25826 ** 2
            t25827 = t25817 * t25826
            t25836 = t25827 ** 2
            t25838 = t25828 ** 2
            t25847 = -15690960 * t25816 + 143145600 * t25822 + 290915904 * t25824 - 6123878880 * t25826 + 24553324320 * t25828 - 49168311360 * t25830 + 56717590080 * t25832 - 38377830864 * t25834 + 14210779440 * t25836 - 2230208448 * t25838 + 165168
            t25846 = -26988520 * t25816 + 946516480 * t25822 - 12755122848 * t25824 + 86609175120 * t25826 - 335602209072 * t25828 + 787436401440 * t25830 - 1138441673760 * t25832 + 991017331992 * t25834 - 476197099560 * t25836 + 97014067488 * t25838 + 125528
            t25845 = -108861336 * t25816 + 2800963584 * t25822 - 28948548960 * t25824 + 156492898992 * t25826 - 496091582928 * t25828 + 969971212512 * t25830 - 1183423907808 * t25832 + 877345906536 * t25834 - 361599742296 * t25836 + 63560940768 * t25838 + 720936
            t25844 = 93082704 * t25816 - 2918038656 * t25822 + 35401908672 * t25824 - 218104072992 * t25826 + 772943799264 * t25828 - 1671583363008 * t25830 + 2243499091392 * t25832 - 1824573182640 * t25834 + 823586062416 * t25836 - 158344799808 * t25838 - 487344
            t25797 = t25817 * t25838
            t25799 = t25817 * t25836
            t25801 = t25817 * t25834
            t25803 = t25817 * t25832
            t25805 = t25817 * t25830
            t25807 = t25817 * t25828
            t25843 = -731787147 * t25797 + 2694268590 * t25799 + 501783825 * t25801 - 18854119896 * t25803 + 43922885370 * t25805 - 50768169900 * t25807 + 9486837 * t25817 - 300777810 * t25821 + 2905308561 * t25823 - 13343234520 * t25825 + 33964356090 * t25827
            t25842 = -103913774874 * t25797 + 510034393284 * t25799 - 1053499815186 * t25801 + 1189842534192 * t25803 - 799561786452 * t25805 + 326378419224 * t25807 - 337818 * t25817 + 26593476 * t25821 - 789635730 * t25823 + 10973347632 * t25825 - 79489937748 * t25827
            t25841 = -27807911586 * t25797 + 122277297636 * t25799 - 181552644954 * t25801 + 34694408880 * t25803 + 211041440028 * t25805 - 283117885992 * t25807 + 13263102 * t25817 - 651620124 * t25821 + 9035522694 * t25823 - 54792577872 * t25825 + 170860708188 * t25827
            t25840 = -127330963578 * t25797 + 664013968020 * t25799 - 1488030616530 * t25801 + 1872111503088 * t25803 - 1449130086420 * t25805 + 710986311672 * t25807 - 2779738 * t25817 + 198957460 * t25821 - 4205639282 * t25823 + 40903864560 * t25825 - 219515043540 * t25827
            t25820 = 2 * phi1
            t25819 = 3 * phi1
            t25818 = 4 * phi1
            tfunc[..., c] = -(0.43e2 / 0.28932308992e11) * np.sqrt(0.5e1) * np.sqrt(0.17e2) * np.sqrt(0.29e2) * np.sqrt(0.3449e4) * ((-t25840 + t25846) * np.exp((-4*1j) * (phi1 + phi2)) + (t25842 + t25844) * np.exp((-4*1j) * (t25820 + phi2)) + (-t25841 + t25845) * np.exp((-4*1j) * (t25819 + phi2)) + (t25843 + t25847) * np.exp((-4*1j) * (t25818 + phi2)) + (t25840 + t25846) * np.exp((4*1j) * (phi1 - phi2)) + (-t25842 + t25844) * np.exp((4*1j) * (t25820 - phi2)) + (t25841 + t25845) * np.exp((4*1j) * (t25819 - phi2)) + (-t25843 + t25847) * np.exp((4*1j) * (t25818 - phi2)))

        if Bindx == 548:
            t25878 = np.cos(phi)
            t25877 = t25878 ** 2
            t25884 = t25877 ** 2
            t25883 = t25878 * t25877
            t25886 = t25883 ** 2
            t25888 = t25884 ** 2
            t25885 = t25878 * t25884
            t25890 = t25885 ** 2
            t25892 = t25886 ** 2
            t25887 = t25878 * t25886
            t25894 = t25887 ** 2
            t25896 = t25888 ** 2
            t25889 = t25878 * t25888
            t25898 = t25889 ** 2
            t25900 = t25890 ** 2
            t25911 = -36480 * t25877 + 332800 * t25884 + 676352 * t25886 - 14237440 * t25888 + 57084160 * t25890 - 114311680 * t25892 + 131863040 * t25894 - 89224832 * t25896 + 33038720 * t25898 - 5185024 * t25900 + 384
            t25858 = t25878 * t25900
            t25860 = t25878 * t25898
            t25862 = t25878 * t25896
            t25864 = t25878 * t25894
            t25866 = t25878 * t25892
            t25868 = t25878 * t25890
            t25910 = 1701336 * t25858 - 6263920 * t25860 - 1166600 * t25862 + 43834048 * t25864 - 102116560 * t25866 + 118031200 * t25868 - 22056 * t25878 + 699280 * t25883 - 6754568 * t25885 + 31021760 * t25887 - 78963920 * t25889
            t25909 = 6028852 * t25877 - 33551872 * t25884 + 82831184 * t25886 - 91743400 * t25888 - 3669736 * t25890 + 139449968 * t25892 - 181389808 * t25894 + 115072436 * t25896 - 38007980 * t25898 + 5242480 * t25900 - 262124
            t25908 = 2618340 * t25877 - 67368960 * t25884 + 696272400 * t25886 - 3763977480 * t25888 + 11932027320 * t25890 - 23329811280 * t25892 + 28463789520 * t25894 - 21101981340 * t25896 + 8697220740 * t25898 - 1528771920 * t25900 - 17340
            t25907 = -1376151 * t25858 + 3800798 * t25860 + 18807397 * t25862 - 122149784 * t25864 + 298166050 * t25866 - 409175564 * t25868 - 327655 * t25878 - 4587170 * t25883 + 47116789 * t25885 - 172477592 * t25887 + 342202882 * t25889
            t25906 = 25518731280 * t25858 - 125252216480 * t25860 + 258714291920 * t25862 - 292196794240 * t25864 + 196353201440 * t25866 - 80150713280 * t25868 + 82960 * t25878 - 6530720 * t25883 + 193915600 * t25885 - 2694791040 * t25887 + 19520822560 * t25889
            t25905 = 668837715 * t25858 - 2941021590 * t25860 + 4366716135 * t25862 - 834472200 * t25864 - 5075982570 * t25866 + 6809569980 * t25868 - 319005 * t25878 + 15672810 * t25883 - 217322985 * t25885 + 1317874680 * t25887 - 4109552970 * t25889
            t25904 = 22858880 * t25877 - 716600320 * t25884 + 8693859840 * t25886 - 53561130240 * t25888 + 189816462080 * t25890 - 410500789760 * t25892 + 550949578240 * t25894 - 448071420800 * t25896 + 202252987520 * t25898 - 38885685760 * t25900 - 119680
            t25903 = 26988520 * t25877 - 946516480 * t25884 + 12755122848 * t25886 - 86609175120 * t25888 + 335602209072 * t25890 - 787436401440 * t25892 + 1138441673760 * t25894 - 991017331992 * t25896 + 476197099560 * t25898 - 97014067488 * t25900 - 125528
            t25902 = 127330963578 * t25858 - 664013968020 * t25860 + 1488030616530 * t25862 - 1872111503088 * t25864 + 1449130086420 * t25866 - 710986311672 * t25868 + 2779738 * t25878 - 198957460 * t25883 + 4205639282 * t25885 - 40903864560 * t25887 + 219515043540 * t25889
            t25882 = 2 * phi1
            t25881 = 3 * phi1
            t25880 = 4 * phi1
            t25879 = 5 * phi1
            tfunc[..., c] = -(0.43e2 / 0.925833887744e12) * np.sqrt(0.3e1) * np.sqrt(0.3449e4) * np.sqrt(0.41e2) * np.sqrt(0.37e2) * np.sqrt(0.31e2) * np.sqrt(0.29e2) * np.sqrt(0.13e2) * ((-t25902 + t25903) * np.exp((-4*1j) * (phi1 + phi2)) + (t25904 - t25906) * np.exp((-4*1j) * (t25882 + phi2)) + (-t25905 + t25908) * np.exp((-4*1j) * (t25881 + phi2)) + (-t25910 + t25911) * np.exp((-4*1j) * (t25880 + phi2)) + (-t25907 + t25909) * np.exp((-4*1j) * (t25879 + phi2)) + (t25902 + t25903) * np.exp((4*1j) * (phi1 - phi2)) + (t25904 + t25906) * np.exp((4*1j) * (t25882 - phi2)) + (t25905 + t25908) * np.exp((4*1j) * (t25881 - phi2)) + (t25910 + t25911) * np.exp((4*1j) * (t25880 - phi2)) + (t25907 + t25909) * np.exp((4*1j) * (t25879 - phi2)))

        if Bindx == 549:
            t25941 = np.cos(phi)
            t25940 = t25941 ** 2
            t25948 = t25940 ** 2
            t25949 = t25941 * t25948
            t25954 = t25949 ** 2
            t25964 = t25954 ** 2
            t25921 = t25941 * t25964
            t25952 = t25948 ** 2
            t25953 = t25941 * t25952
            t25962 = t25953 ** 2
            t25923 = t25941 * t25962
            t25960 = t25952 ** 2
            t25925 = t25941 * t25960
            t25947 = t25941 * t25940
            t25950 = t25947 ** 2
            t25951 = t25941 * t25950
            t25958 = t25951 ** 2
            t25927 = t25941 * t25958
            t25956 = t25950 ** 2
            t25929 = t25941 * t25956
            t25955 = t25941 * t25954
            t25974 = 929253520 * t25921 - 6980733760 * t25923 + 22919537520 * t25925 - 43036174080 * t25927 + 50744564640 * t25929 + 2661040 * t25941 - 92127040 * t25947 + 1046339280 * t25949 - 5897598720 * t25951 + 19165544160 * t25953 - 38801266560 * t25955
            t25973 = -40422528120 * t25921 + 216901370400 * t25923 - 498661599240 * t25925 + 641328476160 * t25927 - 505347678000 * t25929 - 963560 * t25941 + 70048160 * t25947 - 1495118040 * t25949 + 14595759360 * t25951 - 78161600400 * t25953 + 251193833280 * t25955
            t25972 = -26483725320 * t25921 + 172424123872 * t25923 - 486157372280 * t25925 + 776062931968 * t25927 - 769332697552 * t25929 - 8439192 * t25941 + 437254752 * t25947 - 6767228328 * t25949 + 48865324800 * t25951 - 197536869232 * t25953 + 488496696512 * t25955
            t25971 = 65976999920 * t25921 - 382344760512 * t25923 + 953066983440 * t25925 - 1334609206528 * t25927 + 1150173928800 * t25929 + 4120272 * t25941 - 267064512 * t25947 + 5098637232 * t25949 - 44690330880 * t25951 + 215794830368 * t25953 - 628204137600 * t25955
            t25920 = t25955 ** 2
            t25970 = -406548415 * t25920 + 26684955 * t25940 - 420495935 * t25948 + 2553239205 * t25950 - 7877171610 * t25952 + 13491851310 * t25954 - 12129490590 * t25956 + 2711542410 * t25958 + 5495259795 * t25960 - 5956135865 * t25962 + 2511534285 * t25964 - 269545
            t25969 = -57729874930 * t25920 - 18358470 * t25940 + 610636494 * t25948 - 8158564986 * t25950 + 57354418836 * t25952 - 240157382140 * t25954 + 636947698140 * t25956 - 1097515135860 * t25958 + 1224735343754 * t25960 - 853396402014 * t25962 + 337327527030 * t25964 + 94146
            t25968 = -70739424210 * t25920 - 15971670 * t25940 + 582376990 * t25948 - 8337739930 * t25950 + 61600324500 * t25952 - 267043418460 * t25954 + 725627364540 * t25956 - 1272681126900 * t25958 + 1440682408170 * t25960 - 1017104371950 * t25962 + 407429505990 * t25964 + 72930
            t25967 = -15448839770 * t25920 + 15885330 * t25940 - 358386474 * t25948 + 2610781374 * t25950 - 5834443164 * t25952 - 13724734284 * t25954 + 103318834220 * t25956 - 247417745476 * t25958 + 317194213586 * t25960 - 232779357926 * t25962 + 92423895070 * t25964 - 102486
            t25946 = 4 * phi1
            t25945 = 8 * phi1
            t25944 = -3 * phi2
            t25943 = 3 * phi2
            t25942 = 16 * phi1
            tfunc[..., c] = (0.129e3 / 0.57864617984e11*1j) * np.sqrt(0.5e1) * np.sqrt(0.17e2) * np.sqrt(0.29e2) * np.sqrt(0.3449e4) * np.sqrt(0.2e1) * ((1 + t25941) ** (-0.1e1 / 0.2e1)) * ((1 - t25941) ** (-0.1e1 / 0.2e1)) * ((t25967 + t25972) * np.exp((-3*1j) * (t25946 + phi2)) + (t25968 + t25973) * np.exp((-1*1j) * (t25946 + t25943)) + (-t25969 + t25971) * np.exp((-1*1j) * (t25945 + t25943)) + (-t25968 + t25973) * np.exp((1j) * (t25946 + t25944)) + (t25969 + t25971) * np.exp((1j) * (t25945 + t25944)) + (-t25967 + t25972) * np.exp((3*1j) * (t25946 - phi2)) + (-t25970 + t25974) * np.exp((-1*1j) * (t25942 + t25943)) + (t25970 + t25974) * np.exp((1j) * (t25942 + t25944)))

        if Bindx == 550:
            t26006 = np.cos(phi)
            t26005 = t26006 ** 2
            t26014 = t26005 ** 2
            t26015 = t26006 * t26014
            t26020 = t26015 ** 2
            t26030 = t26020 ** 2
            t25986 = t26006 * t26030
            t26018 = t26014 ** 2
            t26019 = t26006 * t26018
            t26028 = t26019 ** 2
            t25988 = t26006 * t26028
            t26026 = t26018 ** 2
            t25990 = t26006 * t26026
            t26013 = t26006 * t26005
            t26016 = t26013 ** 2
            t26017 = t26006 * t26016
            t26024 = t26017 ** 2
            t25992 = t26006 * t26024
            t26022 = t26016 ** 2
            t25994 = t26006 * t26022
            t26021 = t26006 * t26020
            t26042 = -1296256 * t25986 + 9737728 * t25988 - 31971456 * t25990 + 60033024 * t25992 - 70785792 * t25994 - 3712 * t26006 + 128512 * t26013 - 1459584 * t26015 + 8226816 * t26017 - 26734848 * t26019 + 54125568 * t26021
            t25985 = t26021 ** 2
            t26041 = -567112 * t25985 + 37224 * t26005 - 586568 * t26014 + 3561624 * t26016 - 10988208 * t26018 + 18820368 * t26020 - 16919952 * t26022 + 3782448 * t26024 + 7665576 * t26026 - 8308472 * t26028 + 3503448 * t26030 - 376
            t26040 = 1310620 * t25986 - 11533456 * t25988 + 44823204 * t25990 - 100655616 * t25992 + 143119704 * t25994 - 262124 * t26006 + 1048496 * t26013 + 2359116 * t26015 - 25163904 * t26017 + 77064456 * t26019 - 132110496 * t26021
            t26039 = -458717 * t25985 + 1769337 * t26005 - 12516421 * t26014 + 43840239 * t26016 - 90825966 * t26018 + 118348986 * t26020 - 96330570 * t26022 + 43643646 * t26024 - 4521639 * t26026 - 5832259 * t26028 + 2948895 * t26030 - 65531
            t26038 = -382192980 * t25986 + 2488293808 * t25988 - 7015853420 * t25990 + 11199549952 * t25992 - 11102424328 * t25994 - 121788 * t26006 + 6310128 * t26013 - 97659492 * t26015 + 705187200 * t26017 - 2850701848 * t26019 + 7049612768 * t26021
            t26037 = -222945905 * t25985 + 229245 * t26005 - 5171961 * t26014 + 37676811 * t26016 - 84198246 * t26018 - 198064926 * t26020 + 1491018830 * t26022 - 3570544714 * t26024 + 4577505629 * t26026 - 3359294639 * t26028 + 1333791355 * t26030 - 1479
            t26036 = -9721421440 * t25986 + 56336822784 * t25988 - 140430238080 * t25990 + 196648810496 * t25992 - 169473081600 * t25994 - 607104 * t26006 + 39350784 * t26013 - 751261824 * t26015 + 6584924160 * t26017 - 31796421376 * t26019 + 92563123200 * t26021
            t26035 = -24253516872 * t25986 + 130140822240 * t25988 - 299196959544 * t25990 + 384797085696 * t25992 - 303208606800 * t25994 - 578136 * t26006 + 42028896 * t26013 - 897070824 * t26015 + 8757455616 * t26017 - 46896960240 * t26019 + 150716299968 * t26021
            t26034 = 8506243760 * t25985 + 2705040 * t26005 - 89974608 * t26014 + 1202128752 * t26016 - 8450921952 * t26018 + 35386136480 * t26020 - 93851448480 * t26022 + 161714039520 * t26024 - 180459378928 * t26026 + 125744215248 * t26028 - 49703730960 * t26030 - 13872
            t26033 = 42443654526 * t25985 + 9583002 * t26005 - 349426194 * t26014 + 5002643958 * t26016 - 36960194700 * t26018 + 160226051076 * t26020 - 435376418724 * t26022 + 763608676140 * t26024 - 864409444902 * t26026 + 610262623170 * t26028 - 244457703594 * t26030 - 43758
            t26012 = 4 * phi1
            t26011 = 8 * phi1
            t26010 = -3 * phi2
            t26009 = 3 * phi2
            t26008 = 16 * phi1
            t26007 = 20 * phi1
            tfunc[..., c] = (-0.215e3 / 0.1851667775488e13*1j) * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.3449e4) * np.sqrt(0.41e2) * np.sqrt(0.29e2) * np.sqrt(0.31e2) * np.sqrt(0.37e2) * np.sqrt(0.13e2) * ((t26037 + t26038) * np.exp((-3*1j) * (t26012 + phi2)) + (-t26033 + t26035) * np.exp((-1*1j) * (t26012 + t26009)) + (-t26034 + t26036) * np.exp((-1*1j) * (t26011 + t26009)) + (t26033 + t26035) * np.exp((1j) * (t26012 + t26010)) + (t26034 + t26036) * np.exp((1j) * (t26011 + t26010)) + (-t26037 + t26038) * np.exp((3*1j) * (t26012 - phi2)) + (t26041 + t26042) * np.exp((-1*1j) * (t26008 + t26009)) + (-t26039 + t26040) * np.exp((-1*1j) * (t26007 + t26009)) + (-t26041 + t26042) * np.exp((1j) * (t26008 + t26010)) + (t26039 + t26040) * np.exp((1j) * (t26007 + t26010))) * ((1 + t26006) ** (-0.1e1 / 0.2e1)) * ((1 - t26006) ** (-0.1e1 / 0.2e1))

        if Bindx == 551:
            t26071 = np.cos(phi)
            t26070 = t26071 ** 2
            t26077 = t26070 ** 2
            t26076 = t26071 * t26070
            t26079 = t26076 ** 2
            t26081 = t26077 ** 2
            t26078 = t26071 * t26077
            t26083 = t26078 ** 2
            t26085 = t26079 ** 2
            t26080 = t26071 * t26079
            t26087 = t26080 ** 2
            t26089 = t26081 ** 2
            t26082 = t26071 * t26081
            t26091 = t26082 ** 2
            t26093 = t26083 ** 2
            t26102 = 4633880 * t26070 - 77078400 * t26077 + 511470240 * t26079 - 1801707600 * t26081 + 3813453840 * t26083 - 5121859680 * t26085 + 4418244000 * t26087 - 2379933240 * t26089 + 730639000 * t26091 - 97816160 * t26093 - 45880
            t26051 = t26071 * t26093
            t26053 = t26071 * t26091
            t26055 = t26071 * t26089
            t26057 = t26071 * t26087
            t26059 = t26071 * t26085
            t26061 = t26071 * t26083
            t26101 = -64191855 * t26051 + 455978380 * t26053 - 1393002825 * t26055 + 2375666400 * t26057 - 2447480070 * t26059 + 1527115800 * t26061 + 74555 * t26071 - 1995780 * t26076 + 5247525 * t26078 + 77078400 * t26080 - 534490530 * t26082
            t26100 = -976820 * t26070 + 35183200 * t26077 - 486429840 * t26079 + 3384721080 * t26081 - 13422753240 * t26083 + 32185998000 * t26085 - 47481224400 * t26087 + 42104970660 * t26089 - 20574496020 * t26091 + 4255002960 * t26093 + 4420
            t26099 = -9987084 * t26070 + 255296160 * t26077 - 2512843632 * t26079 + 12537373896 * t26081 - 36026260392 * t26083 + 63394503504 * t26085 - 69578664240 * t26087 + 46549063452 * t26089 - 17396305836 * t26091 + 2787760560 * t26093 + 63612
            t26098 = 4363944 * t26070 - 140000640 * t26077 + 1723514208 * t26079 - 10681295664 * t26081 + 37757714800 * t26083 - 80816846240 * t26085 + 106628061280 * t26087 - 84770705032 * t26089 + 37240162856 * t26091 - 6944947360 * t26093 - 22152
            t26097 = 2439290490 * t26051 - 15264688920 * t26053 + 41137643622 * t26055 - 62371650816 * t26057 + 58329313188 * t26059 - 34712163696 * t26061 + 455886 * t26071 - 24214968 * t26076 + 392835906 * t26078 - 3020467392 * t26080 + 13093646700 * t26082
            t26096 = -9115243410 * t26051 + 51536591080 * t26053 - 125261018558 * t26055 + 170994950464 * t26057 - 143695058260 * t26059 + 76593567440 * t26061 - 459654 * t26071 + 30148872 * t26076 - 584353146 * t26078 + 5215821312 * t26080 - 25714946140 * t26082
            t26095 = -11169382770 * t26051 + 59103028920 * t26053 - 134043570030 * t26055 + 170132801280 * t26057 - 132361478100 * t26059 + 64991874480 * t26061 - 236470 * t26071 + 17352920 * t26076 - 374102170 * t26078 + 3690947520 * t26080 - 19987235580 * t26082
            t26075 = 2 * phi1
            t26074 = 4 * phi1
            t26073 = 6 * phi1
            t26072 = 8 * phi1
            tfunc[..., c] = -(0.43e2 / 0.14466154496e11) * np.sqrt(0.5e1) * np.sqrt(0.17e2) * np.sqrt(0.29e2) * np.sqrt(0.3449e4) * np.sqrt(0.3e1) * np.sqrt(0.19e2) * ((-t26095 + t26100) * np.exp((-2*1j) * (t26075 + phi2)) + (t26096 + t26098) * np.exp((-2*1j) * (t26074 + phi2)) + (t26097 + t26099) * np.exp((-2*1j) * (t26073 + phi2)) + (t26101 + t26102) * np.exp((-2*1j) * (t26072 + phi2)) + (t26095 + t26100) * np.exp((2*1j) * (t26075 - phi2)) + (-t26096 + t26098) * np.exp((2*1j) * (t26074 - phi2)) + (-t26097 + t26099) * np.exp((2*1j) * (t26073 - phi2)) + (-t26101 + t26102) * np.exp((2*1j) * (t26072 - phi2)))

        if Bindx == 552:
            t26133 = np.cos(phi)
            t26132 = t26133 ** 2
            t26140 = t26132 ** 2
            t26141 = t26133 * t26140
            t26146 = t26141 ** 2
            t26156 = t26146 ** 2
            t26113 = t26133 * t26156
            t26144 = t26140 ** 2
            t26145 = t26133 * t26144
            t26154 = t26145 ** 2
            t26115 = t26133 * t26154
            t26152 = t26144 ** 2
            t26117 = t26133 * t26152
            t26139 = t26133 * t26132
            t26142 = t26139 ** 2
            t26143 = t26133 * t26142
            t26150 = t26143 ** 2
            t26119 = t26133 * t26150
            t26148 = t26142 ** 2
            t26121 = t26133 * t26148
            t26123 = t26133 * t26146
            t26167 = 89544 * t26113 - 636064 * t26115 + 1943160 * t26117 - 3313920 * t26119 + 3414096 * t26121 - 2130240 * t26123 - 104 * t26133 + 2784 * t26139 - 7320 * t26141 - 107520 * t26143 + 745584 * t26145
            t26166 = 6464 * t26132 - 107520 * t26140 + 713472 * t26142 - 2513280 * t26144 + 5319552 * t26146 - 7144704 * t26148 + 6163200 * t26150 - 3319872 * t26152 + 1019200 * t26154 - 136448 * t26156 - 64
            t26165 = -72429 * t26113 + 593228 * t26115 - 2079747 * t26117 + 3973248 * t26119 - 4200882 * t26121 + 1738296 * t26123 + 58633 * t26133 - 455268 * t26139 + 1458927 * t26141 - 2317728 * t26143 + 1303722 * t26145
            t26164 = -200042 * t26132 + 1489968 * t26140 - 5545992 * t26142 + 12457788 * t26144 - 18252108 * t26146 + 17962392 * t26148 - 11836968 * t26150 + 5028642 * t26152 - 1248538 * t26154 + 137960 * t26156 + 6898
            t26163 = 144126 * t26132 - 3684240 * t26140 + 36263448 * t26142 - 180929844 * t26144 + 519903588 * t26146 - 914861256 * t26148 + 1004106360 * t26150 - 671760678 * t26152 + 251050254 * t26154 - 40230840 * t26156 - 918
            t26162 = -35201985 * t26113 + 220288380 * t26115 - 593667183 * t26117 + 900100224 * t26119 - 841764282 * t26121 + 500939544 * t26123 - 6579 * t26133 + 349452 * t26139 - 5669109 * t26141 + 43589088 * t26143 - 188957550 * t26145
            t26161 = 643008 * t26132 - 20628480 * t26140 + 253952256 * t26142 - 1573842048 * t26144 + 5563433600 * t26146 - 11908007680 * t26148 + 15711176960 * t26150 - 12490591424 * t26152 + 5487174592 * t26154 - 1023307520 * t26156 - 3264
            t26160 = 586092 * t26132 - 21109920 * t26140 + 291857904 * t26142 - 2030832648 * t26144 + 8053651944 * t26146 - 19311598800 * t26148 + 28488734640 * t26150 - 25262982396 * t26152 + 12344697612 * t26154 - 2553001776 * t26156 - 2652
            t26159 = -1343091120 * t26113 + 7593690560 * t26115 - 18456661456 * t26117 + 25195355648 * t26119 - 21172836320 * t26121 + 11285726080 * t26123 - 67728 * t26133 + 4442304 * t26139 - 86101872 * t26141 + 768528384 * t26143 - 3788984480 * t26145
            t26158 = -6701629662 * t26113 + 35461817352 * t26115 - 80426142018 * t26117 + 102079680768 * t26119 - 79416886860 * t26121 + 38995124688 * t26123 - 141882 * t26133 + 10411752 * t26139 - 224461302 * t26141 + 2214568512 * t26143 - 11992341348 * t26145
            t26138 = 2 * phi1
            t26137 = 4 * phi1
            t26136 = 6 * phi1
            t26135 = 8 * phi1
            t26134 = 10 * phi1
            tfunc[..., c] = -(0.215e3 / 0.462916943872e12) * np.sqrt(0.19e2) * np.sqrt(0.3449e4) * np.sqrt(0.13e2) * np.sqrt(0.29e2) * np.sqrt(0.31e2) * np.sqrt(0.37e2) * np.sqrt(0.41e2) * ((t26158 + t26160) * np.exp((-2*1j) * (t26138 + phi2)) + (t26159 + t26161) * np.exp((-2*1j) * (t26137 + phi2)) + (t26162 + t26163) * np.exp((-2*1j) * (t26136 + phi2)) + (t26166 - t26167) * np.exp((-2*1j) * (t26135 + phi2)) + (-t26158 + t26160) * np.exp((2*1j) * (t26138 - phi2)) + (-t26159 + t26161) * np.exp((2*1j) * (t26137 - phi2)) + (-t26162 + t26163) * np.exp((2*1j) * (t26136 - phi2)) + (t26166 + t26167) * np.exp((2*1j) * (t26135 - phi2)) + (t26164 - t26165) * np.exp((-2*1j) * (t26134 + phi2)) + (t26164 + t26165) * np.exp((2*1j) * (t26134 - phi2)))

        if Bindx == 553:
            t26197 = np.cos(phi)
            t26196 = t26197 ** 2
            t26203 = t26196 ** 2
            t26204 = t26197 * t26203
            t26209 = t26204 ** 2
            t26219 = t26209 ** 2
            t26177 = t26197 * t26219
            t26207 = t26203 ** 2
            t26208 = t26197 * t26207
            t26217 = t26208 ** 2
            t26179 = t26197 * t26217
            t26215 = t26207 ** 2
            t26181 = t26197 * t26215
            t26202 = t26197 * t26196
            t26205 = t26202 ** 2
            t26206 = t26197 * t26205
            t26213 = t26206 ** 2
            t26183 = t26197 * t26213
            t26211 = t26205 ** 2
            t26185 = t26197 * t26211
            t26210 = t26197 * t26209
            t26229 = -9781616 * t26177 + 80638688 * t26179 - 293063088 * t26181 + 615305856 * t26183 - 820884960 * t26185 - 91760 * t26197 + 3119840 * t26202 - 31436976 * t26204 + 150192768 * t26206 - 413911008 * t26208 + 719912256 * t26210
            t26228 = 425500296 * t26177 - 2262416208 * t26179 + 5148314088 * t26181 - 6546503616 * t26183 + 5094740880 * t26185 + 8840 * t26197 - 654160 * t26202 + 14202344 * t26204 - 140916672 * t26206 + 766311312 * t26208 - 2498587104 * t26210
            t26227 = -694494736 * t26177 + 4099212832 * t26179 - 10383543248 * t26181 + 14734092672 * t26183 - 12823202080 * t26185 - 44304 * t26197 + 2924064 * t26202 - 56576208 * t26204 + 500103552 * t26206 - 2423222048 * t26208 + 7044749504 * t26210
            t26226 = 278776056 * t26177 - 1917435312 * t26179 + 5716216728 * t26181 - 9648555072 * t26183 + 10101500784 * t26185 + 127224 * t26197 - 6700464 * t26202 + 103433112 * t26204 - 731792448 * t26206 + 2856631152 * t26208 - 6752201760 * t26210
            t26176 = t26210 ** 2
            t26225 = -12838371 * t26176 - 590705 * t26196 + 10409025 * t26203 - 75533391 * t26205 + 298534278 * t26207 - 727764618 * t26209 + 1161908706 * t26211 - 1243818270 * t26213 + 888228771 * t26215 - 407137973 * t26217 + 108596813 * t26219 + 5735
            t26224 = -2233876554 * t26176 - 492830 * t26196 + 18243550 * t26203 - 264357106 * t26205 + 1970804628 * t26207 - 8595314988 * t26209 + 23429022396 * t26211 - 41107296420 * t26213 + 46429723434 * t26215 - 32626811862 * t26217 + 12980353542 * t26219 + 2210
            t26223 = -487858098 * t26176 - 1685718 * t26196 + 44772246 * t26203 - 469976058 * t26205 + 2569352292 * t26207 - 8331991644 * t26209 + 17132810796 * t26211 - 23003986356 * t26213 + 20158667538 * t26215 - 11133912942 * t26217 + 3523797342 * t26219 + 10602
            t26222 = -1823048682 * t26176 - 1102062 * t26196 + 36456654 * t26203 - 472950738 * t26205 + 3163715412 * t26207 - 12412655372 * t26209 + 30524233948 * t26211 - 48464127140 * t26213 + 49691453162 * t26215 - 31800659878 * t26217 + 11558679158 * t26219 + 5538
            t26201 = 4 * phi1
            t26200 = 8 * phi1
            t26199 = 12 * phi1
            t26198 = 16 * phi1
            tfunc[..., c] = (-0.215e3 / 0.28932308992e11*1j) * np.sqrt(0.17e2) * np.sqrt(0.29e2) * np.sqrt(0.3449e4) * np.sqrt(0.3e1) * np.sqrt(0.437e3) * ((-t26224 + t26228) * np.exp((-1*1j) * (t26201 + phi2)) + (t26222 + t26227) * np.exp((-1*1j) * (t26200 + phi2)) + (t26224 + t26228) * np.exp((1j) * (t26201 - phi2)) + (-t26222 + t26227) * np.exp((1j) * (t26200 - phi2)) + (-t26223 + t26226) * np.exp((-1*1j) * (t26199 + phi2)) + (t26225 + t26229) * np.exp((-1*1j) * (t26198 + phi2)) + (t26223 + t26226) * np.exp((1j) * (t26199 - phi2)) + (-t26225 + t26229) * np.exp((1j) * (t26198 - phi2))) * ((1 + t26197) ** (-0.1e1 / 0.2e1)) * ((1 - t26197) ** (-0.1e1 / 0.2e1))

        if Bindx == 554:
            t26261 = np.cos(phi)
            t26260 = t26261 ** 2
            t26268 = t26260 ** 2
            t26269 = t26261 * t26268
            t26274 = t26269 ** 2
            t26284 = t26274 ** 2
            t26241 = t26261 * t26284
            t26272 = t26268 ** 2
            t26273 = t26261 * t26272
            t26282 = t26273 ** 2
            t26243 = t26261 * t26282
            t26280 = t26272 ** 2
            t26245 = t26261 * t26280
            t26267 = t26261 * t26260
            t26270 = t26267 ** 2
            t26271 = t26261 * t26270
            t26278 = t26271 ** 2
            t26247 = t26261 * t26278
            t26276 = t26270 ** 2
            t26249 = t26261 * t26276
            t26275 = t26261 * t26274
            t26296 = 68224 * t26241 - 562432 * t26243 + 2044032 * t26245 - 4291584 * t26247 + 5725440 * t26249 + 640 * t26261 - 21760 * t26267 + 219264 * t26269 - 1047552 * t26271 + 2886912 * t26273 - 5021184 * t26275
            t26240 = t26275 ** 2
            t26295 = 89544 * t26240 + 4120 * t26260 - 72600 * t26268 + 526824 * t26270 - 2082192 * t26272 + 5075952 * t26274 - 8103984 * t26276 + 8675280 * t26278 - 6195144 * t26280 + 2839672 * t26282 - 757432 * t26284 - 40
            t26294 = -68980 * t26241 + 689800 * t26243 - 3104100 * t26245 + 8277600 * t26247 - 14485800 * t26249 - 68980 * t26261 + 689800 * t26267 - 3104100 * t26269 + 8277600 * t26271 - 14485800 * t26273 + 17382960 * t26275
            t26293 = -72429 * t26240 - 106919 * t26260 + 879495 * t26268 - 3673185 * t26270 + 9415770 * t26272 - 16079238 * t26274 + 18976398 * t26276 - 15623970 * t26278 + 8846685 * t26280 - 3293795 * t26282 + 727739 * t26284 + 3449
            t26292 = 20115420 * t26241 - 138354840 * t26243 + 412460460 * t26245 - 696203040 * t26247 + 728885880 * t26249 + 9180 * t26261 - 483480 * t26267 + 7463340 * t26269 - 52803360 * t26271 + 206123640 * t26273 - 487213200 * t26275
            t26291 = 511653760 * t26241 - 3020005120 * t26243 + 7649847680 * t26245 - 10855019520 * t26247 + 9447212800 * t26249 + 32640 * t26261 - 2154240 * t26267 + 41681280 * t26269 - 368440320 * t26271 + 1785255680 * t26273 - 5190064640 * t26275
            t26290 = 1276500888 * t26241 - 6787248624 * t26243 + 15444942264 * t26245 - 19639510848 * t26247 + 15284222640 * t26249 + 26520 * t26261 - 1962480 * t26267 + 42607032 * t26269 - 422750016 * t26271 + 2298933936 * t26273 - 7495761312 * t26275
            t26289 = -35201985 * t26240 - 121635 * t26260 + 3230595 * t26268 - 33911685 * t26270 + 185394690 * t26272 - 601204830 * t26274 + 1236238470 * t26276 - 1659880170 * t26278 + 1454572785 * t26280 - 803380815 * t26282 + 254263815 * t26284 + 765
            t26288 = -1343091120 * t26240 - 811920 * t26260 + 26858640 * t26268 - 348436080 * t26270 + 2330797920 * t26272 - 9144751520 * t26274 + 22488059680 * t26276 - 35704882400 * t26278 + 36609087920 * t26280 - 23428438480 * t26282 + 8515603280 * t26284 + 4080
            t26287 = -6701629662 * t26240 - 1478490 * t26260 + 54730650 * t26268 - 793071318 * t26270 + 5912413884 * t26272 - 25785944964 * t26274 + 70287067188 * t26276 - 123321889260 * t26278 + 139289170302 * t26280 - 97880435586 * t26282 + 38941060626 * t26284 + 6630
            t26266 = 4 * phi1
            t26265 = 8 * phi1
            t26264 = 12 * phi1
            t26263 = 16 * phi1
            t26262 = 20 * phi1
            tfunc[..., c] = (0.43e2 / 0.925833887744e12*1j) * np.sqrt(0.19e2) * np.sqrt(0.3449e4) * np.sqrt(0.5e1) * np.sqrt(0.23e2) * np.sqrt(0.41e2) * np.sqrt(0.13e2) * np.sqrt(0.37e2) * np.sqrt(0.31e2) * np.sqrt(0.29e2) * ((-t26287 + t26290) * np.exp((-1*1j) * (t26266 + phi2)) + (-t26288 + t26291) * np.exp((-1*1j) * (t26265 + phi2)) + (t26287 + t26290) * np.exp((1j) * (t26266 - phi2)) + (t26288 + t26291) * np.exp((1j) * (t26265 - phi2)) + (-t26289 + t26292) * np.exp((-1*1j) * (t26264 + phi2)) + (t26295 + t26296) * np.exp((-1*1j) * (t26263 + phi2)) + (t26293 + t26294) * np.exp((-1*1j) * (t26262 + phi2)) + (t26289 + t26292) * np.exp((1j) * (t26264 - phi2)) + (-t26295 + t26296) * np.exp((1j) * (t26263 - phi2)) + (-t26293 + t26294) * np.exp((1j) * (t26262 - phi2))) * ((1 + t26261) ** (-0.1e1 / 0.2e1)) * ((1 - t26261) ** (-0.1e1 / 0.2e1))

        if Bindx == 555:
            t26311 = np.cos(phi)
            t26310 = t26311 ** 2
            t26312 = t26310 ** 2
            t26314 = t26312 ** 2
            t26318 = t26314 ** 2
            t26313 = t26310 * t26312
            t26316 = t26313 ** 2
            t26315 = t26310 * t26314
            t26304 = t26310 * t26316
            t26302 = t26310 * t26318
            t26301 = t26315 ** 2
            tfunc[..., c] = (0.645e3 / 0.14466154496e11*1j) * np.sqrt(0.17e2) * np.sqrt(0.29e2) * np.sqrt(0.3449e4) * np.sqrt(0.2e1) * np.sqrt(0.33649e5) * t26311 * ((106375074 * t26301 - 565604052 * t26302 + 1287078522 * t26318 - 1636625904 * t26304 + 1273685220 * t26316 - 624646776 * t26315 + 191577828 * t26314 - 35229168 * t26313 + 3550586 * t26312 - 163540 * t26310 + 2210) * np.sin((4 * phi1)) + (-86811842 * t26301 + 512401604 * t26302 - 1297942906 * t26318 + 1841761584 * t26304 - 1602900260 * t26316 + 880593688 * t26315 - 302902756 * t26314 + 62512944 * t26313 - 7072026 * t26312 + 365508 * t26310 - 5538) * np.sin((8 * phi1)) + (23231338 * t26301 - 159786276 * t26302 + 476351394 * t26318 - 804046256 * t26304 + 841791732 * t26316 - 562683480 * t26315 + 238052596 * t26314 - 60982704 * t26313 + 8619426 * t26312 - 558372 * t26310 + 10602) * np.sin((12 * phi1)) + (-611351 * t26301 + 5039918 * t26302 - 18316443 * t26318 + 38456616 * t26304 - 51305310 * t26316 + 44994516 * t26315 - 25869438 * t26314 + 9387048 * t26313 - 1964811 * t26312 + 194990 * t26310 - 5735) * np.sin((16 * phi1)))

        if Bindx == 556:
            t26336 = np.cos(phi)
            t26335 = t26336 ** 2
            t26337 = t26335 ** 2
            t26339 = t26337 ** 2
            t26343 = t26339 ** 2
            t26338 = t26335 * t26337
            t26341 = t26338 ** 2
            t26340 = t26335 * t26339
            t26329 = t26335 * t26341
            t26327 = t26335 * t26343
            t26326 = t26340 ** 2
            tfunc[..., c] = (-0.43e2 / 0.462916943872e12*1j) * t26336 * np.sqrt(0.2e1) * np.sqrt(0.3e1) * np.sqrt(0.19e2) * np.sqrt(0.3449e4) * np.sqrt(0.5e1) * np.sqrt(0.1771e4) * np.sqrt(0.41e2) * np.sqrt(0.13e2) * np.sqrt(0.37e2) * np.sqrt(0.31e2) * np.sqrt(0.29e2) * ((319125222 * t26326 - 1696812156 * t26327 + 3861235566 * t26343 - 4909877712 * t26329 + 3821055660 * t26341 - 1873940328 * t26340 + 574733484 * t26339 - 105687504 * t26338 + 10651758 * t26337 - 490620 * t26335 + 6630) * np.sin((4 * phi1)) + (63956720 * t26326 - 377500640 * t26327 + 956230960 * t26343 - 1356877440 * t26329 + 1180901600 * t26341 - 648758080 * t26340 + 223156960 * t26339 - 46055040 * t26338 + 5210160 * t26337 - 269280 * t26335 + 4080) * np.sin((8 * phi1)) + (1676285 * t26326 - 11529570 * t26327 + 34371705 * t26343 - 58016920 * t26329 + 60740490 * t26341 - 40601100 * t26340 + 17176970 * t26339 - 4400280 * t26338 + 621945 * t26337 - 40290 * t26335 + 765) * np.sin((12 * phi1)) + (4264 * t26326 - 35152 * t26327 + 127752 * t26343 - 268224 * t26329 + 357840 * t26341 - 313824 * t26340 + 180432 * t26339 - 65472 * t26338 + 13704 * t26337 - 1360 * t26335 + 40) * np.sin((16 * phi1)) + (-3449 * t26326 + 34490 * t26327 + 869148 * t26340 + 34490 * t26335 - 3449 - 724290 * t26341 - 724290 * t26339 + 413880 * t26329 + 413880 * t26338 - 155205 * t26343 - 155205 * t26337) * np.sin((20 * phi1)))

        if Bindx == 557:
            t26375 = np.cos(phi)
            t26374 = t26375 ** 2
            t26381 = t26374 ** 2
            t26382 = t26375 * t26381
            t26387 = t26382 ** 2
            t26397 = t26387 ** 2
            t26355 = t26375 * t26397
            t26385 = t26381 ** 2
            t26386 = t26375 * t26385
            t26395 = t26386 ** 2
            t26357 = t26375 * t26395
            t26393 = t26385 ** 2
            t26359 = t26375 * t26393
            t26380 = t26375 * t26374
            t26383 = t26380 ** 2
            t26384 = t26375 * t26383
            t26391 = t26384 ** 2
            t26361 = t26375 * t26391
            t26389 = t26383 ** 2
            t26363 = t26375 * t26389
            t26388 = t26375 * t26387
            t26407 = -9781616 * t26355 + 80638688 * t26357 - 293063088 * t26359 + 615305856 * t26361 - 820884960 * t26363 - 91760 * t26375 + 3119840 * t26380 - 31436976 * t26382 + 150192768 * t26384 - 413911008 * t26386 + 719912256 * t26388
            t26406 = 425500296 * t26355 - 2262416208 * t26357 + 5148314088 * t26359 - 6546503616 * t26361 + 5094740880 * t26363 + 8840 * t26375 - 654160 * t26380 + 14202344 * t26382 - 140916672 * t26384 + 766311312 * t26386 - 2498587104 * t26388
            t26405 = -694494736 * t26355 + 4099212832 * t26357 - 10383543248 * t26359 + 14734092672 * t26361 - 12823202080 * t26363 - 44304 * t26375 + 2924064 * t26380 - 56576208 * t26382 + 500103552 * t26384 - 2423222048 * t26386 + 7044749504 * t26388
            t26404 = 278776056 * t26355 - 1917435312 * t26357 + 5716216728 * t26359 - 9648555072 * t26361 + 10101500784 * t26363 + 127224 * t26375 - 6700464 * t26380 + 103433112 * t26382 - 731792448 * t26384 + 2856631152 * t26386 - 6752201760 * t26388
            t26354 = t26388 ** 2
            t26403 = -12838371 * t26354 - 590705 * t26374 + 10409025 * t26381 - 75533391 * t26383 + 298534278 * t26385 - 727764618 * t26387 + 1161908706 * t26389 - 1243818270 * t26391 + 888228771 * t26393 - 407137973 * t26395 + 108596813 * t26397 + 5735
            t26402 = -2233876554 * t26354 - 492830 * t26374 + 18243550 * t26381 - 264357106 * t26383 + 1970804628 * t26385 - 8595314988 * t26387 + 23429022396 * t26389 - 41107296420 * t26391 + 46429723434 * t26393 - 32626811862 * t26395 + 12980353542 * t26397 + 2210
            t26401 = -487858098 * t26354 - 1685718 * t26374 + 44772246 * t26381 - 469976058 * t26383 + 2569352292 * t26385 - 8331991644 * t26387 + 17132810796 * t26389 - 23003986356 * t26391 + 20158667538 * t26393 - 11133912942 * t26395 + 3523797342 * t26397 + 10602
            t26400 = 1823048682 * t26354 + 1102062 * t26374 - 36456654 * t26381 + 472950738 * t26383 - 3163715412 * t26385 + 12412655372 * t26387 - 30524233948 * t26389 + 48464127140 * t26391 - 49691453162 * t26393 + 31800659878 * t26395 - 11558679158 * t26397 - 5538
            t26379 = 4 * phi1
            t26378 = 8 * phi1
            t26377 = 12 * phi1
            t26376 = 16 * phi1
            tfunc[..., c] = (0.215e3 / 0.28932308992e11*1j) * np.sqrt(0.17e2) * np.sqrt(0.29e2) * np.sqrt(0.3449e4) * np.sqrt(0.3e1) * np.sqrt(0.437e3) * ((1 + t26375) ** (-0.1e1 / 0.2e1)) * ((1 - t26375) ** (-0.1e1 / 0.2e1)) * ((t26402 + t26406) * np.exp((-1*1j) * (t26379 - phi2)) + (t26400 + t26405) * np.exp((-1*1j) * (t26378 - phi2)) + (-t26402 + t26406) * np.exp((1j) * (t26379 + phi2)) + (-t26400 + t26405) * np.exp((1j) * (t26378 + phi2)) + (t26401 + t26404) * np.exp((-1*1j) * (t26377 - phi2)) + (-t26403 + t26407) * np.exp((-1*1j) * (t26376 - phi2)) + (-t26401 + t26404) * np.exp((1j) * (t26377 + phi2)) + (t26403 + t26407) * np.exp((1j) * (t26376 + phi2)))

        if Bindx == 558:
            t26439 = np.cos(phi)
            t26438 = t26439 ** 2
            t26446 = t26438 ** 2
            t26447 = t26439 * t26446
            t26452 = t26447 ** 2
            t26462 = t26452 ** 2
            t26419 = t26439 * t26462
            t26450 = t26446 ** 2
            t26451 = t26439 * t26450
            t26460 = t26451 ** 2
            t26421 = t26439 * t26460
            t26458 = t26450 ** 2
            t26423 = t26439 * t26458
            t26445 = t26439 * t26438
            t26448 = t26445 ** 2
            t26449 = t26439 * t26448
            t26456 = t26449 ** 2
            t26425 = t26439 * t26456
            t26454 = t26448 ** 2
            t26427 = t26439 * t26454
            t26453 = t26439 * t26452
            t26474 = -68224 * t26419 + 562432 * t26421 - 2044032 * t26423 + 4291584 * t26425 - 5725440 * t26427 - 640 * t26439 + 21760 * t26445 - 219264 * t26447 + 1047552 * t26449 - 2886912 * t26451 + 5021184 * t26453
            t26418 = t26453 ** 2
            t26473 = 89544 * t26418 + 4120 * t26438 - 72600 * t26446 + 526824 * t26448 - 2082192 * t26450 + 5075952 * t26452 - 8103984 * t26454 + 8675280 * t26456 - 6195144 * t26458 + 2839672 * t26460 - 757432 * t26462 - 40
            t26472 = 68980 * t26419 - 689800 * t26421 + 3104100 * t26423 - 8277600 * t26425 + 14485800 * t26427 + 68980 * t26439 - 689800 * t26445 + 3104100 * t26447 - 8277600 * t26449 + 14485800 * t26451 - 17382960 * t26453
            t26471 = -72429 * t26418 - 106919 * t26438 + 879495 * t26446 - 3673185 * t26448 + 9415770 * t26450 - 16079238 * t26452 + 18976398 * t26454 - 15623970 * t26456 + 8846685 * t26458 - 3293795 * t26460 + 727739 * t26462 + 3449
            t26470 = -20115420 * t26419 + 138354840 * t26421 - 412460460 * t26423 + 696203040 * t26425 - 728885880 * t26427 - 9180 * t26439 + 483480 * t26445 - 7463340 * t26447 + 52803360 * t26449 - 206123640 * t26451 + 487213200 * t26453
            t26469 = -511653760 * t26419 + 3020005120 * t26421 - 7649847680 * t26423 + 10855019520 * t26425 - 9447212800 * t26427 - 32640 * t26439 + 2154240 * t26445 - 41681280 * t26447 + 368440320 * t26449 - 1785255680 * t26451 + 5190064640 * t26453
            t26468 = -1276500888 * t26419 + 6787248624 * t26421 - 15444942264 * t26423 + 19639510848 * t26425 - 15284222640 * t26427 - 26520 * t26439 + 1962480 * t26445 - 42607032 * t26447 + 422750016 * t26449 - 2298933936 * t26451 + 7495761312 * t26453
            t26467 = -35201985 * t26418 - 121635 * t26438 + 3230595 * t26446 - 33911685 * t26448 + 185394690 * t26450 - 601204830 * t26452 + 1236238470 * t26454 - 1659880170 * t26456 + 1454572785 * t26458 - 803380815 * t26460 + 254263815 * t26462 + 765
            t26466 = -1343091120 * t26418 - 811920 * t26438 + 26858640 * t26446 - 348436080 * t26448 + 2330797920 * t26450 - 9144751520 * t26452 + 22488059680 * t26454 - 35704882400 * t26456 + 36609087920 * t26458 - 23428438480 * t26460 + 8515603280 * t26462 + 4080
            t26465 = -6701629662 * t26418 - 1478490 * t26438 + 54730650 * t26446 - 793071318 * t26448 + 5912413884 * t26450 - 25785944964 * t26452 + 70287067188 * t26454 - 123321889260 * t26456 + 139289170302 * t26458 - 97880435586 * t26460 + 38941060626 * t26462 + 6630
            t26444 = 4 * phi1
            t26443 = 8 * phi1
            t26442 = 12 * phi1
            t26441 = 16 * phi1
            t26440 = 20 * phi1
            tfunc[..., c] = (0.43e2 / 0.925833887744e12*1j) * np.sqrt(0.19e2) * np.sqrt(0.3449e4) * np.sqrt(0.5e1) * np.sqrt(0.23e2) * np.sqrt(0.41e2) * np.sqrt(0.13e2) * np.sqrt(0.37e2) * np.sqrt(0.31e2) * np.sqrt(0.29e2) * ((-t26465 + t26468) * np.exp((-1*1j) * (t26444 - phi2)) + (-t26466 + t26469) * np.exp((-1*1j) * (t26443 - phi2)) + (t26465 + t26468) * np.exp((1j) * (t26444 + phi2)) + (t26466 + t26469) * np.exp((1j) * (t26443 + phi2)) + (-t26467 + t26470) * np.exp((-1*1j) * (t26442 - phi2)) + (t26473 + t26474) * np.exp((-1*1j) * (t26441 - phi2)) + (t26471 + t26472) * np.exp((-1*1j) * (t26440 - phi2)) + (t26467 + t26470) * np.exp((1j) * (t26442 + phi2)) + (-t26473 + t26474) * np.exp((1j) * (t26441 + phi2)) + (-t26471 + t26472) * np.exp((1j) * (t26440 + phi2))) * ((1 + t26439) ** (-0.1e1 / 0.2e1)) * ((1 - t26439) ** (-0.1e1 / 0.2e1))

        if Bindx == 559:
            t26503 = np.cos(phi)
            t26502 = t26503 ** 2
            t26509 = t26502 ** 2
            t26508 = t26503 * t26502
            t26511 = t26508 ** 2
            t26513 = t26509 ** 2
            t26510 = t26503 * t26509
            t26515 = t26510 ** 2
            t26517 = t26511 ** 2
            t26512 = t26503 * t26511
            t26519 = t26512 ** 2
            t26521 = t26513 ** 2
            t26514 = t26503 * t26513
            t26523 = t26514 ** 2
            t26525 = t26515 ** 2
            t26534 = -4633880 * t26502 + 77078400 * t26509 - 511470240 * t26511 + 1801707600 * t26513 - 3813453840 * t26515 + 5121859680 * t26517 - 4418244000 * t26519 + 2379933240 * t26521 - 730639000 * t26523 + 97816160 * t26525 + 45880
            t26483 = t26503 * t26525
            t26485 = t26503 * t26523
            t26487 = t26503 * t26521
            t26489 = t26503 * t26519
            t26491 = t26503 * t26517
            t26493 = t26503 * t26515
            t26533 = -64191855 * t26483 + 455978380 * t26485 - 1393002825 * t26487 + 2375666400 * t26489 - 2447480070 * t26491 + 1527115800 * t26493 + 74555 * t26503 - 1995780 * t26508 + 5247525 * t26510 + 77078400 * t26512 - 534490530 * t26514
            t26532 = 976820 * t26502 - 35183200 * t26509 + 486429840 * t26511 - 3384721080 * t26513 + 13422753240 * t26515 - 32185998000 * t26517 + 47481224400 * t26519 - 42104970660 * t26521 + 20574496020 * t26523 - 4255002960 * t26525 - 4420
            t26531 = 9987084 * t26502 - 255296160 * t26509 + 2512843632 * t26511 - 12537373896 * t26513 + 36026260392 * t26515 - 63394503504 * t26517 + 69578664240 * t26519 - 46549063452 * t26521 + 17396305836 * t26523 - 2787760560 * t26525 - 63612
            t26530 = -4363944 * t26502 + 140000640 * t26509 - 1723514208 * t26511 + 10681295664 * t26513 - 37757714800 * t26515 + 80816846240 * t26517 - 106628061280 * t26519 + 84770705032 * t26521 - 37240162856 * t26523 + 6944947360 * t26525 + 22152
            t26529 = -2439290490 * t26483 + 15264688920 * t26485 - 41137643622 * t26487 + 62371650816 * t26489 - 58329313188 * t26491 + 34712163696 * t26493 - 455886 * t26503 + 24214968 * t26508 - 392835906 * t26510 + 3020467392 * t26512 - 13093646700 * t26514
            t26528 = -9115243410 * t26483 + 51536591080 * t26485 - 125261018558 * t26487 + 170994950464 * t26489 - 143695058260 * t26491 + 76593567440 * t26493 - 459654 * t26503 + 30148872 * t26508 - 584353146 * t26510 + 5215821312 * t26512 - 25714946140 * t26514
            t26527 = -11169382770 * t26483 + 59103028920 * t26485 - 134043570030 * t26487 + 170132801280 * t26489 - 132361478100 * t26491 + 64991874480 * t26493 - 236470 * t26503 + 17352920 * t26508 - 374102170 * t26510 + 3690947520 * t26512 - 19987235580 * t26514
            t26507 = 2 * phi1
            t26506 = 4 * phi1
            t26505 = 6 * phi1
            t26504 = 8 * phi1
            tfunc[..., c] = -(0.43e2 / 0.14466154496e11) * np.sqrt(0.5e1) * np.sqrt(0.17e2) * np.sqrt(0.29e2) * np.sqrt(0.3449e4) * np.sqrt(0.3e1) * np.sqrt(0.19e2) * ((-t26527 + t26532) * np.exp((-2*1j) * (t26507 - phi2)) + (t26528 + t26530) * np.exp((-2*1j) * (t26506 - phi2)) + (-t26529 + t26531) * np.exp((-2*1j) * (t26505 - phi2)) + (t26533 + t26534) * np.exp((-2*1j) * (t26504 - phi2)) + (t26527 + t26532) * np.exp((2*1j) * (t26507 + phi2)) + (-t26528 + t26530) * np.exp((2*1j) * (t26506 + phi2)) + (t26529 + t26531) * np.exp((2*1j) * (t26505 + phi2)) + (-t26533 + t26534) * np.exp((2*1j) * (t26504 + phi2)))

        if Bindx == 560:
            t26565 = np.cos(phi)
            t26564 = t26565 ** 2
            t26572 = t26564 ** 2
            t26573 = t26565 * t26572
            t26578 = t26573 ** 2
            t26588 = t26578 ** 2
            t26545 = t26565 * t26588
            t26576 = t26572 ** 2
            t26577 = t26565 * t26576
            t26586 = t26577 ** 2
            t26547 = t26565 * t26586
            t26584 = t26576 ** 2
            t26549 = t26565 * t26584
            t26571 = t26565 * t26564
            t26574 = t26571 ** 2
            t26575 = t26565 * t26574
            t26582 = t26575 ** 2
            t26551 = t26565 * t26582
            t26580 = t26574 ** 2
            t26553 = t26565 * t26580
            t26555 = t26565 * t26578
            t26599 = 89544 * t26545 - 636064 * t26547 + 1943160 * t26549 - 3313920 * t26551 + 3414096 * t26553 - 2130240 * t26555 - 104 * t26565 + 2784 * t26571 - 7320 * t26573 - 107520 * t26575 + 745584 * t26577
            t26598 = 6464 * t26564 - 107520 * t26572 + 713472 * t26574 - 2513280 * t26576 + 5319552 * t26578 - 7144704 * t26580 + 6163200 * t26582 - 3319872 * t26584 + 1019200 * t26586 - 136448 * t26588 - 64
            t26597 = 72429 * t26545 - 593228 * t26547 + 2079747 * t26549 - 3973248 * t26551 + 4200882 * t26553 - 1738296 * t26555 - 58633 * t26565 + 455268 * t26571 - 1458927 * t26573 + 2317728 * t26575 - 1303722 * t26577
            t26596 = -200042 * t26564 + 1489968 * t26572 - 5545992 * t26574 + 12457788 * t26576 - 18252108 * t26578 + 17962392 * t26580 - 11836968 * t26582 + 5028642 * t26584 - 1248538 * t26586 + 137960 * t26588 + 6898
            t26595 = 144126 * t26564 - 3684240 * t26572 + 36263448 * t26574 - 180929844 * t26576 + 519903588 * t26578 - 914861256 * t26580 + 1004106360 * t26582 - 671760678 * t26584 + 251050254 * t26586 - 40230840 * t26588 - 918
            t26594 = -35201985 * t26545 + 220288380 * t26547 - 593667183 * t26549 + 900100224 * t26551 - 841764282 * t26553 + 500939544 * t26555 - 6579 * t26565 + 349452 * t26571 - 5669109 * t26573 + 43589088 * t26575 - 188957550 * t26577
            t26593 = 643008 * t26564 - 20628480 * t26572 + 253952256 * t26574 - 1573842048 * t26576 + 5563433600 * t26578 - 11908007680 * t26580 + 15711176960 * t26582 - 12490591424 * t26584 + 5487174592 * t26586 - 1023307520 * t26588 - 3264
            t26592 = 586092 * t26564 - 21109920 * t26572 + 291857904 * t26574 - 2030832648 * t26576 + 8053651944 * t26578 - 19311598800 * t26580 + 28488734640 * t26582 - 25262982396 * t26584 + 12344697612 * t26586 - 2553001776 * t26588 - 2652
            t26591 = -1343091120 * t26545 + 7593690560 * t26547 - 18456661456 * t26549 + 25195355648 * t26551 - 21172836320 * t26553 + 11285726080 * t26555 - 67728 * t26565 + 4442304 * t26571 - 86101872 * t26573 + 768528384 * t26575 - 3788984480 * t26577
            t26590 = -6701629662 * t26545 + 35461817352 * t26547 - 80426142018 * t26549 + 102079680768 * t26551 - 79416886860 * t26553 + 38995124688 * t26555 - 141882 * t26565 + 10411752 * t26571 - 224461302 * t26573 + 2214568512 * t26575 - 11992341348 * t26577
            t26570 = 2 * phi1
            t26569 = 4 * phi1
            t26568 = 6 * phi1
            t26567 = 8 * phi1
            t26566 = 10 * phi1
            tfunc[..., c] = (0.215e3 / 0.462916943872e12) * np.sqrt(0.19e2) * np.sqrt(0.3449e4) * np.sqrt(0.13e2) * np.sqrt(0.29e2) * np.sqrt(0.31e2) * np.sqrt(0.37e2) * np.sqrt(0.41e2) * ((-t26590 + t26592) * np.exp((-2*1j) * (t26570 - phi2)) + (-t26591 + t26593) * np.exp((-2*1j) * (t26569 - phi2)) + (-t26594 + t26595) * np.exp((-2*1j) * (t26568 - phi2)) + (t26598 + t26599) * np.exp((-2*1j) * (t26567 - phi2)) + (t26590 + t26592) * np.exp((2*1j) * (t26570 + phi2)) + (t26591 + t26593) * np.exp((2*1j) * (t26569 + phi2)) + (t26594 + t26595) * np.exp((2*1j) * (t26568 + phi2)) + (t26598 - t26599) * np.exp((2*1j) * (t26567 + phi2)) + (t26596 - t26597) * np.exp((-2*1j) * (t26566 - phi2)) + (t26596 + t26597) * np.exp((2*1j) * (t26566 + phi2)))

        if Bindx == 561:
            t26629 = np.cos(phi)
            t26628 = t26629 ** 2
            t26636 = t26628 ** 2
            t26637 = t26629 * t26636
            t26642 = t26637 ** 2
            t26652 = t26642 ** 2
            t26609 = t26629 * t26652
            t26640 = t26636 ** 2
            t26641 = t26629 * t26640
            t26650 = t26641 ** 2
            t26611 = t26629 * t26650
            t26648 = t26640 ** 2
            t26613 = t26629 * t26648
            t26635 = t26629 * t26628
            t26638 = t26635 ** 2
            t26639 = t26629 * t26638
            t26646 = t26639 ** 2
            t26615 = t26629 * t26646
            t26644 = t26638 ** 2
            t26617 = t26629 * t26644
            t26643 = t26629 * t26642
            t26662 = -929253520 * t26609 + 6980733760 * t26611 - 22919537520 * t26613 + 43036174080 * t26615 - 50744564640 * t26617 - 2661040 * t26629 + 92127040 * t26635 - 1046339280 * t26637 + 5897598720 * t26639 - 19165544160 * t26641 + 38801266560 * t26643
            t26661 = 40422528120 * t26609 - 216901370400 * t26611 + 498661599240 * t26613 - 641328476160 * t26615 + 505347678000 * t26617 + 963560 * t26629 - 70048160 * t26635 + 1495118040 * t26637 - 14595759360 * t26639 + 78161600400 * t26641 - 251193833280 * t26643
            t26660 = 26483725320 * t26609 - 172424123872 * t26611 + 486157372280 * t26613 - 776062931968 * t26615 + 769332697552 * t26617 + 8439192 * t26629 - 437254752 * t26635 + 6767228328 * t26637 - 48865324800 * t26639 + 197536869232 * t26641 - 488496696512 * t26643
            t26659 = -65976999920 * t26609 + 382344760512 * t26611 - 953066983440 * t26613 + 1334609206528 * t26615 - 1150173928800 * t26617 - 4120272 * t26629 + 267064512 * t26635 - 5098637232 * t26637 + 44690330880 * t26639 - 215794830368 * t26641 + 628204137600 * t26643
            t26608 = t26643 ** 2
            t26658 = -406548415 * t26608 + 26684955 * t26628 - 420495935 * t26636 + 2553239205 * t26638 - 7877171610 * t26640 + 13491851310 * t26642 - 12129490590 * t26644 + 2711542410 * t26646 + 5495259795 * t26648 - 5956135865 * t26650 + 2511534285 * t26652 - 269545
            t26657 = -57729874930 * t26608 - 18358470 * t26628 + 610636494 * t26636 - 8158564986 * t26638 + 57354418836 * t26640 - 240157382140 * t26642 + 636947698140 * t26644 - 1097515135860 * t26646 + 1224735343754 * t26648 - 853396402014 * t26650 + 337327527030 * t26652 + 94146
            t26656 = -70739424210 * t26608 - 15971670 * t26628 + 582376990 * t26636 - 8337739930 * t26638 + 61600324500 * t26640 - 267043418460 * t26642 + 725627364540 * t26644 - 1272681126900 * t26646 + 1440682408170 * t26648 - 1017104371950 * t26650 + 407429505990 * t26652 + 72930
            t26655 = -15448839770 * t26608 + 15885330 * t26628 - 358386474 * t26636 + 2610781374 * t26638 - 5834443164 * t26640 - 13724734284 * t26642 + 103318834220 * t26644 - 247417745476 * t26646 + 317194213586 * t26648 - 232779357926 * t26650 + 92423895070 * t26652 - 102486
            t26634 = 4 * phi1
            t26633 = 8 * phi1
            t26632 = -3 * phi2
            t26631 = 3 * phi2
            t26630 = 16 * phi1
            tfunc[..., c] = (0.129e3 / 0.57864617984e11*1j) * np.sqrt(0.5e1) * np.sqrt(0.17e2) * np.sqrt(0.29e2) * np.sqrt(0.3449e4) * np.sqrt(0.2e1) * ((1 + t26629) ** (-0.1e1 / 0.2e1)) * ((1 - t26629) ** (-0.1e1 / 0.2e1)) * ((t26655 + t26660) * np.exp((-3*1j) * (t26634 - phi2)) + (t26656 + t26661) * np.exp((-1*1j) * (t26634 + t26632)) + (-t26657 + t26659) * np.exp((-1*1j) * (t26633 + t26632)) + (-t26656 + t26661) * np.exp((1j) * (t26634 + t26631)) + (t26657 + t26659) * np.exp((1j) * (t26633 + t26631)) + (-t26655 + t26660) * np.exp((3*1j) * (t26634 + phi2)) + (-t26658 + t26662) * np.exp((-1*1j) * (t26630 + t26632)) + (t26658 + t26662) * np.exp((1j) * (t26630 + t26631)))

        if Bindx == 562:
            t26694 = np.cos(phi)
            t26693 = t26694 ** 2
            t26702 = t26693 ** 2
            t26703 = t26694 * t26702
            t26708 = t26703 ** 2
            t26718 = t26708 ** 2
            t26674 = t26694 * t26718
            t26706 = t26702 ** 2
            t26707 = t26694 * t26706
            t26716 = t26707 ** 2
            t26676 = t26694 * t26716
            t26714 = t26706 ** 2
            t26678 = t26694 * t26714
            t26701 = t26694 * t26693
            t26704 = t26701 ** 2
            t26705 = t26694 * t26704
            t26712 = t26705 ** 2
            t26680 = t26694 * t26712
            t26710 = t26704 ** 2
            t26682 = t26694 * t26710
            t26709 = t26694 * t26708
            t26730 = 1296256 * t26674 - 9737728 * t26676 + 31971456 * t26678 - 60033024 * t26680 + 70785792 * t26682 + 3712 * t26694 - 128512 * t26701 + 1459584 * t26703 - 8226816 * t26705 + 26734848 * t26707 - 54125568 * t26709
            t26673 = t26709 ** 2
            t26729 = -567112 * t26673 + 37224 * t26693 - 586568 * t26702 + 3561624 * t26704 - 10988208 * t26706 + 18820368 * t26708 - 16919952 * t26710 + 3782448 * t26712 + 7665576 * t26714 - 8308472 * t26716 + 3503448 * t26718 - 376
            t26728 = -1310620 * t26674 + 11533456 * t26676 - 44823204 * t26678 + 100655616 * t26680 - 143119704 * t26682 + 262124 * t26694 - 1048496 * t26701 - 2359116 * t26703 + 25163904 * t26705 - 77064456 * t26707 + 132110496 * t26709
            t26727 = -458717 * t26673 + 1769337 * t26693 - 12516421 * t26702 + 43840239 * t26704 - 90825966 * t26706 + 118348986 * t26708 - 96330570 * t26710 + 43643646 * t26712 - 4521639 * t26714 - 5832259 * t26716 + 2948895 * t26718 - 65531
            t26726 = 382192980 * t26674 - 2488293808 * t26676 + 7015853420 * t26678 - 11199549952 * t26680 + 11102424328 * t26682 + 121788 * t26694 - 6310128 * t26701 + 97659492 * t26703 - 705187200 * t26705 + 2850701848 * t26707 - 7049612768 * t26709
            t26725 = -222945905 * t26673 + 229245 * t26693 - 5171961 * t26702 + 37676811 * t26704 - 84198246 * t26706 - 198064926 * t26708 + 1491018830 * t26710 - 3570544714 * t26712 + 4577505629 * t26714 - 3359294639 * t26716 + 1333791355 * t26718 - 1479
            t26724 = 9721421440 * t26674 - 56336822784 * t26676 + 140430238080 * t26678 - 196648810496 * t26680 + 169473081600 * t26682 + 607104 * t26694 - 39350784 * t26701 + 751261824 * t26703 - 6584924160 * t26705 + 31796421376 * t26707 - 92563123200 * t26709
            t26723 = 24253516872 * t26674 - 130140822240 * t26676 + 299196959544 * t26678 - 384797085696 * t26680 + 303208606800 * t26682 + 578136 * t26694 - 42028896 * t26701 + 897070824 * t26703 - 8757455616 * t26705 + 46896960240 * t26707 - 150716299968 * t26709
        c += 1

    return tfunc


if __name__ == '__main__':
    X = np.zeros([2, 3])
    phi1 = np.array([0.1,0.2])
    X[:, 0] = phi1
    phi = np.array([0.0, 0.4])
    X[:, 1] = phi
    phi2 = np.array([0.3, 0.6])
    X[:, 2] = phi2

    indxvec = gsh_basis_info()
    print indxvec

    lte2 = indxvec[:, 0] <= 2
    print lte2

    Bvec = np.arange(indxvec.shape[0])[lte2]
    print Bvec

    out_tvalues = gsh_eval(X, Bvec)
    print out_tvalues
    print out_tvalues.shape

