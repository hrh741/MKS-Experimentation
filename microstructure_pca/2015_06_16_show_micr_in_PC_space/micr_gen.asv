clear; clc; close all;

% number of elements per side
el=21;
ns = 302;
c = 1;
M = zeros(ns,el^3);

% Delta microstructures (2 total)
M(c,4631)=1;
c = c + 1;
M(c,:)=1;
M(c,4631)=0;
c = c + 1;

% half black, half white microstructures (66 total)
for ii = 0:el
    
    tmp = zeros(el,el,el);
    tmp(1:ii,:,:) = 1;
    M(c,:) = reshape(tmp,[1,el^3]);
    c = c + 1;

    tmp = zeros(el,el,el);
    tmp(:,1:ii,:) = 1;
    M(c,:) = reshape(tmp,[1,el^3]);
    c = c + 1;
    
    tmp = zeros(el,el,el);
    tmp(:,:,1:ii) = 1;
    M(c,:) = reshape(tmp,[1,el^3]);
    c = c + 1;
    
end


% Random microstructures (20 total)
n_rand = 20;
percentile = linspace(.01,.99,n_rand);
for sn = 1:n_rand
    M(c,:) = rand(1,el^3) > percentile(sn);
    c = c + 1;
end

% Voronoi microstructures (200 total)
N = round(linspace(250,5000,10));
vf = linspace(0.05,.95,20);

for ii = 1:length(N)
    for jj = 1:length(vf)
        tmp = GenVoronoi(el, N(ii), vf(jj), 0);
        M(c,:) = tmp(:)';
        c = c + 1;        

        vf(jj)
        N(ii)
        mean(tmp(:))   
    end
end

%% Get the 2pt statistics

ns = c-1;

M_2pt = zeros(ns,el^3);

for ii = 1:ns
    
    tmp = reshape(M(ii,:),[el,el,el]);
    tmp = FullConv('a','p','r',tmp);
    M_2pt(ii,:) = reshape(tmp,[1,el^3])/(21^3);
    
end

%% Prepare the 2pt statistics for PCA

% pca first subracts the mean from each measurement and then performs SVD
% COEFF contains the eigenvalues themselves and SCORE is the original data
% expressed in PC space. Since our number of variables exceeds the number
% of observations the number of dimensions (PC variables) is reduced to the
% number of observations minus 1.
[COEFF,SCORE] = pca(M_2pt);

M_2pt_mean = mean(M_2pt, 1);
% M_2pt_ = bsxfun(@minus, M_2pt, M_2pt_mean);
% trial = M_2pt_ * COEFF;

pc_A = 1; pc_B = 2; pc_C = 3;

figure(1)

colnum = 20;
color = hsv(colnum);
for cc = 1:colnum
    plot(cc,5,...
        'LineStyle','none','Marker','o','MarkerEdgeColor','k',...
        'MarkerFaceColor',color(cc,:),'MarkerSize',7);
    hold on
end
hold off

figure(2)
plot3(SCORE(1:2,pc_A),SCORE(1:2,pc_B),SCORE(1:2,pc_C),...
    'LineStyle','none',...
    'MarkerEdgeColor','k',...
    'Marker','o',...
    'MarkerFaceColor',color(1,:),...
    'MarkerSize', 8)
hold on
plot3(SCORE(3:68,pc_A),SCORE(3:68,pc_B),SCORE(3:68,pc_C),...
    'LineStyle','none',...
    'MarkerEdgeColor','k',...
    'Marker','s',...
    'MarkerFaceColor',color(13,:))
plot3(SCORE(69:88,pc_A),SCORE(69:88,pc_B),SCORE(69:88,pc_C),...
    'LineStyle','none',...
    'MarkerEdgeColor','k',...
    'Marker','v',...
    'MarkerFaceColor',color(8,:))
plot3(SCORE(89:288,pc_A),SCORE(89:288,pc_B),SCORE(89:288,pc_C),...
    'LineStyle','none',...
    'MarkerEdgeColor','k',...
    'Marker','v',...
    'MarkerFaceColor',color(4,:))


%% Perturb the microstructure and plot in PC space

m_st = rand(1,el^3) > 0.5;
tmp = reshape(m_st,[el,el,el]);
tmp = FullConv('a','p','r',tmp);
m_st_2pt = reshape(tmp,[1,el^3])/(21^3);
m_st_pc = (m_st_2pt - M_2pt_mean) * COEFF;

figure(2)

plot3(m_st_pc(1,pc_A),...
      m_st_pc(1,pc_B),...
      m_st_pc(1,pc_C),...
      'LineStyle','none',...
      'MarkerEdgeColor','k',...
      'Marker','s',...
      'MarkerFaceColor',color(16,:),...
      'MarkerSize', 15)

% m_pbO is the "old" version of the perturbed microstructure
m_pbO = m_st;
m_pbN = m_st;
m_pbO_p


for ii = 1:100
    
    % identify a random voxel in the microstructre to switch
    rand_idx = round(rand()*((el^3)-1)+1);
    % "flip the local state of the voxel with index rand_idx"
    m_pbN(rand_idx) = 1-m_pb(rand_idx);
    % change the microstructure into 3D format
    tmp = reshape(m_pbN,[el,el,el]);
    % perform the periodic 2pt statistics
    tmp = FullConv('a','p','r',tmp);
    % reshape to vector format
    m_pb_2pt = reshape(tmp,[1,el^3])/(el^3);
    % find the representation of the perturbed microstructre in the
    % original PC space
    m_pbN_pc = (m_pb_2pt - M_2pt_mean) * COEFF;
    
    diff = m_pbO_pc(2:end) - m_st_pc(2:end);
    distO = sqrt(diff .* diff);
    
    diff = m_pbN_pc(2:end) - m_st_pc(2:end);
    distN = sqrt(diff .* diff);
    
    if distN > distO
        m_pbO = m_pbN;
        m_pbO_pc = m_pbN_pc;
    end
    
end


legend('deltas','halfs','randoms','equiaxed','orig','prtrb')
xlabel(['PC',int2str(pc_A)]);
ylabel(['PC',int2str(pc_B)]);
zlabel(['PC',int2str(pc_C)]);
axis tight;
% axis equal;
grid on;




% set_id = 'cal008';
%
% % Read Dream3D microstructures
% load euler_val.mat
% 
% eul_sz = size(euler);
% ns = eul_sz(1);
% 
% vf = linspace(0.05,.95,ns);
% 
% for sn = 1:ns
%     tmp = micr_from_euler( euler, sn, el, vf(sn), 0);
%     M(:,sn) = tmp(:);
%     vf(sn)
%     mean(tmp(:))
% end

% filename = ['M_',int2str(ns),'cal','.mat'];
% % save(filename,'M')
% 
% M = load(filename);
% M = M.M;